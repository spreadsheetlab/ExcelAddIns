<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GemBox.Spreadsheet</name>
  </assembly>
  <members>
    <member name="T:GemBox.Spreadsheet.BuiltInDocumentProperties">
      <summary>
            Enumeration of available built-in document properties.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Title">
      <summary>
            Title of the document.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Author">
      <summary>
            Name of the document's author.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Subject">
      <summary>
            Subject of the document.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Comments">
      <summary>
            Document comments.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Category">
      <summary>
            Category of the document.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Status">
      <summary>
            Status of the document.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Keywords">
      <summary>
            Document keywords.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.LastSavedBy">
      <summary>
            Name of the last author.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Manager">
      <summary>
            Manager.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Company">
      <summary>
            Company.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.HyperlinkBase">
      <summary>
            Base hyperlink.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.CellBorder">
      <summary>
            Contains settings for a single cell border.
            </summary>
      <remarks>
        <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
      </remarks>
      <seealso cref="T:GemBox.Spreadsheet.CellBorders" />
    </member>
    <member name="M:GemBox.Spreadsheet.CellBorder.SetBorder(System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
      <summary>
            Sets both border line color and line style.
            </summary>
      <param name="lineColor">Border line color.</param>
      <param name="lineStyle">Border line style.</param>
      <remarks>
        <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CellBorder.LineColor">
      <summary>
            Gets or sets border line color.
            </summary>
      <remarks>
        <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CellBorder.LineStyle">
      <summary>
            Gets or sets border line style.
            </summary>
      <remarks>
        <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.CellBorders">
      <summary>
            Collection of cell borders (<see cref="T:GemBox.Spreadsheet.CellBorder" />).
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.CellBorder" />
    </member>
    <member name="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
      <summary>
            Sets specific line color and line style on multiple borders.
            </summary>
      <param name="multipleBorders">Borders to set.</param>
      <param name="lineColor">Border line color.</param>
      <param name="lineStyle">Border line style.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.CellBorders.Item(GemBox.Spreadsheet.IndividualBorder)">
      <summary>
            Gets specific border.
            </summary>
      <param name="individualBorder">Border to get.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.CellRange">
      <summary>
            Cell range is a rectangular group of worksheet cells.
            </summary>
      <remarks>
        <para>Cell range is determined by its top (<see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex" />), 
            left (<see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />), 
            bottom (<see cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex" />) and 
            right (<see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex" />) borders. This properties 
            are read-only, so if you require different cell range use one of GetSubrange methods 
            (<see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)" />, 
            <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)" /> or 
            <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)" />). Specific cell can be accessed in a few 
            ways, depending on <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />. Cells in the 
            range can be merged / unmerged by the use of <see cref="P:GemBox.Spreadsheet.CellRange.Merged" /> 
            property.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.CellRange.Value" /> property set will set value of multiple cells 
            or of a merged range. <see cref="P:GemBox.Spreadsheet.CellRange.Value" /> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property set will set style of multiple cells 
            or of a merged range. <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</para>
        <remarks>
          <para>
        Note that for <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property set on a cell range that is not merged, you can't use the following format:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleWrong" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleWrong" />
          <para>
        because that would first call <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property get method and that will certainly fail because
        <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property get is defined only for a merged cell range.
      </para>
          <para>
        Instead you can use two different code patterns, depending on whether you want to replace or combine the existing cell range styles with the new style.
      </para>
        </remarks>
        <example>
          <para>
        If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleReplace" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleReplace" />
          <para>
        If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will remain unchanged) use the following code:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleSet" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleSet" />
        </example>
      </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.AbstractRange">
      <summary>
            Base class for classes representing one or more excel cells.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.AbstractRange.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
      <summary>
            Internal.
            </summary>
      <param name="parent">
      </param>
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.AbstractRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
      <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
      <param name="multipleBorders">Borders to set.</param>
      <param name="lineColor">Line color.</param>
      <param name="lineStyle">Line style.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.AbstractRange.Comment">
      <summary>
            Gets is sets comment
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.AbstractRange.Formula">
      <summary>
            Gets or sets formula string.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.AbstractRange.Value">
      <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.AbstractRange.Style">
      <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle" />) on one or more excel cells.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.AbstractRange.IsStyleDefault">
      <summary>
            Returns <see langword="true" /> if all cells in <see cref="T:GemBox.Spreadsheet.AbstractRange" /> have default 
            cell style; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.PositionToRowColumn(System.String,System.Int32@,System.Int32@)">
      <summary>
            Converts position string ("A1", "BN27", etc.) to row and column index.
            </summary>
      <param name="position">Position string.</param>
      <param name="row">Row index.</param>
      <param name="column">Column index.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.RowColumnToPosition(System.Int32,System.Int32)">
      <summary>
            Converts row and column index to position string ("A1", "BN27", etc.).
            </summary>
      <param name="row">Row index.</param>
      <param name="column">Column index.</param>
      <returns>Position string.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.CellRange" /> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </summary>
      <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.CellRange" /> type.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:GemBox.Spreadsheet.CellRange" /> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.CellRange" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetHashCode">
      <summary>
            Returns the hash code of this object.
            </summary>
      <returns>Hash code.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
      <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
      <param name="multipleBorders">Borders to set.</param>
      <param name="lineColor">Line color.</param>
      <param name="lineStyle">Line style.</param>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})">
      <summary>
            Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange" /> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell" />s in columns specified by <paramref name="sortDescriptions" />.
            </summary>
      <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.Sort(GemBox.Spreadsheet.SortDescription[])">
      <summary>
            Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange" /> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell" />s in columns specified by <paramref name="sortDescriptions" />.
            </summary>
      <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetEnumerator">
      <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange" /> (all cells).
            </summary>
      <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange" /> (all cells).</returns>
      <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator" />.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator">
      <summary>
            Returns enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange" /> (only allocated cells).
            </summary>
      <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange" /> (only allocated cells).</returns>
      <remarks>
            Returns enumerator that iterates only already allocated cells in the range. If you are only reading existing
            cells (values or formatting), use this enumerator as it is faster and doesn't allocate unnecessary cells.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns new cell range using absolute indexing.
            </summary>
      <param name="firstRow">Absolute index of the first row.</param>
      <param name="firstColumn">Absolute index of the first column.</param>
      <param name="lastRow">Absolute index of the last row.</param>
      <param name="lastColumn">Absolute index of the last column.</param>
      <returns>New cell range using absolute indexing.</returns>
      <remarks>
            New cell range must be within this cell range.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex" />
      <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />
      <seealso cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex" />
      <seealso cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)" />
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns new cell range using relative indexing.
            </summary>
      <param name="relativeRow">Relative index of the first row.</param>
      <param name="relativeColumn">Relative index of the first column.</param>
      <param name="width">Width of new cell range in columns.</param>
      <param name="height">Height of new cell range in rows.</param>
      <returns>New cell range using relative indexing.</returns>
      <remarks>
            New cell range must be within this cell range.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Width" />
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Height" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)" />
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)">
      <summary>
            Returns new cell range using start and end position.
            </summary>
      <param name="firstCell">Name of first (top-left) cell.</param>
      <param name="lastCell">Name of last (bottom-right) cell.</param>
      <returns>New cell range using start and end position.</returns>
      <remarks>
            New cell range must be within this cell range.
            </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
      <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.StartPosition" />
      <seealso cref="P:GemBox.Spreadsheet.CellRange.EndPosition" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)" />
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.Int32,System.Int32)">
      <overloads>Copies this cell range to the specified position.</overloads>
      <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
      <param name="absoluteRow">Absolute index of the destination row.</param>
      <param name="absoluteColumn">Absolute index of the destination column.</param>
      <remarks>
        <para>
          <paramref name="absoluteRow" /> and <paramref name="absoluteColumn" /> specify position of the top-left cell of 
            the destination cell range.</para>
        <para>Destination cell range has the same width and height as this cell range.</para>
        <para>
          <see cref="T:System.ArgumentOutOfRangeException" /> is thrown if destination range:
            <list type="bullet"><item><description>breaks Excel worksheet row or column limit,</description></item><item><description>overlaps with source range, or</description></item><item><description>overlaps with existing merged range.</description></item></list></para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.Int32,System.Int32)">
      <summary>
            Copies this cell range to another worksheet.
            </summary>
      <param name="destinationWorksheet">Destination worksheet.</param>
      <param name="absoluteRow">Absolute index of the destination row.</param>
      <param name="absoluteColumn">Absolute index of the destination column.</param>
      <remarks>
        <para>
          <paramref name="absoluteRow" /> and <paramref name="absoluteColumn" /> specify position of the top-left cell of 
            the destination cell range.</para>
        <para>Destination cell range has the same width and height as this cell range.</para>
        <para>
          <see cref="T:System.ArgumentOutOfRangeException" /> is thrown if destination range:
            <list type="bullet"><item><description>breaks Excel worksheet row or column limit,</description></item><item><description>overlaps with source range, or</description></item><item><description>overlaps with existing merged range.</description></item></list></para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.String)">
      <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
      <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
      <remarks>
        <para>
          <paramref name="topLeftCell" /> specifies position of the top-left cell of 
            the destination cell range.</para>
        <para>Destination cell range has the same width and height as this cell range.</para>
        <para>
          <see cref="T:System.ArgumentOutOfRangeException" /> is thrown if destination range:
            <list type="bullet"><item><description>breaks Excel worksheet row or column limit,</description></item><item><description>overlaps with source range, or</description></item><item><description>overlaps with existing merged range.</description></item></list></para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
      <summary>
            Copies this cell range to another worksheet.
            </summary>
      <param name="destinationWorksheet">Destination worksheet.</param>
      <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
      <remarks>
        <para>
          <paramref name="topLeftCell" /> specifies position of the top-left cell of 
            the destination cell range.</para>
        <para>Destination cell range has the same width and height as this cell range.</para>
        <para>
          <see cref="T:System.ArgumentOutOfRangeException" /> is thrown if destination range:
            <list type="bullet"><item><description>breaks Excel worksheet row or column limit,</description></item><item><description>overlaps with source range, or</description></item><item><description>overlaps with existing merged range.</description></item></list></para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.Overlaps(GemBox.Spreadsheet.CellRange)">
      <summary>
            Checks if this cell range overlaps with another cell range.
            </summary>
      <param name="range">Cell range.</param>
      <returns>
        <see langword="true" /> if cell ranges overlap; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
      <summary>
            Finds the first occurrence of the specified text in the current cell range.
            </summary>
      <param name="text">Test to search.</param>
      <param name="matchCase">
        <see langword="true" /> to match exact case, <see langword="false" /> otherwise.</param>
      <param name="matchEntireCellContents">
        <see langword="true" /> to match entire cell contents, <see langword="false" /> otherwise.</param>
      <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
      <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
      <returns>
        <see langword="true" /> if text is found, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.FirstRowIndex">
      <summary>
            Gets index of the first (topmost) row.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex">
      <summary>
            Gets index of the first (leftmost) column.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.LastRowIndex">
      <summary>
            Gets index of the last (bottommost) row.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.LastColumnIndex">
      <summary>
            Gets index of the last (rightmost) column.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Width">
      <summary>
            Gets width of this cell range, in columns.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Height">
      <summary>
            Gets height of this cell range, in rows.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.StartPosition">
      <summary>
            Gets name of the first (top-left) cell in this cell range.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.EndPosition">
      <summary>
            Gets name of the last (bottom-right) cell in this cell range.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.IsAnyCellMerged">
      <summary>
            Returns <see langword="true" /> is any cell in this cell range is merged; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32)">
      <overloads>Gets excel cell with the specified name or at the specified position.</overloads>
      <summary>
            Gets excel cell at the specified index.
            </summary>
      <param name="contextIndex">The zero-based context index of the cell.</param>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> context index  
            is specifying relative column position.</para>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> context index
            is specifying relative row position.</para>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> context index
            is specifying cell index inside cell range. The cell at <see cref="P:GemBox.Spreadsheet.CellRange.StartPosition">
            StartPosition</see> has index 0, and the cell at 
            <see cref="P:GemBox.Spreadsheet.CellRange.EndPosition" /> has index of 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> x 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height" /> - 1.</para>
      </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32,System.Int32)">
      <summary>
            Gets excel cell at the specified relative position.
            </summary>
      <param name="relativeRow">The zero-based relative row position.</param>
      <param name="relativeColumn">The zero-based relative column position.</param>
      <remarks>
            Absolute position of excel cell is calculated by adding <paramref name="relativeRow" /> and <paramref name="relativeColumn" /> to
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex" /> and 
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />.
            </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Item(System.String)">
      <summary>
            Gets excel cell with the specified full or partial name.
            </summary>
      <param name="contextName">Full or partial name of the cell.</param>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> full name of 
            the cell must be used (for example; "A1", "D7", etc.).</para>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> column name  
            must be used (for example; "A", "D", etc.).</para>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" /> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> row name 
            must be used (for example; "1", "7", etc.).</para>
      </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Merged">
      <summary>
            Gets or sets whether cells in this range are merged.
            </summary>
      <remarks>
        <para>By setting this property to <see langword="true" />, you are merging all the cells 
            (<see cref="T:GemBox.Spreadsheet.ExcelCell" />) in this range. Merging process will fail if any 
            of the cells in the range is already merged.</para>
        <para>When modifying merged cell, whole merged range is modified. For example, if you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see>, value of merged range will be modified. 
            You can find out if the cell is merged by checking if 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange">ExcelCell.MergedRange</see> property is different 
            than <see langword="null" />.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">Merged range can't be created because some of the cells
            in the range are already merged.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Comment">
      <summary>
            Gets or sets comment
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Formula">
      <summary>
            Gets or sets formula string.
            </summary>
      <remarks>
        <para>GemBox.Spreadsheet can read and write formulas, but cannot calculate formula results. However, when you 
            open a file in MS Excel, formula results will be calculated automatically.</para>
        <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
        <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
        <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
        <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
        <para>Currently supported formula features by GemBox.Spreadsheet XLS formula parser are:
            <list type="bullet"><item><description>Named cell</description></item><item><description>Named range</description></item><item><description>Absolute cell/range</description></item><item><description>Relative cell/range</description></item><item><description>Functions( partly, see the list of supported functions below )</description></item><item><description>Missed argument</description></item><item><description>Unary operator</description></item><item><description>Binary operator</description></item><item><description>Parentheses</description></item><item><description>3d cell reference</description></item><item><description>3d cell range reference</description></item><item><description>Boolean</description></item><item><description>Integer</description></item><item><description>Float</description></item><item><description>String</description></item><item><description>Error</description></item></list></para>
        <para>
            Currently unsupported formula features are:
            <list type="bullet"><item><description>Const array</description></item><item><description>Array formula</description></item><item><description>R1C1 reference</description></item></list></para>
        <para>
            Currently supported functions are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGE, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
        <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            NamedRangeCollection.Add</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Value">
      <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
      <remarks>
        <para>Property set will set value of multiple cells or of a merged range.</para>
        <para>Property get has meaning only if range is <see cref="P:GemBox.Spreadsheet.CellRange.Merged" />; 
            otherwise, exception is thrown.</para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.Style">
      <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle" />) on one or more excel cells.
            </summary>
      <remarks>
        <para>Property set will set style of multiple cells or of a merged range.</para>
        <para>Property get has meaning only if range is <see cref="P:GemBox.Spreadsheet.CellRange.Merged" />; 
            otherwise, exception is thrown.</para>
        <remarks>
          <para>
        Note that for <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property set on a cell range that is not merged, you can't use the following format:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleWrong" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleWrong" />
          <para>
        because that would first call <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property get method and that will certainly fail because
        <see cref="P:GemBox.Spreadsheet.CellRange.Style" /> property get is defined only for a merged cell range.
      </para>
          <para>
        Instead you can use two different code patterns, depending on whether you want to replace or combine the existing cell range styles with the new style.
      </para>
        </remarks>
        <example>
          <para>
        If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleReplace" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleReplace" />
          <para>
        If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will remain unchanged) use the following code:
      </para>
          <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleSet" />
          <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleSet" />
        </example>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.IsStyleDefault">
      <summary>
            Returns <see langword="true" /> if all cells in cell range or merged range have default 
            cell style; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRange.IndexingMode">
      <summary>
            Gets indexing mode used for cell range.
            </summary>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.CellRange.Height" /> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal" />.</para>
        <para>Otherwise, if <see cref="P:GemBox.Spreadsheet.CellRange.Width" /> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical" />.</para>
        <para>Otherwise, indexing mode is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
            Rectangular</see>.</para>
      </remarks>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.CellRangeCollection">
      <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.CellRange" /> items.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeCollection.Add(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
      <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.CellRange" /> from the specified worksheet to the collection.
            </summary>
      <param name="worksheet">The worksheet.</param>
      <param name="cellReference">The cell reference for which to create <see cref="T:GemBox.Spreadsheet.CellRange" />.</param>
      <returns>An instance of the <see cref="T:GemBox.Spreadsheet.CellRange" /> that was added to the collection.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeCollection.InsertItem(System.Int32,GemBox.Spreadsheet.CellRange)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeCollection.SetItem(System.Int32,GemBox.Spreadsheet.CellRange)">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.CellRangeEnumerator">
      <summary>
            Enumerator used for iterating cells in a <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Dispose">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is one column before 
            the first cell in the cell range.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the cell range.
            </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if 
            the enumerator has passed the end of the cell range.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Parent">
      <summary>
            Parent <see cref="T:GemBox.Spreadsheet.CellRange" />. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentRow">
      <summary>
            Current absolute row index in the cell range.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentColumn">
      <summary>
            Current absolute column index in the cell range.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Current">
      <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell" /> in the cell range.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentCell">
      <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell" /> in the cell range.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.AxisGridlines">
      <summary>
            Represents an axis major or minor gridlines.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.AxisGridlines.Delete">
      <summary>
            Deletes gridlines.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.AxisGridlines.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.AxisGridlines" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.AxisGridlines" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.AxisGridlines.IsVisible">
      <summary>
            Gets or sets a value indicating whether gridlines are visible.
            </summary>
      <value>
        <see langword="true" /> if gridlines are visible; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.AxisType">
      <summary>
            Represents an axis type.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisType.Category">
      <summary>
            Axis type used for categories.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisType.Date">
      <summary>
        <para>Axis type used for categories which are dates / times.</para>
        <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category" />.</para>
      </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisType.Value">
      <summary>
            Axis type used for series values.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartType">
      <summary>
            Represents a chart type.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartType.Column">
      <summary>
            Chart type whose series values are drawn using vertical rectangles.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartType.Bar">
      <summary>
            Chart type whose series values are drawn using horizontal rectangles.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartType.Line">
      <summary>
            Chart type whose series values are drawn using lines.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartType.Area">
      <summary>
            Chart type whose series values are drawn using filled areas.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartType.Pie">
      <summary>
            Chart type whose single series values are drawn as filled arcs in a pie-like form.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.LineChartSeries">
      <summary>
            Represents a single <see cref="T:GemBox.Spreadsheet.Charts.LineChart" /> series.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartSeries">
      <summary>
            Represents a single chart series.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.SetValues(System.Collections.IEnumerable)">
      <summary>
            Sets the chart series values.
            </summary>
      <param name="values">The chart series values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.SetValues(System.Object[])">
      <summary>
            Sets the chart series values.
            </summary>
      <param name="values">The chart series values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.Delete">
      <summary>
            Deletes the series.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeries.ToString">
      <summary>
            Returns the <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName" /> value.
            </summary>
      <returns>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName" /> value.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Index">
      <summary>
            Gets the index of this <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> instance in the parent <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection" />.
            </summary>
      <value>
            The index of this <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> instance in the parent <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Name">
      <summary>
            Gets or sets the series name as direct value (for example, 'My series') or as a reference to a cell with value (for example, '=Sheet1!A1').
            </summary>
      <value>
            The series name.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.IsLegendEntryVisible">
      <summary>
            Gets or sets a value indicating whether legend entry for this series instance is visible.
            </summary>
      <value>
        <see langword="true" /> if legend entry for this series instance is visible; otherwise, <see langword="false" />.
            </value>
      <remarks>
            Default value of this property is <see langword="true" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.DisplayName">
      <summary>
            Gets the series display name. If <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name" /> is direct value, then <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name" /> value is returned; otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Name" /> is a cell reference, then referenced cell value is returned. 
            </summary>
      <value>
            The series display name.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference">
      <summary>
            Gets or sets the chart series values as a cell range reference (for example, 'Sheet1!A1:D1'). Values from cells in the referenced range will be used as values of this series.
            </summary>
      <value>
            The chart series values as a cell range reference.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeries.Values">
      <summary>
            Gets the chart series values.
            </summary>
      <value>
            The chart series values.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChartSeries.Marker">
      <summary>
            Gets the marker.
            </summary>
      <value>
            The marker.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.LineChartSeriesCollection">
      <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries" /> objects.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">
      <summary>
            Represents a collection of series of specific type which derives from <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> type.
            </summary>
      <typeparam name="T">A <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> derived type.</typeparam>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection">
      <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> objects.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetItemCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.CreateCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add">
      <summary>
            Adds a new empty series to the chart.
            </summary>
      <returns>A new empty series added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.String)">
      <summary>
            Adds a new series with specified name and values reference to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="valuesReference">The series values reference.</param>
      <returns>A new series with specified name and values reference added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.AddCore(System.String,System.Collections.IEnumerable)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.Collections.IEnumerable)">
      <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="values">The series values.</param>
      <returns>A new series with specified name and values added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Add(System.String,System.Object[])">
      <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="values">The series values.</param>
      <returns>A new series with specified name and values added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.RemoveAtCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.ClearCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Clear">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.MoveCore(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Move(System.Int32,System.Int32)">
      <summary>
            Moves the series at the specified index to a new location in the collection.
            </summary>
      <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the item.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetEnumeratorCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection.GetEnumerator">
      <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.CountCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Count">
      <inheritdoc />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection" />. 
            </summary>
      <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection" /> from which to get the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" />.</param>
      <returns>The <see cref="T:GemBox.Spreadsheet.Charts.ChartSeries" /> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection" />.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection.ItemsCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CreateItem">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetItemCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CreateCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add">
      <summary>
            Adds a new empty series to the chart.
            </summary>
      <returns>A new empty series added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.String)">
      <summary>
            Adds a new series with specified name and values reference to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="valuesReference">The series values reference.</param>
      <returns>A new series with specified name and values reference added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore(System.String,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.Collections.IEnumerable)">
      <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="values">The series values.</param>
      <returns>A new series with specified name and values added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.AddCore(System.String,System.Collections.IEnumerable)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Add(System.String,System.Object[])">
      <summary>
            Adds a new series with specified name and values to the chart.
            </summary>
      <param name="name">The series name.</param>
      <param name="values">The series values.</param>
      <returns>A new series with specified name and values added to the chart.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.RemoveAtCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.ClearCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the series at the specified index to a new location in the collection.
            </summary>
      <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the item.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.MoveCore(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetEnumerator">
      <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.GetEnumeratorCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Count">
      <inheritdoc />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.CountCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1.Item(System.Int32)">
      <summary>
            Gets the <typeparamref name="T" /> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see>. 
            </summary>
      <param name="index">The zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see> from which to get the <typeparamref name="T" />.</param>
      <returns>The <typeparamref name="T" /> that is stored at the zero-based index of the <see cref="T:GemBox.Spreadsheet.Charts.ChartSeriesCollection`1">ChartSeriesCollection&lt;T&gt;</see>.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.LineChartSeriesCollection.CreateItem">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.Marker">
      <summary>
            Represents a marker for <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries" />.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.Marker.Delete">
      <summary>
            Deletes the marker from series.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.Marker.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.Marker" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.Marker" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.Marker.MarkerType">
      <summary>
            Gets or sets the marker type.
            </summary>
      <value>
            The marker type.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.Marker.Size">
      <summary>
            Gets or sets the marker size.
            </summary>
      <value>
            The marker size.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.MarkerType">
      <summary>
            Represents a marker symbol which will be used on each <see cref="T:GemBox.Spreadsheet.Charts.LineChartSeries" /> data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Auto">
      <summary>
            Specifies an automatic symbol shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.None">
      <summary>
            Specifies nothing shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Square">
      <summary>
            Specifies a square shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Diamond">
      <summary>
            Specifies a diamond shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Triangle">
      <summary>
            Specifies a triangle shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.X">
      <summary>
            Specifies an X shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Star">
      <summary>
            Specifies a star shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Dot">
      <summary>
            Specifies a dot shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Dash">
      <summary>
            Specifies a dash shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Circle">
      <summary>
            Specifies a circle shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Plus">
      <summary>
            Specifies a plus shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.MarkerType.Picture">
      <summary>
            Specifies a picture shall be drawn at each data point.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.CsvType">
      <summary>
            Formatting type for CSV files.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.CsvType.CommaDelimited">
      <summary>
            Comma delimited CSV (most frequently used). 
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.CsvType.SemicolonDelimited">
      <summary>
            Semicolon delimited CSV (used by Excel if current culture specifies comma as decimal separator).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.CsvType.TabDelimited">
      <summary>
            Tab delimited CSV.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DataValidationCollection">
      <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.DataValidation" /> items.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidationCollection.InsertItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidationCollection.SetItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.DataValidationErrorStyle">
      <summary>
            The style of data validation error alert.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Stop">
      <summary>
            This data validation error style uses a stop icon in the error alert.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Warning">
      <summary>
            This data validation error style uses a warning icon in the error alert.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Information">
      <summary>
            This data validation error style uses an information icon in the error alert.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DataValidationOperator">
      <summary>
            The relational operator used in data validation.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.Between">
      <summary>
            Data validation which checks if a value is between two other values.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween">
      <summary>
            Data validation which checks if a value is not between two other values.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.Equal">
      <summary>
            Data validation which checks if a value is equal to a specified value.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual">
      <summary>
            Data validation which checks if a value is not equal to a specified value.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThan">
      <summary>
            Data validation which checks if a value is less than a specified value.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual">
      <summary>
            Data validation which checks if a value is less than or equal to a specified value.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan">
      <summary>
            Data validation which checks if a value is greater than a specified value.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual">
      <summary>
            Data validation which checks if a value is greater than or equal to a specified value.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DataValidationType">
      <summary>
            Specifies the type of data validation used to validate user input.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.None">
      <summary>
            No data validation.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.WholeNumber">
      <summary>
            Data validation which checks for whole number values satisfying the given condition.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.Decimal">
      <summary>
            Data validation which checks for decimal values satisfying the given condition.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.List">
      <summary>
            Data validation which checks for a value matching one of list of values.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.Date">
      <summary>
            Data validation which checks for date values satisfying the given condition.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.Time">
      <summary>
            Data validation which checks for time values satisfying the given condition.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.TextLength">
      <summary>
            Data validation which checks for text values, whose length satisfies the given condition.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.DataValidationType.Custom">
      <summary>
            Data validation which uses a custom formula to check the cell value.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DefinedName">
      <summary>
            Defined name class describes defined name that is not directly related with one cell range.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedName.Name">
      <summary>
            Gets or sets the name of the defined name object.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedName.Value">
      <summary>
            Gets or sets the value of the defined name.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedName.LocalSheetIndex">
      <summary>
            Gets or sets the local sheet index of the defined name.
            If the local sheet index is -1, defined name is global.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DefinedNameCollection">
      <summary>
            Collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DefinedNameCollection.AddDefinedName(System.String,System.String,System.Int32)">
      <summary>
            Adds defined name to collection and returns index of that defined name.
            </summary>
      <param name="name">Name of the defined name.</param>
      <param name="value">Range string.</param>
      <param name="localSheetIndex">Local sheet index. If the value is -1, defined name is global.</param>
      <returns>Index of the defined name.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedName(System.String)">
      <summary>
            Removes the defined name described by name from collection.
            </summary>
      <param name="definedName">Name of the defined name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedNameAt(System.Int32)">
      <summary>
            Removes the defined name described by index from collection.
            </summary>
      <param name="index">Index of the defined name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.DefinedNameCollection.Clear">
      <summary>
            Removes all elements from defined names collection.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DefinedNameCollection.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection. 
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the collection. 
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Count">
      <summary>
            Returns the number of defined names in collection.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.Int32)">
      <summary>
            Gets or sets defined name described by index from collection.
            </summary>
      <param name="index">Index of the defined name.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.String)">
      <summary>
            Gets defined name described by name from collection.
            </summary>
      <param name="definedName">Name of the defined name.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.DocumentProperties">
      <summary>
            Contains a collection of built-in and custom document properties.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DocumentProperties.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties" />.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.DocumentProperties.BuiltIn">
      <summary>
            Gets a collection of built-in document properties.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DocumentProperties.Custom">
      <summary>
            Gets a collection of custom document properties.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.BuiltInCellStyleName">
      <summary>
            Represents available built-in cell styles.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Normal">
      <summary>
            Normal built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Good">
      <summary>
            Good built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Bad">
      <summary>
            Bad built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Neutral">
      <summary>
            Neutral built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Note">
      <summary>
            Note built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.LinkedCell">
      <summary>
            Linked Cell built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Calculation">
      <summary>
            Calculation built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.CheckCell">
      <summary>
            Check Cell built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ExplanatoryText">
      <summary>
            Explanatory Text built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading1">
      <summary>
            Heading 1 built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading2">
      <summary>
            Heading 2 built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading3">
      <summary>
            Heading 3 built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading4">
      <summary>
            Heading 4 built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Input">
      <summary>
            Input built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Output">
      <summary>
            Output built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Title">
      <summary>
            Title built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.WarningText">
      <summary>
            Warning text built-in cell style.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Total">
      <summary>
            Total built-in cell style.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.CellStyle">
      <summary>
            Contains settings specifying how the cell data will be displayed.
            </summary>
      <remarks>
            Various settings control various display aspects: alignment, patterns and shading, indentation, 
            rotation, cell protection, text wrapping, number format, font related settings and cell borders. You can 
            set cell style of a specific <see cref="T:GemBox.Spreadsheet.ExcelCell" /> through its <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" /> property, or you can create new cell style 
            with desired properties and apply it to unlimited number of Excel objects. Note, however, that number of 
            distinct cell styles in Excel file can't exceed <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsCellStyles">
            ExcelFile.MaxCellStyles</see>. You don't have to worry about creating duplicate cell styles; internal 
            caching engine will eliminate duplicates in appropriate moments.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.CellStyle.#ctor">
      <summary>
            Creates new cell style with default values (Arial font with size 200).
            </summary>
      <remarks>
            Creating standalone cell style has sense only if you assign it to some <see cref="T:GemBox.Spreadsheet.ExcelCell" /> object
            by setting <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" /> property. Otherwise, the created cell style will have no effect on the Excel file.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.CellStyle.#ctor(GemBox.Spreadsheet.ExcelFile)">
      <summary>
            Creates new cell style with default values (copies default font from ExcelFile object).
            </summary>
      <remarks>
            Creating standalone cell style has sense only if you assign it to some <see cref="T:GemBox.Spreadsheet.ExcelCell" /> object
            by setting <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" /> property. Otherwise, the created cell style will have no effect on the Excel file.
            </remarks>
      <param name="ef">ExcelFile object.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.IsDefault">
      <summary>
            Returns <see langword="true" /> if cell style is default; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment">
      <summary>
            Gets or sets horizontal alignment.
            </summary>
      <remarks>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General">
            HorizontalAlignmentStyle.General</see>.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment">
      <summary>
            Gets or sets vertical alignment.
            </summary>
      <remarks>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom">
            VerticalAlignmentStyle.Bottom</see>.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.FillPattern">
      <summary>
            Get or sets fill pattern.
            </summary>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Indent">
      <summary>
            Gets or sets cell data indentation.
            </summary>
      <remarks>
        <para>Indents cell contents from any edge of the cell, depending on 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> and associated alignment. If 
            you set this property to non-zero value and <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical">
            IsTextVertical</see> is <see langword="false" />, it is recommended that you also set 
            <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" /> to
            <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left">HorizontalAlignmentStyle.Left</see> or
            <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right">HorizontalAlignmentStyle.Right</see>. 
            Otherwise some versions of Microsoft Excel will have problems interpreting Indent value in 
            "Format Cells..." dialog &gt; "Alignment" tab. In the case where 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is <see langword="true" />, you should set
            <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" /> instead.</para>
        <para>Unit is one character. Value must be between 0 and 15.</para>
        <para>Default value for this property is 0.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is out of range.</exception>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Rotation">
      <summary>
            Gets or sets cell data rotation.
            </summary>
      <remarks>
        <para>Unit is degrees (1/360th of a full circle). Value must be between -90 and 90 and specifies 
            anticlockwise (counterclockwise [N.Amer]) rotation from the normal position.</para>
        <para>Because of Microsoft Excel limitations, this property and 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> property can't be used at the 
            same time. If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is <see langword="true" /> and 
            rotation is set, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> will be set to 
            <see langword="false" />. When <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" /> is set to 
            <see langword="true" />, rotation will be set to 0.</para>
        <para>Default value for this property is 0.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is not between -90 and 90.</exception>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.IsTextVertical">
      <summary>
            Gets or sets whether the cell text is displayed in a vertical style.
            </summary>
      <remarks>
        <para>If <see langword="true" /> letters are stacked top-to-bottom.</para>
        <para>Because of Microsoft Excel limitations, this property 
            and <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> property can't be used at the same time. 
            When set, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> property is set to 0. 
            If <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation" /> property is latter set to some non-zero value,
            this property will be set to <see langword="false" />.</para>
        <para>Default value for this property is <see langword="false" />.</para>
      </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation" />
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Locked">
      <summary>
            Gets or sets if the cell is locked.
            </summary>
      <remarks>
        <para>This property has meaning only if <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</see> 
            or is <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</see> set to <see langword="true" />. For more information consult Microsoft Excel documentation.</para>
        <para>Default value for this property is <see langword="true" />.</para>
      </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.FormulaHidden">
      <summary>
            Gets or sets whether the formula is hidden in the formula bar when the cell is selected.
            </summary>
      <remarks>
        <para>This property has meaning only if <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</see> 
            is set to <see langword="true" />. For more information consult Microsoft Excel documentation.</para>
        <para>Default value for this property is <see langword="false" />.</para>
      </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.WrapText">
      <summary>
            Gets or sets if the text is wrapped.
            </summary>
      <remarks>
        <para>If set to <see langword="true" />, wraps cell data into multiple lines in a cell. The number of wrapped lines is 
            dependent on the width of the column and the length of the cell contents.</para>
            Default value for this property is <see langword="false" />.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit">
      <summary>
            Gets or sets if the cell text is shrunk to fit the cell.
            </summary>
      <remarks>
        <para>If set to <see langword="true" />, reduces the apparent size of font characters so that all data in a selected 
            cell fits within the column. For more information consult Microsoft Excel documentation.</para>
            Default value for this property is <see langword="false" />.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.QuotePrefix">
      <summary>
            Gets or sets if the cell text should be prefixed by a single quote mark (e.g., 'text).
            </summary>
      <remarks>Supported only in xlsx.</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.NumberFormat">
      <summary>
            Gets or sets format string that will be used to interpret and display cell value.
            </summary>
      <remarks>
        <para>If the value of this property is <see cref="F:System.String.Empty">String.Empty</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see> is of 
            <see cref="T:System.DateTime" /> type, 
            ISO date/time format will be used as number format.</para>
        <para>
            Custom  number format has to be in invariant culture format.
            </para>
        <para>
            Example:
            </para>
        <para>
          <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
              <tr>
                <th>Format string</th>
                <th>Value</th>
                <th>Output</th>
              </tr>
              <tr>
                <td>#####</td>
                <td>123</td>
                <td>123</td>
              </tr>
              <tr>
                <td>00000</td>
                <td>123</td>
                <td>00123</td>
              </tr>
              <tr>
                <td>#,#</td>
                <td>1234567890</td>
                <td>1,234,567,890</td>
              </tr>
              <tr>
                <td>00.00</td>
                <td>1.2</td>
                <td>01.20</td>
              </tr>
              <tr>
                <td>#,##0.00</td>
                <td>1234567890</td>
                <td>1,234,567,890.00</td>
              </tr>
              <tr>
                <td>#0.##%</td>
                <td>0.092</td>
                <td>9.2%</td>
              </tr>
            </table>
          </font>
        </para>
        <para>For more information on number format strings consult Microsoft Excel documentation.</para>
            Default value for this property is <see cref="F:System.String.Empty">String.Empty</see>.
            </remarks>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Font">
      <summary>
            Gets or sets font related settings.
            </summary>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Borders">
      <summary>
            Gets or sets cell borders (<see cref="T:GemBox.Spreadsheet.CellBorder" />).
            </summary>
      <example>
        <para>Following code demonstrates various cell style properties:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyle.Name">
      <summary>
            Gets the style name.
            </summary>
      <remarks>
        <para>For direct style (for example <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" />), gets the name of the style from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles" /> collection which is applied to the current cell.</para>
        <para>For style from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles" /> collection, gets the name of the style.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartTitleDirection">
      <summary>
            Represents chart or axis title text direction.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Horizontal">
      <summary>
            Text is horizontal.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Rotate90">
      <summary>
            Text is vertical (each line is 90 degrees rotated clockwise, so it goes from top to bottom; each next line is to the left from the previous one).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Rotate270">
      <summary>
            Text is vertical (each line is 270 degrees rotated clockwise, so it goes from bottom to top; each next line is to the right from the previous one).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartTitleDirection.Stacked">
      <summary>
            Text is vertical (one letter on top of another).
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.DateAxis">
      <summary>
        <para>Represents an axis used for categories which are dates / times.</para>
        <para>This axis type is currently not supported when exporting a chart to PDF, XPS or image file formats. This axis is exported as <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" />.</para>
      </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartAxis">
      <summary>
            Represents a base class for all chart axis types.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ChangeAxisType(GemBox.Spreadsheet.Charts.AxisType)">
      <summary>
            Changes the type of the axis.
            </summary>
      <param name="axisType">New type of the axis.</param>
      <returns>
        <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance with <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType" /> equal to <paramref name="axisType" />, if <paramref name="axisType" /> is not equal to <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType" /> of this instance; otherwise, this instance.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ChangeAxisType``1">
      <summary>
            Changes the type of the axis.
            </summary>
      <typeparam name="TChartAxis">New type of the axis.</typeparam>
      <returns>
        <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance of <typeparamref name="TChartAxis" /> type, if this instance is not of <typeparamref name="TChartAxis" /> type; otherwise, this instance.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.Delete">
      <summary>
            Deletes axis.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxis.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsVisible">
      <summary>
            Gets or sets a value indicating whether axis is visible.
            </summary>
      <value>
        <see langword="true" /> if axis is visible; otherwise, <see langword="false" />.
            </value>
      <remarks>
            Default value of this property is <see langword="true" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource">
      <summary>
            Gets or sets a value indicating whether number format from chart's source data (cells) will be used to format axis value labels.
            </summary>
      <value>
        <see langword="true" /> if number format from chart's source data (cells) will be used to format axis value labels; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>
      If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels based on the following logic:
    </para>
        <list type="bullet">
          <item>
            <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" /> or <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference" /> will be used.
        </description>
          </item>
          <item>
            <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference" /> of the chart's first series will be used.
        </description>
          </item>
        </list>
        <para>
      Otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat" /> is specified, then it will be used to format axis value labels.
    </para>
        <para>
      Otherwise, if number format cannot be retrieved by any previously described means, then "General" number format will be used to format axis value labels.
    </para>
        <para>Default value of this property is <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatFromLinkedSource">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MajorTickMarkType">
      <summary>
            Gets or sets the major tick marks position.
            </summary>
      <value>
            The major tick marks position.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MinorTickMarkType">
      <summary>
            Gets or sets the minor tick marks position.
            </summary>
      <value>
            The minor tick marks position.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.LabelsPosition">
      <summary>
            Gets or sets the axis labels position.
            </summary>
      <value>
            The axis labels position.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType">
      <summary>
            Gets the <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType" /> of this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance.
            </summary>
      <value>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.AxisType" /> of this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxis" /> instance.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.ReverseOrder">
      <summary>
        <para>Gets or sets a value indicating whether values on the axis shall be reversed so they go from maximum to minimum.</para>
        <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is always exported as <see langword="false" />.</para>
      </summary>
      <value>
        <see langword="true" /> if values on the axis shall be reversed so they go from maximum to minimum; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Setting the value also changes position of the axis perpendicular to this one. 
            If value is <see langword="true" />, axis perpendicular to this one will be positioned at the top (if horizontal) or at the right (if vertical) of the plot area; otherwise,
            if value is <see langword="false" />, axis perpendicular to this one will be positioned at the bottom (if horizontal) or at the left (if vertical) of the plot area.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat">
      <summary>
            Gets or sets the number format used for formatting axis value labels. 
            If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels as explained in remarks.
            Setting this property, sets <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> to <see langword="false" />.
            </summary>
      <value>
            The number format used for formatting axis value labels.
            </value>
      <remarks>
        <para>
      If <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" /> is <see langword="true" />, then number format from chart's source data (cells) will be used to format axis value labels based on the following logic:
    </para>
        <list type="bullet">
          <item>
            <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" /> or <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference" /> will be used.
        </description>
          </item>
          <item>
            <description>
          If axis is <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis" />, then <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> of the first cell in <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.ValuesReference" /> of the chart's first series will be used.
        </description>
          </item>
        </list>
        <para>
      Otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartAxis.NumberFormat" /> is specified, then it will be used to format axis value labels.
    </para>
        <para>
      Otherwise, if number format cannot be retrieved by any previously described means, then "General" number format will be used to format axis value labels.
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.Title">
      <summary>
            Gets the axis title.
            </summary>
      <value>
            The axis title.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MajorGridlines">
      <summary>
            Gets the major gridlines.
            </summary>
      <value>
            The major gridlines.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.MinorGridlines">
      <summary>
            Gets the minor gridlines.
            </summary>
      <value>
            The minor gridlines.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsDefaultMajorGridlinesVisible">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxis.IsDefaultMinorGridlinesVisible">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.DateAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.Minimum">
      <summary>
            Gets or sets the minimum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The minimum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.Maximum">
      <summary>
            Gets or sets the maximum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The maximum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MajorTimeUnit">
      <summary>
            Gets or sets the time unit for <see cref="P:GemBox.Spreadsheet.Charts.DateAxis.MajorUnit">major tick marks</see>.
            </summary>
      <value>
            The time unit for major tick marks.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MinorTimeUnit">
      <summary>
            Gets or sets the time unit for <see cref="P:GemBox.Spreadsheet.Charts.DateAxis.MinorUnit">minor tick marks</see>.
            </summary>
      <value>
            The time unit for minor tick marks.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.BaseUnit">
      <summary>
            Gets or sets the smallest time unit that is represented on the date axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The smallest time unit that is represented on the date axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MajorUnit">
      <summary>
            Gets or sets the distance between major ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The distance between major ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.MinorUnit">
      <summary>
            Gets or sets the distance between minor ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The distance between minor ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.AxisType">
      <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" /> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Date" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Date" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.DateAxis.NumberFormatFromLinkedSource">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.AxisLabelsPosition">
      <summary>
            Represents the possible positions for axis labels.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.None">
      <summary>
            Axis labels are not drawn.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.NextToAxis">
      <summary>
            Axis labels are next to the axis.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.Low">
      <summary>
            Axis labels are at the low end of the perpendicular axis.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.High">
      <summary>
        <para>Axis labels are at the high end of the perpendicular axis.</para>
        <para>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.AxisLabelsPosition.NextToAxis" />.</para>
      </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartAxes">
      <summary>
            Represents chart axes.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxes.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxes" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartAxes" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartAxes.Delete">
      <summary>
            Deletes axes.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.IsVisible">
      <summary>
            Gets or sets a value indicating whether any axis is visible.
            </summary>
      <value>
        <see langword="true" /> if any axis is visible; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.Horizontal">
      <summary>
            Gets the horizontal chart axis.
            </summary>
      <value>
            The horizontal chart axis.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.Vertical">
      <summary>
            Gets the vertical chart axis.
            </summary>
      <value>
            The vertical chart axis.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalCategory">
      <summary>
            Gets the horizontal chart axis as category axis, if horizontal chart axis is category axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The horizontal chart axis as category axis, if horizontal chart axis is category axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalDate">
      <summary>
            Gets the horizontal chart axis as date axis, if horizontal chart axis is date axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The horizontal chart axis as date axis, if horizontal chart axis is date axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.HorizontalValue">
      <summary>
            Gets the horizontal chart axis as value axis, if horizontal chart axis is value axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The horizontal chart axis as value axis, if horizontal chart axis is value axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalCategory">
      <summary>
            Gets the vertical chart axis as category axis, if vertical chart axis is category axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The vertical chart axis as category axis, if vertical chart axis is category axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalDate">
      <summary>
            Gets the vertical chart axis as date axis, if vertical chart axis is date axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The vertical chart axis as date axis, if vertical chart axis is date axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartAxes.VerticalValue">
      <summary>
            Gets the vertical chart axis as value axis, if vertical chart axis is value axis; otherwise <see langword="null" />.
            </summary>
      <value>
            The vertical chart axis as value axis, if vertical chart axis is value axis; otherwise <see langword="null" />.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartLegendPosition">
      <summary>
            Specifies the possible positions for a legend.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Right">
      <summary>
            Specifies that the legend shall be drawn at the right of the chart.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Top">
      <summary>
            Specifies that the legend shall be drawn at the top of the chart.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Bottom">
      <summary>
            Specifies that the legend shall be drawn at the bottom of the chart.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.Left">
      <summary>
            Specifies that the legend shall be drawn at the left of the chart.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartLegendPosition.TopRight">
      <summary>
            Specifies that the legend shall be drawn at the top right of the chart.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ColumnChart">
      <summary>
            Represents a chart whose series values are drawn using vertical rectangles.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ExcelChart">
      <summary>
            Represents a base class for all charts in a worksheet.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelDrawing">
      <summary>
            Represents a base class for all drawings (pictures, charts, etc.) in the worksheet.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelPicture" />
      <seealso cref="T:GemBox.Spreadsheet.Charts.ExcelChart" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawing.Format">
      <summary>
            Formats this drawing (picture, chart, etc.) to its default size so it can be exported to PDF, XPS, image or be printed.
            </summary>
      <returns>Formatted drawing (picture, chart, etc.) which can be exported to PDF, XPS, image or be printed.</returns>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Drawing cannot be formatted because it doesn't belong to any worksheet.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawing.Format(System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Formats this drawing (picture, chart, etc.) to specified size so it can be exported to PDF, XPS, image or be printed.
            </summary>
      <param name="width">The formatted drawing width.</param>
      <param name="height">The formatted drawing height.</param>
      <param name="unit">The formatted drawing width / height length unit.</param>
      <returns>Formatted drawing (picture, chart, etc.) which can be exported to PDF, XPS, image or be printed.</returns>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Drawing cannot be formatted because it doesn't belong to any worksheet.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawing.Position">
      <summary>
            Gets the position of this drawing (picture, chart, etc.) in the worksheet.
            </summary>
      <value>
            The position of this drawing (picture, chart, etc.) in the worksheet.
            </value>
      <!-- No matching elements were found for the following include tag -->
      <include file="..\Help\SharedComments.xml" path="Comments/Comment[@name=&quot;Positioning&quot;]/*" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawing.Hyperlink">
      <summary>
            Gets or sets the hyperlink on this drawing (picture, chart, etc.).
            </summary>
      <value>
            The hyperlink on this drawing (picture, chart, etc.).
            </value>
      <remarks>Supported only in XLSX.</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawing.HasHyperlink">
      <summary>
            Gets a value indicating whether this drawing (picture, chart, etc.) has hyperlink.
            </summary>
      <value>
        <see langword="true" /> if this drawing (picture, chart, etc.) has hyperlink; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawing.DefaultFileName">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Sets the chart's category labels.
            </summary>
      <param name="categoryLabels">The chart's category labels.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryLabels" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.String[])">
      <summary>
            Sets the chart's category labels.
            </summary>
      <param name="categoryLabels">The chart's category labels.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range" /> parameter is not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range" /> parameter is not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range" />.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range" /> parameter is not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range" />.</param>
      <param name="excludeSeriesNames">if set to <see langword="true" />, series names won't be resolved from <paramref name="range" />.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Either chart is in invalid state or <paramref name="range" /> parameter is not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range" /> is <see langword="null" /> or not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range" /> is <see langword="null" /> or not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range" />.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range" /> is <see langword="null" /> or not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.SelectData(GemBox.Spreadsheet.CellRange,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Selects the data for the chart.
            </summary>
      <param name="range">The cell range which contains data for the chart.</param>
      <param name="switchRowColumn">if set to <see langword="true" /> category labels will be in first column (not row), series names will be in first row (not column) and series values will be in columns (not rows).</param>
      <param name="excludeCategoryLabels">if set to <see langword="true" />, category labels won't be resolved from <paramref name="range" />.</param>
      <param name="excludeSeriesNames">if set to <see langword="true" />, series names won't be resolved from <paramref name="range" />.</param>
      <exception cref="T:GemBox.Spreadsheet.SpreadsheetException">Parameter <paramref name="range" /> is <see langword="null" /> or not valid.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ChangeChartType(GemBox.Spreadsheet.Charts.ChartType)">
      <summary>
            Changes the chart to a different type of chart.
            </summary>
      <param name="chartType">Type of chart to change the chart to.</param>
      <returns>A chart of different type.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ChangeChartType``1">
      <summary>
            Changes the chart to a different type of chart.
            </summary>
      <typeparam name="TChart">Type of chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type to change the chart to.</typeparam>
      <returns>A chart of different type.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.Import(GemBox.Spreadsheet.Charts.ExcelChart)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChart.ToStringCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Series">
      <summary>
            Gets the chart's series.
            </summary>
      <value>
            The chart's series.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.ChartType">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.Charts.ChartType" /> of this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance.
            </summary>
      <value>
            The <see cref="T:GemBox.Spreadsheet.Charts.ChartType" /> of this <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Title">
      <summary>
            Gets the chart's title.
            </summary>
      <value>
            The chart's title.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.Legend">
      <summary>
            Gets the chart's legend.
            </summary>
      <value>
            The chart's legend.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference">
      <summary>
            Gets or sets the chart's category labels as a cell range reference (for example, 'Sheet1!A1:D1'). Values from cells in the referenced range will be used as category labels.
            </summary>
      <value>
            The chart's category labels as a cell range reference.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabels">
      <summary>
            Gets the chart's category labels.
            </summary>
      <value>
            The chart's category labels.
            </value>
      <remarks>
            If category labels are not set neither as <see cref="P:GemBox.Spreadsheet.Charts.ExcelChart.CategoryLabelsReference">cell range reference</see> nor as <see cref="M:GemBox.Spreadsheet.Charts.ExcelChart.SetCategoryLabels(System.Collections.Generic.IEnumerable{System.String})">direct value</see>, automatic labels will be used (sequence of integral numbers starting from 1 whose count will be equal to the count of <see cref="P:GemBox.Spreadsheet.Charts.ChartSeries.Values">values</see> in the first chart series).
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.IsAutoDisplayTitleVisible">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ExcelChart.DefaultFileName">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.ChartType">
      <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Column" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Column" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.Grouping">
      <summary>
            Gets or sets the chart grouping.
            </summary>
      <value>
            The chart grouping.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ColumnChart.Axes">
      <summary>
            Gets the chart axes.
            </summary>
      <value>
            The chart axes.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.AreaChart">
      <summary>
            Represents a chart whose series values are drawn using filled areas.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.AreaChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.AreaChart.ChartType">
      <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.AreaChart" /> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Area" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Area" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.AreaChart.Grouping">
      <summary>
            Gets or sets the chart grouping.
            </summary>
      <value>
            The chart grouping.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.AreaChart.Axes">
      <summary>
            Gets the chart axes.
            </summary>
      <value>
            The chart axes.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.BarChart">
      <summary>
            Represents a chart whose series values are drawn using horizontal rectangles.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.BarChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.BarChart.ChartType">
      <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.BarChart" /> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Bar" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Bar" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.BarChart.Grouping">
      <summary>
            Gets or sets the chart grouping.
            </summary>
      <value>
            The chart grouping.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.BarChart.Axes">
      <summary>
            Gets the chart axes.
            </summary>
      <value>
            The chart axes.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ExcelChartCollection">
      <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart">charts</see>s in the worksheet.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">ExcelWorksheet.Charts</seealso>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelDrawingCollection`1">
      <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.ExcelDrawing">drawings</see> (pictures, charts, etc.) in the worksheet.
            </summary>
      <typeparam name="T">An <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> derived type.</typeparam>
      <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection" />
      <see cref="T:GemBox.Spreadsheet.Charts.ExcelChartCollection" />
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">ExcelWorksheet.Charts</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.ExcelDrawingCollection{`0})">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Add(`0,System.String,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.AddCopy(`0)">
      <summary>
            Adds a copy of the drawing (picture, chart, etc.) to the worksheet.
            </summary>
      <param name="item">The drawing (picture, chart, etc.) which will be copied to the worksheet.</param>
      <returns>A copy of the drawing (picture, chart, etc.) added to the worksheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingCollection`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Count">
      <inheritdoc />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <value>
            The element at the specified index.
            </value>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="left">The distance of the left edge of the chart from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the chart from the top edge of the worksheet.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="positionFrom">The chart's position.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFrom">The chart's position.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="positionFrom">The chart's position.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFrom">The chart's position.</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="positionFromCell">The chart's position (for example, "A1").</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFromCell">The chart's position (for example, "A1").</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="positionFromCell">The chart's position (for example, "A1").</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new chart to the worksheet which moves but doesn't size with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFromCell">The chart's position (for example, "A1").</param>
      <param name="width">The chart's width.</param>
      <param name="height">The chart's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new chart added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="positionFrom">The chart's position (top-left corner).</param>
      <param name="positionTo">The chart's end position (bottom-right corner).</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFrom">The chart's position (top-left corner).</param>
      <param name="positionTo">The chart's end position (bottom-right corner).</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="positionFrom">The chart's position (top-left corner).</param>
      <param name="positionTo">The chart's end position (bottom-right corner).</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFrom">The chart's position (top-left corner).</param>
      <param name="positionTo">The chart's end position (bottom-right corner).</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,System.String,System.String)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add(GemBox.Spreadsheet.Charts.ChartType,GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.String)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(System.String,System.String)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Add``1(GemBox.Spreadsheet.Charts.ChartGrouping,System.String,System.String)">
      <summary>
            Adds a new chart to the worksheet which moves and sizes with cells.
            </summary>
      <typeparam name="T">The type of the chart deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> type.</typeparam>
      <param name="chartGrouping">The chart's series grouping (clustered, stacked or 100% stacked).</param>
      <param name="positionFromCell">The chart's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The chart's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new chart added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added chart will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ExcelChartCollection.Get``1(System.Int32)">
      <summary>
            Gets the chart at the specified index and casts it to the specified chart subtype deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" />.
            </summary>
      <typeparam name="T">The chart subtype deriving from <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> to cast the chart to.</typeparam>
      <param name="index">The zero-based index of the chart to get.</param>
      <returns>The chart at the specified index casted to <typeparamref name="T" /> type.</returns>
      <remarks>This method serves as a utility method for casting.</remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or is equal to or greater than <see cref="P:GemBox.Spreadsheet.ExcelDrawingCollection`1.Count" />.</exception>
      <exception cref="T:System.InvalidCastException">A chart at the specified index cannot be cast to type <typeparamref name="T" />.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartGrouping">
      <summary>
            Represents the grouping of a chart series for each category in a chart.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard">
      <summary>
            Chart series are drawn on the value axis. Not applicable for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Clustered">
      <summary>
            Chart series are drawn next to each other along the category axis. Applicable only for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.Stacked">
      <summary>
        <para>Chart series are drawn next to each other on the value axis.</para>
        <para>Use it to compare the contribution of each value to a total across categories.</para>
        <para>
            This value is currently supported only by <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart" /> when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard" /> for all other chart types.
            </para>
      </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.ChartGrouping.PercentStacked">
      <summary>
        <para>Chart series are drawn next to each other along the value axis and scaled to total 100%.</para>
        <para>Use it to compare the percentage that each value contributes to a total across categories.</para>
        <para>
            This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Stacked" /> for <see cref="T:GemBox.Spreadsheet.Charts.ColumnChart" /> and <see cref="T:GemBox.Spreadsheet.Charts.BarChart" /> and as <see cref="F:GemBox.Spreadsheet.Charts.ChartGrouping.Standard" /> for all other chart types.
            </para>
      </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartLegend">
      <summary>
            Represents a chart legend.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartLegend.Delete">
      <summary>
            Deletes legend.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartLegend.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartLegend" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.Charts.ChartLegend" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.IsVisible">
      <summary>
            Gets or sets a value indicating whether legend is visible.
            </summary>
      <value>
        <see langword="true" /> if legend is visible; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Default value of this property is <see langword="true" />.</para>
        <para>If legend is not visible, its properties won't be saved when saving a workbook into XLSX format.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.Position">
      <summary>
            Gets or sets the legend position.
            </summary>
      <value>
            The legend position.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartLegend.AllowOverlap">
      <summary>
            Gets or sets a value indicating whether legend overlaps chart's plot area or resizes it.
            </summary>
      <value>
        <see langword="true" /> if legend overlaps chart's plot area without resizing it; otherwise, <see langword="false" /> if legend doesn't overlap chart's plot area but resizes it instead.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.LineChart">
      <summary>
            Represents a chart whose series values are drawn using lines.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.LineChart.ToStringCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.LineChart.Import(GemBox.Spreadsheet.Charts.ExcelChart)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.ShowMarkers">
      <summary>
        <para>Gets or sets a value indicating whether markers will be shown on series points.</para>
        <para>Value is resolved from first series. If first series has marker than all newly added series will also have marker.</para>
        <para>When setting a value, value is propagated to all series.</para>
      </summary>
      <value>
        <see langword="true" /> if markers will be shown on series points; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.Series">
      <summary>
            Gets the chart's series.
            </summary>
      <value>
            The chart's series.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.ChartType">
      <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.LineChart" /> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Line" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Line" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.Grouping">
      <summary>
            Gets or sets the chart grouping.
            </summary>
      <value>
            The chart grouping.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.LineChart.Axes">
      <summary>
            Gets the chart axes.
            </summary>
      <value>
            The chart axes.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.PieChart">
      <summary>
            Represents a chart whose single series values are drawn as filled arcs in a pie-like form.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.PieChart.SeriesCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.PieChart.ChartType">
      <summary>
            Gets the chart type for <see cref="T:GemBox.Spreadsheet.Charts.PieChart" /> which is <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Pie" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.ChartType.Pie" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.PieChart.IsAutoDisplayTitleVisible">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ChartTitle">
      <summary>
            Represents a chart or axis title.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartTitle.Delete">
      <summary>
            Deletes the title.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ChartTitle.ToString">
      <summary>
            Returns the <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText" /> value.
            </summary>
      <returns>
            The <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText" /> value.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.Direction">
      <summary>
            Gets or sets the title text direction.
            </summary>
      <value>
            The title text direction.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.AllowOverlap">
      <summary>
            Gets or sets a value indicating whether title overlaps chart's plot area or resizes it.
            </summary>
      <value>
        <see langword="true" /> if title overlaps chart's plot area without resizing it; otherwise, <see langword="false" /> if title doesn't overlap chart's plot area but resizes it instead.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible">
      <summary>
            Gets or sets a value indicating whether title is visible.
            </summary>
      <value>
        <see langword="true" /> if title is visible; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Default value of this property is <see langword="false" />.</para>
        <para>If title is not visible, its properties won't be saved when saving a workbook into XLSX format.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.Text">
      <summary>
            Gets or sets the title text as direct value (for example, 'My chart title') or as a reference to a cell with value (for example, '=Sheet1!A1'). 
            If set value is not <see langword="null" /> nor <see cref="F:System.String.Empty" />, then <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible" /> is set to <see langword="true" />.
            </summary>
      <value>
            The title text.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ChartTitle.DisplayText">
      <summary>
            Gets the title display text. If <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.IsVisible" /> is <see langword="false" />, then <see cref="F:System.String.Empty" /> is returned;
            otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text" /> is direct value, then <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text" /> value is returned; 
            otherwise, if <see cref="P:GemBox.Spreadsheet.Charts.ChartTitle.Text" /> is a cell reference, then referenced cell value is returned;
            otherwise, default title is returned.
            </summary>
      <value>
            The title display text.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.CategoryAxis">
      <summary>
            Represents an axis used for categories.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.AxisType">
      <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.CategoryAxis" /> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Category" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.CategoryAxis.NumberFormatFromLinkedSource">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.TimeUnit">
      <summary>
            Represents a unit of time used by <see cref="T:GemBox.Spreadsheet.Charts.DateAxis" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Days">
      <summary>
            Chart data is shown in days.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Months">
      <summary>
            Chart data is shown in months.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TimeUnit.Years">
      <summary>
            Chart data is shown in years.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.ValueAxis">
      <summary>
            Represents an axis used for series values.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.Charts.ValueAxis.Import(GemBox.Spreadsheet.Charts.ChartAxis)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.Minimum">
      <summary>
            Gets or sets the minimum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The minimum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is greater than Maximum.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.Maximum">
      <summary>
            Gets or sets the maximum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The maximum value of the axis or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is smaller than Minimum.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.MajorUnit">
      <summary>
            Gets or sets the distance between major ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The distance between major ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number or is smaller than MinorUnit.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.MinorUnit">
      <summary>
            Gets or sets the distance between minor ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </summary>
      <value>
            The distance between minor ticks or <see langword="null" /> if value should be automatically calculated based on chart's data.
            </value>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is not positive number or is greater than MajorUnit.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.AxisType">
      <summary>
            Gets the axis type for <see cref="T:GemBox.Spreadsheet.Charts.ValueAxis" /> which is <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Value" />.
            </summary>
      <value>
            The <see cref="F:GemBox.Spreadsheet.Charts.AxisType.Value" /> value.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.NumberFormatFromLinkedSource">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.Charts.ValueAxis.IsDefaultMajorGridlinesVisible">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.Charts.TickMarkType">
      <summary>
            Represents the possible positions for axis major and minor tick marks.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.None">
      <summary>
            No tick marks.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Inside">
      <summary>
            Tick marks are inside the plot area.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Outside">
      <summary>
            Tick marks are outside the plot area.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.Charts.TickMarkType.Cross">
      <summary>
            Tick marks cross the axis.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.AnchorCell">
      <summary>
            Represents an anchor cell object used in <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition" /> type to specify from which cell and to which cell drawing (picture, chart, etc.) spans.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell" /> class by using offset values in EMU units  (1 point = 12 700 EMU).
            </summary>
      <param name="column">The column where the anchor is placed.</param>
      <param name="row">The row where the anchor is placed.</param>
      <param name="columnOffset">The column offset for the anchor.</param>
      <param name="rowOffset">The row offset for the anchor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> or <paramref name="row" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="column" /> and <paramref name="row" /> do not belong to the same worksheet.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell" /> class by using offset values in arbitrary length unit.
            </summary>
      <param name="column">The column where the anchor is placed.</param>
      <param name="row">The row where the anchor is placed.</param>
      <param name="columnOffset">The column offset for the anchor in arbitrary length unit.</param>
      <param name="rowOffset">The row offset for the anchor in arbitrary length unit.</param>
      <param name="unit">The length unit in which <paramref name="columnOffset" /> and <paramref name="rowOffset" /> are specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> or <paramref name="row" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="column" /> and <paramref name="row" /> do not belong to the same worksheet.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell" /> class.
            </summary>
      <param name="column">The column where the anchor is placed.</param>
      <param name="row">The row where the anchor is placed.</param>
      <param name="topLeft">If set to <see langword="true" />, anchor will be placed in the top left corner of the cell in current column and current row; otherwise, anchor will be placed in the top-left corner of the cell in next column and next row.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell" /> class by using another anchor cell.
            </summary>
      <param name="anchorCell">Anchor cell to copy from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anchorCell" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.GetColumnOffset(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the column offset for the anchor cell in arbitrary length unit.
            </summary>
      <param name="unit">The length unit in which to return column offset.</param>
      <returns>The column offset for the anchor cell in arbitrary length unit.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset" /> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Column" />.<see cref="P:GemBox.Spreadsheet.ExcelColumn.Width" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.SetColumnOffset(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the column offset for the anchor cell in arbitrary length unit.
            </summary>
      <param name="value">The column offset value.</param>
      <param name="unit">The length unit in which <paramref name="value" /> is specified.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.GetRowOffset(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the row offset for the anchor cell in arbitrary length unit.
            </summary>
      <param name="unit">The length unit in which to return row offset.</param>
      <returns>The row offset for the anchor cell in arbitrary length unit.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset" /> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Row" />.<see cref="P:GemBox.Spreadsheet.ExcelRow.Height" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.SetRowOffset(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the row offset for the anchor cell in arbitrary length unit.
            </summary>
      <param name="value">The row offset value.</param>
      <param name="unit">The length unit in which <paramref name="value" /> is specified.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.Equals(GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Determines whether the <paramref name="other" /> <see cref="T:GemBox.Spreadsheet.AnchorCell" /> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </summary>
      <param name="other">The other anchor cell to compare with this anchor cell instance.</param>
      <returns>
        <see langword="true" /> if the <paramref name="other" /> <see cref="T:GemBox.Spreadsheet.AnchorCell" /> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this anchor cell instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is an <see cref="T:GemBox.Spreadsheet.AnchorCell" /> and is equal to this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </summary>
      <returns>
            An integer value that specifies a hash value for this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </returns>
    </member>
    <member name="M:GemBox.Spreadsheet.AnchorCell.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.AnchorCell" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.AnchorCell.Column">
      <summary>
            Gets or sets the column for the anchor cell.
            </summary>
      <value>
            The column for the anchor cell.
            </value>
      <exception cref="T:System.ArgumentNullException">Value is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Column doesn't belong to the same worksheet as anchor cell row.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.AnchorCell.Row">
      <summary>
            Gets or sets the row for the anchor cell.
            </summary>
      <value>
            The row for the anchor cell.
            </value>
      <exception cref="T:System.ArgumentNullException">Value is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Row doesn't belong to the same worksheet as anchor cell column.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset">
      <summary>
            Gets or sets the column offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </summary>
      <value>
            The column offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </value>
      <remarks>
        <para>
          <see cref="T:GemBox.Spreadsheet.LengthUnit">Length unit</see> for this property is <see cref="F:GemBox.Spreadsheet.LengthUnit.Emu">EMU</see> (English Metric Unit) (1 point = 12 700 EMU) for historical reasons.</para>
        <para>Use <see cref="M:GemBox.Spreadsheet.AnchorCell.GetColumnOffset(GemBox.Spreadsheet.LengthUnit)" /> and <see cref="M:GemBox.Spreadsheet.AnchorCell.SetColumnOffset(System.Double,GemBox.Spreadsheet.LengthUnit)" /> methods to get or set the <see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset" /> using arbitrary <see cref="T:GemBox.Spreadsheet.LengthUnit">length unit</see>.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset" /> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Column" />.<see cref="P:GemBox.Spreadsheet.ExcelColumn.Width" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.AnchorCell.RowOffset">
      <summary>
            Gets or sets row offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </summary>
      <value>
            The row offset for the anchor cell in EMU units (1 point = 12 700 EMU).
            </value>
      <remarks>
        <para>
          <see cref="T:GemBox.Spreadsheet.LengthUnit">Length unit</see> for this property is <see cref="F:GemBox.Spreadsheet.LengthUnit.Emu">EMU</see> (English Metric Unit) (1 point = 12 700 EMU) for historical reasons.</para>
        <para>Use <see cref="M:GemBox.Spreadsheet.AnchorCell.GetRowOffset(GemBox.Spreadsheet.LengthUnit)" /> and <see cref="M:GemBox.Spreadsheet.AnchorCell.SetRowOffset(System.Double,GemBox.Spreadsheet.LengthUnit)" /> methods to get or set the <see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset" /> using arbitrary <see cref="T:GemBox.Spreadsheet.LengthUnit">length unit</see>.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.AnchorCell.RowOffset" /> is constrained to <see cref="P:GemBox.Spreadsheet.AnchorCell.Row" />.<see cref="P:GemBox.Spreadsheet.ExcelRow.Height" />.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelDrawingPosition">
      <summary>
            Represents a class which holds information about position and size of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) in the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetLeft(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
      <param name="unit">The length unit of the returned value.</param>
      <returns>The distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the left edge of the worksheet.</returns>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetTop(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
      <param name="unit">The length unit of the returned value.</param>
      <returns>The distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the top edge of the worksheet.</returns>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetWidth(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <param name="unit">The length unit of the returned value.</param>
      <returns>The width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).</returns>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetHeight(GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Gets the height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <param name="unit">The length unit of the returned value.</param>
      <returns>The height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).</returns>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetLeft(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the distance of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
      <param name="value">The value.</param>
      <param name="unit">The length unit of the <paramref name="value" /> parameter.</param>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetTop(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the distance of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
      <param name="value">The value.</param>
      <param name="unit">The length unit of the <paramref name="value" /> parameter.</param>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetWidth(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the width of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <param name="value">The value.</param>
      <param name="unit">The length unit of the <paramref name="value" /> parameter.</param>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.SetHeight(System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Sets the height of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <param name="value">The value.</param>
      <param name="unit">The length unit of the <paramref name="value" /> parameter.</param>
      <inheritdoc cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height" select="remarks" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelDrawingPosition.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelDrawingPosition" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode">
      <summary>
            Gets or sets the positioning mode of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <value>
            The positioning mode of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.From">
      <summary>
            Gets or sets the anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) spans from.
            </summary>
      <value>
            The anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) spans from.
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter returns new instance of <see cref="T:GemBox.Spreadsheet.AnchorCell" /> for every request and changing that instance won't affect on the position of the drawing (picture, chart, etc.).</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top" /> properties, which are calculated by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s and <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of columns and rows in the worksheet.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.To">
      <summary>
            Gets or sets the anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) spans to.
            </summary>
      <value>
            The anchor cell which the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) spans to.
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" /> or <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter returns new instance of <see cref="T:GemBox.Spreadsheet.AnchorCell" /> for every request and changing that instance won't affect on the position of the drawing (picture, chart, etc.).</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height" /> properties, which are calculated by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s and <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of columns and rows in the worksheet.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Left">
      <summary>
            Gets or sets the distance (in points) of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the left edge of the worksheet.
            </summary>
      <value>
            The distance (in points) of the left edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the left edge of the worksheet.
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" /> or <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter calculates the distance from the left edge of the worksheet for every request by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s of columns in the worksheet.</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From" /> property.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Top">
      <summary>
            Gets or sets the distance (in points) of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the top edge of the worksheet.
            </summary>
      <value>
            The distance (in points) of the top edge of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) from the top edge of the worksheet.
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" /> or <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter calculates the distance from the top edge of the worksheet for every request by using <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of rows in the worksheet.</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From" /> property.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Width">
      <summary>
            Gets or sets the width (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <value>
            The width (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter calculates the width for every request by using <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">width</see>s of columns in the worksheet.</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To" /> property.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelDrawingPosition.Height">
      <summary>
            Gets or sets the height (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </summary>
      <value>
            The height (in points) of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.).
            </value>
      <remarks>
        <para>If <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> is <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />, then:</para>
        <list type="bullet">
          <item>
            <description>getter calculates the height for every request by using <see cref="P:GemBox.Spreadsheet.ExcelRow.Height">height</see>s of rows in the worksheet.</description>
          </item>
          <item>
            <description>setter will internally set <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To" /> property.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.PositioningMode">
      <summary>
            Option that specify the moving and sizing behavior of the <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) in the worksheet. 
            </summary>
      <!-- No matching elements were found for the following include tag -->
      <include file="..\Help\SharedComments.xml" path="Comments/Comment[@name=&quot;Positioning&quot;]/*" />
    </member>
    <member name="F:GemBox.Spreadsheet.PositioningMode.FreeFloating">
      <summary>
        <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) will not move nor size with cells.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PositioningMode.Move">
      <summary>
        <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) will move but not size with cells.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize">
      <summary>
        <see cref="T:GemBox.Spreadsheet.ExcelDrawing" /> (picture, chart, etc.) will move and size with cells.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelCellCollection">
      <summary>
            Collection of excel cells (<see cref="T:GemBox.Spreadsheet.ExcelCell" />).
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase">
      <summary>
            Base class for row, column and cell collections.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.GetEnumerator">
      <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase" />.
            </summary>
      <returns>
            An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase" />.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.Count">
      <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks).
            </summary>
      <remarks>
            The cells are internally allocated in rows and not in columns. In other words, when you load CSV/XLS/XLSX or 
            access some cells via worksheet.Cells property new rows and cells can be allocated but the column count 
            will stay the same. To find last used column in the worksheet, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">ExcelWorksheet.GetUsedCellRange</see> method.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelCellCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellCollection.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellCollection.Item(System.Int32)">
      <summary>
            Gets the cell with the specified index.
            </summary>
      <param name="index">The zero-based index of the cell.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelColumn">
      <summary>
            Excel column contains column options and cell range with column cells.
            </summary>
      <remarks>
        <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
        <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
        <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
      </remarks>
      <seealso cref="T:GemBox.Spreadsheet.ExcelRow" />
      <example>
        <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="ColumnCollection" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="ColumnCollection" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelColumnRowBase">
      <summary>
            Base class for the excel column and row classes.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.#ctor(GemBox.Spreadsheet.ExcelRowColumnCollectionBase,System.Int32)">
      <summary>
            Internal.
            </summary>
      <param name="parent">
      </param>
      <param name="index">
      </param>
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.#ctor(GemBox.Spreadsheet.ExcelRowColumnCollectionBase,GemBox.Spreadsheet.ExcelColumnRowBase)">
      <summary>
            Internal. Copy constructor.
            </summary>
      <param name="parent">
      </param>
      <param name="source">
      </param>
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index">
      <summary>
            Gets the index.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">
      <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle" />) for contained cells.
            </summary>
      <remarks>
            Setting this property will not directly change <see cref="P:GemBox.Spreadsheet.ExcelCell.Style">ExcelCell.Style</see>. 
            Instead, this style will be used in resolving process when writing Excel file. See 
            <see cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for details.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.IsStyleDefault">
      <summary>
            Returns <see langword="true" /> if style is default; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed">
      <summary>
            Gets or sets whether object is collapsed in outlining.
            </summary>
      <remarks>
        <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" /> property needs to be set to correct outline level.</para>
        <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> property 
            needs to be set to <see langword="true" />.</para>
        <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" /> property needs to be set to <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
      <example>
        <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel">
      <summary>
            Gets or sets outline level.
            </summary>
      <remarks>
        <para>Exception is thrown if value is out of 0 to 7 range.</para>
        <para>Using this property you can create hierarchical groups. Range of consecutive objects (rows or columns) 
            with the same value of outline level belongs to the same group. Default value is zero, which prevents grouping.</para>
        <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" /> property needs to be set to correct outline level.</para>
        <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> property 
            needs to be set to <see langword="true" />.</para>
        <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" /> property needs to be set to <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
      <example>
        <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
      <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 0 to 7 range.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden">
      <summary>
            Gets or sets whether excel object is hidden.
            </summary>
      <remarks>
        <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" /> property needs to be set to correct outline level.</para>
        <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" /> property 
            needs to be set to <see langword="true" />.</para>
        <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" /> property needs to be set to <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit">
      <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
      <remarks>
        <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double)">
      <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
      <remarks>
        <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
        <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
      </remarks>
      <param name="scaling">Scaling factor.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
      <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
      <remarks>
        <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
        <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
      </remarks>
      <param name="scaling">Scaling factor.</param>
      <param name="firstRow">First row.</param>
      <param name="lastRow">Last row.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.Delete">
      <summary>
            Deletes this column from the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertEmpty(System.Int32)">
      <summary>
            Inserts specified number of empty columns before the current column.
            </summary>
      <param name="columnCount">Number of columns to insert.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelColumn)">
      <summary>
            Inserts specified number of copied columns before the current column.
            </summary>
      <param name="columnCount">Number of columns to insert.</param>
      <param name="sourceColumn">Source column to copy.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single)">
      <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
      <remarks>
        <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
        <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
      </remarks>
      <param name="scaling">Scaling factor.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
      <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
      <remarks>
        <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
        <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
      </remarks>
      <param name="scaling">Scaling factor.</param>
      <param name="firstRow">First row.</param>
      <param name="lastRow">Last row.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumn.Cells">
      <summary>
            Gets cell range with column cells.
            </summary>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
      <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelColumn.Width">
      <summary>
            Gets or sets column width.
            </summary>
      <remarks>
            Unit is 1/256th of the width of the zero character in default font.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth" />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelColumnCollection">
      <summary>
            Collection of excel columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn" />).
            </summary>
      <remarks>
        <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
        <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
        <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
      </remarks>
      <seealso cref="T:GemBox.Spreadsheet.ExcelColumn" />
      <example>
        <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="ColumnCollection" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="ColumnCollection" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1">
      <summary>
            Generic base class for row and column collections.
            </summary>
      <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.ExcelRow" /> or <see cref="T:GemBox.Spreadsheet.ExcelColumn" />.</typeparam>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase">
      <summary>
            Base class for row and column collections.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.DeleteInternalCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.ClearCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.AdjustArraySize(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ParseName(System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.DeleteInternalCore(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.RemoveComments(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixAllIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixMergedRegionsIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixPageBreaksIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ClearCore">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Items">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.Int32)">
      <overloads>Gets the row / column with the specified index or name.</overloads>
      <summary>
            Gets the row / column with the specified index.
            </summary>
      <param name="index">The zero-based index of the row / column.</param>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.String)">
      <summary>
            Gets the row / column with the specified name.
            </summary>
      <param name="name">The name of the row / column.</param>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.AdjustArraySize(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ParseName(System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnNameToIndex(System.String)">
      <summary>
            Converts column name ("A", "B", ...) to column index (0, 1, ...).
            </summary>
      <param name="name">Column name.</param>
      <returns>Column index for the specified name.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnIndexToName(System.Int32)">
      <summary>
            Converts column index (0, 1, ...) to column name ("A", "B", ...).
            </summary>
      <param name="columnIndex">Column index.</param>
      <returns>Column name for the specified index.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixMergedRegionsIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelFillPattern">
      <summary>
            Contains fill pattern settings.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetSolid(System.Drawing.Color)">
      <summary>
            Sets solid pattern using specified fill color.
            </summary>
      <param name="fillColor">Fill color.</param>
      <remarks>
            This will set <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle" /> to 
            <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid">FillPatternStyle.Solid</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" /> 
            to <paramref name="fillColor" />.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetPattern(GemBox.Spreadsheet.FillPatternStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Sets complex (non-empty and non-solid) pattern.
            </summary>
      <param name="patternStyle">Pattern style.</param>
      <param name="foregroundColor">Foreground color.</param>
      <param name="backgroundColor">Background color.</param>
      <remarks>
        <para>For solid pattern, just use <see cref="M:GemBox.Spreadsheet.ExcelFillPattern.SetSolid(System.Drawing.Color)" /> method.</para>
        <para>To clear fill pattern, just set <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle" /> 
            to <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None">FillPatternStyle.None</see></para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">
      <summary>
            Gets or sets fill pattern style.
            </summary>
      <remarks>
            If you set this property to anything else than <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None">
            FillPatternStyle.None</see>, <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            PatternForegroundColor</see> and/or <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">
            PatternBackgroundColor</see> should also be set (if color is 
            different from default <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
      <summary>
            Get or sets fill pattern foreground color.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.FillPatternStyle" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">
      <summary>
            Get or sets fill pattern background color.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.FillPatternStyle" />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelFont">
      <summary>
            Contains font related settings.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFont.MinWeight">
      <summary>
            Minimum font weight.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFont.NormalWeight">
      <summary>
            Normal font weight.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFont.BoldWeight">
      <summary>
            Default bold font weight.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFont.MaxWeight">
      <summary>
            Maximum font weight.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFont.#ctor">
      <summary>
            Creates new font with default values (Arial font with size 200).
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Name">
      <summary>
            Gets or sets name of the font.
            </summary>
      <remarks>
            Default value for this property is determined by
            <see cref="P:GemBox.Spreadsheet.ExcelFile.DefaultFontName">
            GemBox.Spreadsheet.ExcelFile.DefaultFontName</see>.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Color">
      <summary>
            Gets or sets font color.
            </summary>
      <remarks>
            Default value for this property is <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Weight">
      <summary>
            Gets or sets font weight (font boldness).
            </summary>
      <remarks>
        <para>Font weight is an integer value between <see cref="F:GemBox.Spreadsheet.ExcelFont.MinWeight">
            MinWeight</see> and <see cref="F:GemBox.Spreadsheet.ExcelFont.MaxWeight" />.</para>
        <para>If you want font to have standard boldness, set this property to
            <see cref="F:GemBox.Spreadsheet.ExcelFont.BoldWeight" />.</para>
        <para>Default value of this property is <see cref="F:GemBox.Spreadsheet.ExcelFont.NormalWeight" />.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Font weight is out of allowed range.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Size">
      <summary>
            Gets or sets font size.
            </summary>
      <remarks>
        <para>Unit is twip (1/20th of a point).</para>
        <para>Default value of this property is determined by
            <see cref="P:GemBox.Spreadsheet.ExcelFile.DefaultFontSize">
            GemBox.Spreadsheet.ExcelFile.DefaultFontSize</see></para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Italic">
      <summary>
            Gets or sets if the font is italic.
            </summary>
      <remarks>
            Default value of this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.Strikeout">
      <summary>
            Gets or sets if the font is struck out.
            </summary>
      <remarks>
            Default value of this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition">
      <summary>
            Gets or sets font script position.
            </summary>
      <remarks>
            Default value of this property is <see cref="F:GemBox.Spreadsheet.ScriptPosition.Normal">ScriptPosition.Normal</see>.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle">
      <summary>
            Gets or sets font underlining.
            </summary>
      <remarks>
            Default value of this property is <see cref="F:GemBox.Spreadsheet.UnderlineStyle.None">UnderlineStyle.None</see>.
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelPictureFormat">
      <summary>
            Picture formats.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Jpeg">
      <summary>
            Jpeg picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Png">
      <summary>
            Png picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Tiff">
      <summary>
            Tiff picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Gif">
      <summary>
            Gif picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Emf">
      <summary>
            Emf picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Wmf">
      <summary>
            Wmf picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Bmp">
      <summary>
            Bmp picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Exif">
      <summary>
            Exif picture format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Ico">
      <summary>
            Ico picture format.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelPrintOptions">
      <summary>
            Stores MS Excel print and print related options.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.GetHashCode">
      <summary>
            Returns the hash code of this object.
            </summary>
      <returns>Hash code.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" />.
            </summary>
      <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> type.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalCentered">
      <summary>
        <see langword="true" /> for printing sheet vertical centered, <see langword="false" /> otherwise.
            </summary>
      <remarks>
            Default value for this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HorizontalCentered">
      <summary>
        <see langword="true" /> for printing sheet horizontal centered, <see langword="false" /> otherwise.
            </summary>
      <remarks>
            Default value for this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings">
      <summary>
        <see langword="true" /> for print headings, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings" /> is also supported when exporting to HTML file format.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines">
      <summary>
        <see langword="true" /> for printing gridlines, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines" /> is also supported when exporting to HTML file format.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor">
      <summary>
            Scaling factor for automatic page breaks.
            </summary>
      <remarks>
        <para>Unit is one percent. Value must be between 10 and 400.</para>
        <para>Default value for this property is 100.</para>
        <para>MS Excel inserts automatic page breaks depending on this scaling factor. 
            Smaller it gets, bigger will be the distance between the two automatic page breaks.</para>
        <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage" />
            will automatically be set to <see langword="false" />.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage">
      <summary>
        <see langword="true" /> for using 
            <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages" />
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages" />, 
            <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>This property determines whether <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor" />
            or <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages" />
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages" />
            will be used in printing.</para>
        <para>Default value for this property is <see langword="false" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageWidth">
      <summary>
            Gets the width of the page (in inches).
            </summary>
      <value>
            The width of the page.
            </value>
      <remarks>
            If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType" /> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see> this will return 0.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageHeight">
      <summary>
            Gets the height of the page (in inches).
            </summary>
      <value>
            The height of the page.
            </value>
      <remarks>
            If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType" /> is
            <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see> this will return 0.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType">
      <summary>
            Gets or sets the type of the paper for the page. 
            </summary>
      <remarks>
        <para>Default value for this property is <see cref="F:GemBox.Spreadsheet.PaperType.A4" />.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
      <value>
            The type of the paper.
            </value>
      <exception cref="T:System.ArgumentException">Thrown if type is set to
            <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see></exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.StartPageNumber">
      <summary>
            Start page number.
            </summary>
      <remarks>
            Default value for this property is 1.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages">
      <summary>
            Fit worksheet width to this number of pages (0 = use as many as needed).
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage" />
            will automatically be set to <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages">
      <summary>
            Fit worksheet height to this number of pages (0 = use as many as needed).
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage" />
            will automatically be set to <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintPagesInRows">
      <summary>
        <see langword="true" /> for printing pages in rows, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.Portrait">
      <summary>
        <see langword="true" /> for portrait orientation, <see langword="false" /> for landscape orientation.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintBlackWhite">
      <summary>
        <see langword="true" /> for printing in black and white, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.DraftQuality">
      <summary>
        <see langword="true" /> for printing in draft quality, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintCellNotes">
      <summary>
        <see langword="true" /> for printing cell notes, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.UseStartPageNumber">
      <summary>
        <see langword="true" /> for using start page number, <see langword="false" /> otherwise.
            </summary>
      <remarks>
            Default value for this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintNotesSheetEnd">
      <summary>
        <see langword="true" /> for printing notes at end of sheet, <see langword="false" /> otherwise.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintResolution">
      <summary>
            Print resolution in DPI (dots per inch).
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalPrintResolution">
      <summary>
            Vertical print resolution in DPI (dots per inch).
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
        <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para>
        <para>
          <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions" /> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para>
        <list type="ordered">
          <item>
            <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor (base print ticket).
        </description>
          </item>
          <item>
            <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions" /> instance members values.
        </description>
          </item>
          <item>
            <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
          </item>
        </list>
        <para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions" /> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions" /> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)" /> constructor).
    </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HeaderMargin">
      <summary>
            Header margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 0.5.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FooterMargin">
      <summary>
            Footer margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 0.5.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.TopMargin">
      <summary>
            Top margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 1.9.
            Currently supported only in XLSX.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.BottomMargin">
      <summary>
            Bottom margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 1.9.
            Currently supported only in XLSX.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.LeftMargin">
      <summary>
            Left margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 1.8.
            Currently supported only in XLSX.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.RightMargin">
      <summary>
            Right margin (in inches).
            </summary>
      <remarks>
            Default value for this property is 1.8.
            Currently supported only in XLSX.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.NumberOfCopies">
      <summary>
            Number of copies to print.
            </summary>
      <remarks>
        <para>Default value for this property is 1.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats. Use <see cref="P:GemBox.Spreadsheet.PrintOptions.CopyCount" /> instead.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperSize">
      <summary>
            MS Excel specific paper size / type index.
            </summary>
      <remarks>
        <para>
            Default value for this property is 0.
            </para>
        <para>
            Following table shows possible values:
            </para>
        <para>
          <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
              <tr>
                <th>Index</th>
                <th>Paper type</th>
                <th>Paper size</th>
              </tr>
              <tr>
                <td>0</td>
                <td>Undefined</td>
                <td>
                </td>
              </tr>
              <tr>
                <td>1</td>
                <td>Letter</td>
                <td>8.5in × 11in</td>
              </tr>
              <tr>
                <td>2</td>
                <td>Letter small paper</td>
                <td>8.5in × 11in</td>
              </tr>
              <tr>
                <td>3</td>
                <td>Tabloid paper</td>
                <td>11 in × 17in</td>
              </tr>
              <tr>
                <td>4</td>
                <td>Ledger paper</td>
                <td>17 in × 11in</td>
              </tr>
              <tr>
                <td>5</td>
                <td>Legal paper</td>
                <td>8.5in × 14in</td>
              </tr>
              <tr>
                <td>6</td>
                <td>Statement paper</td>
                <td>5.5in × 8.5in</td>
              </tr>
              <tr>
                <td>7</td>
                <td>Executive paper</td>
                <td>7.25in × 10.5in</td>
              </tr>
              <tr>
                <td>8</td>
                <td>A3</td>
                <td>297mm × 420mm</td>
              </tr>
              <tr>
                <td>9</td>
                <td>A4</td>
                <td>210mm × 297mm</td>
              </tr>
              <tr>
                <td>10</td>
                <td>A4 small paper</td>
                <td>210mm × 297mm</td>
              </tr>
              <tr>
                <td>11</td>
                <td>A5</td>
                <td>148mm × 210mm</td>
              </tr>
              <tr>
                <td>12</td>
                <td>B4</td>
                <td>250mm × 353mm</td>
              </tr>
              <tr>
                <td>13</td>
                <td>B5</td>
                <td>176mm × 250mm</td>
              </tr>
              <tr>
                <td>14</td>
                <td>Folio paper</td>
                <td>8.5in × 13in</td>
              </tr>
              <tr>
                <td>15</td>
                <td>Quarto paper</td>
                <td>215mm × 275mm</td>
              </tr>
              <tr>
                <td>16</td>
                <td>Standard paper</td>
                <td>10in × 14in</td>
              </tr>
              <tr>
                <td>17</td>
                <td>Standard paper</td>
                <td>11in × 17in</td>
              </tr>
              <tr>
                <td>18</td>
                <td>Note paper</td>
                <td>8.5in × 11in</td>
              </tr>
              <tr>
                <td>19</td>
                <td>#9 envelope</td>
                <td>3.875in × 8.875in</td>
              </tr>
              <tr>
                <td>20</td>
                <td>#10 envelope</td>
                <td>4.125in * 9.5in</td>
              </tr>
              <tr>
                <td>21</td>
                <td>#11 envelope</td>
                <td>4.5in * 10.375in</td>
              </tr>
              <tr>
                <td>22</td>
                <td>#12 envelope</td>
                <td>4.75in * 11in</td>
              </tr>
              <tr>
                <td>23</td>
                <td>#14 envelope</td>
                <td>5in * 11.5in</td>
              </tr>
              <tr>
                <td>24</td>
                <td>C paper</td>
                <td>17in * 22in</td>
              </tr>
              <tr>
                <td>25</td>
                <td>D paper</td>
                <td>22in * 34in</td>
              </tr>
              <tr>
                <td>26</td>
                <td>E paper</td>
                <td>34in * 44in</td>
              </tr>
              <tr>
                <td>27</td>
                <td>DL envelope</td>
                <td>110mm × 220mm</td>
              </tr>
              <tr>
                <td>28</td>
                <td>C5 envelope</td>
                <td>162mm × 229mm</td>
              </tr>
              <tr>
                <td>29</td>
                <td>C3 envelope</td>
                <td>324mm × 458mm</td>
              </tr>
              <tr>
                <td>31</td>
                <td>C6 envelope</td>
                <td>114mm × 162mm</td>
              </tr>
              <tr>
                <td>32</td>
                <td>C65 envelope</td>
                <td>114mm × 229mm</td>
              </tr>
              <tr>
                <td>33</td>
                <td>B4 envelope</td>
                <td>250mm × 353mm</td>
              </tr>
              <tr>
                <td>34</td>
                <td>B5 envelope</td>
                <td>176mm × 250mm</td>
              </tr>
              <tr>
                <td>35</td>
                <td>B6 envelope</td>
                <td>176mm × 125mm</td>
              </tr>
              <tr>
                <td>36</td>
                <td>Italy envelope</td>
                <td>110mm × 230mm</td>
              </tr>
              <tr>
                <td>37</td>
                <td>Monarch envelope</td>
                <td>3.875in × 7.5in</td>
              </tr>
              <tr>
                <td>38</td>
                <td>6 3/4 envelope</td>
                <td>3.625in * 6.5in</td>
              </tr>
              <tr>
                <td>39</td>
                <td>US standard fanfold</td>
                <td>14.875in × 11in</td>
              </tr>
              <tr>
                <td>40</td>
                <td>German standard fanfold</td>
                <td>8.5in × 12in</td>
              </tr>
              <tr>
                <td>41</td>
                <td>German legal fanfold</td>
                <td>8.5in * 13in</td>
              </tr>
              <tr>
                <td>42</td>
                <td>ISO B4</td>
                <td>250mm * 353mm</td>
              </tr>
              <tr>
                <td>43</td>
                <td>Japanese double postcard</td>
                <td>200mm * 148mm</td>
              </tr>
              <tr>
                <td>44</td>
                <td>Standard paper</td>
                <td>9in * 11in</td>
              </tr>
              <tr>
                <td>45</td>
                <td>Standard paper</td>
                <td>10in * 11in</td>
              </tr>
              <tr>
                <td>46</td>
                <td>Standard paper</td>
                <td>15in * 11in</td>
              </tr>
              <tr>
                <td>47</td>
                <td>Invite envelope</td>
                <td>220mm * 220mm</td>
              </tr>
              <tr>
                <td>50</td>
                <td>Letter extra paper</td>
                <td>9.275in * 12in</td>
              </tr>
              <tr>
                <td>51</td>
                <td>Legal extra paper</td>
                <td>9.275in * 15in</td>
              </tr>
              <tr>
                <td>52</td>
                <td>Tabloid extra paper</td>
                <td>11.69in * 18in</td>
              </tr>
              <tr>
                <td>53</td>
                <td>A4 extra paper</td>
                <td>236mm * 322mm</td>
              </tr>
              <tr>
                <td>54</td>
                <td>Letter transverse paper</td>
                <td>8.275in * 11in</td>
              </tr>
              <tr>
                <td>55</td>
                <td>A4 transverse paper</td>
                <td>210mm * 297mm</td>
              </tr>
              <tr>
                <td>56</td>
                <td>Letter extra transverse paper</td>
                <td>9.275in * 12in</td>
              </tr>
              <tr>
                <td>57</td>
                <td>SuperA/SuperA/A4 paper</td>
                <td>227mm * 356mm</td>
              </tr>
              <tr>
                <td>58</td>
                <td>SuperB/SuperB/A3 paper</td>
                <td>305mm * 487mm</td>
              </tr>
              <tr>
                <td>59</td>
                <td>Letter plus paper</td>
                <td>8.5in * 12.69in</td>
              </tr>
              <tr>
                <td>60</td>
                <td>A4 plus paper</td>
                <td>210mm * 330mm</td>
              </tr>
              <tr>
                <td>61</td>
                <td>A5 transverse paper</td>
                <td>148mm * 210mm</td>
              </tr>
              <tr>
                <td>62</td>
                <td>JIS B5 transverse paper</td>
                <td>182mm * 257mm</td>
              </tr>
              <tr>
                <td>63</td>
                <td>A3 extra paper</td>
                <td>322mm * 445mm</td>
              </tr>
              <tr>
                <td>64</td>
                <td>A5 extra paper</td>
                <td>174mm * 235mm</td>
              </tr>
              <tr>
                <td>65</td>
                <td>ISO B5 extra paper </td>
                <td>201mm * 276mm</td>
              </tr>
              <tr>
                <td>66</td>
                <td>A2 paper</td>
                <td>420mm * 594mm</td>
              </tr>
              <tr>
                <td>67</td>
                <td>A3 transverse paper</td>
                <td>297mm * 420mm</td>
              </tr>
              <tr>
                <td>68</td>
                <td>A3 extra transverse paper</td>
                <td>322mm * 445mm</td>
              </tr>
            </table>
          </font>
        </para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelRow">
      <summary>
            Excel row contains row options and cell range with row cells.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelColumn" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRow.Delete">
      <summary>
            Deletes this row from the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRow.InsertEmpty(System.Int32)">
      <summary>
            Inserts specified number of empty rows before the current row.
            </summary>
      <param name="rowCount">Number of rows to insert.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRow.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelRow)">
      <summary>
            Inserts specified number of copied rows before the current row.
            </summary>
      <param name="rowCount">Number of rows to insert.</param>
      <param name="sourceRow">Source row to copy.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRow.AutoFit">
      <summary>
            Automatically fits row height to the minimum size required for all lines in the row cells to be visible.
            </summary>
      <remarks>
        <para>Auto-fit row height is a MS Excel feature and not a file format feature. When rows are
            auto-fit in MS Excel user interface, MS Excel will calculate current character heights and 
            set row height to the new numeric value.</para>
        <para>This method will set <see cref="P:GemBox.Spreadsheet.ExcelRow.Height" /> to the approximate 
            value (maxLinesCount * 255).</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRow.Cells">
      <summary>
            Gets cell range with row cells.
            </summary>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells" />
      <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">
      <summary>
            Gets only currently allocated cells for this row.
            </summary>
      <remarks>
        <para>Use this collection if you are reading entire Excel file (you don't know exact position of 
            cells with data). If writing values, using <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells" />
            property is recommended.</para>
        <para>This collection contains only allocated cells so it is faster as you avoid  
            checking every single cell in a row. You still need to check if a specific cell contains 
            any value (it can be empty).</para>
      </remarks>
      <example>
        <para>Following code reads entire XLSX file and displays all cells containing any data. Data types are also displayed.</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="ReadingFile" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="ReadingFile" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelRow.Cells" />
      <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelRow.Height">
      <summary>
            Gets or sets row height.
            </summary>
      <remarks>
            Unit is twip (1/20th of a point).
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelRowCollection">
      <summary>
            Collection of excel rows (<see cref="T:GemBox.Spreadsheet.ExcelRow" />).
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelRow" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.AdjustArraySize(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.ParseName(System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowNameToIndex(System.String)">
      <summary>
            Converts row name ("1", "2", ...) to row index (0, 1, ...).
            </summary>
      <param name="name">Row name.</param>
      <returns>Row index for the specified name.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowIndexToName(System.Int32)">
      <summary>
            Converts row index (0, 1, ...) to row name ("1", "2", ...).
            </summary>
      <param name="rowIndex">Row index.</param>
      <returns>Row name for the specified index.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixMergedRegionsIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RemoveComments(System.Int32)">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelViewOptions">
      <summary>
            Stores MS Excel display and view related options.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleRow">
      <summary>
            Index of the first visible row in the worksheet.
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleColumn">
      <summary>
            Index of the first visible column in the worksheet.
            </summary>
      <remarks>
        <para>Default value for this property is 0.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.Zoom">
      <summary>
            Magnification factor in normal view.
            </summary>
      <remarks>
        <para>Unit is one percent. Value must be between 10 and 400.</para>
        <para>Default value for this property is 100.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType">
      <summary>
            Gets and sets the view type. 
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="ViewType.Normal" />.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType" /> is supported only for XLSX (Excel 2007+) files.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.PageBreakViewZoom">
      <summary>
            Magnification factor in page break view.
            </summary>
      <remarks>
        <para>Unit is one percent. Value must be between 10 and 400.</para>
        <para>Default value for this property is 60.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowFormulas">
      <summary>
            If true, MS Excel shows formulas. Otherwise, formula results are shown. 
            </summary>
      <remarks>
            Default value for this property is <see langword="false" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowGridLines">
      <summary>
            If true, MS Excel shows grid lines.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats. Use <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines" /> for printing gridlines.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowSheetHeaders">
      <summary>
            If true, MS Excel shows row and column headers.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowZeroValues">
      <summary>
            If true, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
      <remarks>
            Default value for this property is <see langword="true" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowColumnsFromRightToLeft">
      <summary>
            If true, MS Excel shows columns from right to left.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowOutlineSymbols">
      <summary>
            If true, MS Excel shows outline symbols.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowInPageBreakPreview">
      <summary>
            If true, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="false" />.</para>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">
      <summary>
            Gets or sets whether outline row buttons are displayed below groups.
            </summary>
      <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
      <example>
        <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">ExcelWorksheet.OutlineColumnButtonsRight</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">
      <summary>
            Gets or sets whether outline column buttons are displayed on the right side of groups.
            </summary>
      <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
      <example>
        <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">ExcelWorksheet.OutlineRowButtonsBelow</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed" />
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelViewOptions.SelectedCells">
      <summary>
            Gets or sets the selected cells.
            </summary>
      <value>
            The selected cells.
            </value>
            /* JK(2012-01-10): Added support for selected cells. Ticket: https://www.assembla.com/spaces/gemmeus/tickets/481 */
        </member>
    <member name="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
      <summary>
            Collection of worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />).
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)">
      <summary>
            Adds an empty worksheet to the end of the collection.
            </summary>
      <param name="worksheetName">Worksheet name.</param>
      <returns>Newly created worksheet.</returns>
      <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" /> is set to this worksheet.
            </remarks>
      <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.AddCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
      <summary>
            Adds a copy of an existing worksheet to the end of the collection.
            </summary>
      <param name="destinationWorksheetName">Name of new worksheet.</param>
      <param name="sourceWorksheet">Source worksheet.</param>
      <returns>Newly created worksheet.</returns>
      <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" /> is set to this worksheet.
            </remarks>
      <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.GetEnumerator">
      <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.
            </summary>
      <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(GemBox.Spreadsheet.ExcelWorksheet)">
      <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> element is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.
            </summary>
      <param name="item">The <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.</param>
      <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />; otherwise, false.
            </returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(System.String)">
      <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> element with specified name is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.
            </summary>
      <param name="worksheetName">The name of the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />.</param>
      <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> with specified name is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection" />; otherwise, false.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.Int32)">
      <overloads>Gets the worksheet with the specified index or name.</overloads>
      <summary>
            Gets the worksheet with the specified index.
            </summary>
      <param name="index">The zero-based index of the worksheet.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.String)">
      <summary>
            Gets the worksheet with the specified name.
            </summary>
      <param name="name">The name of the worksheet.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet">
      <summary>
            Gets or sets active worksheet.
            </summary>
      <remarks>
        <para>Active worksheet is the one selected when file is opened with Microsoft Excel. By default active worksheet 
            is the first one added with <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)" /> method.</para>
        <para>
          <b>GemBox.Spreadsheet Free</b> allows setting active worksheet to only one of the first 5 worksheets, otherwise active worksheet defaults to the first worksheet.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FillPatternStyle">
      <summary>
            Fill pattern styles used for 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</see>.
            </summary>
      <remarks>
        <para>To see names of Microsoft Excel patterns, start Microsoft Excel and go to "Format" menu &gt; "Cells..." submenu &gt; 
            "Patterns" tab &gt; "Pattern" drop-down. When hovering over a pattern, Microsoft Excel name is displayed in tooltip
            text.</para>
        <para>
          <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None" /> fill pattern uses no colors.</para>
        <para>
          <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid" /> fill pattern uses <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see>.</para>
        <para>All other patterns use both <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</see></para>
        <para>
          <see cref="T:GemBox.Spreadsheet.FillPatternStyle" />s are currently supported only for XLSX (Excel 2007+) and XLS (Excel 1997-2003) files.</para>
      </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">ExcelFillPattern.PatternForegroundColor</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</seealso>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.None">
      <summary>
            No fill pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Solid">
      <summary>
            "Solid" fill pattern using foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray6">
      <summary>
            "6% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray12">
      <summary>
            "12% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray25">
      <summary>
            "25% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray50">
      <summary>
            "50% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray75">
      <summary>
            "75% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.HorizontalStripe">
      <summary>
            "Horizontal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.VerticalStripe">
      <summary>
            "Vertical Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalStripe">
      <summary>
            "Diagonal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ReverseDiagonalStripe">
      <summary>
            "Reverse Diagonal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalCrosshatch">
      <summary>
            "Diagonal Crosshatch" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThickDiagonalCrosshatch">
      <summary>
            "Thick Diagonal Crosshatch" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalStripe">
      <summary>
            "Thin Horizontal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinVerticalStripe">
      <summary>
            "Thin Vertical Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalStripe">
      <summary>
            "Thin Diagonal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinReverseDiagonalStripe">
      <summary>
            "Thin Reverse Diagonal Stripe" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalCrosshatch">
      <summary>
            "Thin Horizontal Crosshatch" pattern.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalCrosshatch">
      <summary>
            "Thin Diagonal Crosshatch" pattern.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FormattedExcelDrawing">
      <summary>
            Represents a formatted drawing (picture, chart, etc.) which can be exported to PDF, XPS, image or be printed.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.IO.Stream,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the drawing in the specified stream.
            </summary>
      <param name="stream">The stream in which to save the drawing.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>Parameter <paramref name="options" />, currently, must be of type <see cref="T:GemBox.Spreadsheet.PdfSaveOptions" />, <see cref="T:GemBox.Spreadsheet.XpsSaveOptions" /> or <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.String,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the drawing to a file with the specified path.
            </summary>
      <param name="path">The path to which to save the drawing.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>Parameter <paramref name="options" />, currently, must be of type <see cref="T:GemBox.Spreadsheet.PdfSaveOptions" />, <see cref="T:GemBox.Spreadsheet.XpsSaveOptions" /> or <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.String)">
      <summary>
            Saves the drawing to a file with the specified path. Path must include file extension.
            </summary>
      <param name="path">The path to which to save the drawing.</param>
      <exception cref="T:System.InvalidOperationException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> method overload instead.</exception>
      <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.SaveOptions" /> derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> method.
            <para>Following file extensions are supported:</para><list type="bullet"><item><description>Portable Document Format: .pdf</description></item><item><description>XML Paper Specification: .xps</description></item><item><description>Portable Network Graphics: .png</description></item><item><description>Joint Photographic Experts Group: .jpeg, .jpg</description></item><item><description>Bitmap: .bmp</description></item><item><description>Tagged Image File Format: .tiff, .tif</description></item><item><description>Windows Media Photo: .wdp</description></item></list></remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.Object,System.String)">
      <summary>
            Saves the drawing to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the drawing to a client browser. File format is resolved from <paramref name="fileName" /> extension. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
      <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
      <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
      <exception cref="T:System.InvalidOperationException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)" /> method overload instead.</exception>
      <remarks>
        <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note>
        <para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="http://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
        <para>For supported file extensions, see remarks for <see cref="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.String)" /> method.</para>
      </remarks>
      <example>
        <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms" />
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms2" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="Mvc" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="Mvc" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC Web API</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/ASP.NET/ASP.NET">ASP.NET Sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the drawing to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the drawing to a client browser. File format is defined with <paramref name="options" /> parameter. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
      <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
      <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>
        <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note>
        <para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="http://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
      </remarks>
      <example>
        <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms" />
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms2" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="Mvc" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="Mvc" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC Web API</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/ASP.NET/ASP.NET">ASP.NET Sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Print">
      <summary>
            Prints the drawing to the default printer.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Print(System.String)">
      <summary>
            Prints the drawing to the specified printer.
            </summary>
      <param name="printerName">Printer name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.FormattedExcelDrawing.Print(System.String,GemBox.Spreadsheet.PrintOptions)">
      <summary>
            Prints the drawing to the specified printer according to specified options.
            </summary>
      <param name="printerName">Printer name.</param>
      <param name="options">Print options.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.FormattedExcelDrawing.Width">
      <summary>
            Gets the drawing width in <see cref="F:GemBox.Spreadsheet.LengthUnit.Point" />s.
            </summary>
      <value>
            The drawing width in <see cref="F:GemBox.Spreadsheet.LengthUnit.Point" />s.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.FormattedExcelDrawing.Height">
      <summary>
            Gets the drawing height in <see cref="F:GemBox.Spreadsheet.LengthUnit.Point" />s.
            </summary>
      <value>
            The drawing height in <see cref="F:GemBox.Spreadsheet.LengthUnit.Point" />s.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.FormattedExcelDrawing.Content">
      <summary>
            Gets the drawing content.
            </summary>
      <value>
            The drawing content.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.HorizontalAlignmentStyle">
      <summary>
            Horizontal alignment styles used for <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment">
            CellStyle.HorizontalAlignment</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General">
      <summary>
            Aligns data depending on the data type (text, number, etc.). Consult Microsoft Excel documentation.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Fill">
      <summary>
            Fill alignment repeats cell data to fill the whole cell.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General" />.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Justify">
      <summary>
            Justify alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.CenterAcross">
      <summary>
            Centered across selection. Multiple cells can be selected but only one should have value for this alignment to have effect.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center" />.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Distributed">
      <summary>
            Distributed alignment.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HorizontalPageBreak">
      <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.PageBreak">
      <summary>
            Base class for all page breaks.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreak.CheckBreakIndex(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreak.CheckLimit(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckBreakIndex(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckLimit(System.Int32)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.Row">
      <summary>
            Index of the first row of the new page.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.FirstColumn">
      <summary>
            Index of the first column of the new page.
            </summary>
      <remarks>
            Use 0 (first column) if you don't care.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.LastColumn">
      <summary>
            Index of the last column of the new page.
            </summary>
      <remarks>
            Use 255 (last column) if you don't care.
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.HorizontalPageBreakCollection">
      <summary>
            Collection of horizontal page breaks (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" />).
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.PageBreakCollection`1">
      <summary>
            Generic base class for page break collections.
            </summary>
      <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" /> or <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />.</typeparam>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.PageBreakCollection">
      <summary>
            Base class for page break collections.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection.Clear">
      <summary>
            Removes all page breaks. 
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the page break at the specified index.
            </summary>
      <param name="index">The zero-based index of the page break to remove.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection.GetEnumerator">
      <summary>
            Returns an enumerator for the collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.PageBreakCollection.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.PageBreakCollection.Count">
      <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.CreateItem(System.Int32,System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32,System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator for the collection.
            </summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.ItemsCore">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.MaxLastLimit">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.Item(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32)">
      <overloads>Ads a new horizontal page break.</overloads>
      <summary>
            Ads a new horizontal page break above the specified row.
            </summary>
      <param name="row">The zero-based index of the row.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
      <summary>
            Ads a new horizontal page break above the specified row and within specified columns.
            </summary>
      <param name="row">The zero-based index of the row.</param>
      <param name="firstColumn">The zero-based index of the first column.</param>
      <param name="lastColumn">The zero-based index of the last column.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.MaxLastLimit">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.Item(System.Int32)">
      <summary>
            Gets or sets the horizontal page break at the specified index.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.IndividualBorder">
      <summary>
            Different borders that can be set on excel cell. Members of this enumeration can't be combined.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.MultipleBorders" />
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">
      <summary>
            Diagonal-up border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">
      <summary>
            Diagonal-down border.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.LineStyle">
      <summary>
            Line styles used for 
            <see cref="P:GemBox.Spreadsheet.CellBorder.LineStyle">CellBorder.LineStyle</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.None">
      <summary>
            No line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Thin">
      <summary>
            Thin line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Medium">
      <summary>
            Medium line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Dashed">
      <summary>
            Dashed line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Dotted">
      <summary>
            Dotted line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Thick">
      <summary>
            Thick line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.DoubleLine">
      <summary>
            Obsolete. Use Double instead.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Double">
      <summary>
            Double line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.Hair">
      <summary>
            Hair line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashed">
      <summary>
            Medium dashed line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.DashDot">
      <summary>
            Dash-dot line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDot">
      <summary>
            Medium dash-dot line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.DashDotDot">
      <summary>
            Dash-dot-dot line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDotDot">
      <summary>
            Medium dash-dot-dot line.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.SlantDashDot">
      <summary>
            Slanted dash-dot line.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.LineStyle.SlantedDashDot">
      <summary>
            Obsolete. Use SlantDashDot instead.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.MultipleBorders">
      <summary>
            Flags for borders and border groups that can be set on the excel cell. 
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.IndividualBorder" />
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.None">
      <summary>
            None of the borders are used.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">
      <summary>
            Diagonal-up border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">
      <summary>
            Diagonal-down border.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Horizontal">
      <summary>
            Horizontal borders.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Vertical">
      <summary>
            Vertical borders.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Diagonal">
      <summary>
            Diagonal borders.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.Outside">
      <summary>
            Outside borders.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.MultipleBorders.All">
      <summary>
            All borders are used.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.NamedRange">
      <summary>
            Represents a named range in the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRange.Delete">
      <summary>
            Deletes this named range from the named ranges collection.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRange.GlobalName">
      <summary>
            gets global flag
            </summary>
      <value>if this name is global</value>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRange.Range">
      <summary>
            Gets or sets the named cell range.
            </summary>
      <value>The named cell range.</value>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRange.Name">
      <summary>
            Gets the named range name.
            </summary>
      <value>The named range name.</value>
    </member>
    <member name="T:GemBox.Spreadsheet.NamedRangeCollection">
      <summary>
            Collection of the descriptive names which are used 
            to represent cells, ranges of cells, formulas, or constant values.
            </summary>
      <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
      <overloads>Adds a new global or local named range.</overloads>
      <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>
      <param name="name">The user-defined name.</param>
      <param name="range">The range to be refered by name.</param>
      <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
      <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>
      <param name="name">The user-defined name.</param>
      <param name="range">The range to be refered by name.</param>
      <param name="globalName">sets the range as global if set to true</param>
      <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintArea(GemBox.Spreadsheet.CellRange)">
      <summary>
            Sets print area.
            </summary>
      <param name="range">Range of cells that we want set as print area.</param>
      <remarks>
            If specified, print area is used when exporting to HTML, PDF, XPS and image file formats as cell range which will be exported in the output file format.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelRow,System.Int32)">
      <summary>
            Sets print titles (rows to repeat at top).
            </summary>
      <param name="startRow">First row.</param>
      <param name="numberOfRows">Number of rows that repeat.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelColumn,System.Int32)">
      <summary>
            Sets print titles (columns to repeat at left).
            </summary>
      <param name="startColumn">First column.</param>
      <param name="numberOfColumns">Number of columns that repeat.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExcelColumn,System.Int32)">
      <summary>
            Sets print titles.
            </summary>
      <param name="startRow">First row.</param>
      <param name="numberOfRows">Number of rows that repeat.</param>
      <param name="startColumn">First column.</param>
      <param name="numberOfColumns">Number of columns that repeat.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.NamedRangeCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1" />
            that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Count">
      <summary>
            Gets the number of named ranges contained in the collection.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.Int32)">
      <overloads>Gets the <see cref="T:GemBox.Spreadsheet.NamedRange" /> with 
            the specified index or name.</overloads>
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange" /> at the specified index.
            </summary>
      <param name="index">Range index.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange" /> with the specified name.
            </summary>
      <param name="name">Range name.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelPicture">
      <summary>
            Represents a picture in the worksheet.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>
      <example>
        <para>Following code demonstrates how to use images:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Image" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Image" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPicture.ToImage">
      <summary>
            Converts this <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance to a new <see cref="T:System.Drawing.Image" /> instance.
            </summary>
      <returns>A new <see cref="T:System.Drawing.Image" /> instance created from this <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPicture.Delete">
      <summary>
            Removes this <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance from the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPicture.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance.
            </returns>
      <remarks>This method should be used primarily for debugging purposes and should be considered volatile (format of its return value might change in future versions).</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.ImageStream">
      <summary>
        <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelPicture.PictureStream" /> property instead.</para>
        <para>Gets the image stream.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.Image">
      <summary>
        <para>This property is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPicture.ToImage" /> method instead.</para>
        <para>Gets the picture as <see cref="T:System.Drawing.Image" />.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.BoundingRectangle">
      <summary>
        <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> property and its <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetLeft(GemBox.Spreadsheet.LengthUnit)" />, <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetTop(GemBox.Spreadsheet.LengthUnit)" />, <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetWidth(GemBox.Spreadsheet.LengthUnit)" /> and <see cref="M:GemBox.Spreadsheet.ExcelDrawingPosition.GetHeight(GemBox.Spreadsheet.LengthUnit)" /> methods instead.</para>
        <para>Gets the image bounding rectangle.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.Positioning">
      <summary>
        <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> property instead.</para>
        <para>Gets or sets the positioning options of the picture.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.TopLeftCell">
      <summary>
        <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.From" /> property instead.</para>
        <para>Gets or sets the top left anchor cell for the picture.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.BottomRightCell">
      <summary>
        <para>This property is obsolete. Use <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> property and its <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.To" /> property instead.</para>
        <para>Gets or sets the bottom right anchor cell for the picture.</para>
      </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.PictureStream">
      <summary>
            Gets the picture stream.
            </summary>
      <value>
            The picture stream.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.PictureFormat">
      <summary>
            Gets the picture format.
            </summary>
      <value>
            The picture format.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelPicture.DefaultFileName">
      <exclude />
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelPictureCollection">
      <summary>
            Represents a collection of <see cref="T:GemBox.Spreadsheet.ExcelPicture">picture</see>s in the worksheet.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">ExcelWorksheet.Pictures</seealso>
      <example>
        <para>Following code demonstrates how to use images:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Image" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Image" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image from specified fileName by using defined rectangle.</para>
      </summary>
      <param name="picturePath">The fileName.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="rectangle">The destination rectangle.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image by using defined rectangle.</para>
      </summary>
      <param name="pictureStream">Stream of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="rectangle">The destination rectangle.</param>
      <param name="pictureFormat">Picture format.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image from specified fileName with defined anchor properties.</para>
      </summary>
      <param name="picturePath">File name of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <param name="positionTo">Bottom right anchor cell.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
      <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image from specified fileName by using defined top left anchor property and default width/height.</para>
      </summary>
      <param name="picturePath">File name of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image from specified fileName by using defined top left anchor property and defined width and height.</para>
      </summary>
      <param name="picturePath">File name of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <param name="width">Image width (in pixels).</param>
      <param name="height">Image height (in pixels).</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead. Parameters <i>width</i> and <i>height</i> can, for example, be retrieved by using <see href="http://msdn.microsoft.com/en-us/library/93z9ee4x.aspx">Image.FromStream(Stream)</see> method and <see href="http://msdn.microsoft.com/en-us/library/system.drawing.image.size.aspx">Image.Size</see> property. Note that <see cref="T:System.Drawing.Image" /> instance must be disposed.</para>
        <para>Adds the image by using defined top left anchor property and default width/height.</para>
      </summary>
      <param name="pictureStream">Stream of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <param name="pictureFormat">Picture format.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Drawing.Rectangle)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method instead.</para>
        <para>Adds the image from specified fileName by using defined rectangle.</para>
      </summary>
      <param name="picturePath">The fileName.</param>
      <param name="rectangle">The destination rectangle.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method instead.</para>
        <para>Adds image from the image object by using defined rectangle.</para>
      </summary>
      <param name="pictureStream">Image stream.</param>
      <param name="rectangle">Destination rectangle.</param>
      <param name="pictureFormat">Picture format.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image with defined anchor properties.</para>
      </summary>
      <param name="pictureStream">Stream of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <param name="positionTo">Bottom right anchor cell.</param>
      <param name="pictureFormat">Picture format.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
      <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
        <para>This method is obsolete. Use <see cref="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)" /> method and <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" /> and <see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> properties instead.</para>
        <para>Adds the image from specified fileName by using defined top left anchor property and defined width and height.</para>
      </summary>
      <param name="pictureStream">Stream of the image to be added.</param>
      <param name="positioningMode">Positioning mode of the image.</param>
      <param name="positionFrom">Top left anchor cell.</param>
      <param name="width">Image width (in pixels).</param>
      <param name="height">Image height (in pixels).</param>
      <param name="pictureFormat">Picture format.</param>
      <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <param name="pictureStream">The picture's stream.</param>
      <param name="pictureFormat">The picture's format.</param>
      <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which doesn't move nor sizes with cells. Picture size will be determined by using GDI+.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="left">The distance of the left edge of the picture from the left edge of the worksheet.</param>
      <param name="top">The distance of the top edge of the picture from the top edge of the worksheet.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which doesn't move nor sizes with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.FreeFloating" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
        <para>This method uses <see cref="T:System.Drawing.Image">GDI+</see> to determine picture's size.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="pictureStream">The picture's stream.</param>
      <param name="pictureFormat">The picture's format.</param>
      <param name="positionFrom">The picture's position.</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="pictureStream">The picture's stream.</param>
      <param name="pictureFormat">The picture's format.</param>
      <param name="positionFromCell">The picture's position (for example, "A1").</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFrom">The picture's position.</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.Double,System.Double,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFromCell">The picture's position (for example, "A1").</param>
      <param name="width">The picture's width.</param>
      <param name="height">The picture's height.</param>
      <param name="unit">The length unit in which all length parameters are specified.</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFrom">The picture's position.</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
        <para>This method uses <see cref="T:System.Drawing.Image">GDI+</see> to determine picture's size.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String)">
      <summary>
            Adds a new picture to the worksheet which moves but doesn't size with cells. Picture size will be determined by using GDI+.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFromCell">The picture's position (for example, "A1").</param>
      <returns>A new picture added to the worksheet which moves but doesn't size with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.Move" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
        <para>This method uses <see cref="T:System.Drawing.Image">GDI+</see> to determine picture's size.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
      <param name="pictureStream">The picture's stream.</param>
      <param name="pictureFormat">The picture's format.</param>
      <param name="positionFrom">The picture's position (top-left corner).</param>
      <param name="positionTo">The picture's end position (bottom-right corner).</param>
      <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.String,System.String)">
      <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
      <param name="pictureStream">The picture's stream.</param>
      <param name="pictureFormat">The picture's format.</param>
      <param name="positionFromCell">The picture's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The picture's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
      <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFrom">The picture's position (top-left corner).</param>
      <param name="positionTo">The picture's end position (bottom-right corner).</param>
      <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.String,System.String)">
      <summary>
            Adds a new picture to the worksheet which moves and sizes with cells.
            </summary>
      <param name="picturePath">The picture's path.</param>
      <param name="positionFromCell">The picture's position (top-left corner) (for example, "A1").</param>
      <param name="positionToCell">The picture's end position (bottom-right corner) (for example, "B2").</param>
      <returns>A new picture added to the worksheet which moves and sizes with cells.</returns>
      <remarks>
        <para>
          <see cref="P:GemBox.Spreadsheet.ExcelDrawing.Position" />.<see cref="P:GemBox.Spreadsheet.ExcelDrawingPosition.Mode" /> of a newly added picture will be <see cref="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize" />.</para>
        <para>
          <paramref name="picturePath" /> parameter must contain supported extension (for example, ".png"), otherwise exception is thrown.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ComHelper">
      <summary>
            Contains methods that can be useful for users which are calling GemBox.Spreadsheet component using COM interop.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ComHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ComHelper" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ComHelper.ComSetLicense(System.String)">
      <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
      <remarks>
        <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
        <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
        <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
      </remarks>
      <param name="serialKey">Serial key.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.RangeIndexingMode">
      <summary>
            Indexing modes used by <see cref="T:GemBox.Spreadsheet.CellRange" />.
            </summary>
      <example>
        <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)" /> method is used to mark outside borders of the rectangular range.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode" />
    </member>
    <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
      <summary>
            Rectangular indexing mode. Rectangular cell range is higher than one row and wider than one column.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">
      <summary>
            Horizontal indexing mode. Horizontal cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height">CellRange.Height</see> equal to 1.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">
      <summary>
            Vertical indexing mode. Vertical cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width">CellRange.Width</see> equal to 1.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ColumnTypeResolution">
      <summary>
            Defines resolution method that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>. 
            </summary>
      <remarks>
        <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution">column type resolution</see> and by exploring 
            types of all <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> in some column.
            Column type can be <see cref="T:System.Boolean" />, <see cref="T:System.Int32" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime">
            DateTime</see>, <see cref="T:System.String" /> or <see cref="T:System.Object" />.
            </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Object">
      <summary>
            All columns will be of type <see cref="T:System.Object" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringInvariantCulture">
      <summary>
            All columns  will be of type <see cref="T:System.String" />. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringCurrentCulture">
      <summary>
            All columns  will be of type <see cref="T:System.String" />. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto">
      <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.Object" />. 
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringInvariantCulture">
      <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String" />. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringCurrentCulture">
      <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String" />. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.CreateDataTableOptions">
      <summary>
            Represents options creating <see cref="T:System.Data.DataTable" /> and filling it with values from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
            Use default constructor to extract used cell range.
            </remarks>
      <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" />
      <example>
        <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" /> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" /> method.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CreateDataTable" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CreateDataTable" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions" /> class.
            </summary>
      <remarks>
            Use this constructor to extract used cell range.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions" /> class.
            </summary>
      <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions" /> class.
            </summary>
      <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartRow">
      <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn">
      <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn" /> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes" /> has any values.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfRows">
      <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns">
      <summary>
            Gets or sets the number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns" /> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes" /> has any values.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes">
      <summary>
            Gets a list of indexes of columns which will be extracted.
            </summary>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn" /> and <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns" /> are ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes" /> has any values.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.Resolution">
      <summary>
            Gets or sets the resolution type that specifies how column types will be resolved in created <see cref="T:System.Data.DataTable" />,
            see <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution" />.
            </summary>
      <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto" />.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnHeaders">
      <summary>
            Gets or sets a value indicating whether to use first row of extracted data for column headers.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions">
      <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions" />.
            </summary>
      <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None" />.
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs">
      <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" /> event.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable">
      <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" /></summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnIndex">
      <summary>
            Gets the destination column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnType">
      <summary>
            Gets the destination column type in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue">
      <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" /> cell.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.IsDataTableValueValid">
      <summary>
            Gets a value indication whether current <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue" /> can be converted into <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" /> cell.
            </summary>
      <remarks>
            If this value is false, you need to set an appropriate <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue" /> before exiting event handler or
            <see cref="T:GemBox.Spreadsheet.SpreadsheetException" /> will be thrown.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet">
      <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelRowIndex">
      <summary>
            Gets the source row index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelColumnIndex">
      <summary>
            Gets the source column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCellValue">
      <summary>
            Gets the source value from <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.Action">
      <summary>
            Gets or sets the action which will be executed after event, see <see cref="T:GemBox.Spreadsheet.ExtractDataEventAction" />.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HeaderFooter">
      <summary>
            Represents worksheet's header or footer.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooter.#ctor">
      <summary>
        <see cref="T:GemBox.Spreadsheet.HeaderFooter" /> constructor.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooter.LeftSection">
      <summary>
            Gets or sets left section.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooter.CenterSection">
      <summary>
            Gets or sets center section.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooter.RightSection">
      <summary>
            Gets or sets right section.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HeaderFooterFieldType">
      <summary>
            Represents types of <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> predefined fields.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.PageNumber">
      <summary>
            Page number.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.NumberOfPages">
      <summary>
            Total number of pages.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Date">
      <summary>
            Current date.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Time">
      <summary>
            Current time.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.SheetName">
      <summary>
            Sheet name.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FileName">
      <summary>
            File name.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FilePath">
      <summary>
            File path.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HeaderFooterPage">
      <summary>
            Represents header/footer which should be shown on a specific worksheet page (first page, even pages and all other pages).
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterPage.#ctor">
      <summary>
        <see cref="T:GemBox.Spreadsheet.HeaderFooterPage" /> constructor.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Header">
      <summary>
            Gets or sets header for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage" /> instance.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Footer">
      <summary>
            Gets or sets footer for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage" /> instance.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HeaderFooterSection">
      <summary>
            Represents <see cref="T:GemBox.Spreadsheet.HeaderFooter">header or footer</see> section.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.#ctor">
      <summary>
        <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> constructor.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String)">
      <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" />.
            </summary>
      <param name="text">Text to append.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String,GemBox.Spreadsheet.ExcelFont)">
      <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" />.
            </summary>
      <param name="text">Text to append.</param>
      <param name="font">Desired <see cref="T:GemBox.Spreadsheet.ExcelFont" /> font.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <remarks>
        <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont" /> properties:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Italic" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Color" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle" />
            </description>
          </item>
        </list>
        <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" /> to some of special commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType)">
      <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" />.
            </summary>
      <param name="fieldType">Special Header/Footer field.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType,GemBox.Spreadsheet.ExcelFont)">
      <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" />.
            </summary>
      <param name="fieldType">Special Header/Footer field.</param>
      <param name="font">&gt;Desired <see cref="T:GemBox.Spreadsheet.ExcelFont" /> font.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
      <remarks>
        <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont" /> properties:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Weight" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Italic" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.Color" />
            </description>
          </item>
          <item>
            <description>
              <see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle" />
            </description>
          </item>
        </list>
        <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content" /> to some of special string commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String)">
      <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> instance.
            </summary>
      <param name="fileName">The fileName of the file that contains picture.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String,System.Int32,System.Int32)">
      <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> instance.
            </summary>
      <param name="fileName">The fileName of the file that contains picture.</param>
      <param name="width">Picture width (in pixels).</param>
      <param name="height">Picture height (in pixels).</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat)">
      <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> instance.
            </summary>
      <param name="pictureStream">Stream of the picture to be added.</param>
      <param name="imageFormat">Picture format.</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Int32,System.Int32)">
      <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection" /> instance.
            </summary>
      <param name="pictureStream">Stream of the picture to be added.</param>
      <param name="imageFormat">Picture format.</param>
      <param name="width">Picture width (in pixels).</param>
      <param name="height">Picture height (in pixels).</param>
      <returns>A reference to this instance after the append operation has completed.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.HeaderFooterSection.Content">
      <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.HeaderFooter">header/footer</see> section content.
            </summary>
      <remarks>
        <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
        <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.FixedWidthColumn">
      <summary>
            Class that represents column in Fixed-Width Text format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthColumn.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthColumn" /> class.
            </summary>
      <param name="width">The column width.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthColumn.LoadConverter">
      <summary>
            Gets or sets the converter for converting value from file to <see cref="T:GemBox.Spreadsheet.ExcelCell" /> value when loading from Fixed-Width Text file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthColumn.SaveConverter">
      <summary>
            Gets or sets the converter for converting <see cref="T:GemBox.Spreadsheet.ExcelCell" /> value to text when saving to Fixed-Width Text file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthColumn.Width">
      <summary>
            Gets or sets a value that represents column width.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FixedWidthLoadOptions">
      <summary>
            Represents options for loading from Fixed-Width Text file format.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.LoadOptions">
      <summary>
            Represents a base class for loading options of various file formats.
            </summary>
      <remarks>
            Following classes inherit from this base class:
            <list type="bullet"><item><description><see cref="T:GemBox.Spreadsheet.XlsxLoadOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.XlsLoadOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.OdsLoadOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.CsvLoadOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.HtmlLoadOptions" /></description></item></list></remarks>
      <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Load" />
      <example>
        <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Load" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Load" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.LoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.LoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.LoadOptions.XlsxDefault">
      <summary>
            Gets the default options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.LoadOptions.XlsDefault">
      <summary>
            Gets the default options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.LoadOptions.OdsDefault">
      <summary>
            Gets the default options for loading from OpenDocument Spreadsheet file format.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.LoadOptions.CsvDefault">
      <summary>
            Gets the default options for loading from Character Separated Values file format.
            </summary>
      <remarks>
        <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.LoadOptions.HtmlDefault">
      <summary>
            Gets the default options for loading from HyperText Markup Language File (HTML) format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions" /> class.
            </summary>
      <param name="columns">The column definitions for Fixed-Width Text file.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions" /> class.
            </summary>
      <param name="columns">The column definitions for Fixed-Width Text file.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.ParseNumbers">
      <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double" /> value when loading Fixed-Width Text file. If <see langword="false" />, numbers will be loaded as strings.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Columns">
      <summary>
            Gets the list of column definitions for Fixed-Width Text file. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.StartRow">
      <summary>
            Gets or sets the index of the first row of data being loaded from Fixed-Width Text file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.FormatProvider">
      <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.FixedWidthSaveOptions">
      <summary>
            Represents options for saving to Fixed-Width Text file format.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.SaveOptions">
      <summary>
            Represents a base class for saving options of various file formats.
            </summary>
      <remarks>
            Following classes inherit from this base class:
            <list type="bullet"><item><description><see cref="T:GemBox.Spreadsheet.XlsxSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.XlsSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.OdsSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.CsvSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.HtmlSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.PdfSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.XpsSaveOptions" /></description></item><item><description><see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /></description></item></list></remarks>
      <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Save" />
      <example>
        <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Save" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Save" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.SaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.SaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.XlsxDefault">
      <summary>
            Gets the default options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.XlsDefault">
      <summary>
            Gets the default options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.OdsDefault">
      <summary>
            Gets the default options for saving to OpenDocument Spreadsheet file format.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.CsvDefault">
      <summary>
            Gets the default options for saving to Character Separated Values file format.
            </summary>
      <remarks>
        <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.HtmlDefault">
      <summary>
            Gets the default options for saving to HyperText Markup Language File format.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.PdfDefault">
      <summary>
            Gets the default options for saving to Portable Document Format file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.XpsDefault">
      <summary>
            Gets the default options for saving to XML Paper Specification file format.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.ImageDefault">
      <summary>
            Gets the default options for saving to image formats.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.Limitations">
      <summary>
            Gets limitations for saving to a file formats.
            </summary>
      <remarks>
            This is the table for all limitations of each format:
            <para><font face="Arial" size="1"><table border="1" cellpadding="5" cellspacing="0"><tr><td></td><th>Rows</th><th>Columns</th><th>Colors</th><th>CellStyles</th></tr><tr><th>XLSX</th><td>1048576</td><td>16384</td><td>16000000</td><td>64000</td></tr><tr><th>XLS</th><td>65536</td><td>256</td><td>56</td><td>3979</td></tr><tr><th>ODS</th><td>1048576</td><td>16384</td><td>16000000</td><td>64000</td></tr><tr><th>CSV</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr><tr><th>TXT</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr><tr><th>HTML</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr><tr><th>PDF</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr><tr><th>XPS</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr><tr><th>IMAGE</th><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td><td><see cref="F:System.Int32.MaxValue" /></td></tr></table></font></para></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SaveOptions.ContentType">
      <summary>
            Gets the content-type for this specific file format as defined in the RFC 2616.
            </summary>
      <value>
            The content-type for this specific file format.
            </value>
      <seealso href="https://www.ietf.org/rfc/rfc2616.txt">RFC 2616</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions" /> class.
            </summary>
      <param name="columns">The column definitions for Fixed-Width Text file.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions" /> class.
            </summary>
      <param name="columns">The column definitions for Fixed-Width Text file.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to Fixed-Width Text file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.ContentType">
      <summary>
            Gets the content-type for Fixed-Width Text file format: <b>"text/plain; charset=" + <see cref="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding" />.<see cref="P:System.Text.Encoding.WebName" /></b>.
            </summary>
      <value>
            The content-type for Fixed-Width Text file format.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Columns">
      <summary>
            Gets the List of column definitions for saving data. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.StartRow">
      <summary>
            Gets or sets the index of the first row of data being saved to Fixed-Width Text file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.FormatProvider">
      <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.HtmlSaveOptions">
      <summary>
            Represents options for saving to HyperText Markup Language File (HTML) format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryPath">
      <summary>
            Gets or sets the directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s will be physically saved.
            </summary>
      <value>
            The directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s will be physically saved.
            </value>
      <remarks>
            If value is <see langword="null" /> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images".
            This directory will be created in the same location as HTML file.
            </remarks>
      <example>
        <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryImgSrcPath">
      <summary>
            Gets or sets the pictures directory that will be used when referencing images in the HTML and Javascript.
            </summary>
      <value>
            The pictures directory that will be used when referencing images in the HTML.
            </value>
      <remarks>
            If value is <see langword="null" /> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images". 
            This directory will be created in the same location as HTML file.        
            </remarks>
      <example>
        <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.SelectionType">
      <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectorySrcPath">
      <summary>
            Gets or sets the relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files in the HTML.
            </summary>
      <value>
            The relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files in the HTML.
            </value>
      <remarks>
            If value is <see langword="null" /> or <see cref="F:System.String.Empty" /> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            </remarks>
      <example>
        <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath">
      <summary>
            Gets or sets the physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files will be saved.
            </summary>
      <value>
            The physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture" />s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />s files will be saved.
            </value>
      <remarks>
            If value is <see langword="null" /> or <see cref="F:System.String.Empty" /> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            This directory will be created in the same location as HTML file.
            </remarks>
      <example>
        <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType">
      <summary>
            Gets or sets the type of export.
            </summary>
      <value>
            The <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType" /> value for type of export.
            </value>
      <remarks>
        <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Html" /> and <see cref="F:GemBox.Spreadsheet.HtmlType.HtmlTable" /> values, pictures will be exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath" /> is specified or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.EmbedImages" /> is set to <see langword="true" />.</para>
        <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml" /> value, pictures are always exported.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.WriteCellAddress">
      <summary>
            Gets or sets a value indicating whether each td HTML element should contain data-cell attribute with cell address for this cell.
            </summary>
      <remarks>
            If the value of this property is <see langword="true" /> then each td HTML element will contain data-cell attribute with cell address for this cell (for example data-cell="A1").
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.EmbedImages">
      <summary>
            Gets or sets a value indicating whether images are embedded directly within the HTML file in form of Base64 encoding.
            </summary>
      <remarks>
            If the value of this property is <see langword="true" /> then each image element will contain raw image data in its source attribute.
            This value doesn't change the pictures export behavior when using <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml" />. 
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.ContentType">
      <summary>
            Gets the content-type for HTML file format:
            <list type="bullet"><item><description><b>message/rfc822</b> if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType" /> is <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml" />, otherwise</description></item><item><description><b>"text/html; charset=" + <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.Encoding" />.<see cref="P:System.Text.Encoding.WebName" /></b>.</description></item></list></summary>
      <value>
            The content-type for HTML file format.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the Html file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to HTML file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.SheetHeaderFooter">
      <summary>
            Represents sheet header/footer.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SheetHeaderFooter.#ctor">
      <summary>
        <see cref="T:GemBox.Spreadsheet.SheetHeaderFooter" /> constructor.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentOddEven">
      <summary>
            Gets or sets if there are different headers/footers on the even and odd pages.
            If <see langword="true" />, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header" />/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer" /> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader" />/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter" /> specify page header and footer values for odd
            and even pages. 
            If <see langword="false" /> then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header" />/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer" /> is used, even when <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader" />/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter" /> are present.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentFirst">
      <summary>
            Gets or sets if header/footer is different on the first page. 
            If <see langword="true" />, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader" /> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter" /> are on the first page.
            If <see langword="false" />, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader" /> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter" /> are ignored.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter">
      <summary>
            Gets or sets even footer.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader">
      <summary>
            Gets or sets even header.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter">
      <summary>
            Gets or sets first footer.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader">
      <summary>
            Gets or sets first header.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer">
      <summary>
            Gets or sets default footer.
            </summary>
      <remarks>
        <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
        <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd905956.aspx">Microsoft Excel documentation</see>.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Header">
      <summary>
            Gets or sets default header.
            </summary>
      <remarks>
        <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
        <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.AlignWithMargins">
      <summary>
            Gets or sets if header/footer margin will align with page margins.
            Supported in XLSX only.
            </summary>
      <remarks>
        <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.ScaleWithDoc">
      <summary>
            Gets or sets if headers/footers will be scaled with document scaling.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage">
      <summary>
            Gets or sets default header/footer.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage">
      <summary>
            Gets or sets first page header/footer.
            </summary>
      <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage" /> returns <see langword="false" />, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage" /> will be used on first page.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage">
      <summary>
            Gets or sets header/footer for even pages.
            </summary>
      <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage" /> returns <see langword="false" />, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage" /> will be used on even pages.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage">
      <summary>
            Returns <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage" /> header/footer is specified.
            </summary>
      <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage" /> returns <see langword="false" />, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage" /> will be used on first page.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage">
      <summary>
            Returns <see langword="true" /> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage" /> header/footer is specified.
            </summary>
      <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage" /> returns <see langword="false" />, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage" /> will be used on even pages.
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.PanePosition">
      <summary>
            Represents the position of the pane.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanePosition.BottomRight">
      <summary>
            Bottom right pane.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanePosition.TopRight">
      <summary>
            Top right pane.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanePosition.BottomLeft">
      <summary>
            Bottom left pane.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanePosition.TopLeft">
      <summary>
            Top left pane.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.PanesState">
      <summary>
            Represents the state of the pane.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanesState.Frozen">
      <summary>
            Panes are frozen, but were not split being frozen. In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanesState.FrozenSplit">
      <summary>
            Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PanesState.Split">
      <summary>
            Panes are split, but not frozen. In this state, the split bars are adjustable by the user.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.RowColumnResolutionMethod">
      <summary>
            Defines different methods of <see cref="T:GemBox.Spreadsheet.CellStyle" /> resolution.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
    </member>
    <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn">
      <summary>
            Row has precedence over column.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
    </member>
    <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.ColumnOverRow">
      <summary>
            Column has precedence over row.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
    </member>
    <member name="T:GemBox.Spreadsheet.ScriptPosition">
      <summary>
            Script positions used in <see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition">ExcelFont.ScriptPosition</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ScriptPosition.Normal">
      <summary>
            Normal script position.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ScriptPosition.Superscript">
      <summary>
            Displays script above normal position.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ScriptPosition.Subscript">
      <summary>
            Displays script below normal position.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HtmlLoadOptions">
      <summary>
            Represents options for loading from HyperText Markup Language File (HTML) format.
            </summary>
      <remarks>
            When importing, each paragraph will be translated to spreadsheet row.
            Text values will be merged in spreadsheet cell.
            Table rows and cells will be translated to spreadsheet rows and cells.
            All content inside table cell will be merged in spreadsheet cell, even nested tables and paragraphs.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlLoadOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseNumbers">
      <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double" /> value when loading HTML file. If <see langword="false" />, numbers will be loaded as strings.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseFormatProvider">
      <summary>
            Gets or sets the format provider for the HTML file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the HTML file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.SheetVisibility">
      <summary>
            Script positions used in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">ExcelWorksheet.Visibility</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SheetVisibility.Visible">
      <summary>
            Sheet is visible.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SheetVisibility.Hidden">
      <summary>
            Sheet is hidden, but is displayed in unhide dialog.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SheetVisibility.VeryHidden">
      <summary>
            Sheet is very hidden and can be made visible only programmatically.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.SortDescription">
      <summary>
            Specifies the column, sorting order and optional custom comparison used in <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})" /> method.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription" /> class with specified sorting column index.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex" /> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />, inclusive.
            </summary>
      <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange" /> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})" /> method has been invoked.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription" /> class with specified sorting column index and sort direction.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex" /> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex" />, inclusive.
            </summary>
      <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange" /> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})" /> method has been invoked.</param>
      <param name="isAscending">A value indicating whether sort direction is ascending or descending.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.SortDescription.ColumnRangeIndex">
      <summary>
            Gets the column index in the <see cref="T:GemBox.Spreadsheet.CellRange" /> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})" /> method has been invoked.
            </summary>
      <value>
            The column index in the <see cref="T:GemBox.Spreadsheet.CellRange" /> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})" /> method has been invoked.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.SortDescription.IsAscending">
      <summary>
            Gets a value indicating whether sort direction is ascending or descending.
            </summary>
      <value>
        <see langword="true" /> if sort direction is ascending; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.SortDescription.Comparison">
      <summary>
            Gets or sets the comparison that can be used to override default comparison.
            </summary>
      <value>
            The comparison that can be used to override default comparison.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.SpreadsheetException">
      <summary>
            Represents errors that can occur in the GemBox.Spreadsheet component. 
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException" /> class. 
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException" /> class with a specified error message. 
            </summary>
      <param name="msg">Message string.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException" /> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
      <param name="msg">Message string.</param>
      <param name="inner">Inner exception.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException" /> class with serialized data. 
            </summary>
      <param name="info">Serialization info.</param>
      <param name="context">Serialization context.</param>
    </member>
    <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlink">
      <summary>
            Hyperlink class.
            </summary>
      <remarks>
        <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
        <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.IsExternal">
      <summary>
            Defines if hyperlink location is in this excel file.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.ToolTip">
      <summary>
            Gets or sets ToolTip for hyperlink.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.Location">
      <summary>
            Gets or sets the location string for hyperlink.
            <remarks>URL have to be in escaped format(You can use<see cref="M:System.Uri.EscapeUriString(System.String)">System.Uri.EscapeUriString</see> method).</remarks></summary>
    </member>
    <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection">
      <summary>
            Collection of hyperlinks (<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink" />).
            </summary>
      <remarks>
        <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
        <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Clear">
      <summary>
            Removes all hyperlinks. 
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the SpreadsheetHyperlink at the specified index.
            </summary>
      <param name="index">The zero-based index of the page break to remove.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator for the collection.
            </summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Count">
      <summary>
            Gets the number of hyperlinks contained in the collection. 
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.UnderlineStyle">
      <summary>
            Underline styles used in <see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle">ExcelFont.UnderlineStyle</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.UnderlineStyle.None">
      <summary>
            No underline.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.UnderlineStyle.Single">
      <summary>
            Single underline. Underlines only cell data.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.UnderlineStyle.Double">
      <summary>
            Double underline. Underlines only cell data.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.UnderlineStyle.SingleAccounting">
      <summary>
            Single accounting underline. Underlines whole cell.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.UnderlineStyle.DoubleAccounting">
      <summary>
            Double accounting underline. Underlines whole cell.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.FontSettings">
      <summary>
            Contains font related settings which are used when printing a spreadsheet or exporting a spreadsheet to a file format that requires font information.
            </summary>
      <remarks>
            Setting the custom fonts location is usually used in medium trust environments to bypass file system operations restrictions imposed for file locations that are not under the application's jurisdiction.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseUri">
      <summary>
            Gets or sets base <see cref="T:System.Uri" /> where component looks for fonts. <see cref="T:System.Uri" /> path should end with <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseDirectory">
      <summary>
            Gets or sets base directory path where component looks for fonts. Directory path can be absolute or relative to <see cref="M:System.IO.Directory.GetCurrentDirectory" />.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FreeLimitEventArgs">
      <summary>
            Provides data for the <see cref="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached" /> event.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction">
      <summary>
            Gets or sets the choice for proceeding when free limit is reached.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.File">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ExcelFile" /> on which limit was reached.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FreeLimitReachedAction">
      <summary>
            Type of action that can be chosen when free limit is reached.
            </summary>
      <example>
        <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PerformanceCounter" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PerformanceCounter" />
      </example>
    </member>
    <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ThrowException">
      <summary>
            Throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop">
      <summary>
            Stop reading/writing.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial">
      <summary>
            Continue reading/writing using trial mode.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FreeLimitReachedException">
      <summary>
            Exception that occurs when free limit is reached.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.HtmlType">
      <summary>
            Defines type of HTML export.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HtmlType.Html">
      <summary>
            Export entire HTML document. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath" /> is specified.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HtmlType.HtmlTable">
      <summary>
            Export HTML table and its content. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath" /> is specified.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.HtmlType.Mhtml">
      <summary>
            Export entire HTML document and images to MIME HTML (MHTML) format. Pictures are always exported.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.CellStyleCollection">
      <summary>
            Represents a collection of named (master) <see cref="T:GemBox.Spreadsheet.CellStyle" />s.
            </summary>
      <remarks>
            Used as a container for a <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles" /> property.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.CellStyleCollection.Add(System.String)">
      <summary>
            Adds an empty <see cref="T:GemBox.Spreadsheet.CellStyle" /> instance to the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />.
            </summary>
      <param name="name">The name of new <see cref="T:GemBox.Spreadsheet.CellStyle" /> instance.</param>
      <returns>New <see cref="T:GemBox.Spreadsheet.CellStyle" /> instance that is added to this collection.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellStyleCollection.Contains(System.String)">
      <summary>
            Determines whether the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" /> contains a <see cref="T:GemBox.Spreadsheet.CellStyle" /> instance with specific name.
            </summary>
      <param name="styleName">Name of the <see cref="T:GemBox.Spreadsheet.CellStyle" /> to locate in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />.</param>
      <returns>
        <see langword="true" /> if <see cref="T:GemBox.Spreadsheet.CellStyle" /> instance with speficic name is found in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:GemBox.Spreadsheet.CellStyleCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&gt;CellStyle&lt;</see> that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection" />.
            </returns>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyleCollection.Count">
      <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.CellStyle" />s contained in the collection. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given name.
            </summary>
      <remarks>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given name.
            If <see cref="T:GemBox.Spreadsheet.CellStyleCollection" /> doesn't contain correspondent style, then new style will be added and returned. 
            </remarks>
      <param name="styleName">The name of the <see cref="T:GemBox.Spreadsheet.CellStyle" />.</param>
      <returns>
        <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given name.</returns>
    </member>
    <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(GemBox.Spreadsheet.BuiltInCellStyleName)">
      <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.
            </summary>
      <remarks>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.
            If <see cref="T:GemBox.Spreadsheet.CellStyleCollection" /> doesn't contain correspondent style, then new style will be added and returned. 
            </remarks>
      <param name="styleName">The <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName" /> of the <see cref="T:GemBox.Spreadsheet.CellStyle" />.</param>
      <returns>
        <see cref="T:GemBox.Spreadsheet.CellStyle" /> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.</returns>
    </member>
    <member name="T:GemBox.Spreadsheet.ExtractDataOptions">
      <summary>
            Options specified when extracting data to <see cref="T:System.Data.DataTable" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataOptions.None">
      <summary>
            None of the options is set. 
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataOptions.StopAtFirstEmptyRow">
      <summary>
            Extracting data stops at the first empty row.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataOptions.SkipEmptyRows">
      <summary>
            When extracting data, skip all empty rows.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExtractToDataTableOptions">
      <summary>
            Represents options for extracting data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" />.
            </summary>
      <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)" />
      <example>
        <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" />.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="ExtractDataEvent" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="ExtractDataEvent" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" /> class.
            </summary>
      <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.String,System.Int32)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" /> class.
            </summary>
      <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartRow">
      <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn">
      <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn" /> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection" /> has any values.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.NumberOfRows">
      <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection">
      <summary>
            Gets the collection used for mapping <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> columns to <see cref="T:System.Data.DataTable" /> columns.
            </summary>
      <remarks>
        <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn" /> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection" /> has any values.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions">
      <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions" />.
            </summary>
      <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None" />.
            </remarks>
    </member>
    <member name="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting">
      <summary>
            Event that fires when converting <see cref="T:GemBox.Spreadsheet.ExcelCell" /> value to <see cref="T:System.Data.DataTable" /> cell value.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs">
      <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting" /> event.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable">
      <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" /></summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableRowIndex">
      <summary>
            Gets the source row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableColumnIndex">
      <summary>
            Gets the source column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableValue">
      <summary>
            Gets the source value from <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet">
      <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelRowIndex">
      <summary>
            Gets the destination row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelColumnIndex">
      <summary>
            Gets the destination column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell">
      <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCellValue">
      <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" />.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.DataValidation">
      <summary>
            A single item of data validation defined on ranges of the worksheet.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation" /> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
      <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange" />s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges" /> collection of this data validation.</param>
      <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange" />s.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation" /> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
      <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange" />s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges" /> collection of this data validation.</param>
      <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange" />s.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.CellRange})">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation" /> class with specified cell ranges on which this data validation will be applied.
            </summary>
      <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.CellRange[])">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation" /> class with specified cell ranges on which this data validation will be applied.
            </summary>
      <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.Type">
      <summary>
            Gets or sets the type of data validation.
            </summary>
      <value>
            The type of data validation.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.Operator">
      <summary>
            Gets or sets the relational operator used with this data validation.
            </summary>
      <value>
            The relational operator used with this data validation.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.IgnoreBlank">
      <summary>
            Gets or sets a value indicating whether the data validation treats empty or blank entries as 
            valid. <see langword="true" /> means empty entries are OK and do not violate the validation constraints.
            </summary>
      <value>
        <see langword="true" /> if empty entries are OK and do not violate the validation constraints; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.InCellDropdown">
      <summary>
            Gets or sets a value indicating whether to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List" /> data validation type.
            </summary>
      <value>
        <see langword="true" /> to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List" /> data validation type; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.Formula1">
      <summary>
            Gets or sets the first formula in the DataValidation dropdown.
            </summary>
      <value>
            The first formula in the DataValidation dropdown.
            </value>
      <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between" /> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween" /> relational
            operators, and the only formula used for other relational operators (<see cref="F:GemBox.Spreadsheet.DataValidationOperator.Equal" />, 
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual" />, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThan" />, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual" />,
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan" />, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual" />), 
            or for <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom" /> or <see cref="F:GemBox.Spreadsheet.DataValidationType.List" /> data validation type.
            The content can be an instance of any type, but the following rules apply when formula is being written:
            <list type="table"><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.WholeNumber" /> or <see cref="F:GemBox.Spreadsheet.DataValidationType.TextLength" />, and content is integral data type
            (<see cref="T:System.SByte" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, 
            <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />), formula will be saved as integral constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String" /> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Decimal" />, and content is floating-point data type (<see cref="T:System.Single" />,
            <see cref="T:System.Double" />, <see cref="T:System.Decimal" />), formula will be saved as floating-point constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String" /> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Date" />, and content is <see cref="T:System.DateTime" /> data type, formula will be saved as 
            date constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String" /> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Time" />, and content is <see cref="T:System.TimeSpan" /> data type, formula will be saved as
            time constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String" /> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.List" />, and content is any type that implements <see cref="T:System.Collections.IEnumerable" />, 
            formula will be saved as list series (comma seperated values), else if formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String" /> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom" />, and formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String" /> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item><item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.None" />, formula won't be saved.
            </description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.Formula2">
      <summary>
            Gets or sets the second formula in the DataValidation dropdown.
            </summary>
      <value>
            The second formula in the DataValidation dropdown.
            </value>
      <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between" /> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween" /> relational operators only.
            For the information about the content, see <see cref="P:GemBox.Spreadsheet.DataValidation.Formula1" /> remarks.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.ShowInputMessage">
      <summary>
            Gets or sets a value indicating whether to display the input prompt message.
            </summary>
      <value>
        <see langword="true" /> to display the input prompt message; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.InputMessageTitle">
      <summary>
            Gets or sets the title bar text of input prompt.
            </summary>
      <value>
            The title bar text of input prompt.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.InputMessage">
      <summary>
            Gets or sets the message text of input prompt.
            </summary>
      <value>
            The message text of input prompt.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.ShowErrorAlert">
      <summary>
            Gets or sets a value indicating whether to display the error alert message when an invalid
            value has been entered, according to the criteria specified.
            </summary>
      <value>
        <see langword="true" /> to display the error alert message when an invalid
            value has been entered; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.ErrorStyle">
      <summary>
            Gets or sets the style of error alert used for this data validation.
            </summary>
      <value>
            The style of error alert used for this data validation.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.ErrorTitle">
      <summary>
            Gets or sets the title bar text of error alert.
            </summary>
      <value>
            The title bar text of error alert.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.ErrorMessage">
      <summary>
            Gets or sets the message text of error alert.
            </summary>
      <value>
            The message text of error alert.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.DataValidation.CellRanges">
      <summary>
            Gets the ranges over which data validation is applied.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelCell">
      <summary>
            Excel cell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
      <remarks>
        <para>Merged range is created by using <see cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</see> property. 
            See the property documentation for more information on merging.</para>
      </remarks>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelCell.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
      <summary>
            Sets borders on this cell or on merged range if this cell is merged.
            </summary>
      <param name="multipleBorders">Borders to set.</param>
      <param name="lineColor">Line color.</param>
      <param name="lineStyle">Line style.</param>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelCell.ConvertExcelNumberToDateTime(System.Double,System.Boolean)">
      <summary>
            Converts Excel floating-point number to <see cref="T:System.DateTime" /> structure.
            </summary>
      <remarks>
        <para>
            Excel file format doesn't have a separate data type for date and time. 
            <see cref="T:System.DateTime" /> value is
            stored as IEEE number encoded in a special way. When reading Excel file, 
            <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> is examined and if it matches 
            some of date/time number formats cell value is interpreted as <see cref="T:System.DateTime" />.</para>
        <para>However, if some non-standard date/time number format is used, cell value will not be recognized 
            as <see cref="T:System.DateTime" /> but as ordinary number. In such cases (when you know that
            specific cell holds <see cref="T:System.DateTime" /> value but you get a number when reading
            Excel file) use this method to convert IEEE number to <see cref="T:System.DateTime" /> 
            structure.</para>
      </remarks>
      <param name="num">Excel floating-point number.</param>
      <param name="use1904DateSystem">True to use 1904 date system.</param>
      <returns>Converted DateTime structure.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelCell.GetFormattedValue">
      <summary>
            Converts <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value</see> of this <see cref="T:GemBox.Spreadsheet.ExcelCell" /> instance to string representation using <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> 
            that is specified on this <see cref="T:GemBox.Spreadsheet.ExcelCell" /> instance.
            </summary>
      <returns>Formatted <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value.</see></returns>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.Value">
      <summary>
            Gets or sets value of this cell or of merged range if this cell is merged.
            </summary>
      <remarks>
        <para>Exception is thrown if value for the set is not of supported type (See 
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</see> for details).</para>
        <para>Note that the fact some type is supported doesn't mean it is written to Excel file in the native format. As
            Microsoft Excel has just few basic types, the object of supported type will be converted to a similar excel type. 
            If similar excel type doesn't exist, value is written as a string value.</para>
        <para>If the value of this property is of <see cref="T:System.DateTime" /> type and 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" /> number format is not set, ISO date/time 
            format will be used as <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> 
            value.</para>
      </remarks>
      <exception cref="T:System.NotSupportedException">Value is not supported.</exception>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange" />
      <seealso cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</seealso>
      <seealso cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.Style">
      <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle" />) of this cell or 
            of merged range if this cell is merged.
            </summary>
      <remarks>
            Unset style properties will be inherited from corresponding row or column. See
            <see cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for more details.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange" />
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.IsStyleDefault">
      <summary>
            Returns <see langword="true" /> if style is default; otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.MergedRange">
      <summary>
            Returns associated merged range if the cell is merged; otherwise, <see langword="null" />.
            </summary>
      <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.Formula">
      <summary>
            Gets or sets cell formula string.
            </summary>
      <remarks>
        <para>GemBox.Spreadsheet can read and write formulas, but cannot calculate formula results. However, when you 
            open a file in MS Excel, formula results will be calculated automatically.</para>
        <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
        <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
        <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
        <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
        <para>Currently supported formula features by GemBox.Spreadsheet XLS formula parser are:
            <list type="bullet"><item><description>Named cell</description></item><item><description>Named range</description></item><item><description>Absolute cell/range</description></item><item><description>Relative cell/range</description></item><item><description>Functions( partly, see the list of supported functions below )</description></item><item><description>Missed argument</description></item><item><description>Unary operator</description></item><item><description>Binary operator</description></item><item><description>Parentheses</description></item><item><description>3d cell reference</description></item><item><description>3d cell range reference</description></item><item><description>Boolean</description></item><item><description>Integer</description></item><item><description>Float</description></item><item><description>String</description></item><item><description>Error</description></item></list></para>
        <para>
            Currently unsupported formula features are:
            <list type="bullet"><item><description>Const array</description></item><item><description>Array formula</description></item><item><description>R1C1 reference</description></item></list></para>
        <para>
            Currently supported functions are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGE, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
        <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
      </remarks>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
            NamedRangeCollection.Add</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.Comment">
      <summary>
            Gets or sets cell comment.
            </summary>
      <remarks>
        <para>
            You can set comment text, set whether comment will be visible during loading xls file or not.
            Additinally you can get column or row of the excel cell to which this comment is assigned.
            </para>
        <para>
            Supported only in xlsx.
            </para>
      </remarks>
      <example>
        <para>Following code demonstrates how to use comments. It shows next features:</para>
        <list type="number">
          <item>comment text setting</item>
          <item>comment IsVisible property in action</item>
        </list>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Comment" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.HasComment">
      <summary>
            If cell has comment returns true, else returns false.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.Hyperlink">
      <summary>
            Gets or sets cell hyperlink.
            </summary>
      <remarks>
        <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
        <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelCell.HasHyperlink">
      <summary>
            If cell has hyperlink returns true, else returns false.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelComment">
      <summary>
            Represents a comment object used by <see cref="P:GemBox.Spreadsheet.ExcelCell.Comment" /> in the worksheet.
            </summary>
      <remarks>Supported only in xlsx.</remarks>
      <example>
        <para>Following code demonstrates how to use comments. It shows next features:</para>
        <list type="number">
          <item>comment text setting</item>
          <item>comment IsVisible property in action</item>
        </list>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Comment" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelComment.Text">
      <summary>
            Gets the comment text assigned to excel cell
            </summary>
      <value>The comment text assigned to excel cell.</value>
      <example>
        <para>Following code demonstrates how to use comments. It shows next features:</para>
        <list type="number">
          <item>comment text setting</item>
          <item>comment IsVisible property in action</item>
        </list>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Comment" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelComment.Author">
      <summary>
            Gets or sets comment author.
            </summary>
      <value>Comment author.</value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelComment.IsVisible">
      <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
      <value>
        <see langword="true" /> if this instance is visible; otherwise, <see langword="false" />.
            </value>
      <example>
        <para>Following code demonstrates how to use comments. It shows next features:</para>
        <list type="number">
          <item>comment text setting</item>
          <item>comment IsVisible property in action</item>
        </list>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Comment" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelComment.TopLeftCell">
      <summary>
            Gets or sets the top left anchor cell for the comment shape.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelComment.BottomRightCell">
      <summary>
            Gets or sets the bottom right anchor cell for the comment shape.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelFile">
      <summary>
            Excel file contains one or more worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />)
            and workbook related properties and methods.
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet" />
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColors">
      <summary>
            Maximum number of colors in XLS (BIFF8) file.
            </summary>
      <remarks>
            This number includes 8 default colors:
            <see cref="P:System.Drawing.Color.Black">Color.Black</see>, 
            <see cref="P:System.Drawing.Color.White">Color.White</see>,
            <see cref="P:System.Drawing.Color.Red">Color.Red</see>, 
            <see cref="P:System.Drawing.Color.Green">Color.Green</see>,
            <see cref="P:System.Drawing.Color.Blue">Color.Blue</see>, 
            <see cref="P:System.Drawing.Color.Yellow">Color.Yellow</see>,
            <see cref="P:System.Drawing.Color.Magenta">Color.Magenta</see> and
            <see cref="P:System.Drawing.Color.Cyan">Color.Cyan</see>.
            </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsCellStyles">
      <summary>
            Maximum number of user-defined cell styles in XLS (BIFF8) file.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">
      <summary>
            Maximum number of rows in XLS (BIFF8) file.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">
      <summary>
            Maximum number of columns in XLS (BIFF8) file.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxRows">
      <summary>
            Maximum number of rows in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">ExcelFile.MaxXlsRows</see>.
            </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">
      <summary>
            Maximum number of columns in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">ExcelFile.MaxXlsColumns</see>.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.#ctor">
      <summary>
            Initializes an empty (no worksheets) instance of the ExcelFile class.
            </summary>
      <remarks>
        <para>To add new worksheets to a blank file use <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
            Worksheets</see> property, <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)" /> method.</para>
        <para>To load / read a spreadsheet from a file or a stream, use static <see cref="O:GemBox.Spreadsheet.ExcelFile.Load" /> methods.</para>
        <para>To save / write a spreadsheet to a file or a stream use <see cref="O:GemBox.Spreadsheet.ExcelFile.Save" /> methods.</para>
      </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String)">
      <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
      <param name="path">The path from which to load a spreadsheet.</param>
      <returns>A loaded spreadsheet.</returns>
      <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.LoadOptions" />
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)" /> method.
            <para>Following file extensions are supported:</para><list type="bullet"><item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item><item><description>OpenDocument Spreadsheet: .ods, .ots</description></item><item><description>Character Separated Values: .csv, .tsv</description></item><item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item></list></remarks>
      <example>
        <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Load" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Load" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)">
      <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
      <param name="path">The path from which to load a spreadsheet.</param>
      <param name="options">The loading options which can be used to define settings for load operation.</param>
      <returns>A loaded spreadsheet.</returns>
      <example>
        <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Load" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Load" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.Stream,GemBox.Spreadsheet.LoadOptions)">
      <summary>
            Loads a spreadsheet from the specified stream.
            </summary>
      <param name="stream">The stream from which to load a spreadsheet.</param>
      <param name="options">The loading options which can be used to define settings for load operation.</param>
      <returns>A loaded spreadsheet.</returns>
      <example>
        <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Load" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Load" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.TextReader,GemBox.Spreadsheet.CsvLoadOptions)">
      <summary>
            Loads a spreadsheet from CSV data using the specified reader.
            </summary>
      <param name="reader">The reader which is used to load a spreadsheet.</param>
      <param name="options">The CSV loading options which can be used to define settings for load operation.</param>
      <returns>A loaded spreadsheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.XlsxLoadOptions)">
      <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
      <param name="path">The path from which to load a spreadsheet.</param>
      <param name="options">The XLSX loading options which can be used to define settings for load operation.</param>
      <returns>A loaded XLSX spreadsheet.</returns>
      <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with this method.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.OdsLoadOptions)">
      <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
      <param name="path">The path from which to load a spreadsheet.</param>
      <param name="options">The ODS loading options which can be used to define settings for load operation.</param>
      <returns>A loaded ODS spreadsheet.</returns>
      <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)">
      <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
      <param name="path">The path to which to save the spreadsheet.</param>
      <remarks>
            File extension that is extracted from the <paramref name="path" /> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.SaveOptions" />
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)" /> method.
            <para>Following file extensions are supported:</para><list type="bullet"><item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item><item><description>OpenDocument Spreadsheet: .ods, .ots</description></item><item><description>Character Separated Values: .csv, .tsv</description></item><item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item><item><description>Portable Document Format: .pdf</description></item><item><description>XML Paper Specification: .xps</description></item><item><description>Image: .bmp, .gif, .jpg, .jpeg, .png, .tif, .tiff, .wdp</description></item></list></remarks>
      <example>
        <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Save" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Save" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
      <param name="path">The path to which to save the spreadsheet.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <example>
        <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Save" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Save" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.Stream,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the spreadsheet to the specified stream.
            </summary>
      <param name="stream">The stream to which to save the spreadsheet.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <example>
        <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to specified file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Save" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Save" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.TextWriter,GemBox.Spreadsheet.CsvSaveOptions)">
      <summary>
            Save the spreadsheet to CSV format using the specified writer.
            </summary>
      <param name="writer">The writer which is used to save the spreadsheet.</param>
      <param name="options">The CSV saving options which can be used to define settings for save operation.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Xml.XmlWriter,GemBox.Spreadsheet.HtmlSaveOptions)">
      <summary>
            Save the spreadsheet to HTML format using the specified writer.
            </summary>
      <param name="writer">The writer which is used to save the spreadsheet.</param>
      <param name="options">The HTML saving options which can be used to define settings for save operation.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String)">
      <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is resolved from <paramref name="fileName" /> extension. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
      <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
      <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
      <exception cref="T:System.InvalidOperationException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)" /> method overload instead.</exception>
      <remarks>
        <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note>
        <para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="http://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
        <para>For supported file extensions, see remarks for <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)" /> method.</para>
      </remarks>
      <example>
        <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms" />
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms2" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="Mvc" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="Mvc" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC Web API</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/ASP.NET/ASP.NET">ASP.NET Sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)">
      <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is defined with <paramref name="options" /> parameter. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
      <param name="httpResponse">System.Web.HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or System.Web.HttpResponseBase object or System.Net.Http.HttpResponseMessage object.</param>
      <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>
        <note type="note">
      Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).
    </note>
        <para>
      This method accepts <see cref="T:System.Object" /> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> or <see href="http://msdn.microsoft.com/en-us/library/system.net.http.httpresponsemessage.aspx">HttpResponseMessage</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> or <b>System.Net.Http</b> assemblies and could not be used in applications which target <i>Client Profile .NET Framework</i>.
    </para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.
    </para>
      </remarks>
      <example>
        <para>Following examples show how to stream spreadsheet to a client's browser using various ASP.NET technologies.</para>
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms" />
        <para>
        </para>
        <para>
          <b>ASP.NET Web Forms</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">System.Web.UI.Page</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="WebForms2" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="WebForms2" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.mvc.controller.aspx">System.Web.Mvc.Controller</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="Mvc" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="Mvc" />
        <para>
        </para>
        <para>
          <b>ASP.NET MVC Web API</b>
        </para>
        <para>
        Method is defined inside a class that derives from <see href="http://msdn.microsoft.com/en-us/library/system.web.http.apicontroller.aspx">System.Web.Http.ApiController</see>.
      </para>
        <code language="c#" source="Samples\CSharp\AspNetTechnologies.cs" region="MvcWebApi" />
        <code language="vb" source="Samples\Vb\AspNetTechnologies.vb" region="MvcWebApi" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/ASP.NET/ASP.NET">ASP.NET Sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
      <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
      <param name="path">Path of output directory</param>
      <param name="options">Advanced save options.</param>
      <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.OdsSaveOptions)">
      <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
      <param name="path">Path of output directory.</param>
      <param name="options">Advanced save options.</param>
      <remarks>
            You need to use external ZIP library to package all created files to ODS file.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.ConvertToXpsDocument(GemBox.Spreadsheet.XpsSaveOptions)">
      <summary>
            Converts this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> instance.
            </summary>
      <param name="options">The options used when converting to XML Paper Specification (XPS) document.</param>
      <returns>A New <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> instance created from this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance.</returns>
      <seealso cref="T:GemBox.Spreadsheet.XpsSaveOptions" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.ConvertToImageSource(GemBox.Spreadsheet.ImageSaveOptions)">
      <summary>
            Converts single page specified in <paramref name="options" /> of this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance to an <see cref="T:System.Windows.Media.ImageSource" /> instance.
            </summary>
      <param name="options">The options used when converting a single spreadsheet's page to an image.</param>
      <returns>A new <see cref="T:System.Windows.Media.ImageSource" /> instance created from a single spreadsheet's page specified in <paramref name="options" />.</returns>
      <seealso cref="T:GemBox.Spreadsheet.ImageSaveOptions" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Print">
      <summary>
            Prints the document to the default printer.
            </summary>
      <example>
        <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Print" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Print" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String)">
      <summary>
            Prints the document to the specified printer.
            </summary>
      <param name="printerName">Printer name.</param>
      <example>
        <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Print" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Print" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String,GemBox.Spreadsheet.PrintOptions)">
      <summary>
            Prints the document to the specified printer according to specified options.
            </summary>
      <param name="printerName">Printer name.</param>
      <param name="options">Print options.</param>
      <example>
        <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Print" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Print" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">
      <summary>
            Gets a value indicating whether the objects of specified type can be assigned 
            to <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see> property.
            </summary>
      <param name="type">Queried type.</param>
      <remarks>
            Currently supported types are:
            <list type="bullet"><item><description>System.DBNull</description></item><item><description>System.Byte</description></item><item><description>System.SByte</description></item><item><description>System.Int16</description></item><item><description>System.UInt16</description></item><item><description>System.Int64</description></item><item><description>System.UInt64</description></item><item><description>System.UInt32</description></item><item><description>System.Int32</description></item><item><description>System.Single</description></item><item><description>System.Double</description></item><item><description>System.Boolean</description></item><item><description>System.Char</description></item><item><description>System.Text.StringBuilder</description></item><item><description>System.Decimal</description></item><item><description>System.DateTime</description></item><item><description>System.String</description></item></list></remarks>
      <returns>
        <see langword="true" /> if the specified type is supported; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.Stream)">
      <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
      <remarks>
            This method counts the number of occurrences of the most common separators (',', ';', '\t')
            and returns one that has occurred the most times in first 5 rows. 
            </remarks>
      <param name="stream">Input Stream.</param>
      <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurance, returns first of them.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.StreamReader,System.Int32,System.Char[])">
      <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
      <remarks>
            This method counts the number of occurrences of chars that are specified in the 
            array possibleSeparators, and returns one that has occurred the most times in first rowsToTest rows of StreamReader sr. 
            </remarks>
      <param name="sr">Input StreamReader.</param>
      <param name="rowsToTest">Number of rows to test.</param>
      <param name="possibleSeparators">Chars that can be CSV separators.</param>
      <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurance, returns first of them.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
      <overloads>Loads the existing XLSX file or stream. <b>(.NET 3.0 and greater only)</b></overloads>
      <summary>
            Loads the existing XLSX file. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
        <para>
          <b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b>
        </para>
      </remarks>
      <param name="path">Existing XLSX file name (opened for reading).</param>
      <param name="xlsxOptions">XLSX options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxOptions)">
      <summary>
            Loads the existing XLSX file from the input stream. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
        <para>
          <b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b>
        </para>
      </remarks>
      <param name="stream">Input stream.</param>
      <param name="xlsxOptions">XLSX options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsxFromDirectory(System.String,GemBox.Spreadsheet.XlsxOptions)">
      <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
      <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with LoadXlsxFromDirectory method.
            </remarks>
      <param name="path">Path of input directory.</param>
      <param name="xlsxOptions">XLS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.ClosePreservedXlsx">
      <summary>
            Closes preserved XLSX file handle if needed 
            (<see cref="F:GemBox.Spreadsheet.XlsxOptions.PreserveKeepOpen">XlsxOptions.PreserveKeepOpen</see> was
            used with <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
            ExcelFile.LoadXlsx(string,XlsxOptions)</see> method). <b>(.NET 3.0 and greater only)</b></summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String)">
      <overloads>Saves all data to a file or stream in XLSX format. <b>(.NET 3.0 and greater only)</b></overloads>
      <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
        <para>
          <b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b>
        </para>
      </remarks>
      <param name="path">File name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
      <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
            /// <para><b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para></remarks>
      <param name="path">File name.</param>
      <param name="options">Advanced save options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream)">
      <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
        <para>
          <b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b>
        </para>
      </remarks>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxSaveOptions)">
      <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b></summary>
      <remarks>
        <para>
          <b>This method throws <see cref="T:System.NotImplementedException" /> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b>
        </para>
      </remarks>
      <param name="stream">Output stream.</param>
      <param name="options">Advanced save options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String)">
      <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
      <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
      <param name="path">Path of output directory.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
      <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
      <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
      <param name="path">Path of output directory</param>
      <param name="options">Advanced save options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String)">
      <overloads>Loads the existing XLS file or stream.</overloads>
      <summary>
            Loads the existing XLS file (preserving MS Excel records).
            </summary>
      <param name="path">Existing XLS file name (opened for reading).</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String,GemBox.Spreadsheet.XlsOptions)">
      <summary>
            Loads the existing XLS file (optionally preserving MS Excel records).
            </summary>
      <remarks>
        <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions" /> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
        <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
      </remarks>
      <param name="path">Existing XLS file name (opened for reading).</param>
      <param name="xlsOptions">XLS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream)">
      <summary>
            Loads the existing XLS file from the input stream (preserving MS Excel records).
            </summary>
      <param name="stream">Input stream.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream,GemBox.Spreadsheet.XlsOptions)">
      <summary>
            Loads the existing XLS file from the input stream (optionally preserving MS Excel records).
            </summary>
      <remarks>
        <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions" /> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
        <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
      </remarks>
      <param name="stream">Input stream.</param>
      <param name="xlsOptions">XLS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
      <overloads>Saves all data to a file or stream in XLS format.</overloads>
      <summary>
            Saves all data to a new file in XLS format.
            </summary>
      <param name="path">File name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.IO.Stream)">
      <summary>
            Saves all data to an output stream in XLS format.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.String,GemBox.Spreadsheet.OdsOptions)">
      <overloads>Loads the existing ODS file.</overloads>
      <summary>
            Loads the existing ODS file.
            </summary>
      <param name="path">Existing ODS file name.</param>
      <param name="odsOptions">ODS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.IO.Stream,GemBox.Spreadsheet.OdsOptions)">
      <summary>
            Loads the existing ODS file from the input stream.
            </summary>
      <param name="stream">Input stream (opened for reading).</param>
      <param name="odsOptions">ODS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOdsFromDirectory(System.String,GemBox.Spreadsheet.OdsOptions)">
      <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
      <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
      <param name="path">Path of input directory.</param>
      <param name="odsOptions">ODS options.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.String)">
      <overloads>Saves all data to a new file in ODF format.</overloads>
      <summary>
            Saves all data to a new file in ODF format.
            </summary>
      <param name="path">File name.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.IO.Stream)">
      <summary>
            Saves all data to an output stream in ODF format.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOdsToDirectory(System.String)">
      <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
      <remarks>
            You need to use external ZIP library to package all created files to ODS file.
            </remarks>
      <param name="path">Path of output directory.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
      <overloads>Loads the existing CSV file or stream.</overloads>
      <summary>
            Loads the existing stream with specified CSV format.
            </summary>
      <param name="stream">Input stream.</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,System.Char)">
      <summary>
            Loads the existing stream, using specified character as a delimiter.
            </summary>
      <param name="stream">Input stream.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,GemBox.Spreadsheet.CsvType)">
      <summary>
            Loads all data using specified StreamReader and CSV Type.
            </summary>
      <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
      <param name="reader">Stream reader.</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,System.Char)">
      <summary>
            Loads all data using specified StreamReader and character delimiter.
            </summary>
      <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
      <param name="reader">Stream reader.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,GemBox.Spreadsheet.CsvType)">
      <summary>
            Loads the existing file with specified CSV format.
            </summary>
      <param name="path">Existing CSV file name (opened for reading).</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)">
      <summary>
            Loads the existing file, using specified character as a delimiter.
            </summary>
      <param name="path">File name.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
      <overloads>Saves all data to a new file or stream in CSV format.</overloads>
      <summary>
            Saves all data to a stream in a specified CSV format.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,System.Char)">
      <summary>
            Saves all data to a stream, using specified character as a delimiter.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,GemBox.Spreadsheet.CsvType)">
      <summary>
            Saves all data using specified TextWriter and CSV Type.
            </summary>
      <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
      <param name="writer">Text writer.</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,System.Char)">
      <summary>
            Saves all data using specified TextWriter and character delimiter.
            </summary>
      <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
      <param name="writer">Text writer.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,GemBox.Spreadsheet.CsvType)">
      <summary>
            Saves all data to a new file in a specified CSV format.
            </summary>
      <param name="path">File name.</param>
      <param name="csvType">CSV type.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)">
      <summary>
            Saves all data to a new file, using specified character as a delimiter.
            </summary>
      <param name="path">File name.</param>
      <param name="separator">Separator used for delimiting data values.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToHttpResponse(System.Object,System.String,System.Object[])">
      <summary>
            Saves the <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to a System.Web.HttpResponse output stream and sets appropriate HTTP response headers. Use this method in ASP.NET application to send the document to a client browser. File format is resolved from <paramref name="options" /> parameter or <paramref name="fileName" /> parameter file extension as described in remarks. See remarks why <paramref name="httpResponse" /> parameter is of type <see cref="T:System.Object" />.
            </summary>
      <param name="httpResponse">HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes.</param>
      <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
      <param name="options">The saving options which can be used to define settings for save operation.</param>
      <remarks>
        <para>This method accepts <see cref="T:System.Object" /> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> assembly and could not be used in applications which target <i>Client Profile .NET Framework</i>.</para>
        <para>
          <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.</para>
        <para>File format in which <see cref="T:GemBox.Spreadsheet.ExcelFile" /> will be saved depends on the type of the first item in <paramref name="options" /> array as follows:</para>
        <list type="bullet">
          <item>
            <description>if <paramref name="options" /> array first item is of type <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions" />, <see cref="T:GemBox.Spreadsheet.ExcelFile" /> will be saved in Microsoft Excel 2007 format,</description>
          </item>
          <item>
            <description>otherwise if <paramref name="options" /> array first item is of type <see cref="T:GemBox.Spreadsheet.CsvType" /> or <see cref="T:System.Char" />, <see cref="T:GemBox.Spreadsheet.ExcelFile" /> will be saved in Character separated value format,</description>
          </item>
          <item>
            <description>otherwise if <paramref name="options" /> array first item is of type <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions" />, <see cref="T:GemBox.Spreadsheet.ExcelFile" /> will be saved in HyperText Markup Language format,</description>
          </item>
          <item>
            <description>otherwise, file format in which <see cref="T:GemBox.Spreadsheet.ExcelFile" /> is saved is resolved based on <paramref name="fileName" /> parameter file extension.</description>
          </item>
        </list>
        <para>Following file extensions are supported:</para>
        <list type="bullet">
          <item>
            <description>Microsoft Excel 2007 formats: .xlsx, .xlsm, .xltm, .xltx</description>
          </item>
          <item>
            <description>Microsoft Excel 97-2003 formats: .xls, .xlt</description>
          </item>
          <item>
            <description>Character separated value formats: .csv, .tsv</description>
          </item>
          <item>
            <description>OpenDocument Spreadsheet formats: .ods, .ots</description>
          </item>
          <item>
            <description>HyperText Markup Language formats: .htm, .html</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
      <summary>
            Collection of all worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />) in a workbook. 
            </summary>
      <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">
      <summary>
            Gets or sets the <see cref="T:GemBox.Spreadsheet.CellStyle" /> resolution method.
            </summary>
      <remarks>
        <para>
            Because of limitations of Microsoft Excel file format, every cell must be written to file with
            resolved <see cref="T:GemBox.Spreadsheet.CellStyle" />. In the case where a cell doesn't 
            have specific property set on its <see cref="P:GemBox.Spreadsheet.ExcelCell.Style" /> and that 
            property is set on both row and column that contain that cell, a cell will inherit property value 
            from row or column <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style" />, depending 
            on the resolution method.
            </para>
        <para>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn">
            RowOverColumn</see>.
            </para>
      </remarks>
      <example>
        <para>
        Following code will result in a file where cell will have right alignment because same column cell style property takes precedence over row cell style property.
        Note that resolution is property based, in other words if column in this case had <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" />
        set cell would inherit both <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment" /> and
        <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment" /> from row and column.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="RowColumnResolution" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="RowColumnResolution" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.Protected">
      <summary>
            Gets or sets the workbook protection flag.
            </summary>
      <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on workbook protection, consult Microsoft Excel documentation.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.GroupMethodsAffectedCellsLimit">
      <summary>
            Maximum number of affected cells in group set methods.
            </summary>
      <remarks>
            If user tries to modify all cells in a group which has more cells than specified limit, exception
            will be thrown. This property was introduced to prevent users from accidentally modifying millions
            of cells which results in a long delay, a large memory allocation and a big resulting file. You can 
            set this limit to value which suits your needs (minimum is 5).
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.Use1904DateSystem">
      <summary>
            Gets or sets whether 1904 date system is used.
            </summary>
      <remarks>
            Default value for this property is <see langword="false" />.
            For more information on 1904 date system, consult Microsoft Excel documentation.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontName">
      <summary>
            Gets or sets name of the default font used in the workbook.
            </summary>
      <remarks>
            Default value for this property is "Arial".
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontSize">
      <summary>
            Gets or sets default font size.
            </summary>
      <remarks>
        <para>Unit is twip (1/20th of a point).</para>
        <para>Default value of this property is 200.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
      <summary>
            Delays formula parsing until one of SaveXls methods is called.
            </summary>
      <remarks>
        <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed at <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>
            page. Only listed formulas can be saved to XLS file.</para>
        <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
        <para>If this property is true, each set of <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">
            ExcelCell.Formula</see> property will just store formula string. When one of
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">ExcelFile.SaveXls</see> methods is called
            formulas are parsed and exception is thrown if formula is not supported or in bad format.
            When XLSX is saved, formulas are not parsed, they are just saved as strings.
            If the formula is in bad format, MS Excel or other application will report an error in formula.
            </para>
        <para>If this property is false, formula string is parsed every time you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see> property. You will
            limit formulas to the ones supported by GemBox.Spreadsheet parser and the exception will be
            thrown immediately if the formula is not supported or in bad format.</para>
        <para>Default value of this property is <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties">
      <summary>
            Gets <see cref="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties" /> of this <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.DefinedNames">
      <summary>
            Gets the collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.Styles">
      <summary>
            Gets the collection of <see cref="T:GemBox.Spreadsheet.CellStyle" />s defined for this <see cref="T:GemBox.Spreadsheet.ExcelFile" /> instance.
            </summary>
    </member>
    <member name="E:GemBox.Spreadsheet.ExcelFile.IoWarning">
      <summary>
            Fired for unexpected situations when reading or writing XLS / CSV files.
            </summary>
    </member>
    <member name="E:GemBox.Spreadsheet.ExcelFile.LimitNear">
      <summary>
            Occurs when the size of XLS / CSV file in reading / writing is near <b>GemBox.Spreadsheet</b> free limit.
            </summary>
      <remarks>
        <para>This event is fired when 80% of maximum row count per worksheet is reached (150 * 0.8 = 120 rows) or when 5 worksheets are used.</para>
        <para>This event is not fired if <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached" /> event is fired.</para>
        <para>You can use this event to detect when your application is close to <b>GemBox.Spreadsheet</b> free limit. 
            For example, you can write number of used rows to a log file or send a notification e-mail.</para>
      </remarks>
      <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached" />
    </member>
    <member name="E:GemBox.Spreadsheet.ExcelFile.LimitReached">
      <summary>
            Occurs when the size of XLS / CSV file in reading / writing is above <b>GemBox.Spreadsheet</b> free limit.
            </summary>
      <remarks>
        <para>This event is fired when maximum row count per worksheet is reached (150 rows) or when more than 5 worksheets are used.</para>
        <para>You can use this event to notify a user of your application that data is only partially read / written.</para>
      </remarks>
      <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.CsvParseNumbersDuringLoad">
      <summary>
            Gets or sets whether LoadCsv() methods will try to convert text values to numbers.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>All values (including numbers) in CSV files are stored as text. By default, 
            any of <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)" /> 
            overloads will try to parse text values as numbers and if successful
            cell will be filled with <see cref="T:System.Double" /> value. If
            you don't want such behavior (for example, you want IDs like "00935" to remain
            strings), set this property to <see langword="false" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAllowNewlineInQuotes">
      <summary>
            Gets or sets whether SaveCsv() methods will allow newline in quotes.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>If this property is <see langword="true" />, newline in quoted value will be threated as part of that value. 
            If this property is <see langword="false" />, newline in quoted value will be threated as the beginning of the new row.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAlwaysQuoteValues">
      <summary>
            Gets or sets whether SaveCsv() methods will always put values in quotes.
            </summary>
      <remarks>
        <para>Default value for this property is <see langword="true" />.</para>
        <para>All values (including numbers) in CSV files are stored as text. If this property is
            <see langword="true" />, any of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)" /> 
            overloads will always put values in quotes. If this property is <see langword="false" />, only values that
            contain special characters (quotes or CSV separator) will be quoted.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.ExcelWorksheet">
      <summary>
            Excel worksheet is a table with additional properties, identified by a unique name.
            </summary>
      <remarks>
        <para>
            Worksheet in Microsoft Excel has limited size. 
            Number of rows (<see cref="T:GemBox.Spreadsheet.ExcelRow" />) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxRows">ExcelFile.MaxRows</see>. 
            Number of columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn" />) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">ExcelFile.MaxColumns</see>. 
            A specific cell (<see cref="T:GemBox.Spreadsheet.ExcelCell" />) can be accessed either trough 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells">ExcelRow.Cells</see>, 
            <see cref="P:GemBox.Spreadsheet.ExcelColumn.Cells">ExcelColumn.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">ExcelWorksheet.Cells</see> property. 
            Whichever property used, there are two distinct methods of getting a cell reference; using <b>name</b>
            and using <b>index</b>. For example, full name of cell in top left corner of a worksheet is "A1". Translated
            to indexes, same cell would be 0,0 (zero row and zero column). If using 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells">ExcelRow.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelColumn.Cells">ExcelColumn.Cells</see> to access a
            specific cell, only partial name or partial index must be used, providing unknown column or row information. 
            </para>
        <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
        <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
        <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
      </remarks>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
      <seealso cref="T:GemBox.Spreadsheet.ExcelRow" />
      <seealso cref="T:GemBox.Spreadsheet.ExcelColumn" />
      <seealso cref="T:GemBox.Spreadsheet.ExcelCell" />
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Delete">
      <summary>
            Deletes this worksheet from the workbook.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Clear">
      <summary>
            Clears this worksheet.
            </summary>
      <remarks>
            References to following members will become invalid after calling this method. If they are stored in external variables,
            you will need to get them again from worksheet.
            <example><para>
        For example:
      </para><code language="c#" source="Samples\CSharp\Samples.cs" region="ClearExcelWorksheet" /><code language="vb" source="Samples\Vb\Samples.vb" region="ClearExcelWorksheet" /></example>
            Here is the list:
            <ul><li><see cref="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations" /></li><li>Each <see cref="T:GemBox.Spreadsheet.ExcelRow" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Rows" /></li><li>Each <see cref="T:GemBox.Spreadsheet.ExcelColumn" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Columns" /></li><li>Each <see cref="T:GemBox.Spreadsheet.ExcelCell" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells" /></li><li>Each <see cref="T:GemBox.Spreadsheet.ExcelPicture" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures" /></li><li>Each <see cref="T:GemBox.Spreadsheet.Charts.ExcelChart" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Charts" /></li><li>Each <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks" /></li><li>Each <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" /> instance in <see cref="T:GemBox.Spreadsheet.VerticalPageBreak" /></li><li>Each <see cref="T:GemBox.Spreadsheet.NamedRange" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges" /></li><li>Each <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink" /> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks" /></li></ul></remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertEmpty(System.String)">
      <summary>
            Inserts an empty worksheet before the current worksheet.
            </summary>
      <param name="worksheetName">Worksheet name.</param>
      <returns>Newly created worksheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
      <summary>
            Inserts a copy of an existing worksheet before the current worksheet.
            </summary>
      <param name="destinationWorksheetName">Name of the new worksheet.</param>
      <param name="sourceWorksheet">Source worksheet.</param>
      <returns>Newly created worksheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable)">
      <summary>
            Inserts a <see cref="T:System.Data.DataTable" /> into the current worksheet.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> which will be inserted into the current worksheet.</param>
      <returns>Number of inserted rows.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)">
      <summary>
            Inserts a <see cref="T:System.Data.DataTable" /> into the current worksheet.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> which will be inserted into the current worksheet.</param>
      <param name="options">The <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions" /> which can be used to define settings for the insert operation.</param>
      <returns>Number of inserted rows.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)">
      <summary>
            Extracts data to <see cref="T:System.Data.DataTable" /> with specified extract options, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" />.
            </summary>
      <param name="dataTable">Destination <see cref="T:System.Data.DataTable" />.</param>
      <param name="options">Options that describe how data will be extracted, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions" />.</param>
      <example>
        <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" />.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="ExtractDataEvent" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="ExtractDataEvent" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)">
      <summary>
            Creates a <see cref="T:System.Data.DataTable" /> and fills it with data from this <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> in a manner specified by
            create options, see <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions" />.
            </summary>
      <param name="options">Options that describe how <see cref="T:System.Data.DataTable" /> will be created and filled with data extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> with data from specified cells.</returns>
      <example>
        <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> to <see cref="T:System.Data.DataTable" /> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)" /> method.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CreateDataTable" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CreateDataTable" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)">
      <summary>
            Calculates cell range that is used in the worksheet.
            </summary>
      <param name="ignoreCellsWithoutValue">Specifies if allocated cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> set to <see langword="null" /> are ignored.</param>
      <returns>Cell range that is used in the worksheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns">
      <summary>
            Iterates all rows and finds maximum number of used columns.
            </summary>
      <returns>Maximum number of occupied columns in this sheet.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.String,System.Boolean)">
      <summary>
            Inserts a <see cref="T:System.Data.DataTable" /> at the specified position in 
            the current worksheet.
            </summary>
      <param name="dataTable">Source DataTable.</param>
      <param name="startCell">Name of start (top-left) cell.</param>
      <param name="columnHeaders">True to insert column names above data.</param>
      <returns>Number of inserted rows.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Inserts a <see cref="T:System.Data.DataTable" /> at the specified row and column in 
            the current worksheet.
            </summary>
      <param name="dataTable">Source DataTable.</param>
      <param name="startRow">Index of the start row.</param>
      <param name="startColumn">Index of the start column.</param>
      <param name="columnHeaders">True to insert column names above data.</param>
      <returns>Number of inserted rows.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelColumn)">
      <overloads>Extracts data to <see cref="T:System.Data.DataTable" />.</overloads>
      <summary>
            Extracts data to DataTable with the same column order as it is in ExcelWorksheet.
            </summary>
      <remarks>
        <para>DataTable has to have all the columns defined before calling this method. 
            Because DataColumnMapping objects are not used in this method, columns in DataTable have to have the same
            order as columns in ExcelWorksheet (starting from column defined in startColumn argument).</para>
        <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent" />.</para>
        <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent" />.</para>
      </remarks>
      <param name="dataTable">Destination DataTable.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="startRow">Start ExcelRow.</param>
      <param name="startColumn">Start ExcelColumn.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractUsedRangeToDataTable(GemBox.Spreadsheet.ExtractDataOptions)">
      <summary>
            Extracts data from used cells of this worksheet to a new DataTable with columns of type object.
            </summary>
      <remarks>This method first calls <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)" /> method
            to find block of used cells in this worksheet. Then it creates a new <see cref="T:System.Data.DataTable" /> with the same
            number of columns as width of that range and with the column type of object. Finally, it extracts block of used cells to 
            <see cref="T:System.Data.DataTable" /> and returns filled <see cref="T:System.Data.DataTable" />.
            </remarks>
      <param name="options">Options that describe how data will be extracted.</param>
      <returns>New DataTable.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Data.Common.DataColumnMappingCollection,GemBox.Spreadsheet.ExcelRow)">
      <summary>
            Extracts data to DataTable with column mapping.
            </summary>
      <remarks>
        <para>DataTable has to have all the columns defined before calling this method. 
            How will data be extracted from ExcelColumn to DataTableColumn has to be defined
            in the dataColumnMappingCollection argument.</para>
        <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent" />.</para>
        <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent" />.</para>
      </remarks>
      <param name="dataTable">Destination DataTable.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="dataColumnMappingCollection">Column mapping.</param>
      <param name="startRow">Start ExcelRow.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution)">
      <summary>
            Extracts data from used cells of this worksheet to a new <see cref="T:System.Data.DataTable" />. 
            <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution" />.
            </summary>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <returns>DataTable with data from used cells.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean)">
      <summary>
            Extracts data from <see cref="T:GemBox.Spreadsheet.CellRange">specified range of cells</see> to a new <see cref="T:System.Data.DataTable" />. 
            </summary>
      <param name="range">Cell range.</param>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="useFirstRowForColumnNames">If <see langword="true" /> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName" /> columns.</param>
      <returns>DataTable with data from specified cells.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
      <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable" />. 
            </summary>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <param name="startRow">Start ExcelRow.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="columns">Columns to extract.</param>
      <returns>DataTable with data from specified rows/columns.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
      <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <param name="startRow">Start ExcelRow.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="useFirstRowForColumnNames">If <see langword="true" /> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName" /> columns.</param>
      <param name="columns">Columns to extract.</param>
      <returns>DataTable with data from specified rows/columns.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelColumn[])">
      <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <param name="startRow">Start ExcelRow.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="columns">Columns to extract.</param>
      <returns>DataTable with data from specified rows/columns.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,GemBox.Spreadsheet.ExcelColumn[])">
      <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable" />.
            </summary>
      <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
      <param name="startRow">Start ExcelRow.</param>
      <param name="numberOfRows">Number of rows to extract.</param>
      <param name="options">Options that describe how data will be extracted.</param>
      <param name="useFirstRowForColumnNames">If <see langword="true" /> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName" /> columns.</param>
      <param name="columns">Columns to extract.</param>
      <returns>DataTable with data from specified rows/columns.</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">
      <summary>
            Calculates cell range that is used in the worksheet (every allocated cell is considered used).
            </summary>
      <returns>Cell range that is used in the worksheet (every allocated cell is considered used).</returns>
    </member>
    <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ResolveCellStyle(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">
      <summary>
            Gets the worksheet pictures.
            </summary>
      <value>
            The worksheet pictures.
            </value>
      <remarks>
            Supported picture formats are listed in <see cref="T:GemBox.Spreadsheet.ExcelPictureFormat" />.
            </remarks>
      <seealso cref="T:GemBox.Spreadsheet.ExcelPicture" />
      <example>
        <para>Following code demonstrates how to use images:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Image" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Image" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Charts">
      <summary>
            Gets the worksheet charts. Not supported in XLS.
            </summary>
      <value>
            The worksheet charts.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations">
      <summary>
            Gets the collection that expresses all data validation information for cells in a sheet which have data validation features applied.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges">
      <summary>
            Gets <see cref="T:GemBox.Spreadsheet.NamedRangeCollection" /> 
            containing descriptive names which are used to represent cells, ranges of cells, 
            formulas, or constant values.
            </summary>
      <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
      <example>
        <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constant operands (integer and floating point),
        functions and named cell ranges.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Formula" />
      </example>
      <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks">
      <summary>
            Gets hyperlinks in this  sheet.
            </summary>
      <remarks>Supported only in xlsx.</remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Name">
      <summary>
            Gets or sets worksheet name. 
            </summary>
      <remarks>
            If not unique (worksheet with that name already exists in 
            <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">ExcelFile.Worksheets</see> collection) exception is thrown.
            </remarks>
      <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Rows">
      <summary>
            Gets collection of all rows (<see cref="T:GemBox.Spreadsheet.ExcelRow" />) in the worksheet.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Columns">
      <summary>
            Gets collection of all columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn" />) in the worksheet.
            </summary>
      <remarks>
        <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
        <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
        <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns" /> method.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">
      <summary>
            Gets <see cref="T:GemBox.Spreadsheet.CellRange" /> with all the cells 
            (<see cref="T:GemBox.Spreadsheet.ExcelCell" />) 
            in the worksheet.
            </summary>
      <example>
        <para>Look at following code for cell referencing examples:</para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">
      <summary>
            Gets or sets the worksheet protection flag.
            </summary>
      <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectionSettings">
      <summary>
            Gets or sets worksheet protection properties. This settings will be used only if <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected" /> is set to <see langword="true" />;
            Otherwise it will be ignored.
            Supported in XLSX only.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">
      <summary>
            Gets or sets the worksheet visible property.
            </summary>
      <remarks>
        <para>Workbook must contain at least one visible sheet.</para>
        <para>This property is available only in XLSX file format.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth">
      <summary>
            Gets or sets the default column width in 1/256th of the width of the zero character in default font.
            </summary>
      <value>
            The default column width in <see cref="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth256thPart">1/256th of the width of the zero character in default font</see>.
            </value>
      <remarks>
            This value is used as width for columns which don't have <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width" /> property explicitly set.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelColumn.Width" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultRowHeight">
      <summary>
            Gets or sets the default row height in twips (1/20th of a point). Not supported in XLS and ODS.
            </summary>
      <value>
            The default row height in <see cref="F:GemBox.Spreadsheet.LengthUnit.Twip">twips (1/20th of a point)</see>.
            </value>
      <remarks>
            This value is used as height for rows which don't have <see cref="P:GemBox.Spreadsheet.ExcelRow.Height" /> property explicitly set.
            </remarks>
      <seealso cref="P:GemBox.Spreadsheet.ExcelRow.Height" />
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks">
      <summary>
            Gets collection of all horizontal page breaks 
            (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak" />) in the worksheet.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.VerticalPageBreaks">
      <summary>
            Gets collection of all vertical page breaks 
            (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />) in the worksheet.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Parent">
      <summary>
            Gets the parent <see cref="T:GemBox.Spreadsheet.ExcelFile" /> of this <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" /> instance.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions">
      <summary>
            Contains MS Excel print and print related options.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ViewOptions">
      <summary>
            Contains MS Excel display and view related options.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HeadersFooters">
      <summary>
            Gets or sets headers/footers for the sheet.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasHeadersFooters">
      <summary>
            Returns true if worksheet has headers/footers.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Panes">
      <summary>
            Gets or sets the panes in the worksheet.
            </summary>
      <remarks>
            If there are no split or freeze panes in the worksheet, the value of this property is null.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasSplitOrFreezePanes">
      <summary>
            Returns true if worksheet has split or freeze panes.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PasswordHash">
      <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
      <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            If you don't know which password hash corresponds to determinant password, make excel file using MS Excel, load it using GemBox.Spreadsheet, and read
            this property. Then reuse that value in your project.
            </remarks>
    </member>
    <member name="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent">
      <summary>
            Event that fires when specific error occurs while extracting data to DataTable.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.FileFormatLimitations">
      <summary>
            Represents file format limitations when saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to some format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.FileFormatLimitations.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes instance of <see cref="T:GemBox.Spreadsheet.FileFormatLimitations" /> class.
            </summary>
      <param name="maxRows">Maximum number of rows.</param>
      <param name="maxColumns">Maximum number of columns.</param>
      <param name="maxColors">Maximum number of colors.</param>
      <param name="maxCellStyles">Maximum number of cell styles.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxRows">
      <summary>
            Get maximum number of rows. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColumns">
      <summary>
            Get maximum number of columns. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColors">
      <summary>
            Get maximum number of colors. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxCellStyles">
      <summary>
            Get maximum number of cell styles. 
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.InsertDataTableOptions">
      <summary>
            Represents options for inserting data from <see cref="T:System.Data.DataTable" /> to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
      <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)" />
    </member>
    <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions" /> class.
            </summary>
      <param name="startRow">Index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
      <param name="startColumn">Index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.String)">
      <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions" /> class.
            </summary>
      <param name="startCell">Name of the first (top left) cell of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartRow">
      <summary>
            Gets or sets the index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartColumn">
      <summary>
            Gets or sets the index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.ColumnHeaders">
      <summary>
            Gets or sets a value indicating whether to insert column headers.
            </summary>
    </member>
    <member name="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting">
      <summary>
            Event that fires when converting <see cref="T:System.Data.DataTable" /> cell value to <see cref="T:GemBox.Spreadsheet.ExcelCell" /> value.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.LengthUnit">
      <summary>
            Represents the measurement unit for measuring length or distance.
            </summary>
      <remarks>
        <para>To convert values between various <see cref="T:GemBox.Spreadsheet.LengthUnit" />s, use <see cref="T:GemBox.Spreadsheet.LengthUnitConverter" />.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Pixel">
      <summary>
            Pixel (1 inch is equal as 96 pixels). 
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Point">
      <summary>
            Point (1 inch is equal as 72 points).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Inch">
      <summary>
            Inch.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Millimeter">
      <summary>
            Millimeter (10 millimeters are equal as 1 centimeter).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Centimeter">
      <summary>
            Centimeter (1 inch is around 2.54 centimeters).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Twip">
      <summary>
            Twip (twentieth of a point, 1 point is equal as 20 twips).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.Emu">
      <summary>
            English Metric Unit (1 point is equal as 12,700 EMUs)
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth256thPart">
      <summary>
            Unit is 1/256th of the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth">
      <summary>
            Unit is the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.LengthUnitConverter">
      <summary>
            Utility class used for converting values between various <see cref="T:GemBox.Spreadsheet.LengthUnit" /> measurement units.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.LengthUnitConverter.Convert(System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.LengthUnit)">
      <summary>
            Converts the specified <paramref name="length" /> from <paramref name="sourceUnit" /> measurement unit to <paramref name="destinationUnit" /> measurement unit.
            </summary>
      <param name="length">The length that will be converted.</param>
      <param name="sourceUnit">The source measurement unit.</param>
      <param name="destinationUnit">The destination measurement unit.</param>
      <returns>The <paramref name="length" /> expressed in <paramref name="destinationUnit" /> measurement unit.</returns>
    </member>
    <member name="T:GemBox.Spreadsheet.CsvLoadOptions">
      <summary>
            Represents options for loading from Character Separated Values file format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(GemBox.Spreadsheet.CsvType)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions" /> class.
            </summary>
      <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType" />.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions" /> class.
            </summary>
      <param name="separator">Character that will serve as value delimiter.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.AllowNewLineInQuotes">
      <summary>
            Gets or sets a value indicating whether a new line character can be inside quotes.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseNumbers">
      <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double" /> value when loading CSV file. If <see langword="false" />, numbers will be loaded as strings.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Separator">
      <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
      <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Type">
      <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseFormatProvider">
      <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Encoding">
      <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null" />.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.CsvSaveOptions">
      <summary>
            Represents options for saving to Character Separated Values file format.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(GemBox.Spreadsheet.CsvType)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions" /> class.
            </summary>
      <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType" />.</param>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions" /> class.
            </summary>
      <param name="separator">Character that will serve as value delimiter.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.CsvSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.AlwaysQuoteValues">
      <summary>
            Gets or sets a value indicating whether values in CSV file will always be quoted. Default value is false.
            </summary>
      <remarks>
            Default value of this property will be false, not true like in ExcelFile.CsvAlwaysQuoteValues.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to CSV file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.ContentType">
      <summary>
            Gets the content-type for CSV file format:
            <list type="bullet"><item><description><b>"text/tab-separated-values; charset=" + <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding" />.<see cref="P:System.Text.Encoding.WebName" /></b> if <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Type" /> is <see cref="F:GemBox.Spreadsheet.CsvType.TabDelimited" />, otherwise</description></item><item><description><b>"text/csv; charset=" + <see cref="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding" />.<see cref="P:System.Text.Encoding.WebName" /></b>.</description></item></list></summary>
      <value>
            The content-type for CSV file format.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Separator">
      <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
      <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Type">
      <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.FormatProvider">
      <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value" /> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding">
      <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
      <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
    </member>
    <member name="T:GemBox.Spreadsheet.ImageSaveFormat">
      <summary>
            An enumeration of supported image file formats when saving the <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to an image using a <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Bmp">
      <summary>
            Bitmap (BMP) format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Gif">
      <summary>
            Graphics Interchange Format (GIF).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Jpeg">
      <summary>
            Joint Photographics Experts Group (JPEG) format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Png">
      <summary>
            Portable Network Graphics (PNG) format.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Tiff">
      <summary>
            Tagged Image File Format (TIFF).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Wmp">
      <summary>
            Windows Media Photo format.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.ImageSaveOptions">
      <summary>
            Represents a class which stores saving options for image files.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /> class.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor(GemBox.Spreadsheet.ImageSaveFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions" /> class for a specific image format.
            </summary>
      <param name="imageFormat">The image format.</param>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to image.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.ImageSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Format">
      <summary>
            Gets or sets the image format.
            </summary>
      <value>
            The image format.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.PageNumber">
      <summary>
            Gets or sets the zero-based page number of the document's page which should be saved to an image.
            </summary>
      <value>
            The zero-based page number of the document's page which should be saved to an image.
            </value>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Width">
      <summary>
            Gets or sets the image width in pixels.
            </summary>
      <value>
            The image width in pixels.
            </value>
      <remarks>
        <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> are not specified, then image size will be equal to the page size.</para>
        <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> is specified, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
        <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Height">
      <summary>
            Gets or sets the image height in pixels.
            </summary>
      <value>
            The image height in pixels.
            </value>
      <remarks>
        <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> are not specified, then image size will be equal to the page size.</para>
        <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> is specified, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
        <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width" /> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height" /> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.SelectionType">
      <summary>
            Gets or sets a value indicating whether to save a page from the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
      <remarks>
        <para>Default value is <see cref="F:GemBox.Spreadsheet.SelectionType.ActiveSheet" /> to optimize export since only active worksheet will be paginated.</para>
        <para>If you want to render a specific page from an un-active worksheet, set that worksheet as <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" /> or change this property to <see cref="F:GemBox.Spreadsheet.SelectionType.EntireFile" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor">
      <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary>
      <value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value>
      <remarks>
        <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
        <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
        <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
        <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
        <para>
        Default value for <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to image file formats.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.ImageSaveOptions.ContentType">
      <summary>
            Gets the content-type for image file format:
            <list type="bullet"><item><description><b>image/png</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Png" />,</description></item><item><description><b>image/jpeg</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Jpeg" />,</description></item><item><description><b>image/gif</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Gif" />,</description></item><item><description><b>image/bmp</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Bmp" />,</description></item><item><description><b>image/tiff</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Tiff" />,</description></item><item><description><b>image/vnd.ms-photo</b> if <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Format" /> is <see cref="F:GemBox.Spreadsheet.ImageSaveFormat.Wmp" />.</description></item></list></summary>
      <value>
            The content-type for image file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.OdsLoadOptions">
      <summary>
            Represents options for loading from OpenDocument Spreadsheet file format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.OdsLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsLoadOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.OdsLoadOptions.PreserveUnsupportedFeatures">
      <summary>
            Gets or sets a value indicating whether to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
      <value>
        <see langword="true" /> to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Default value is set to <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.OdsLoadOptions.ReadDisplayValues">
      <summary>
            Read display values instead of stored values. 
            </summary>
      <value>
        <see langword="true" /> to read display values; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Values in ODS are stored as value - display string pairs.
            Normally stored value is read but that looses number formatting. 
            If you want to read value as formatted display string (for example, date as "Wednesday, May 5th, 2009" string), set this property to <see langword="true" />.</para>
        <para>Default value is set to <see langword="false" />.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.OdsSaveOptions">
      <summary>
            Represents options for saving to OpenDocument Spreadsheet file format.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.OdsSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.OdsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.OdsSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.OdsSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to ODS file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: 1048576</description></item><item><description>MaxColumns: 16384</description></item><item><description>MaxColors: 16000000</description></item><item><description>MaxCellStyles: 64000</description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.OdsSaveOptions.ContentType">
      <summary>
            Gets the content-type for ODS file format:
            <list type="bullet"><item><description><b>application/vnd.oasis.opendocument.spreadsheet-template</b> if workbook is template (file extension is .odt), otherwise</description></item><item><description><b>application/vnd.oasis.opendocument.spreadsheet</b>.</description></item></list></summary>
      <value>
            The content-type for ODS file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.PdfSaveOptions">
      <summary>
            Represents options for saving to Portable Document Format (PDF) file.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to PDF file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SavePdf" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SavePdf" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.PdfSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PdfSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.PdfSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.PdfSaveOptions.SelectionType">
      <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to PDF file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SavePdf" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SavePdf" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor">
      <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary>
      <value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value>
      <remarks>
        <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
        <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
        <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
        <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
        <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.PdfSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to PDF file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.PdfSaveOptions.ContentType">
      <summary>
            Gets the content-type for PDF file format: <b>application/pdf</b>.
            </summary>
      <value>
            The content-type for PDF file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.PrintOptions">
      <summary>
            Specifies information about how a spreadsheet is printed.
            </summary>
      <example>
        <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to the specified printer.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="Print" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="Print" />
      </example>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
    </member>
    <member name="M:GemBox.Spreadsheet.PrintOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PrintOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PrintOptions" /> class by using an XML stream (that contains a PrintTicket document) that complies with the XML Print Schema.
            </summary>
      <param name="xmlStream">An XML stream that describes a print job and conforms to the Print Schema.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlStream" /> is <see langword="null" />.</exception>
      <seealso cref="T:System.Printing.PrintTicket" />
      <seealso cref="M:System.Printing.PrintTicket.GetXmlStream" />
      <seealso href="http://msdn.microsoft.com/en-us/library/dd372919.aspx">Print Schema</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.SelectionType">
      <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.CopyCount">
      <summary>
            Gets or sets the number of copies of the document to print.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.PagesPerSheet">
      <summary>
            Gets or sets the number of pages that print on each printed side of a sheet of paper.
            </summary>
      <remarks>
            Only a limited range of 1, 2, 4, 6, 8 or 16 pages per sheet side are supported.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.FromPage">
      <summary>
            Gets or sets the page index of the first page to print.
            </summary>
      <remarks>
            Spreadsheet pages are zero-indexed meaning that first page in the spreadsheet has index 0 (zero).
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.ToPage">
      <summary>
            Gets or sets the index of the last page to print.
            </summary>
      <remarks>
            Use <see cref="F:System.Int32.MaxValue" /> value to print to the last page. 
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor">
      <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary>
      <value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value>
      <remarks>
        <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
        <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
        <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
        <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
        <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor" /> is 1.
      </para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsLoadOptions">
      <summary>
            Represents options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsLoadOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.XlsLoadOptions.PreserveOptions">
      <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.XlsOptions" />.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsSaveOptions">
      <summary>
            Represents options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.XlsSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to XLS file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: 65536</description></item><item><description>MaxColumns: 256</description></item><item><description>MaxColors: 56</description></item><item><description>MaxCellStyles: 3979</description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.XlsSaveOptions.ContentType">
      <summary>
            Gets the content-type for XLS file format: <b>application/vnd.ms-excel</b>.
            </summary>
      <value>
            The content-type for XLS file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsxLoadOptions">
      <summary>
            Represent options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxLoadOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.PreserveUnsupportedFeatures">
      <summary>
            Gets or sets a value indicating whether to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
      <value>
        <see langword="true" /> to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false" />.
            </value>
      <remarks>
        <para>Default value is set to <see langword="true" />.</para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.Password">
      <summary>
            Gets or sets the password to open protected / encrypted workbook.
            </summary>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/Protection/XLSXEncryption">XLSX Encryption sample</seealso>
    </member>
    <member name="T:GemBox.Spreadsheet.XpsSaveOptions">
      <summary>
            Represents options for saving to XML Paper Specification file format.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XPS file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXps" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXps" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.XpsSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XpsSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XpsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.XpsSaveOptions.SelectionType">
      <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile" /> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XPS file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXps" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXps" />
      </example>
    </member>
    <member name="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor">
      <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary>
      <value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value>
      <remarks>
        <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
        <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
        <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
        <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
        <para>
          <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
        <para>
        Default value for <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor" /> is 1.
      </para>
      </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.XpsSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to XPS file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColumns: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxColors: <see cref="F:System.Int32.MaxValue" /></description></item><item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue" /></description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.XpsSaveOptions.ContentType">
      <summary>
            Gets the content-type for XPS file format: <b>application/vnd.ms-xpsdocument</b>.
            </summary>
      <value>
            The content-type for XPS file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.ExtractDataEventAction">
      <summary>
            Possible ways of proceeding after one of the events is fired while extracting to data table.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.ThrowException">
      <summary>
            Throw exception after event has been handled.
            </summary>
      <remarks>
            This value has been obsoleted and only affects obsoleted ExtractToDataTable() methods.
            It will have no effect when used with non-obsoleted <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)" />
            overload.
            </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.Continue">
      <summary>
            Continue extracting data to <see cref="T:System.Data.DataTable" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.StopReading">
      <summary>
            Stop extracting data to <see cref="T:System.Data.DataTable" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.SkipRow">
      <summary>
            Skip row.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsxSaveOptions">
      <summary>
            Represent options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
      <example>
        <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile" /> to XLSX (Excel 2007+) file format.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXlsx" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXlsx" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions" /> class.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Type">
      <summary>
            Specifies type of generated file. Set this property only if you want to override default type.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Password">
      <summary>
            Gets or sets the password used to protect / encrypt the workbook.
            </summary>
      <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/Protection/XLSXEncryption">XLSX Encryption sample</seealso>
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Limitations">
      <summary>
            Gets limitations for saving to XLSX file format.
            </summary>
      <remarks>
            These are the limits:
            <list type="bullet"><item><description>MaxRows: 1048576</description></item><item><description>MaxColumns: 16384</description></item><item><description>MaxColors: 16000000</description></item><item><description>MaxCellStyles: 64000</description></item></list></remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.ContentType">
      <summary>
            Gets the content-type for XLSX file format:
            <list type="bullet"><item><description><b>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type" /> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xlsx" />,</description></item><item><description><b>application/vnd.ms-excel.sheet.macroenabled.12</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type" /> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xlsm" />,</description></item><item><description><b>application/vnd.openxmlformats-officedocument.spreadsheetml.template</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type" /> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xltx" />,</description></item><item><description><b>application/vnd.ms-excel.template.macroenabled.12</b> if <see cref="P:GemBox.Spreadsheet.XlsxSaveOptions.Type" /> is <see cref="F:GemBox.Spreadsheet.XlsxType.Xltm" />.</description></item></list></summary>
      <value>
            The content-type for XLSX file format.
            </value>
    </member>
    <member name="T:GemBox.Spreadsheet.VerticalAlignmentStyle">
      <summary>
            Vertical alignment styles used for <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment">CellStyle.VerticalAlignment</see>.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom">
      <summary>
            Bottom alignment.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Justify">
      <summary>
            Justify alignment.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top" />.</para>
      </remarks>
    </member>
    <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Distributed">
      <summary>
            Distributed alignment.
            </summary>
      <remarks>
        <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center" />.</para>
      </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.VerticalPageBreak">
      <summary>
            Specifies a vertical position where the new page begins when the worksheet is printed.
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckBreakIndex(System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckLimit(System.Int32)">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.VerticalPageBreak.Column">
      <summary>
            Index of the first column of the new page.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.VerticalPageBreak.FirstRow">
      <summary>
            Index of the first row of the new page.
            </summary>
      <remarks>
            Use 0 (first row) if you don't care.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.VerticalPageBreak.LastRow">
      <summary>
            Index of the last row of the new page.
            </summary>
      <remarks>
            Use 65535 (last row) if you don't care.
            </remarks>
    </member>
    <member name="T:GemBox.Spreadsheet.VerticalPageBreakCollection">
      <summary>
            Collection of vertical page breaks (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak" />).
            </summary>
      <example>
        <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak" />s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet" />.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks" />
      </example>
    </member>
    <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32)">
      <overloads>Ads a new vertical page break.</overloads>
      <summary>
            Ads a new vertical page break left to the specified column.
            </summary>
      <param name="column">The zero-based index of the column.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
      <summary>
            Ads a new vertical page break left to the specified column and within specified rows.
            </summary>
      <param name="column">The zero-based index of the column.</param>
      <param name="firstRow">The zero-based index of the first row.</param>
      <param name="lastRow">The zero-based index of the last row.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.MaxLastLimit">
      <exclude />
    </member>
    <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.Item(System.Int32)">
      <summary>
            Gets or sets the vertical page break at the specified index.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.WorksheetPanes">
      <summary>
            Represents the worksheet panes.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.PanesState,System.Single,System.Single,System.String,GemBox.Spreadsheet.PanePosition)">
      <summary>
            Worksheet panes constructor.
            </summary>
      <param name="state">State of the panes.</param>
      <param name="xSplit">If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
      <param name="ySplit">If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
      <param name="topLeftCell">Top left visible cell in the bottom right pane.</param>
      <param name="activePane">Position of the active pane.</param>
    </member>
    <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.WorksheetPanes)">
      <summary>
            Copy constructor.
            </summary>
      <param name="sourcePane">Source pane.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetPanes.State">
      <summary>
            Gets or sets the state of the panes.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetPanes.XSplit">
      <summary>
            Gets or sets the XSplit value.
            </summary>
      <remarks>
            If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetPanes.YSplit">
      <summary>
            Gets or sets the XSplit value.
            </summary>
      <remarks>
            If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetPanes.TopLeftCell">
      <summary>
            Gets or sets the top left visible cell in the bottom right pane. 
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetPanes.ActivePane">
      <summary>
            Gets or sets the active pane.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.WorksheetProtection">
      <summary>
            Protection settings.
            Supported in XLSX only.
            </summary>
      <remarks>
            Properties in this class are simply written to Excel file and have no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
    </member>
    <member name="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)">
      <summary>
            Sets the password for protected sheet.
            </summary>
      <param name="password">The password.</param>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.PasswordHash">
      <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
      <remarks>
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            For setting password it can be also used <see cref="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)" /> method. 
            </remarks>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingLockedCells">
      <summary>
            Gets or sets if selecting locked cells is allowed.
            Default value is <see langword="true" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingUnlockedCells">
      <summary>
            Gets or sets if selecting unlocked cells is allowed.
            Default value is <see langword="true" />.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingCells">
      <summary>
            Gets or sets if formatting cells is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingColumns">
      <summary>
            Gets or sets if formatting columns is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingRows">
      <summary>
            Gets or sets if formatting rows is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingColumns">
      <summary>
            Gets or sets if inserting columns is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingRows">
      <summary>
            Gets or sets if inserting rows is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingHyperlinks">
      <summary>
            Gets or sets if inserting hyperlinks is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingColumns">
      <summary>
            Gets or sets if deleting columns is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingRows">
      <summary>
            Gets or sets if deleting rows is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSorting">
      <summary>
            Gets or sets if sorting is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingAutoFilter">
      <summary>
            Gets or sets if using autofilter is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingPivotTableReports">
      <summary>
            Gets or sets if using pivot table reports is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingObjects">
      <summary>
            Gets or sets if editing objects is allowed.
            </summary>
    </member>
    <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingScenarios">
      <summary>
            Gets or sets if editing scenarios is allowed.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsOptions">
      <summary>
            Options specified when reading XLS files.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.None">
      <summary>
            Do not preserve records. Only records fully supported by GemBox.Spreadsheet API will be loaded.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveGlobalRecords">
      <summary>
            Preserve global (workbook) records.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveWorksheetRecords">
      <summary>
            Preserve worksheet records.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveSummaries">
      <summary>
            Preserve summaries.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveMacros">
      <summary>
            Preserve macros and VBA code.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveAll">
      <summary>
            Preserve all possible information.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.XlsxType">
      <summary>
            OpenXML file type.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsxType.Xlsx">
      <summary>
            Excel 2007 XML Workbook.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsxType.Xlsm">
      <summary>
            Excel 2007 XML Macro-Enabled Workbook.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsxType.Xltx">
      <summary>
            Excel 2007 XML Template.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.XlsxType.Xltm">
      <summary>
            Excel 2007 XML Macro-Enabled Template.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.PaperType">
      <summary>
            Specifies the paper type.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.A3">
      <summary>
            A3 (11.69 inch X 16.54 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.A4">
      <summary>
            A4 (8.27 inch X 11.69 inch). 
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.A5">
      <summary>
            A5 (5.83 inch X 8.27 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.A6">
      <summary>
            A6 (4.13 inch X 5.83 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.B4">
      <summary>
            B4 (JIS, 7.17 inch X 10.12 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.B5">
      <summary>
            B5 (ISO, 6.93 inch X 9.84 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.Letter">
      <summary>
            Letter (8.5 inch X 11 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.Legal">
      <summary>
            Legal (8.5 inch X 14 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.Executive">
      <summary>
            Executive (7.25 inch X 10.5 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.Paper11x17">
      <summary>
            11x17 (11 inch X 17 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeDL">
      <summary>
            Envelope DL (4.33 inch X 8.66 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeC5">
      <summary>
            Envelope C5 (6.38 inch X 9.02 inch).
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.PaperType.Custom">
      <summary>
            Custom paper type.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.SelectionType">
      <summary>
            Defines the selection which will be saved or printed.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SelectionType.ActiveSheet">
      <summary>
            Select <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" />.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SelectionType.EntireFile">
      <summary>
            Select all sheets in <see cref="T:GemBox.Spreadsheet.ExcelFile" />.
            </summary>
    </member>
    <member name="T:GemBox.Spreadsheet.SpreadsheetInfo">
      <summary>
            Contains static licensing methods and diagnostic information about executing GemBox.Spreadsheet assembly.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SpreadsheetInfo.Title">
      <summary>
            GemBox.Spreadsheet assembly title.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.SpreadsheetInfo.FullVersion">
      <summary>
            GemBox.Spreadsheet assembly full version.
            </summary>
    </member>
    <member name="M:GemBox.Spreadsheet.SpreadsheetInfo.SetLicense(System.String)">
      <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
      <remarks>
        <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
        <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
        <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
      </remarks>
      <param name="serialKey">Serial key.</param>
    </member>
    <member name="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached">
      <summary>
            Occurs in loading or saving <see cref="T:GemBox.Spreadsheet.ExcelFile" /> when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and free limit is reached.
            </summary>
      <remarks>
            This event is raised when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and maximum number of rows (150 rows) or sheets (5 sheets) are reached.
            <para>Free mode will read / write first 150 rows/5 sheets normally and, if file has more than 150 rows or 5 sheets, it will throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException" />.</para><para>You can use this event to continue using the assembly in a trial mode for performance testing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction" /> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial" />) or to stop further reading/writing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction" /> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop" />).</para><para>Trial mode will read and write all file content but will insert word "TRIAL" on random places in the file.</para><para>For more information about GemBox.Spreadsheet evaluation and licensing, see <see href="6676d983-4f75-4e69-b1a2-108c0aeac431.htm" target="_self">evaluation and licensing</see>.</para></remarks>
      <example>
        <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
        <code language="c#" source="Samples\CSharp\Samples.cs" region="PerformanceCounter" />
        <code language="vb" source="Samples\Vb\Samples.vb" region="PerformanceCounter" />
      </example>
    </member>
    <member name="T:GemBox.Spreadsheet.ViewType">
      <summary>
            Specifies the view type.
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ViewType.Normal">
      <summary>
            Normal view
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ViewType.PageBreakPreview">
      <summary>
            Page break preview
            </summary>
    </member>
    <member name="F:GemBox.Spreadsheet.ViewType.PageLayout">
      <summary>
            Page Layout View
            </summary>
    </member>
  </members>
</doc>