<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>yFilesViewer</name>
  </assembly>
  <members>
    <member name="T:yWorks.Canvas.CanvasContentHost">
      <summary>
            Support class used by <see cref="P:yWorks.Canvas.CanvasContentHost.CanvasControl"></see> to actually host the visual contents.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.#ctor">
      <summary>
            Creates a new instance of the content host.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.ArrangeOverride(System.Windows.Size)">
      <summary>
                    When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class. 
                </summary>
      <param name="finalSize">
                    The final area within the parent that this element should use to arrange itself and its children.
                </param>
      <returns>
                    The actual size used.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.GetVisualChild(System.Int32)">
      <summary>
                    Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements. 
                </summary>
      <param name="index">
                    The zero-based index of the requested child element in the collection.
                </param>
      <returns>
                    The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.MeasureOverride(System.Windows.Size)">
      <summary>
                    When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class. 
                </summary>
      <param name="availableSize">
                    The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.
                </param>
      <returns>
                    The size that this element determines it needs during layout, based on its calculations of child element sizes.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnDragLeave(System.Windows.DragEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnDragOver(System.Windows.DragEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnDrop(System.Windows.DragEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            This will transform the key event to a <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnCompoundKeyPressed(yWorks.Canvas.Input.CompoundKeyEventArgs)"></see> methods as well as re-dispatch the last mouse
            event.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
            This will transform the key event to a <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnCompoundKeyReleased(yWorks.Canvas.Input.CompoundKeyEventArgs)"></see> methods as well as redispatch the last mouse
            event.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Tries to gain the focus if the parent canvas control is enabled.
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DPressed(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
      <summary>
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DEntered(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
      <summary>
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DExited(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DMoved(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> or <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DDragged(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> methods.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DReleased(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> and possibly <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DClicked(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> methods.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>
            This will transform the mouse event to a <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> event and
            invoke the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DWheelTurned(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            </summary>
      <param name="e">the event argument</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were pressed.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that one or more mouse buttons were released.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
                    Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data. 
                </summary>
      <param name="sizeInfo">
                    Details of the old and new size involved in the change.
                </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasContentHost.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
                    Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. 
                </summary>
      <param name="e">
                    The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="P:yWorks.Canvas.CanvasContentHost.VisualChildrenCount">
      <summary>
                    Gets the number of visual child elements within this element.
                </summary>
      <returns>
                    The number of visual child elements for this element.
                </returns>
    </member>
    <member name="T:yWorks.Canvas.CanvasContext">
      <summary>
            A dummy <see cref="T:yWorks.Canvas.ICanvasContext"></see> implementation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasContext.#ctor(System.Double,System.Double)">
      <summary>
            Provides a default immutable context with a specified hit radius and a zoom level.
            </summary>
      <param name="zoom">the zoom level</param>
      <param name="hitTestRadius">the hit test radius</param>
    </member>
    <member name="F:yWorks.Canvas.CanvasContext.Default">
      <summary>
            Provides a default immutable context with a hit radius of 3 and a zoom level of 1.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasContext.HitTestRadius">
      <summary>
            Returns the zoom hit test radius.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasContext.Lookup(System.Type)">
      <summary>
            This implementation always yields <see langword="null"></see></summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasContext.Zoom">
      <summary>
            Returns the zoom level.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.CanvasControl">
      <summary>
            The CanvasControl is a custom WPF control that can be used to
            efficiently display all kinds of data.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.#ctor">
      <summary>
            Sole constructor for the CanvasControl.
            This will instantiate and initialize a CanvasControl with default
            properties. The canvas will be empty with no associated <see cref="P:yWorks.Canvas.CanvasControl.InputModes"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor)">
      <summary>
            Adds an element to the root of the internal scene graph.
            </summary>
      <returns>A handle that can be used to control the rendering order and to later remove
            the element from the scene graph.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Adds an element to the internal scene graph to the specified group.
            The descriptor will be queried for the various
            implementations for the given <paramref name="userObject"></paramref> at rendering time.
            </summary>
      <returns>A handle that can be used to control the rendering order and to later remove
            the element from the scene graph.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Add(yWorks.Canvas.Drawing.IPaintable)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> instance to the scene graph using
            <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.Paintable"></see> as the <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>.
            </summary>
      <param name="paintable">the paintable instance to use</param>
      <returns>the handle for the newly created scene graph element</returns>
      <exception cref="T:System.ArgumentNullException">If the paintable is null.</exception>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Add(yWorks.Canvas.Drawing.IPaintable,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> instance to the scene graph to the specified group using
            <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.Paintable"></see> as the <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>.
            This method is equivalent to calling <see cref="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)"></see> with
            <c>CanvasObjectDescriptor.Paintable</c> as the second argument and a non-null first argument.
            </summary>
      <param name="paintable">the paintable instance to use</param>
      <param name="group">The group to add the paintable to.</param>
      <returns>the handle for the newly created scene graph element</returns>
      <exception cref="T:System.ArgumentNullException">If the paintable is null.</exception>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddCreator(yWorks.Canvas.Drawing.IVisualCreator)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> instance to the scene graph using
            <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.Instance"></see> as the <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>.
            This method is equivalent to calling <see cref="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor)"></see> with
            <c>CanvasObjectDescriptor.Instance</c> as the second argument and a non-null first argument.
            </summary>
      <param name="visualCreator">the creator instance to use</param>
      <returns>the handle for the newly created scene graph element</returns>
      <exception cref="T:System.ArgumentNullException">If the creator is null.</exception>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddCreator(yWorks.Canvas.Drawing.IVisualCreator,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> instance to the scene graph to the specified group using
            <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.Instance"></see> as the <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>.
            This method is equivalent to calling <see cref="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)"></see> with
            <c>CanvasObjectDescriptor.Instance</c> as the second argument and a non-null first argument.
            </summary>
      <param name="visualCreator">the visual creator instance to use</param>
      <param name="group">The group to add the visual creator to.</param>
      <returns>the handle for the newly created scene graph element</returns>
      <exception cref="T:System.ArgumentNullException">If the visual creator is null.</exception>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddGroup">
      <summary>
            Adds a new <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see> to the root
            of the current scene graph. This can be used to build groups of
            <see cref="T:yWorks.Canvas.ICanvasObject"></see> instances that can be moved within the scene graph
            or whose <see cref="P:yWorks.Canvas.ICanvasObject.Visible">visibility</see> can be controlled easily.
            </summary>
      <returns>the handle for the newly created group</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddGroup(yWorks.Canvas.IGroupAction)">
      <summary>
            Adds a new <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see> instance to the scene graph at the root
            level with  the specified <see cref="T:yWorks.Canvas.IGroupAction"></see>.
            </summary>
      <param name="action">the action of the group</param>
      <returns>the handle for the newly created group</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddGroupToGroup(yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Adds a new <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see> to the specified group
            in the current scene graph. This can be used to build groups of
            <see cref="T:yWorks.Canvas.ICanvasObject"></see> instances that can be moved within the scene graph
            or whose <see cref="P:yWorks.Canvas.ICanvasObject.Visible">visibility</see> can be controlled easily.
            </summary>
      <param name="group">the group to add the new group to</param>
      <returns>the handle for the newly created group</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AddGroupToGroup(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.IGroupAction)">
      <summary>
            Adds a new <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see> instance to the scene graph to
            the provided group with
            the specified <see cref="T:yWorks.Canvas.IGroupAction"></see>.
            </summary>
      <param name="group">the group to add the new group to</param>
      <param name="action">the action of the group</param>
      <returns>the handle for the newly created group</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.AnimateScrollCommands">
      <summary>
            Gets or sets a value indicating whether <see cref="T:System.Windows.Input.ICommand"></see>s for
            scrolling like <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageDown"></see> etc. the scrolling should be performed
            in animated fashion.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.AnimateScrollCommandsProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.AnimateScrollCommands"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.AnimateScrollTo(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Scrolls to the provided view point and zoom level in an animated fashion.
            </summary>
      <param name="newViewPoint">The new center viewpoint</param>
      <param name="newZoom">The new zoom level.</param>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.AutoDrag">
      <summary>
            Gets or sets a property that causes the control to automatically pan the view
            when the mouse gets dragged outside of the bounds of the control.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.AutoDragChanged">
      <summary>
            An event that gets triggered when the <see cref="P:yWorks.Canvas.CanvasControl.AutoDrag"></see> property
            is changed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.AutoDragInsets">
      <summary>
            Gets or sets the auto drag insets.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.AutoDragInsetsChanged">
      <summary>
            Event that gets raised when the <see cref="P:yWorks.Canvas.CanvasControl.AutoDragInsets"></see> property was changed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.AutoDragInsetsProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.AutoDragInsets"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.AutoDragProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.AutoDrag"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.AutoMouseWheelZoom">
      <summary>
             Determines whether the mouse wheel should be used for zooming.
             If set to <c>false</c> this task can be performed by custom
             IInputMode implementations using the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DWheelTurned"></see> event.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.AutoMouseWheelZoomProperty">
      <summary>
             Dependency Property that determines whether the mouse wheel should be used for zooming.
             If set to <c>false</c> this task can be performed by custom
             IInputMode implementations using the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DWheelTurned"></see> event.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.CanvasControlArrangeRectProperty">
      <summary>
            This is an attached dependency property for UIElements
            that are part of the <see cref="T:yWorks.Canvas.CanvasControl"></see>'s <see cref="T:yWorks.Canvas.ICanvasObject">canvas object</see> tree.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.CaptureAllKeyboardInput">
      <summary>
            Gets or sets a value indicating whether all keyboard input should be captured by this
            control, even if it hosts UIElements, that would otherwise capture those events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.CaptureAllKeyboardInputProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllKeyboardInput"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.CaptureAllMouseInput">
      <summary>
            Gets or sets a value indicating whether all mouse input should be captured by this
            control, even if it hosts UIElements, that would otherwise capture mouse events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.CaptureAllMouseInputProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllMouseInput"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Center">
      <summary>
            Gets or sets the world coordinate at the center of the control.
            This can be used to move the view port.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.CollectCanvasObjects(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ElementFoundCallback)">
      <summary>
            Collects all canvas object instances that are hit at the given coordinate set.
            </summary>
      <param name="location">the coordinates of the query in the world coordinate system</param>
      <param name="ef">the collector callback</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Compare(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasObject)">
      <summary>
            Compares two <see cref="T:yWorks.Canvas.ICanvasObject"></see> instances that are live in this canvas.
            The comparison will yield values greater than zero if and only if
            the second object is rendered after the first one.
            </summary>
      <param name="canvasObject1">the first object to compare</param>
      <param name="canvasObject2">the second object to compare</param>
      <returns>
            0 if canvasObject1 == canvasObject2 <br></br>
            &gt;0 if canvasObject1 is painted before canvasObject2
            &lt;0 if canvasObject1 is painted after canvasObject2
            </returns>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.CompoundKeyPressed">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see> when keys
            are being pressed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.CompoundKeyReleased">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see> when keys
            are being released.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.CompoundKeyTyped">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see> when keys
            are being typed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ComputedHorizontalScrollBarVisibility">
      <summary>
            Gets the computed suggested visibility of a horizontal scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ComputedHorizontalScrollBarVisibilityProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.ComputedHorizontalScrollBarVisibility"></see>
            property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ComputedVerticalScrollBarVisibility">
      <summary>
            Gets the computed suggested visibility of a vertical scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ComputedVerticalScrollBarVisibilityProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.ComputedVerticalScrollBarVisibility"></see>
            property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ContentRect">
      <summary>
            Gets and sets the Rectangle in world coordinates that holds the contents.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.ContentRectChanged">
      <summary>
            EventHandler that gets invoked when the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect">content rectangle</see>
            has been changed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ContentRectProperty">
      <summary>
            Dependency property that backs the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Context">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.ICanvasContext"></see> that describes the
            state of this canvas control.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.CreateDefaultControlTemplate(System.Type)">
      <summary>
            Creates the default <see cref="T:System.Windows.Controls.ControlTemplate"></see> for Controls that are based on <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
      <param name="targetType">The actual subtype of <see cref="T:yWorks.Canvas.CanvasControl"></see>.</param>
      <returns>The template to use by default.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.CreateInputModeContext">
      <summary>
            Factory method for the InputModeContext property. This method will be called
            upon first access to the <see cref="P:yWorks.Canvas.CanvasControl.InputModeContext"></see> property.
            </summary>
      <returns>a new instance of InputModeContext that has this instance set as it's
            <see cref="P:yWorks.Canvas.Input.IInputModeContext.CanvasControl"></see> and uses this instance's </returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.CreateRenderContext">
      <summary>
            Creates an appropriate <see cref="T:yWorks.Canvas.Drawing.IRenderContext">render context</see>
            that can be used to <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">create visuals</see>
            using <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> implementations.
            </summary>
      <returns>A new context instance that is bound to this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.CreateVisualContent(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates the graphical content for this Control.
            </summary>
      <param name="renderContext">The context to use.</param>
      <returns>A compound Visual that represents the contents of this control.</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.DoubleClickSize">
      <summary>
            Gets or sets the area in view coordinates the mouse needs to stay in before multiple
            clicks are considered multiple single clicks instead of multi-clicks. 
            If the mouse stays within this within than
            <see cref="P:yWorks.Canvas.CanvasControl.DoubleClickTime"></see>, multiple clicks will be considered double or multi-clicks.
            The default value is <c>(10, 10)</c>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.DoubleClickSizeProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.DoubleClickSize"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.DoubleClickTime">
      <summary>
            Gets or sets the value of the double click time. 
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.DoubleClickTimeProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.DoubleClickTime"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.DragSize">
      <summary>
            Gets or sets the area in view coordinates the mouse may stay in before a
            movement is considered a drag. If the mouse is moved within this area longer than
            <see cref="P:yWorks.Canvas.CanvasControl.DragTime"></see> milliseconds, the movement will be considered a drag, nevertheless.
            The larger the area the later a mouse movement will be recognized as a drag.
            This influences the click-sensitivity, since a mouse button release is only
            considered a click if there was no drag since the last mouse button press.
            The default value is <c>(5, 5)</c>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.DragSizeProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.DragSize"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.DragTime">
      <summary>
            Gets or sets the value of the drag time. This value indicates the amount of
            time that may pass before a mouse movement is considered a
            drag when the mouse stays within its <see cref="P:yWorks.Canvas.CanvasControl.DragSize"></see> area.
            The higher the value the later a mouse movement will be recognized as a drag.
            This influences the click-sensitivity, since a mouse button release is only
            considered a click if there was no drag since the last mouse button press.
            The default value is 300 milliseconds.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.DragTimeProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.DragTime"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Editable">
      <summary>
              Property that sets the editable state of this canvas.
              IInputMode implementations should honor this property.
              Events will still be delivered to the IInputModes, however they
              should not modify the model.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.EditableChanged">
      <summary>
            Event handler that triggers if the <see cref="P:yWorks.Canvas.CanvasControl.Editable"></see> property changes its value.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.EditableChangedEvent">
      <summary>
            Routed event that is triggered if the <see cref="F:yWorks.Canvas.CanvasControl.EditableProperty"></see> changes its value.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.EditableProperty">
      <summary>
            DependencyProperty that determines whether this control is deemed editable.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.EnumerateCanvasObjects">
      <summary>
            Enumerates over all possible <see cref="T:yWorks.Canvas.ICanvasObject"></see> instances in the tree.
            </summary>
      <returns>An enumerator for all <see cref="T:yWorks.Canvas.ICanvasObject"></see>s in the tree.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.EnumerateCanvasObjects(yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Enumerates over all possible <see cref="T:yWorks.Canvas.ICanvasObject"></see> instances in the tree below the given group.
            </summary>
      <returns>An enumerator for all <see cref="T:yWorks.Canvas.ICanvasObject"></see>s in the tree below the given group.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.EnumerateHits(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Enumerates all hit elements in the canvas.
            Hit testing is performed using the <see cref="M:yWorks.Canvas.ICanvasObjectDescriptor.GetHitTestable(System.Object)"></see>
            instance returned for each visible <see cref="T:yWorks.Canvas.ICanvasObject"></see> in the current scene graph.
            </summary>
      <param name="location">the coordinates to perform the hit test at</param>
      <returns>a live enumeration of the elements that are hit</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.EnumerateHits(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Enumerates all hit elements in the canvas below the given group.
            Hit testing is performed using the <see cref="M:yWorks.Canvas.ICanvasObjectDescriptor.GetHitTestable(System.Object)"></see>
            instance returned for each visible <see cref="T:yWorks.Canvas.ICanvasObject"></see> in the current scene graph.
            </summary>
      <param name="location">the coordinates to perform the hit test at</param>
      <param name="root">the root of the scene graph to use</param>
      <returns>a live enumeration of the elements that are hit</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.EnumerateHits(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasObjectGroup,System.Predicate{yWorks.Canvas.ICanvasObject})">
      <summary>
            Enumerates all hit elements in the canvas below the given group that are accepted by a given filter.
            Hit testing is performed using the <see cref="M:yWorks.Canvas.ICanvasObjectDescriptor.GetHitTestable(System.Object)"></see>
            instance returned for each visible <see cref="T:yWorks.Canvas.ICanvasObject"></see> in the current scene graph.
            </summary>
      <param name="location">the coordinates to perform the hit test at</param>
      <param name="root">the root of the scene graph to use</param>
      <param name="filter">The predicate that decides whether a given canvas object should be considered for testing at all.</param>
      <returns>a live enumeration of the elements that are hit</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToBitmap(System.IO.Stream,System.String,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Convenience method that exports the given world rectangle
            of the control to an image in a stream.
            </summary>
      <param name="stream">The stream to write the image to.</param>
      <param name="worldRect">The rectangle in the world coordinate system to export.</param>
      <param name="format">The output format to use. This must be one of <c>"image/jpeg"</c>, <c>"image/tiff"</c>, <c>"image/gif"</c>, <c>"image/png"</c>, or<c>"image/bmp"</c></param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToBitmap(System.String,System.String)">
      <summary>
            Convenience method that exports the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see>
            of the control to an image in a stream.
            </summary>
      <param name="file">The name of the file to write the image to.</param>
      <param name="format">The output format to use. This must be one of <c>"image/jpeg"</c>, <c>"image/tiff"</c>, <c>"image/gif"</c>, <c>"image/png"</c>, or<c>"image/bmp"</c></param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToXps(System.IO.Stream)">
      <summary>
            Convenience method that exports the current <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see>
            of the control to an XPS stream.
            </summary>
      <param name="stream">the name of the file to write</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToXps(System.IO.Stream,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Convenience method that exports the given world rectangle
            of the control to an XPS stream.
            </summary>
      <param name="stream">The stream to write the XPS file to.</param>
      <param name="worldRect">The rectangle in the world coordinate system to export.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToXps(System.String)">
      <summary>
            Convenience method that exports the current <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see>
            of the control to an XPS file.
            </summary>
      <param name="xpsFile">the name of the file to write</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ExportToXps(System.String,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Convenience method that exports the given world rectangle
            of the control to an XPS file.
            </summary>
      <param name="xpsFile">The name of the file to write</param>
      <param name="worldRect">The rectangle in the world coordinate system to export.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.FitContent">
      <summary>
            Adjusts the view port to fully encompass the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see>.
            The zoom level will not be greater than <c>1.0d</c>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.FitContentCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand"></see> that invokes <see cref="M:yWorks.Canvas.CanvasControl.FitContent"></see> if executed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetBounds(yWorks.Canvas.ICanvasObject)">
      <summary>
            Convenience method that calculates the bounds for a given canvas object in the scene graph.
            </summary>
      <param name="canvasObject">the canvas object to query the bounds from</param>
      <returns>the non-<c>null</c> bounds</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetCanvasControlArrangeRect(System.Windows.UIElement)">
      <summary>
            Helper method that retrieves the <see cref="F:yWorks.Canvas.CanvasControl.CanvasControlArrangeRectProperty"></see>
            from the provided element.
            </summary>
      <param name="element">The element to get the value from.</param>
      <returns>The value of the <see cref="F:yWorks.Canvas.CanvasControl.CanvasControlArrangeRectProperty"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetCanvasObject(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Returns the top most canvas object instance that is hit at the given coordinate set.
            </summary>
      <param name="location">the coordinates of the query in the world coordinate system</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetCanvasObjects(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Returns a list of all canvas objects in hit order at the given world coordinate location.
            </summary>
      <param name="location">the coordinates of the query in the world coordinate system</param>
      <returns>a list of canvas object that are hit in reverse painting order</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetContentHost">
      <summary>
            Returns the <see cref="T:yWorks.Canvas.CanvasContentHost"></see> for this instance that has been declared in the
            <see cref="M:yWorks.Canvas.CanvasControl.OnApplyTemplate">applied template</see>.
            </summary>
      <returns>The content host or <see langword="null"></see> if none has been included in the template.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GetVisualCreator(yWorks.Canvas.ICanvasObject)">
      <summary>
            Convenience method that retrieves the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> for a
            given <see cref="T:yWorks.Canvas.ICanvasObject"></see>.
            </summary>
      <param name="canvasObject">the canvas object to query the visual creator
            implementation from</param>
      <returns>an instance or <c>null</c> if the object does not support the visual creator interface</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.GrowContentRect(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Assures that the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect">content rectangle</see> encompasses the given
            rectangle.
            </summary>
      <param name="boundsToInclude">the rectangle that should be included in the content rectangle</param>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.HitTestRadius">
      <summary>
            Specifies the radius of the area around the mouse in view coordinates in which a
            <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> may lie to be considered a valid hit.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.HitTestRadiusProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.HitTestRadius"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.HorizontalOffset">
      <summary>
            Gets the horizontal offset in the world
            coordinate system that the top-left corner of the viewport is currently displaying. 
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.HorizontalOffsetProperty">
      <summary>
            DependencyProperty that describes the horizontal offset in the world
            coordinate system that the top-left corner of the viewport is currently displaying.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.HorizontalScrollBarPolicy">
      <summary>
              Specifies the visibility policy for the vertical scrollbar.
              Scrollbars don't need to be displayed in order to move the viewport.
              This can be achieved programmatically or using special IInputMode instances.
              The default is <see cref="F:yWorks.Canvas.ScrollBarVisibility.AsNeeded"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.HorizontalScrollBarPolicyProperty">
      <summary>
            Dependency property that backs the <see cref="P:yWorks.Canvas.CanvasControl.HorizontalScrollBarPolicy"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.InputMode">
      <summary>
            Specifies the single <see cref="T:yWorks.Canvas.Input.IInputMode"></see> instance that shall
            be installed for this canvas.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.InputModeChanged">
      <summary>
            Event that is raised when the <see cref="P:yWorks.Canvas.CanvasControl.InputMode"></see> property is changed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.InputModeContext">
      <summary>
            Gets or sets the InputModeContext property.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.InputModeContextChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.Canvas.CanvasControl.InputModeContext"></see> property has been changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.InputModeContextLookup(System.Type)">
      <summary>
            Callback that is used by the default implementation of <see cref="P:yWorks.Canvas.CanvasControl.InputModeContext"></see>
            to resolve <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> calls.
            </summary>
      <param name="type">The Type to query</param>
      <returns>The result of the query.</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.InputModeContextLookupChain">
      <summary>
            Retrieves the <see cref="T:yWorks.Support.LookupChain"></see> that can be used
            do decorate the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> call
            in the <see cref="P:yWorks.Canvas.CanvasControl.InputModeContext"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.InputModeProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.InputMode"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.InputModes">
      <summary>
            Returns the internal list of currently installed <see cref="T:yWorks.Canvas.Input.IInputMode">Input Modes</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Invalidate">
      <summary>
            Invalidates the current control.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.IsHit(yWorks.Canvas.ICanvasObject,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Convenience method that calculates the hit tests a given canvas object in the scene graph.
            </summary>
      <param name="canvasObject">the canvas object to query the bounds from</param>
      <param name="p">the coordinates of the query in the world coordinate system</param>
      <returns>whether the canvas object is hit at the given coordinates</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.LargeHorizontalChange">
      <summary>
            Gets the amount of a large horizontal change as needed for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange"></see>
            of a horizontal scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.LargeHorizontalChangeProperty">
      <summary>
            Read-only DependencyProperty that gets the amount of a large horizontal change
            for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange"></see> property to bind to.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.LargeVerticalChange">
      <summary>
            Gets the amount of a large vertical change as needed for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange"></see>
            of a vertical scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.LargeVerticalChangeProperty">
      <summary>
            Read-only DependencyProperty that gets the amount of a large vertical change
            for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.LargeChange"></see> property to bind to.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.LastMouse2DEvent">
      <summary>
            Gets the last <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">mouse event</see>
            triggered by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MaximumHorizontalOffset">
      <summary>
            Gets the maximum horizontal offset of the viewport.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MaximumHorizontalOffsetProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MinimumHorizontalOffset"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MaximumVerticalOffset">
      <summary>
            Gets the maximum vertical offset of the viewport.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MaximumVerticalOffsetProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MaximumVerticalOffset"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MaximumZoom">
      <summary>
            Gets or sets the maximum zoom factor for this canvas control.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MaximumZoomProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MaximumZoom"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MinimumHorizontalOffset">
      <summary>
            Gets the minimum horizontal offset of the viewport.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MinimumHorizontalOffsetProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MinimumHorizontalOffset"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MinimumVerticalOffset">
      <summary>
            Gets the minimum vertical offset of the viewport.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MinimumVerticalOffsetProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MinimumVerticalOffset"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MinimumZoom">
      <summary>
            Gets or sets the minimum zoom factor for this canvas control.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MinimumZoomProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MinimumZoom"></see> property.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DClicked">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the user clicked the mouse.
            This happens if press and release happens at the same position.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DDragged">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the mouse is being moved while
            at least one of the mouse buttons is pressed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DEntered">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the mouse has entered the canvas.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DExited">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the mouse has exited the canvas.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DMoved">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the mouse has been moved in
            world coordinates.
            Move elements are delivered if no mouse button is pressed.
            This event will be fired, too, if the mouse does not
            move but the world coordinates to which the current mouse position maps
            change. E.g. this will happen if the zoom level or the view point is changed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DPressed">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when a mouse button has been pressed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DReleased">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the a mouse button has been
            released.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.Mouse2DWheelTurned">
      <summary>
            An event that delivers <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> in world coordinates
            using double precision floating points when the mouse wheel has turned.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.MouseWheelZoom(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            This method will be called by the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DWheelTurned(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            If the <see cref="P:yWorks.Canvas.CanvasControl.AutoMouseWheelZoom"></see> property is set to <see langword="true"></see>,
            this method will adjust the current zoom level. If the Control key modifier has
            been pressed this method will keep the world coordinates at the current mouse position,
            i.e. the zoom will not necessarily be into the center of the canvas.
            </summary>
      <param name="e">the event describing the action</param>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.MouseWheelZoomFactor">
      <summary>
            Gets or sets the factor by which the zoom level changes when the mouse wheel is turned.
            The default value is 1.2.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.MouseWheelZoomFactorChanged">
      <summary>
            This event will be raised if the value of the <see cref="P:yWorks.Canvas.CanvasControl.MouseWheelZoomFactor"></see> property
            has been changed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.MouseWheelZoomFactorProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.MouseWheelZoomFactor"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.NavigationCommandsEnabled">
      <summary>
            Gets or sets a value indicating whether navigation related command bindings are enabled.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.NavigationCommandsEnabledProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.NavigationCommandsEnabled"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnApplyTemplate">
      <summary>
            Called after the template has been applied.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnAutoDragChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Called when <see cref="P:yWorks.Canvas.CanvasControl.AutoDrag"></see> property has changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnAutoDragInsetsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.Canvas.CanvasControl.AutoDragInsetsChanged"></see> event.
            </summary>
      <param name="args">The <see cref="T:System.EventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnCompoundKeyPressed(yWorks.Canvas.Input.CompoundKeyEventArgs)">
      <summary>
            Callback method that will be invoked if a key has been pressed.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.CompoundKeyPressed"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            </summary>
      <param name="e">the event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnCompoundKeyReleased(yWorks.Canvas.Input.CompoundKeyEventArgs)">
      <summary>
            Callback method that will be invoked if a key has been released.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.CompoundKeyReleased"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            </summary>
      <param name="e">the event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnCompoundKeyTyped(yWorks.Canvas.Input.CompoundKeyEventArgs)">
      <summary>
            Callback method that will be invoked if a key has been typed.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.CompoundKeyTyped"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            </summary>
      <param name="e">the event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnContentRectChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Callback when the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> property changes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnDragSizeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.CanvasControl.DragSize"></see> property has changed.
            </summary>
      <param name="args">the event parameter</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnDragTimeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.CanvasControl.DragTime"></see> property has changed.
            </summary>
      <param name="args">the event parameter</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnInputModeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Callback that is invoked when the <see cref="P:yWorks.Canvas.CanvasControl.InputMode"></see> property changes.
            This will raise the <see cref="E:yWorks.Canvas.CanvasControl.InputModeChanged"></see> event.
            </summary>
      <param name="eventArgs">the event arguments</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnInputModeContextChanged(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.CanvasControl.InputModeContext"></see> property value changes
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.Canvas.CanvasControl.InputModeContextChanged"></see> event.
            </summary>
      <param name="oldInputModeContext">the old value, which may be <c>null</c> the first time</param>
      <param name="newInputModeContext">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DClicked(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse has been clicked.
            This callback will be called after the <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DReleased(yWorks.Canvas.Input.Mouse2DEventArgs)"></see>
            method has been invoked and only if the mouse has not been moved
            by a great amount since the last <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DPressed(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> event.
            This method will raise the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DClicked"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DDragged(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse gets dragged.
            Moving the mouse while at least one button is pressed is considered
            dragging.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DDragged"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DEntered(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse enters the control.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DEntered"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DExited(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse exits the control.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DExited"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DMoved(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse has been moved and
            no button has been pressed. If a button has been pressed the
            <see cref="M:yWorks.Canvas.CanvasControl.OnMouse2DDragged(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method would have been called.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DMoved"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DPressed(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when a mouse button has been pressed.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DPressed"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DReleased(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when a mouse button has been released.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DReleased"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouse2DWheelTurned(yWorks.Canvas.Input.Mouse2DEventArgs)">
      <summary>
            Callback method that is called when the mouse wheel has been turned.
            This method will trigger the <see cref="E:yWorks.Canvas.CanvasControl.Mouse2DWheelTurned"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            This method will call the <see cref="M:yWorks.Canvas.CanvasControl.MouseWheelZoom(yWorks.Canvas.Input.Mouse2DEventArgs)"></see> method.
            <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs">Mouse 2D Events</see> use the world coordinate
            system rather than the view-coordinate system of the control itself.
            </summary>
      <param name="e">the mouse event describing the action</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnMouseWheelZoomFactorChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Callback that is triggered when the value of the <see cref="P:yWorks.Canvas.CanvasControl.MouseWheelZoomFactor"></see> property
            has been changed.
            </summary>
      <param name="args">the event arguments</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnRender(System.Windows.Media.DrawingContext)">
      <summary>
            Overridden to <see cref="M:yWorks.Canvas.CanvasControl.UpdateVisual">update the visuals</see>
            if necessary.
            </summary>
      <param name="drawingContext"> the context to use</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnViewportChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Callback method that is triggered when the view port has changed.
            The view port is the visible portion of the world rectangle in the
            world coordinate system.
            This method raises the <see cref="E:yWorks.Canvas.CanvasControl.ViewportChanged"></see> event.
            </summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.OnZoomChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Callback that is invoked when the <see cref="P:yWorks.Canvas.CanvasControl.Zoom"></see> property changes.
            This method raises the <see cref="E:yWorks.Canvas.CanvasControl.ZoomChanged"></see> event.
            </summary>
      <param name="eventArgs">
      </param>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.PrepareRenderContext">
      <summary>
            Event that will be triggered before the <see cref="M:yWorks.Canvas.CanvasControl.UpdateVisual">visual tree is updated</see>
            to prepare the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.PrepareRenderContextEvent">
      <summary>
            A routed event, that uses <see cref="F:System.Windows.RoutingStrategy.Direct"></see> routing to allow for
            preparing the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see> before the rendering will be started.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Print">
      <summary>
            Prints this canvas' contents to the default printer.
            </summary>
      <returns>Whether printing has been performed.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.Print(yWorks.Canvas.Geometry.Structs.RectD,System.Boolean,System.Boolean,System.Nullable{yWorks.Canvas.Geometry.Structs.InsetsD})">
      <summary>
            Convenience method that optionally shows a print dialog and prints the contents of the given world rectangle
            to a printer.
            </summary>
      <param name="worldRect">The rectangle in the world coordinate system to print.</param>
      <param name="showPrintDialog">Whether to show a print dialog.</param>
      <param name="showPreview">Whether to show a print preview or just print the rectangle unconditionally.</param>
      <param name="pageMargins">The page margins to use or null to use the default margins.</param>
      <returns>Whether printing has been performed.</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.PrintCommandsEnabled">
      <summary>
            Gets or sets a value indicating whether printing related command bindings are enabled.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.PrintCommandsEnabledProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.PrintCommandsEnabled"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.RaisePrepareRenderContextEvent(yWorks.Canvas.PrepareRenderContextEventArgs)">
      <summary>
            Raises the <see cref="F:yWorks.Canvas.CanvasControl.PrepareRenderContextEvent"></see>.
            </summary>
      <param name="args">The event arguments to raise.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.RaiseUpdatedVisualEvent">
      <summary>
            Raises the <see cref="F:yWorks.Canvas.CanvasControl.UpdatedVisualEvent"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.RaiseUpdatingVisualEvent">
      <summary>
            Raises the <see cref="F:yWorks.Canvas.CanvasControl.UpdatingVisualEvent"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.RedispatchMouse2DEvent">
      <summary>
            Redispatches a previously fired Mouse2DEvent appropriately, e.g. if the
            view port has changed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Root">
      <summary>
            Gets the root of the scene graph. This group cannot be <see cref="M:yWorks.Canvas.ICanvasObject.Remove">removed</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.SetCanvasControlArrangeRect(System.Windows.UIElement,System.Windows.Rect)">
      <summary>
            Helper method that sets the <see cref="F:yWorks.Canvas.CanvasControl.CanvasControlArrangeRectProperty"></see>
            of the provided element.
            </summary>
      <param name="element">The element to get the value from.</param>
      <param name="rect">The new value of the property.</param>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Size">
      <summary>
            Yields the size of the <see cref="M:yWorks.Canvas.CanvasControl.GetContentHost">content host</see> of this control.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.SmallHorizontalChange">
      <summary>
            Gets the amount of a small horizontal change as needed for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"></see>
            of a horizontal scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.SmallHorizontalChangeProperty">
      <summary>
            Read-only DependencyProperty that gets the amount of a small horizontal change
            for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"></see> property to bind to.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.SmallVerticalChange">
      <summary>
            Gets the amount of a small vertical change as needed for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"></see>
            of a vertical scrollbar.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.SmallVerticalChangeProperty">
      <summary>
            Read-only DependencyProperty that gets the amount of a small vertical change
            for the <see cref="P:System.Windows.Controls.Primitives.RangeBase.SmallChange"></see> property to bind to.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ToViewCoordinates(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Converts world coordinates to view coordinates expressed in the control's coordinate system.
            </summary>
      <param name="worldPoint">the coordinates in the world coordinate system</param>
      <returns>returns the coordinates in pixels relative to the controls upper left corner</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ToWorldCoordinates(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Converts view coordinates (expressed in the control's coordinate system) to world coordinates.
            </summary>
      <param name="viewPoint">the coordinates in pixels relative to the controls upper left corner</param>
      <returns>returns the coordinates in the world coordinate system</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.UpdateContentRect">
      <summary>
            Updates the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> to encompass the bounds
            by all elements in the current scene graph.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.UpdateContentRect(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Updates the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> to encompass the bounds
            by all elements in the current scene graph plus the given margins.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.UpdateContentRectCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand"></see> that invokes <see cref="M:yWorks.Canvas.CanvasControl.UpdateContentRect"></see> if executed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.UpdatedVisual">
      <summary>
            Event that will be triggered after the <see cref="M:yWorks.Canvas.CanvasControl.UpdateVisual">visual tree has been updated</see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.UpdatedVisualEvent">
      <summary>
            A routed event, that uses <see cref="F:System.Windows.RoutingStrategy.Direct"></see> routing to indicate that
            the visual of this canvas has been updated.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.UpdateVisual">
      <summary>
            Updates the visual tree that displays the contents of this control in the
            <see cref="T:yWorks.Canvas.CanvasContentHost"></see>.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.UpdatingVisual">
      <summary>
            Event that will be triggered before the <see cref="M:yWorks.Canvas.CanvasControl.UpdateVisual">visual tree is updated</see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.UpdatingVisualEvent">
      <summary>
            A routed event, that uses <see cref="F:System.Windows.RoutingStrategy.Direct"></see> routing to indicate that
            the visual of this canvas is going to be updated.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.VerticalOffset">
      <summary>
            Gets the vertical offset in the world
            coordinate system that the top-left corner of the viewport is currently displaying. 
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.VerticalOffsetProperty">
      <summary>
            DependencyProperty that describes the vertical offset in the world
            coordinate system that the top-left corner of the viewport is currently displaying.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.VerticalScrollBarPolicy">
      <summary>
              Specifies the visibility policy for the vertical scrollbar.
              Scrollbars don't need to be displayed in order to move the viewport.
              This can be achieved programmatically or using special IInputMode instances.
              The default is <see cref="F:yWorks.Canvas.ScrollBarVisibility.AsNeeded"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.VerticalScrollBarPolicyProperty">
      <summary>
            Dependency property that backs the <see cref="P:yWorks.Canvas.CanvasControl.VerticalScrollBarPolicy"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ViewPoint">
      <summary>
            Gets or sets the current view point. The view point is the point in world
            coordinates that is mapped to the top left corner point in the current viewport.
            Setting this point to another value will redispatch the last mouse event as the mouse
            will appear to have been moved or dragged in the world coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ViewPointProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.ViewPoint"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Viewport">
      <summary>
            Returns the currently visible viewing region in world coordinates.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.ViewportChanged">
      <summary>
            A property change event that gets fired when the <see cref="P:yWorks.Canvas.CanvasControl.Viewport"></see>
            property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ViewportHeight">
      <summary>
            Gets the current height of the viewport in the world coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ViewportHeightProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.ViewportHeight"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.ViewportWidth">
      <summary>
            Gets the width of the rectangular viewport in the world coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ViewportWidthProperty">
      <summary>
            Read-only DependencyProperty that gets the width of the rectangular viewport in the world coordinate system.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasControl.Zoom">
      <summary>
            Gets or sets the zoom factor for this canvas control.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.CanvasControl.ZoomChanged">
      <summary>
            This event will be raised if the value of the <see cref="P:yWorks.Canvas.CanvasControl.Zoom"></see> property
            has been changed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasControl.ZoomProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Canvas.CanvasControl.Zoom"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ZoomTo(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Sets the zoom level and view port center to the given values.
            </summary>
      <param name="center">the new center of the view port in world coordinates</param>
      <param name="zoom">the new zoom level</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasControl.ZoomTo(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Sets the zoom level and view port center so that the given rectangle in world coordinates
            fits the viewport.
            </summary>
      <param name="bounds">The coordinates of the rectangle to zoom to.</param>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectAddedEventHandler">
      <summary>
            Event handler signature that is used by events that indicate that a canvas object
            has been added to the scene graph.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="co">the canvas object that has just been added to the scene graph</param>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectChangedEventHandler">
      <summary>
            Event handler signature that is used by events that indicate that a canvas object
            has been somehow changed.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="co">the canvas object that has just been changed</param>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectDescriptor">
      <summary>
            Provides a simple convenience implementations of <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>
            that casts the user object to the required interface.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.DynamicDirtyInstance">
      <summary>
            An implementation that tries to cast the user object to the required interface.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.DynamicDirtyLookup">
      <summary>
            An implementation that tries to lookup the instance from the user object if it is an <see cref="T:yWorks.Support.ILookup"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.DynamicDirtyPaintable">
      <summary>
            An implementation that tries to cast the user object to the required interfaces.
            It will cast the object to <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>
            and use that for the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator">creation and updates</see>
            of the visual.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.GetPaintable(System.Object)"></member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> that will create
            the <see cref="T:System.Windows.Media.Visual"></see> tree for the user object.
            This method may always return the same instance. By contract, clients will
            not cache instances returned, but will always call this method
            before the methods on the instance will be called.
            </summary>
      <param name="forUserObject">the user object to create a Visual for</param>
      <returns>an implementation or <c>null</c> if nothing shall be rendered</returns>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.Instance">
      <summary>
            An implementation that tries to cast the user object to the required interface.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasObjectDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the given canvas object is deemed dirty and needs
            updating.
            </summary>
      <param name="canvasObject">The object to check.</param>
      <param name="context">The context that will be used for the update.</param>
      <returns>Whether an update is needed.</returns>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.Lookup">
      <summary>
            An implementation that tries to lookup the instance from the user object if it is an <see cref="T:yWorks.Support.ILookup"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.NullVisualCreator">
      <summary>
            A void implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            Instead of returning a null reference, this instance can be used instead.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.Paintable">
      <summary>
            An implementation that tries to cast the user object to the required interfaces.
            It will cast the object to <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>
            and use that for the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator">creation and updates</see>
            of the visual.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.CanvasObjectDescriptor.Visual">
      <summary>
            An implementation that will cast the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see> to <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.Visual"></see>
            and use that to insert into the scene graph.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectInvalidatedHandler">
      <summary>
            Event handler signature that will be used by events that indicate a call to
            <see cref="M:yWorks.Canvas.ICanvasObject.Invalidate"></see>.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="canvasObject">the canvas object whose <c>Invalidate</c> method has been called</param>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectMovedEventHandler">
      <summary>
            Event handler signature that is used by events that indicate that a canvas object
            has been moved from one place in the scene graph to another.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="co">the canvas object that has just been removed from the scene graph</param>
      <param name="oldParent">the old parent group of the </param>
      <param name="oldPredecessor">the old predecessor of the object</param>
    </member>
    <member name="T:yWorks.Canvas.CanvasObjectRemovedEventHandler">
      <summary>
            Event handler signature that is used by events that indicate that a canvas object
            has been removed from the scene graph.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="co">the canvas object that has just been removed from the scene graph</param>
      <param name="parent">the old parent group of the </param>
    </member>
    <member name="T:yWorks.Canvas.CanvasPrintDocument">
      <summary>
            This class provides printing capabilities for a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.#ctor">
      <summary>
            Initializes a new instance with no initial <see cref="P:yWorks.Canvas.CanvasPrintDocument.Canvas"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.CanvasPrintDocument"></see> class using the provided control
            for printing.
            </summary>
      <param name="control">The control to print.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CalculatePosterSize(System.Printing.PageMediaSize,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Calculates the size in columns and rows for the currently set <see cref="P:yWorks.Canvas.CanvasPrintDocument.Scale"></see>,
            <see cref="P:yWorks.Canvas.CanvasPrintDocument.PrintRectangle"></see>.
            </summary>
      <returns>The size in paper columns (<see cref="P:System.Windows.Size.Width"></see>) and rows (<see cref="P:System.Windows.Size.Height"></see>).</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.Canvas">
      <summary>
            Gets or sets the canvas to print.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.CenterContent">
      <summary>
            Gets or sets a property that determines whether the contents should be centered on the page.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.ColumnCount">
      <summary>
            Gets or sets the number of columns to use internally for this document.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreateContentUIElement(System.Int32,System.Windows.Size)">
      <summary>
            Callback method that creates the <see cref="T:System.Windows.UIElement"></see> that will be added to a <see cref="T:System.Windows.Documents.FixedPage"></see>
            in <see cref="M:yWorks.Canvas.CanvasPrintDocument.CreateFixedPage(System.Int32,System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD,System.Printing.PageMediaSize)"></see>.
            </summary>
      <param name="page">The page index.</param>
      <param name="printableArea">The printable area.</param>
      <returns>A <see cref="T:System.Windows.UIElement"></see> for adding to a <see cref="T:System.Windows.Documents.FixedPage"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreateDocument(System.Windows.Controls.PageRange,System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD,System.Printing.PageMediaSize)">
      <summary>
            Creates the document that contains the printed contents.
            </summary>
      <param name="pageRange">The page range to print.</param>
      <param name="imageableArea">The imageable area that contains the printing contents.</param>
      <param name="margins">The margins to use.</param>
      <param name="mediaSize">The size of the media.</param>
      <returns>The readily created document that contains the printed contents.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreateDocument(System.Windows.Controls.PrintDialog,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Convenience method that creates the fixed document with the printed contents.
            </summary>
      <param name="dlg">The dialog to obtain the settings from.</param>
      <param name="margins">The margins to use.</param>
      <returns>The created document.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreateFixedDocument(System.Windows.Controls.PageRange,System.Printing.PageMediaSize)">
      <summary>
            Factory method that performs the actual creation of the <see cref="T:System.Windows.Documents.FixedDocument"></see>
            instance.
            </summary>
      <param name="range">The range of pages.</param>
      <param name="mediaSize">The size of the media</param>
      <returns>A new and empty document.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreateFixedPage(System.Int32,System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD,System.Printing.PageMediaSize)">
      <summary>
            Callback method that creates a <see cref="T:System.Windows.Documents.FixedPage"></see>, initializes it and 
            adds the <see cref="M:yWorks.Canvas.CanvasPrintDocument.CreateContentUIElement(System.Int32,System.Windows.Size)">created content</see> to it.
            </summary>
      <param name="page">The page index.</param>
      <param name="imageableArea">The imageable area.</param>
      <param name="margins">The margins.</param>
      <param name="mediaSize">The size of the media.</param>
      <returns>A newly created <see cref="T:System.Windows.Documents.FixedPage"></see> that contains the <see cref="M:yWorks.Canvas.CanvasPrintDocument.CreateContentUIElement(System.Int32,System.Windows.Size)">content UIElement</see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreatePageContent(System.Int32,System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD,System.Printing.PageMediaSize)">
      <summary>
            Callback method that actually creates the content of one page.
            </summary>
      <param name="page">The page index.</param>
      <param name="imageableArea">The imageable area.</param>
      <param name="margins">The margins.</param>
      <param name="mediaSize">The size of the media.</param>
      <returns>A newly created <see cref="T:System.Windows.Documents.PageContent"></see> that has <see cref="M:yWorks.Canvas.CanvasPrintDocument.CreateFixedPage(System.Int32,System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD,System.Printing.PageMediaSize)"></see> added as its sole child.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreatePageVisual(System.Int32)">
      <summary>
            Actually creates the visual for one page.
            </summary>
      <param name="pageNumber">The page number.</param>
      <returns>A visual or <c>null</c> that displays the contents of the page.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.CreatePrintPreviewDocumentViewer">
      <summary>
            Creates the print preview <see cref="T:System.Windows.Controls.DocumentViewer"></see> for <see cref="M:yWorks.Canvas.CanvasPrintDocument.ShowPrintPreviewDialog(System.Windows.Controls.PrintDialog,System.Boolean,System.Windows.Documents.FixedDocument)"></see>.
            </summary>
      <returns>The instance to use.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.GetWorldBounds(System.Int32)">
      <summary>
            Callback method during an <see cref="M:yWorks.Canvas.CanvasPrintDocument.CreateContentUIElement(System.Int32,System.Windows.Size)"></see> call that determines the world
            rectangle to print on the given page.
            </summary>
      <param name="page">The page index (zero-based).</param>
      <returns>The world rectangle to print on the page.</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.PageCount">
      <summary>
            Gets the number of pages for this document.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.PageMarkPrinting">
      <summary>
            Gets or sets a property that determines whether to print page margins.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.PreparePosterPrinting(System.Printing.PageImageableArea,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Called to initialize poster printing.
            </summary>
      <param name="printableArea">the area that is going to be printed</param>
      <param name="margins">The margins to use.</param>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.Print(System.Boolean,System.Boolean)">
      <summary>
            Convenience method that actually <see cref="M:System.Windows.Controls.PrintDialog.PrintDocument(System.Windows.Documents.DocumentPaginator,System.String)">prints the results</see>.
            </summary>
      <param name="showPrintDialog">Whether to show the print dialog.</param>
      <param name="showPreview">Whether to show the print preview dialog.</param>
      <returns>Whether printing has been performed.</returns>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.Print(System.Boolean,System.Boolean,yWorks.Canvas.Geometry.Structs.InsetsD,System.String)">
      <summary>
            Convenience method that actually <see cref="M:System.Windows.Controls.PrintDialog.PrintDocument(System.Windows.Documents.DocumentPaginator,System.String)">prints the results</see>.
            </summary>
      <param name="showPrintDialog">Whether to show the print dialog.</param>
      <param name="showPreview">Whether to show the print preview dialog.</param>
      <param name="margins">The margins to use.</param>
      <param name="description">The description for the print job.</param>
      <returns>Whether printing has been performed.</returns>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.PrintRectangle">
      <summary>
            Gets or sets the rectangle that will be printed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.RenderMargins(System.Int32,System.Windows.Media.DrawingContext,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Callback method that renders the <see cref="P:yWorks.Canvas.CanvasPrintDocument.PageMarkPrinting">page marks</see>.
            </summary>
      <param name="page">The page index.</param>
      <param name="context">The context.</param>
      <param name="bounds">The bounds of the contents.</param>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.RowCount">
      <summary>
            Gets or sets the number of rows to use internally for this document.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.Scale">
      <summary>
            Gets or sets a scale factor to apply for printing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.ScaleDownToFitPage">
      <summary>
            Gets or sets a property that determines whether to scale down the content so that it always fits on one page.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.CanvasPrintDocument.ScaleUpToFitPage">
      <summary>
            Gets or sets a property that determines whether to scale up the content so that it always fills one page as large as possible.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.CanvasPrintDocument.ShowPrintPreviewDialog(System.Windows.Controls.PrintDialog,System.Boolean,System.Windows.Documents.FixedDocument)">
      <summary>
            Callback method that is used by <see cref="M:yWorks.Canvas.CanvasPrintDocument.Print(System.Boolean,System.Boolean,yWorks.Canvas.Geometry.Structs.InsetsD,System.String)"></see>
            to create and display the print preview dialog.
            </summary>
      <param name="printDialog">The print dialog that provides the initial settings of the user.</param>
      <param name="showPrintDialog">if set to <c>true</c> the print dialog configuration button should be shown.</param>
      <param name="document">The document to display and print.</param>
    </member>
    <member name="T:yWorks.Canvas.ContextConfigurator">
      <summary>
            This class sets up a <see cref="T:System.Windows.Media.DrawingContext"></see>'s main properties and an <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>
            object for exporting the contents of a <see cref="T:yWorks.Canvas.CanvasControl"></see> (see <see cref="M:yWorks.Canvas.ContextConfigurator.Setup(yWorks.Canvas.CanvasControl,System.Windows.Media.Transform@,System.Windows.Media.Geometry@)"></see>).
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.#ctor(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Creates a new <see cref="T:yWorks.Canvas.ContextConfigurator"></see> instance for the given world bounds.
            </summary>
      <param name="worldBounds">the bounds of the content to export,
            see <see cref="P:yWorks.Canvas.ContextConfigurator.WorldBounds"></see></param>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.#ctor(yWorks.Canvas.Geometry.Structs.RectD,System.Single)">
      <summary>
            Creates a new <see cref="T:yWorks.Canvas.ContextConfigurator"></see> instance for the given world bounds and scale.
            </summary>
      <param name="worldBounds">the bounds of the content to export,
            see <see cref="P:yWorks.Canvas.ContextConfigurator.WorldBounds"></see></param>
      <param name="scale">the scale, see <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see></param>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.GetScaleForHeight(System.Double)">
      <summary>
            Returns the value to set the <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> to in order to achieve the given
            target height (without <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>).
            </summary>
      <param name="height">the height of the target image</param>
      <returns>the scale value to use</returns>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.GetScaleForWidth(System.Double)">
      <summary>
            Returns the value to set the <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> to in order to achieve the given
            target width (without <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>).
            </summary>
      <param name="width">the width of the target image</param>
      <returns>the scale value to use</returns>
    </member>
    <member name="P:yWorks.Canvas.ContextConfigurator.Margin">
      <summary>
            Gets or sets the margins for the exported image.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ContextConfigurator.Scale">
      <summary>
            Gets or sets the scale for the export.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.SetScaleForHeight(System.Double)">
      <summary>
            Sets the <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> such that the target image has the given height
            (without <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>).
            </summary>
      <param name="height">the target height without margin</param>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.SetScaleForWidth(System.Double)">
      <summary>
            Sets the <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> such that the target image has the given width
            (without <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>).
            </summary>
      <param name="width">the target width without margin</param>
    </member>
    <member name="M:yWorks.Canvas.ContextConfigurator.Setup(yWorks.Canvas.CanvasControl,System.Windows.Media.Transform@,System.Windows.Media.Geometry@)">
      <summary>
            Returns an initialized <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see> and a transform
            and clip that can be used to set on a Visual.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see> instance to export from</param>
      <param name="transform">The transform to use for the visual to paint in the world coordinate system.</param>
      <param name="clip">The clip to set on the visual in order not to paint beyond the margins.</param>
      <returns>an <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see> to use</returns>
    </member>
    <member name="P:yWorks.Canvas.ContextConfigurator.ViewHeight">
      <summary>
            Gets the resulting height of the target image with respect to <see cref="P:yWorks.Canvas.ContextConfigurator.WorldBounds"></see>,
            <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> and <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ContextConfigurator.ViewWidth">
      <summary>
            Gets the resulting width of the target image with respect to <see cref="P:yWorks.Canvas.ContextConfigurator.WorldBounds"></see>,
            <see cref="P:yWorks.Canvas.ContextConfigurator.Scale"></see> and <see cref="P:yWorks.Canvas.ContextConfigurator.Margin"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ContextConfigurator.WorldBounds">
      <summary>
            Gets or sets the bounds of the content to export in world coordinates.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.ElementFoundCallback">
      <summary>
            Callback used by <see cref="M:yWorks.Canvas.CanvasControl.CollectCanvasObjects(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ElementFoundCallback)"></see>.
            </summary>
      <param name="co">The element that has been found.</param>
      <returns>Whether to continue collecting elements.</returns>
    </member>
    <member name="T:yWorks.Canvas.ICanvasContext">
      <summary>
            This interface describes the context for many operations performed
            on items in a <see cref="T:yWorks.Canvas.CanvasControl"></see>. 
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasContext.HitTestRadius">
      <summary>
            The radius for hit tests and marquee selection tests in world coordinates.
            This value already takes the zoom level into account.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasContext.Zoom">
      <summary>
            Returns the current zoom level, i.e. the ratio of world coordinates to 
            screen pixels.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.ICanvasObject">
      <summary>
            This is the interface implemented by the basic building blocks of a scene graph
            in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.After(yWorks.Canvas.ICanvasObject)">
      <summary>
            Moves this instance exactly behind the reference item in the referenced item's group 
            rendering list, so that it will
            be painted directly on top of the given reference.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.Before(yWorks.Canvas.ICanvasObject)">
      <summary>
            Moves this instance exactly before the reference item in the referenced item's group 
            rendering list, so that it will
            be painted directly behind the given reference.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Descriptor">
      <summary>
            Gets or sets the descriptor instance that interprets the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see>
            during rendering, hit testing, and bounds calculation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Dirty">
      <summary>
            Gets or sets a flag that indicates whether <see cref="T:yWorks.Canvas.ICanvasObject"></see> needs to be updated
            during the next call to <see cref="M:yWorks.Canvas.CanvasControl.UpdateVisual"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Group">
      <summary>
            Gets or sets the parent group of this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.Invalidate">
      <summary>
            Marks this item as in need of validation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.Lower">
      <summary>
            Moves this instance one step closer to the beginning of the group rendering list, so that it will
            be painted behind its current predecessor.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Next">
      <summary>
            Gets the next item in the list of rendered items that is owned by this element's <see cref="P:yWorks.Canvas.ICanvasObject.Group"></see>.
            </summary>
      <returns>
        <c>null</c> if this item is last in the rendering list of its group
            or the next item otherwise.
            </returns>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Previous">
      <summary>
            Gets the previous item in the list of rendered items that is owned by this element's <see cref="P:yWorks.Canvas.ICanvasObject.Group"></see>.
            </summary>
      <returns>
        <c>null</c> if this item is first in the rendering list of its group
            or the previous item otherwise.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.Raise">
      <summary>
            Moves this instance one step closer to the end of the group rendering list, so that it will
            be painted on top of its current successor.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.Remove">
      <summary>
            Removes this item from the scene graph it currently belongs to.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.ToBack">
      <summary>
            Moves this instance to the beginning of the group rendering list, so that it will be painted
            behind all other items in the same group.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObject.ToFront">
      <summary>
            Moves this instance to the end of the group rendering list, so that it will be painted
            in front of all other items in the same group.
            </summary>
      <returns>
        <c>this</c> so that calls can be chained.</returns>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.UserObject">
      <summary>
            Gets or sets the user object associated with this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObject.Visible">
      <summary>
            Gets or sets the visibility state of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.ICanvasObjectDescriptor">
      <summary>
            Central interface used by the <see cref="T:yWorks.Canvas.CanvasControl"></see> to render elements from 
            the scene graph.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObjectDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObjectDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObjectDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObjectDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> that will create
            the <see cref="T:System.Windows.Media.Visual"></see> tree for the user object.
            This method may always return the same instance. By contract, clients will
            not cache instances returned, but will always call this method
            before the methods on the instance will be called.
            </summary>
      <param name="forUserObject">the user object to create a Visual for</param>
      <returns>an implementation or <c>null</c> if nothing shall be rendered</returns>
    </member>
    <member name="M:yWorks.Canvas.ICanvasObjectDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the given canvas object is deemed dirty and needs
            updating.
            </summary>
      <param name="canvasObject">The object to check.</param>
      <param name="context">The context that will be used for the update.</param>
      <returns>Whether an update is needed.</returns>
    </member>
    <member name="T:yWorks.Canvas.ICanvasObjectGroup">
      <summary>
            This is the interface implemented by the composite building blocks of a scene graph
            in a <see cref="T:yWorks.Canvas.CanvasControl"></see>. 
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObjectGroup.First">
      <summary>
            Returns the first item in the rendering list of this group. This is the item 
            that will be rendered first, i.e. behind all of the other items in the rendering list.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObjectGroup.GroupAction">
      <summary>
            Gets the group action associated with this group instance or <c>null</c>.
            Group actions can be used as callbacks during the traversal of the visual tree.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.ICanvasObjectGroup.Last">
      <summary>
            Returns the last item in the rendering list of this group. This is the item 
            that will be on top of all other items in the list.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.ICanvasObjectTreeEventSource">
      <summary>
            Interface for instances that provide means to register
            event listeners that deal with the modification of a Canvas Object Tree.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.ICanvasObjectTreeEventSource.CanvasObjectAdded">
      <summary>
            Triggered whenever a canvas object has been added to the canvas object tree.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.ICanvasObjectTreeEventSource.CanvasObjectInvalidated">
      <summary>
            Triggered whenever a canvas object has been <see cref="M:yWorks.Canvas.ICanvasObject.Invalidate">invalidated.</see></summary>
    </member>
    <member name="E:yWorks.Canvas.ICanvasObjectTreeEventSource.CanvasObjectMoved">
      <summary>
            Triggered whenever a canvas object has moved in the canvas object tree.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.ICanvasObjectTreeEventSource.CanvasObjectRemoved">
      <summary>
            Triggered whenever a canvas object has been removed from the canvas object tree.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.ICanvasObjectTreeEventSource.CanvasObjectRemoving">
      <summary>
            Triggered before a canvas object is removed from the tree.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.IGroupAction">
      <summary>
            An action interface for <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>s
            that can be triggered during the scene graph traversal.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IGroupAction.PostVisit(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasContext)">
      <summary>
            Called after the children of the group have been visited.
            </summary>
      <param name="group">The group that was visited.</param>
      <param name="canvasContext">The context that is used.</param>
    </member>
    <member name="M:yWorks.Canvas.IGroupAction.PreVisit(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasContext)">
      <summary>
            Called before the children of the group are visited.
            </summary>
      <param name="group">The group that is visited.</param>
      <param name="canvasContext">The context that is used.</param>
    </member>
    <member name="T:yWorks.Canvas.MouseButtons">
      <summary>
        <see cref="T:System.FlagsAttribute">Flaggable</see> enumeration for the mouse buttons.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.None">
      <summary>
            No mouse button.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.Left">
      <summary>
            The left mouse button.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.Right">
      <summary>
            The right mouse button.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.Middle">
      <summary>
            The middle mouse button.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.X1">
      <summary>
            Extra mouse button 1.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.MouseButtons.X2">
      <summary>
            Extra mouse button 2.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.PaintableVisualCreator">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface that can be used as an adapter to the
            <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.PaintableVisualCreator.#ctor(yWorks.Canvas.Drawing.IPaintable)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.PaintableVisualCreator"></see> class
            using the provided paintable to delegate the painting to.
            </summary>
      <param name="paintable">The paintable.</param>
    </member>
    <member name="M:yWorks.Canvas.PaintableVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Actually draws the paintable onto a <see cref="T:System.Windows.Media.DrawingVisual"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.PaintableVisualCreator.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Actually draws the paintable onto a <see cref="T:System.Windows.Media.DrawingVisual"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.PrepareRenderContextEventArgs">
      <summary>
            The event arguments for the <see cref="T:yWorks.Canvas.PrepareRenderContextEventHandler"></see>
            used by <see cref="F:yWorks.Canvas.CanvasControl.PrepareRenderContextEvent"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.PrepareRenderContextEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.PrepareRenderContextEventArgs"></see> class.
            </summary>
      <param name="routedEvent">The routed event, which is probably <see cref="F:yWorks.Canvas.CanvasControl.PrepareRenderContextEvent"></see>.</param>
      <param name="source">The source that triggered the event.</param>
      <param name="context">The initial context which can be modified by the event handlers
            using the <see cref="P:yWorks.Canvas.PrepareRenderContextEventArgs.Context"></see> property.</param>
    </member>
    <member name="P:yWorks.Canvas.PrepareRenderContextEventArgs.Context">
      <summary>
            Gets or sets the context.
            </summary>
      <exception cref="T:System.ArgumentNullException">If the argument is <see langword="null"></see>.</exception>
    </member>
    <member name="T:yWorks.Canvas.PrepareRenderContextEventHandler">
      <summary>
            The event handler signature for the <see cref="E:yWorks.Canvas.CanvasControl.PrepareRenderContext"></see>
            event.
            </summary>
      <param name="src">The source that triggered the event.</param>
      <param name="args">The event arguments that can be used to modify the <see cref="P:yWorks.Canvas.PrepareRenderContextEventArgs.Context"></see>.</param>
    </member>
    <member name="T:yWorks.Canvas.ScrollBarVisibility">
      <summary>
            Enumeration used by the <see cref="P:yWorks.Canvas.CanvasControl.HorizontalScrollBarPolicy"></see> and
            <see cref="P:yWorks.Canvas.CanvasControl.VerticalScrollBarPolicy"></see> properties.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.ScrollBarVisibility.Never">
      <summary>
            Never display the scroll bar, even if not all of the content is visible.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.ScrollBarVisibility.AsNeeded">
      <summary>
            Display the scroll bar when needed. This is the default behavior in most applications.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.ScrollBarVisibility.Always">
      <summary>
            Always display the scroll bar. If it is not needed, i.e. if all content is already displaying,
            the scroll bar will remain visible but cannot be moved.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.XamlConstants">
      <summary>
            Helper class that contains constants that are used in XAML files
            in conjunction with yFiles.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesCommonMarkupNS">
      <summary>
            The namespace URI for common yFiles extensions to graphml.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesCommonMarkupPrefix">
      <summary>
            The default namespace prefix for <see cref="F:yWorks.Canvas.XamlConstants.YfilesCommonMarkupNS"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesCommonNS">
      <summary>
            The namespace URI for common yFiles extensions to graphml.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesCommonPrefix">
      <summary>
            The default namespace prefix for <see cref="F:yWorks.Canvas.XamlConstants.YfilesCommonNS"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesPrimitivesMarkupNS">
      <summary>
            The namespace URI for common yFiles extensions to graphml.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesWpfXamlNS">
      <summary>
            The namespace URI that is used by the yFiles XAML extensions.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.XamlConstants.YfilesWpfXamlPrefix">
      <summary>
            The preferred namespace prefix for the yFiles XAML extensions.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.AnimationHandler">
      <summary>
            A callback method handler that is used during animations.
            </summary>
      <param name="time">The time parameter that is incremented from 0.0 up to 1.0</param>
    </member>
    <member name="T:yWorks.Canvas.Animation.Animator">
      <summary>
            A helper class that handles <see cref="T:yWorks.Canvas.Animation.IAnimation"></see>
            objects and runs their <see cref="M:yWorks.Canvas.Animation.IAnimation.Animate(System.Double)"></see>
            methods on a <see cref="T:System.Windows.UIElement"></see>'s thread.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.#ctor(System.Windows.UIElement)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Animation.Animator"></see> class using the given control
            instance to <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)"></see> the animations.
            </summary>
      <param name="control">The control.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Animation.Animator"></see> class using the given
            <see cref="T:yWorks.Canvas.CanvasControl"></see> instance to <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)"></see> the animations.
            </summary>
      <param name="canvasControl">The canvas control.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Animate(yWorks.Canvas.Animation.AnimationHandler,System.TimeSpan)">
      <summary>
            Starts animating the given animation for the specified duration.
            </summary>
      <param name="handler">The handler to use for the animation callbacks.</param>
      <param name="duration">The duration that the animation should last.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Animate(yWorks.Canvas.Animation.AnimationHandler,System.TimeSpan,System.EventHandler)">
      <summary>
            Starts to animate the given animation for the specified duration and triggers the callback upon completion.
            </summary>
      <param name="handler">The handler to use for the animation callbacks.</param>
      <param name="duration">The duration in milliseconds that the animation should last.</param>
      <param name="finishedCallback">A callback that will be triggered on the Control's Thread once the animation ended.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Animate(yWorks.Canvas.Animation.IAnimation)">
      <summary>
            Animates the given animation instance.
            </summary>
      <param name="animation">The animation to perform.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Animate(yWorks.Canvas.Animation.IAnimation,System.EventHandler)">
      <summary>
            Animates the given animation instance and triggers the callback upon completion.
            </summary>
      <param name="animation">The animation to perform.</param>
      <param name="finishedCallback">A callback that will be triggered on the Control's Thread once the animation ended. The source
            of the event will be the <paramref name="animation"></paramref> instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.AnimateAndWait(yWorks.Canvas.Animation.AnimationHandler,System.TimeSpan)">
      <summary>
            Starts to animate the given animation for the specified duration.
            </summary>
      <param name="handler">The handler to use for the animation callbacks.</param>
      <param name="duration">The duration in milliseconds that the animation should last.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.AnimateAndWait(yWorks.Canvas.Animation.IAnimation)">
      <summary>
            Animates the given animation instance.
            </summary>
      <param name="animation">The animation to perform.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.CreateThread(System.Threading.ThreadStart)">
      <summary>
            Creates the animation thread.
            </summary>
      <param name="threadStart">The method to invoke on the thread's start.</param>
      <returns>The Thread created.</returns>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Destroy">
      <summary>
            Stops the animations and aborts the animation threads.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.Animator.Finalize">
      <summary>
            Calls <see cref="M:yWorks.Canvas.Animation.Animator.Destroy"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.Animator.UseWaitInputMode">
      <summary>
            Determines whether the <see cref="T:yWorks.Canvas.Input.WaitInputMode"></see> should be queried from the 
            <see cref="T:yWorks.Canvas.CanvasControl"></see> and <see cref="P:yWorks.Canvas.Input.WaitInputMode.Waiting"></see> should be enabled
            during the animation.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.CompositeAnimation">
      <summary>
            A collection of simultaneous <see cref="T:yWorks.Canvas.Animation.IAnimation"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.#ctor">
      <summary>
            Creates an empty <see cref="T:yWorks.Canvas.Animation.CompositeAnimation"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.#ctor(System.Collections.Generic.IEnumerable{yWorks.Canvas.Animation.IAnimation})">
      <summary>
            Creates an instance of <see cref="T:yWorks.Canvas.Animation.CompositeAnimation"></see>.
            </summary>
      <param name="children">The child animations.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.AddChild(yWorks.Canvas.Animation.IAnimation)">
      <summary>
            Adds an animation to this <see cref="T:yWorks.Canvas.Animation.CompositeAnimation"></see> instance.
            </summary>
      <param name="child">The <see cref="T:yWorks.Canvas.Animation.IAnimation"></see> to add.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.Animate(System.Double)">
      <summary>
            Animates all child animations.
            </summary>
      <param name="time">the relative animation time [0,1]</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.Cleanup">
      <summary>
            Calls <see cref="M:yWorks.Canvas.Animation.IAnimation.Cleanup"></see> for all child animations and
            removes all child animations from this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.CompositeAnimation.Initialize">
      <summary>
            Initializes all child animations.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.CompositeAnimation.PreferredDuration">
      <summary>
            Returns the maximum of the preferred durations of the child animations
            or 0, if there are no child animations.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.EasedAnimation">
      <summary>
            Decorator for <see cref="T:yWorks.Canvas.Animation.IAnimation"></see> instances to allow for ease in
            and ease out animation effects.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.EasedAnimation.#ctor(yWorks.Canvas.Animation.IAnimation)">
      <summary>
            Creates an EasedAnimation for the given base animation.
            </summary>
      <param name="baseAnimation">The decorated animation.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.EasedAnimation.#ctor(yWorks.Canvas.Animation.IAnimation,System.Double,System.Double)">
      <summary>
            Creates an EasedAnimation for the given base animation.
            </summary>
      <param name="baseAnimation">The decorated animation.</param>
      <param name="easeIn">The ratio for the ease-in time [0,1].</param>
      <param name="easeOut">The ratio for the ease-out time [0,1].</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.EasedAnimation.Animate(System.Double)">
      <summary>
            Animates the base animation with ease in and ease out.
            </summary>
      <param name="time">The animation time [0,1].</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.EasedAnimation.Cleanup">
      <summary>
            Invokes Cleanup() on the base animation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.EasedAnimation.Initialize">
      <summary>
            Initializes the base animation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.EasedAnimation.PreferredDuration">
      <summary>
            The preferred duration for the base animation.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.GeneralPathAnimation">
      <summary>
            Animates a mutable point along a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.GeneralPathAnimation.#ctor(yWorks.Canvas.Geometry.IPointSetter,yWorks.Canvas.Drawing.GeneralPath,System.TimeSpan)">
      <summary>
            Creates a new instance of class <see cref="T:yWorks.Canvas.Animation.GeneralPathAnimation"></see>.
            </summary>
      <param name="point">The mutable point to animate.</param>
      <param name="path">The animation path.</param>
      <param name="preferredDuration">The preferred duration in milliseconds.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.GeneralPathAnimation.Animate(System.Double)">
      <summary>
            Sets the position of the animated point to the relative position on the general path
            as given by the time parameter.
            </summary>
      <param name="time">The relative animation time [0,1].</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.GeneralPathAnimation.Cleanup">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.GeneralPathAnimation.Initialize">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.GeneralPathAnimation.PreferredDuration">
      <summary>
            Returns the preferred duration in milliseconds.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.IAnimation">
      <summary>
            An interface for animation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.IAnimation.Animate(System.Double)">
      <summary>
            Does the animation according to the relative animation time.
            </summary>
      <param name="time">the animation time [0,1]</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.IAnimation.Cleanup">
      <summary>
            Cleans up after an animation has finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.IAnimation.Initialize">
      <summary>
            Initializes the animation. Call this method once before subsequent
            calls to <see cref="M:yWorks.Canvas.Animation.IAnimation.Animate(System.Double)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.IAnimation.PreferredDuration">
      <summary>
            Gets the preferred duration of the animation.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Animation.ViewportAnimation">
      <summary>
            Animates changing the viewport bounds and the zoom factor for a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Geometry.Structs.RectD,System.TimeSpan)">
      <summary>
            Creates a new instance of <see cref="T:yWorks.Canvas.Animation.ViewportAnimation"></see>.
            </summary>
      <param name="canvasControl">The canvas control.</param>
      <param name="targetBounds">The target world bounds for the animation.</param>
      <param name="preferredDuration">The preferred duration in milliseconds.</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.Animate(System.Double)">
      <summary>
            Does the animation according to the relative animation time.
            </summary>
      <param name="time">the animation time [0,1]</param>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.ApplyCenterPoint(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Effectively applies the center point value.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.ApplyViewPoint(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Effectively applies the view point value.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.ApplyZoom(System.Double)">
      <summary>
            Effectively applies the zoom value.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.Cleanup">
      <summary>
            Cleans up after the animation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Animation.ViewportAnimation.Initialize">
      <summary>
            Initializes this animation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.ViewportAnimation.PreferredDuration">
      <summary>
            Gets or sets the preferred duration in milliseconds.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Animation.ViewportAnimation.TargetBounds">
      <summary>
            Gets or sets the target world bounds.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.BoundsProvider">
      <summary>
            Simple default implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>
            that returns a constant rectangle instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.BoundsProvider.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates an instance that return the given model as the bounds.
            </summary>
      <param name="rect">the rectangle</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.BoundsProvider.#ctor(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Creates an instance that return the a bounding rectangle that uses
            the given .
            </summary>
      <param name="bounds">The bounds to return.</param>
    </member>
    <member name="F:yWorks.Canvas.Drawing.BoundsProvider.Empty">
      <summary>
            An implementation that returns an IBoundsProvider that yields
            an "Empty" bounds.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.BoundsProvider.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the internal instance.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.BoundsProvider.Unbound">
      <summary>
            An implementation that returns an IBoundsProvider that yields
            an "infinite"/unbound bounds.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.GeneralPath">
      <summary>
            Models a path that consists of lines and bezier curves.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.#ctor">
      <summary>
            Creates a new instance with an initial capacity of 32 elements.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.#ctor(System.Int32)">
      <summary>
            Creates a new instance with given inital capacity.
            </summary>
      <param name="capacity">The number of elements for which storage will be allocated initially.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Append(System.Windows.Media.PathFigure,System.Boolean)">
      <summary>
            Appends the contents of the given path to this path.
            </summary>
      <param name="figure">The figure to append to this path.</param>
      <param name="connect">Whether to connect the path to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Append(System.Windows.Media.PathGeometry,System.Boolean)">
      <summary>
            Appends the specified geometry to this path.
            </summary>
      <param name="geometry">The geometry to append.</param>
      <param name="connect">if set to <c>true</c> connects the geometry to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Append(System.Windows.Media.PathGeometry,yWorks.Canvas.Geometry.Matrix2D,System.Boolean)">
      <summary>
            Appends the specified geometry using the provided matrix to this path.
            </summary>
      <param name="geometry">The geometry to append.</param>
      <param name="matrix">The matrix to use to transform the geometry before appending.</param>
      <param name="connect">if set to <c>true</c> connects the geometry to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Append(yWorks.Canvas.Drawing.GeneralPath,System.Boolean)">
      <summary>
            Appends the contents of the given path to this path.
            </summary>
      <param name="other">The path to append to this path.</param>
      <param name="connect">Whether to connect the path to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Append(yWorks.Canvas.Drawing.GeneralPath,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Appends parts of the contents of the given path to this path.
            </summary>
      <param name="other">The path to append to this path.</param>
      <param name="connect">Whether to connect the path to the end of this path.</param>
      <param name="beginIndex">The first element to be copied from <paramref name="other"></paramref>, inclusively.</param>
      <param name="endIndex">The last element to be copied from <paramref name="other"></paramref>, exclusively.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AppendEllipse(yWorks.Canvas.Geometry.IRectangle,System.Boolean)">
      <summary>
            Appends an ellipse using the given bounding box to this instance.
            </summary>
      <param name="bounds">The bounds of the ellipse.</param>
      <param name="connect">Whether to initially <see cref="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(yWorks.Canvas.Geometry.IPoint)"></see> the ellipses lowest point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AppendOrientedRectangle(yWorks.Canvas.Geometry.IOrientedRectangle,System.Boolean)">
      <summary>
            Appends an oriented rectangle to this path instance.
            </summary>
      <param name="rectangle">The oriented rectangle to get the coordinates from.</param>
      <param name="connect">Whether to use a <see cref="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(yWorks.Canvas.Geometry.IPoint)"></see> to the anchor corner.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AppendOutline(System.Windows.Media.Geometry,System.Boolean)">
      <summary>
            Appends the outline of the given geometry to this path.
            </summary>
      <param name="geometry">The geometry to append.</param>
      <param name="connect">if set to <c>true</c> connects the geometry to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AppendRectangle(yWorks.Canvas.Geometry.IRectangle,System.Boolean)">
      <summary>
            Appends a rectangle to this path instance.
            </summary>
      <param name="rectangle">The rectangle to get the coordinates from.</param>
      <param name="connect">Whether to use a <see cref="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(yWorks.Canvas.Geometry.IPoint)"></see> to the upper left corner.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AreaContains(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Checks whether the point lies inside the area that is described by this path instance.
            </summary>
      <param name="p">The coordinates of the point to test.</param>
      <returns>Whether the point lies within the area described by this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AreaContains(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the point lies inside the area that is described by this path instance.
            </summary>
      <param name="p">The coordinates of the point to test.</param>
      <returns>Whether the point lies within the area described by this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.AreaContains(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Checks whether the point lies inside the area that is described by this path instance.
            </summary>
      <param name="p">The coordinates of the point to test.</param>
      <param name="eps">The value to use for flattening bezier curves during the test.</param>
      <returns>Whether the point lies within the area described by this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Clear">
      <summary>
            Resets this path to be an empty path.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Clone">
      <summary>
            Creates a clone of this instance, copying the path information to the new instance.
            </summary>
      <returns>An exact clone of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Close">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.Close"></see> operation to the path elements, creating a line
            to the last <see cref="F:yWorks.Canvas.Drawing.PathType.MoveTo"></see> position.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Compress">
      <summary>
            Compresses the internal data structures so that the amount of memory
            used by this instance is minimal with respect to the informatino stored in it.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CreateCursor">
      <summary>
            Creates a cursor for iterating over the elements of this path.
            </summary>
      <returns>A cursor to iterate over this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CreateGeneralPath(System.Windows.Media.Matrix)">
      <summary>
            Creates a new GeneralPath that is a copy of this path with all geometry transformed
            using the supplied matrix.
            </summary>
      <param name="transform">The matrix to multiply the geometry with.</param>
      <returns>A new path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CreateGeneralPath(yWorks.Canvas.Geometry.Matrix2D)">
      <summary>
            Creates a new GeneralPath that is a copy of this path with all geometry transformed
            using the supplied matrix.
            </summary>
      <param name="transform">The matrix to multiply the geometry with.</param>
      <returns>A new path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CreatePath(yWorks.Canvas.Geometry.Matrix2D)">
      <summary>
            Creates a GraphicsPath from the current path using the given transform.
            </summary>
      <param name="transform">
      </param>
      <returns>A GraphicsPath instance that can be used to render this path to a
            Graphics context.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CropAfter(yWorks.Canvas.Drawing.GeneralPath.PathCursor)">
      <summary>
            Crops the path after the position indicated by the cursor.
            </summary>
      <param name="cursor">The cursor that depicts a position in this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CropBefore(yWorks.Canvas.Drawing.GeneralPath.PathCursor)">
      <summary>
            Crops the path before the position indicated by the cursor.
            </summary>
      <param name="cursor">The cursor that depicts a position in this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CubicTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.CubicTo">cubic bezier curve</see> to the path elements.
            </summary>
      <param name="c1x">The x coordinate of the first bezier control point.</param>
      <param name="c1y">The y coordinate of the first bezier control point.</param>
      <param name="c2x">The x coordinate of the second bezier control point.</param>
      <param name="c2y">The y coordinate of the second bezier control point.</param>
      <param name="x">The x coordinate of the curve's end point.</param>
      <param name="y">The y coordinate of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CubicTo(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.CubicTo">cubic bezier curve</see> to the path elements.
            </summary>
      <param name="c1">The coordinates of the first bezier control point.</param>
      <param name="c2">The coordinates of the second bezier control point.</param>
      <param name="p">The coordinates of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.CubicTo(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.CubicTo">cubic bezier curve</see> to the path elements.
            </summary>
      <param name="c1">The coordinates of the first bezier control point.</param>
      <param name="c2">The coordinates of the second bezier control point.</param>
      <param name="p">The coordinates of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.EnsureCapacity(System.Int32)">
      <summary>
            Ensures that this path can contain <paramref name="coords"></paramref> more coordinates and an additional
            type.
            </summary>
      <param name="coords">The number of coordinates to hold for the next type to be added.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.FindLineIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection point between a line and this general path.
            </summary>
      <param name="lp1">The coordinates of the first point of the line.</param>
      <param name="lp2">The coordinates of the second point of the line.</param>
      <returns>The factor to calculate the intersection point or <c>double.PositiveInifity</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.FindLineIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Finds an intersection point between a line and this general path.
            </summary>
      <param name="lp1">The coordinates of the first point of the line.</param>
      <param name="lp2">The coordinates of the second point of the line.</param>
      <param name="eps">The value to use for interpolating bezier curves.</param>
      <returns>The factor to calculate the intersection point or <c>double.PositiveInifity</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.FindRayIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the first intersection of a ray with this general path.
            </summary>
      <param name="anchor">The coordinate of the anchor point of the ray.</param>
      <param name="direction">The coordinates of the direction vector of the ray.</param>
      <returns>The factor to calculate the intersection point or <c>double.PositiveInifity</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.FindRayIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Finds the first intersection of a ray with this general path using a given espilon
            for flattening bezier curves contained in the path.
            </summary>
      <param name="anchor">The coordinates of the anchor point of the ray.</param>
      <param name="direction">The coordinates of the direction vector of the ray.</param>
      <param name="eps">The epsilon value that is used for the accuracy with which the implementation
            should test bezier curves within the path for intersections.</param>
      <returns>The factor to calculate the intersection point or <c>double.PositiveInifity</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Flatten(System.Double)">
      <summary>
            Creates a new path from this instance flattening all bezier curves using the given
            epsilon.
            </summary>
      <param name="eps">The maximum value the flattened path may diverge from the original path for the
            bezier curve line interpolations.</param>
      <returns>A new path that does not contain bezier curves.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetBounds">
      <summary>
            Calculates the bounds of this path and returns it.
            </summary>
      <returns>A rectangle that describes the geometric bounds of this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetLength">
      <summary>
            Returns the geometric length of this path.
            </summary>
      <returns>The length of this path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetPoint(System.Double)">
      <summary>
            Gets a point on this path instance at the given ratio.
            </summary>
      <param name="ratio">A value between 0 and 1 inclusively that indicates a ratio from
            the beginning to the end of this path.</param>
      <returns>The coordinates of the point.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetSegmentCount">
      <summary>
            Gets the number of segments in this path, i.e. the number of <see cref="F:yWorks.Canvas.Drawing.PathType.LineTo"></see> and
            <see cref="F:yWorks.Canvas.Drawing.PathType.Close"></see> operations.
            </summary>
      <returns>The number of segments.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetTangent(System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Gets a point and the tangent on this path instance at the given ratio.
            </summary>
      <param name="ratio">A value between 0 and 1 inclusively that indicates a ratio from
            the beginning to the end of this path.</param>
      <param name="p">The value to place the coordinates of the point in.</param>
      <param name="tangent">The value to place the coordinates of the tangent vector at the point in.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.GetTangent(System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Gets a point and the tangent on this path instance at the segment and segment ratio.
            </summary>
      <param name="ratio">A value between 0 and 1 inclusively that indicates a ratio from
            the beginning to the end of the segment at segmentIndex for this path.</param>
      <param name="segmentIndex">The segment index to determine a point at.</param>
      <param name="p">The value to place the coordinates of the point in.</param>
      <param name="tangent">The value to place the coordinates of the tangent vector at the point in.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Intersects(yWorks.Canvas.Geometry.Structs.RectD,System.Double)">
      <summary>
            Checks whether this path intersects the given rectangle.
            </summary>
      <param name="rect">The rectangle to test.</param>
      <param name="eps">The epsilon to use for fuzzy testing.</param>
      <returns>Whether the path described by this instance intersects the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.IsEmpty">
      <summary>
            Returns whether this path contains elements other than an initial MoveTo.
            </summary>
      <returns>Whether the path contains visible parts.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.IsVisible">
      <summary>
            Returns whether the path contains visible parts.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.LastCoordinate">
      <summary>
            Gets the last coordinates of the last path element.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.LastX">
      <summary>
            Gets the last x coordinate of the last path element.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.LastY">
      <summary>
            Gets the last y coordinate of the last path element.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.Length">
      <summary>
            Gets the number of <see cref="T:yWorks.Canvas.Drawing.PathType"></see> operations stored in this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(System.Double,System.Double)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.LineTo"></see> operation to the path elements.
            </summary>
      <param name="x">The x coordinate of the line's end point.</param>
      <param name="y">The y coordinate of the line's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.LineTo"></see> operation to the path elements.
            </summary>
      <param name="p">The coordinates of the line's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.LineTo(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.LineTo"></see> operation to the path elements.
            </summary>
      <param name="p">The coordinates of the line's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.MayIntersectClip(yWorks.Canvas.Geometry.Structs.RectD,System.Double)">
      <summary>
            Performs a quick test to decide whether this path might intersect the 
            clipping rectangle, provided the path would be painted using stroke of the given width.
            </summary>
      <param name="clip">The clip to check for intersection.</param>
      <param name="width">The width of the stroke.</param>
      <returns>
        <c>false</c> if it is guaranteed that this instance would not intersect the given clip.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.MoveTo(System.Double,System.Double)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.MoveTo"></see> operation to the path elements.
            </summary>
      <param name="x">The next x coordinate.</param>
      <param name="y">The next y coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.MoveTo(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.MoveTo"></see> operation to the path elements.
            </summary>
      <param name="point">The next coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.MoveTo(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.MoveTo"></see> operation to the path elements.
            </summary>
      <param name="point">The next coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathContains(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Tests whether the line of the path is hit at the given point using an epsilon
            for fuzzy hit testing.
            </summary>
      <param name="p">The p coordinates of the point to test.</param>
      <param name="eps">The allowed distance from the point to the path that is considered a hit.</param>
      <returns>Whether the point hits the path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Prepend(yWorks.Canvas.Drawing.GeneralPath,System.Boolean)">
      <summary>
            Adds the contents of the given path to the beginning of this path.
            </summary>
      <param name="other">The path to append to this path.</param>
      <param name="connect">Whether to connect the path to the end of this path.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.QuadTo(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.QuadTo">quadratic bezier curve</see> to the path elements.
            </summary>
      <param name="cx">The x coordinate of the bezier control point.</param>
      <param name="cy">The y coordinate of the bezier control point.</param>
      <param name="x">The x coordinate of the curve's end point.</param>
      <param name="y">The y coordinate of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.QuadTo(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.QuadTo">quadratic bezier curve</see> to the path elements.
            </summary>
      <param name="center">The coordinates of the bezier control point.</param>
      <param name="p">The coordinates of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.QuadTo(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Appends a <see cref="F:yWorks.Canvas.Drawing.PathType.QuadTo">quadratic bezier curve</see> to the path elements.
            </summary>
      <param name="center">The coordinates of the bezier control point.</param>
      <param name="p">The coordinates of the curve's end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Render(System.Windows.Media.DrawingContext,System.Windows.Media.Brush,System.Windows.Media.Pen)">
      <summary>
            Both fills and draws a path to the graphics context.
            </summary>
      <param name="g">The graphics context to draw to.</param>
      <param name="brush">The brush to use for filling.</param>
      <param name="pen">The pen to use for drawing.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Render(System.Windows.Media.DrawingContext,yWorks.Canvas.Geometry.Matrix2D,System.Windows.Media.Brush,System.Windows.Media.Pen)">
      <summary>
            Both fills and draws a path to the graphics context using the transformation matrix.
            </summary>
      <param name="g">The graphics context to draw to.</param>
      <param name="brush">The brush to use for filling.</param>
      <param name="pen">The pen to use for drawing.</param>
      <param name="matrix">The transformation to apply to the path before drawing.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.Transform(yWorks.Canvas.Geometry.Matrix2D)">
      <summary>
            Transforms this general path in place using the given transform.
            </summary>
      <param name="transform">The matrix to multiply the geometry with.</param>
    </member>
    <member name="T:yWorks.Canvas.Drawing.GeneralPath.PathCursor">
      <summary>
            A class that is used by <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see> to iterate over the elements
            the path is made up of.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.PathCursor.CurrentEndPoint">
      <summary>
            Gets the current end point of the last path element.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrent(System.Double[])">
      <summary>
            Places the coordinates for the current type into the given array.
            </summary>
      <returns>The current type of the path element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrent(System.Single[])">
      <summary>
            Places the coordinates for the current type into the given array.
            </summary>
      <returns>The current type of the path element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPoint(System.Double@,System.Double@)">
      <summary>
            Places the current end coordinates into the out parameters.
            </summary>
      <param name="x">The x coordinate of the current end point.</param>
      <param name="y">The y coordinate of the current end point.</param>
      <returns>The type of the current element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPoint(System.Double[])">
      <summary>
            Places the current end coordinates of the last path element into the array.
            </summary>
      <param name="coordinates">An array with length at least 2.</param>
      <returns>The type of the current element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPoint(System.Single@,System.Single@)">
      <summary>
            Places the current end coordinates into the out parameters.
            </summary>
      <param name="x">The x coordinate of the current end point.</param>
      <param name="y">The y coordinate of the current end point.</param>
      <returns>The type of the current element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPoint(System.Single[])">
      <summary>
            Places the current end coordinates of the last path element into the array.
            </summary>
      <param name="coordinates">An array with length at least 2.</param>
      <returns>The type of the current element.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPointX">
      <summary>
            Returns the current x coordinate of the last path element.
            </summary>
      <returns>The x coordinate or <c>0</c> if the element is of type <see cref="F:yWorks.Canvas.Drawing.PathType.Close"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetCurrentEndPointY">
      <summary>
            Returns the current y coordinate of the last path element.
            </summary>
      <returns>The y coordinate or <c>0</c> if the element is of type <see cref="F:yWorks.Canvas.Drawing.PathType.Close"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.GetPathType">
      <summary>
            Returns the type of the path at the position of the cursor.
            </summary>
      <returns>The type.</returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.GeneralPath.PathCursor.Index">
      <summary>
            Returns the current position of the cursor.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.MoveNext">
      <summary>
            Advances the cursor to the next position if possible.
            </summary>
      <returns>Whether the cursor has been moved successfully. <c>false</c> if the cursor
            has been moved beyond the end of the path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.MovePrevious">
      <summary>
            Moves the cursor to the previous position in the path.
            </summary>
      <returns>Whether the move was successful.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.Reset">
      <summary>
            Reset the cursor to point to the beginning of the path.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.GeneralPath.PathCursor.ToLast">
      <summary>
            Resets the cursor to point to the last element in the path.
            </summary>
      <returns>Whether the cursor has been moved successfully.</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.HatchBrushes">
      <summary>
            Static helper class that provides convenience access to commonly used
            <see cref="T:System.Windows.Media.Brush"></see> instances.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.HatchBrushes.Hatch50">
      <summary>
            Gets a 50 percent hatch brush.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.HitTestable">
      <summary>
            A utility class that provides simple <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> implementations.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.HitTestable.Always">
      <summary>
            An IHitTestable that always returns true.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.HitTestable.Create(yWorks.Canvas.Drawing.HitTestableHandler)">
      <summary>
            Wrap a handler into an interface.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.HitTestable.Never">
      <summary>
            An IHitTestable that always returns false.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.HitTestableHandler">
      <summary>
            A delegate version of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IBoundsProvider">
      <summary>
            Interface that is implemented for elements that can provide painting 
            bounds in the world coordinate system. This information can be used
            by the rendering engine to increase rendering performance significantly.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IBoundsProvider.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns a tight rectangular area where the whole rendering
            would fit into.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>the bounds or <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Empty"></see> to indicate an unbound area</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IHitTestable">
      <summary>
            Interface that is implemented for elements that can be hit or picked in
            a coordinate system.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IHitTestable.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines if something has been hit at the given coordinates
            in the world coordinate system.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IHitTestEnumerator`1">
      <summary>
            An interface that can enumerate hits of a given type for a certain
            position in world coordinates.
            </summary>
      <typeparam name="T">the type of hits returned by the enumerator</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IHitTestEnumerator`1.EnumerateHits(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Yields an enumerable that enumerates the hits for a given world coordinate.
            </summary>
      <param name="location">the coordinates in the world coordinate system</param>
      <returns>an enumerable that yields hits for the given coordinates</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.ImagePaintable">
      <summary>
            Provides a number of <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementations for painting
            images.
            This is an abstract class that provides a number of factory methods that each return
            a concrete subclass of this.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.#ctor(System.Windows.Media.ImageSource)">
      <summary>
            Subclass constructor that sets the image.
            </summary>
      <param name="image">The image to set.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.Create(System.Windows.Media.ImageSource,System.Double,System.Double)">
      <summary>
            Creates a fixed paintable that draws the image at the given position using its inherent size.
            </summary>
      <param name="image">The image to draw.</param>
      <param name="x">The x coordinate of the position to draw the image at.</param>
      <param name="y">The y coordinate of the position to draw the image at.</param>
      <returns>A paintable that uses the provided values to draw an unscaled version of the image.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.Create(System.Windows.Media.ImageSource,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic paintable that draws the image at the given position using its inherent size.
            </summary>
      <param name="image">The image to draw.</param>
      <param name="position">The position to draw the image at.</param>
      <returns>A paintable that uses the provided values to draw an unscaled version of the image.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.Create(System.Windows.Media.ImageSource,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a dynamic paintable that draws the image at the given position using the provided size.
            </summary>
      <param name="image">The image to draw.</param>
      <param name="position">The position to draw the image at.</param>
      <param name="size">The size of the image to draw.</param>
      <returns>A paintable that uses the provided values to draw a scaled version of the image.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.Create(System.Windows.Media.ImageSource,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a dynamic paintable that draws the image at the given position using its inherent size.
            </summary>
      <param name="image">The image to draw.</param>
      <param name="position">The position to draw the image at.</param>
      <returns>A paintable that uses the provided values to draw an unscaled version of the image.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that
            returns the painting bounds of the paintable.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.ImagePaintable.image">
      <summary>
            The image to paint.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.ImagePaintable.Image">
      <summary>
            Gets or sets the image to paint.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface and tests for hits in the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> interface and tests for marquee intersections with the image.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> interface that
            checks for possible visibililty of the paintable in a clip.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImagePaintable.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface and paints the image.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.ImageSupport">
      <summary>
            Utility class that offers convenience methods for working with <see cref="T:System.Windows.Media.Color"></see>
            instances and applies effects to <see cref="T:System.Windows.Media.Imaging.BitmapSource"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImageSupport.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.ImageSupport" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImageSupport.FromHSB(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a color from HSB values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImageSupport.Mix(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
      <summary>
             Mixes two colors using the provided ratio.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ImageSupport.ToHSB(System.Windows.Media.Color,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Converts an rgb color value to HSB values
            </summary>
      <param name="color">The color.</param>
      <param name="hue">The hue.</param>
      <param name="saturation">The saturation.</param>
      <param name="brightness">The brightness.</param>
      <param name="alpha">The alpha.</param>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IMarqueeTestable">
      <summary>
            Interface that is used to test whether a rendered item is deemed
            to be inside a rectangular marquee selection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IMarqueeTestable.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            This callback returns <c>true</c> if the corresponding 
            item is considered to intersect the given rectangular box.
            This method may return <c>false</c> if the item cannot be
            selected using a selection marquee or optionally if the
            item is only partially contained within the box.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IPaintable">
      <summary>
            Simple interface which is used by implementations that know
            how to render something into a given Graphics context using
            a specific <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IPaintable.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Performs the actual painting into the given graphics context.
            </summary>
      <param name="g">the graphics context to paint into</param>
      <param name="ctx">the render context, that can be used to 
            obtain information about the coordinate systems</param>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IRenderContext">
      <summary>
            An interface that describes the current context for painting routines.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.IRenderContext.Canvas">
      <summary>
            The CanvasControl that the painting is performed to, or <c>null</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.IRenderContext.Clip">
      <summary>
            The clipping rectangle in world coordinates. Painting outside of this clip
            may be skipped altogether.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IRenderContext.ToViewCoordinates(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Converts the given set of world coordinates to a coordinate pair that can
            be used to paint within the <see cref="P:yWorks.Canvas.Drawing.IRenderContext.ViewTransform"></see>.
            </summary>
      <param name="worldPoint">The coordinates in the world coordinate system.</param>
      <returns>The coordinates in the view coordinate system.</returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.IRenderContext.Transform">
      <summary>
            The transform that is used to convert between the <see cref="P:yWorks.Canvas.Drawing.IRenderContext.ViewTransform"></see>
            and the resulting <see cref="P:yWorks.Canvas.Drawing.IRenderContext.WorldTransform"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.IRenderContext.ViewTransform">
      <summary>
            A transform that can be applied to the graphics context in order to paint
            in the view coordinate system.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.IRenderContext.WorldTransform">
      <summary>
            The transform that can be applied to the graphics context in order to paint
            into the world coordinate system.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IVisibilityTest">
      <summary>
            Interface that is implemented for elements that can determine
            whether they might be visible in a given clipping rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IVisibilityTest.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether an element might intersect the visible region for a given context.
            </summary>
      <param name="clip">The visible region clip.</param>
      <param name="ctx">The context to determine the visibility for.</param>
      <returns>
        <see langword="false">
        </see> if and only if the it is safe not to paint the element because
            it would not affect the given clipping region.</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.IVisualCreator">
      <summary>
            Factory interface which is used by implementations that know
            how to create <see cref="T:System.Windows.Media.Visual"></see>s for rendering into a given 
            <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            This method is called by the framework to create a <see cref="T:System.Windows.Media.Visual"></see>
            that will be included into the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="ctx">The context that describes where the visual will be used.</param>
      <returns>The visual to include in the canvas object visual tree. This may be <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.IVisualCreator.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            This method updates or replaces a previously created <see cref="T:System.Windows.Media.Visual"></see> for inclusion
            in the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="ctx">The context that describes where the visual will be used in.</param>
      <param name="oldVisual">The visual instance that had been returned the last time the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see>
            method was called on this instance.</param>
      <returns>
        <paramref name="oldVisual">
        </paramref>, if this instance modified the visual, or a new visual that should replace the
            existing one in the canvas object visual tree.</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.MarqueeTestable">
      <summary>
            A convenience implementation of the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see>
            interface that provide two default instances.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.MarqueeTestable.Always">
      <summary>
            An implementation that always yields <see langword="true"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.MarqueeTestable.Never">
      <summary>
            An implementation that always yields <see langword="false"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable">
      <summary>
            A specialized subclass of <see cref="T:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable"></see>
            that redefines the <see cref="M:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.GetPenKey"></see> and <see cref="M:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.GetBrushKey"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.#ctor(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable"></see> class.
            that uses the provided <paramref name="bounds"></paramref> for painting.
            </summary>
      <param name="bounds">The bounds to query for the painting.</param>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Brush"></see>
            that will be used to fill the rectangular focus.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.GetBrushKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the brush.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.BrushKey"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.GetPenKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the pen.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.PenKey"></see></returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleFocusPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the rectangular focus.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see>, <see cref="T:yWorks.Canvas.Input.IFocusIndicatorInstaller"></see> and <see cref="T:yWorks.Canvas.Input.IHighlightInstaller"></see>
            implementation
            that draws an oriented rectangle as a highlight box.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.#ctor(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable"></see> class.
            </summary>
      <param name="bounds">The bounds to query for the painting.</param>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Brush"></see>
            that will be used to fill the rectangular focus.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.GetBrushKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the brush.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.BrushKey"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.GetPenKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the pen.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.PenKey"></see></returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleHighlightPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the rectangular focus.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see>, <see cref="T:yWorks.Canvas.Input.IFocusIndicatorInstaller"></see> and <see cref="T:yWorks.Canvas.Input.IHighlightInstaller"></see>
            implementation
            that draws an oriented rectangle as a selection box.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.#ctor(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Creates a selection paintable that paints the bounds.
            </summary>
      <param name="bounds">The bounds to query for the painting.</param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.Brush">
      <summary>
            Gets or sets the brush to use for filling the rectangle in the view coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.Brush"></see>
            that will be used to fill the rectangular selection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.GetBrushKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the brush.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.BrushKey"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.GetPenKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the pen.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.PenKey"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.GetRectangle(System.Object)">
      <summary>
            Factory method that retrieves the bounds for a given user object.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.Install(yWorks.Canvas.Model.IInstallerContext,System.Object)">
      <summary>
            Implements the interface and installs a rectangle into the canvas control.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.Pen">
      <summary>
            Gets or sets the pen to use for drawing the rectangle in the view coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.OrientedRectangleSelectionPaintable.Pen"></see>
            that will be used to draw the rectangular selection.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Paintables">
      <summary>
            Utility class that deals with <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Paintables.Create(yWorks.Canvas.Drawing.PaintHandler)">
      <summary>
            Wrap a paint handler into an interface.
            </summary>
      <param name="handler">The handler to delegate calls to.</param>
      <returns>An implementation that delegates to the handler.</returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.Paintables.Empty">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface that does nothing.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.PaintHandler">
      <summary>
            A delegate version of the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.PathType">
      <summary>
            An enumeration of all possible types that make up a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see></summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.PathType.MoveTo">
      <summary>
            The type that is used to move the pen to the next position.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.PathType.LineTo">
      <summary>
            The type that is used to add a line from the current position to the next position.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.PathType.QuadTo">
      <summary>
            The type that is used to add a quadratic bezier curve from the current position 
            to the next position using one control point.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.PathType.CubicTo">
      <summary>
            The type that is used to add a cubic bezier curve from the current position 
            to the next position using two intermediate control points.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.PathType.Close">
      <summary>
            The type that is used to add a line from the current position to the last
            <see cref="F:yWorks.Canvas.Drawing.PathType.MoveTo"></see> position.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Pens">
      <summary>
            Static helper class that provides convenience access to
            <see cref="T:System.Windows.Media.Pen"></see> instances that have a default thickness of 
            1.0d and are frozen for each of the brushes available in <see cref="T:System.Windows.Media.Brushes"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.AliceBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.AliceBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.AntiqueWhite">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.AntiqueWhite"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Aqua">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Aqua"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Aquamarine">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Aquamarine"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Azure">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Azure"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Beige">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Beige"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Bisque">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Bisque"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Black">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Black"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.BlanchedAlmond">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.BlanchedAlmond"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Blue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Blue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.BlueViolet">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.BlueViolet"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Brown">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Brown"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.BurlyWood">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.BurlyWood"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.CadetBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.CadetBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Chartreuse">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Chartreuse"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Chocolate">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Chocolate"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Coral">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Coral"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.CornflowerBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.CornflowerBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Cornsilk">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Cornsilk"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Crimson">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Crimson"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Cyan">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Cyan"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkCyan">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkCyan"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkGoldenrod">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkGoldenrod"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkKhaki">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkKhaki"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkMagenta">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkMagenta"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkOliveGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkOliveGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkOrange">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkOrange"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkOrchid">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkOrchid"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkRed">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkRed"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkSalmon">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkSalmon"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkSeaGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkSeaGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkSlateBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkSlateBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkSlateGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkSlateGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkTurquoise">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkTurquoise"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DarkViolet">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DarkViolet"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DeepPink">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DeepPink"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DeepSkyBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DeepSkyBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DimGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DimGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.DodgerBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.DodgerBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Firebrick">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Firebrick"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.FloralWhite">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.FloralWhite"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.ForestGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.ForestGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Fuchsia">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Fuchsia"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Gainsboro">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Gainsboro"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.GhostWhite">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.GhostWhite"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Gold">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Gold"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Goldenrod">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Goldenrod"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Gray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Gray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Green">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Green"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.GreenYellow">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.GreenYellow"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Honeydew">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Honeydew"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.HotPink">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.HotPink"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.IndianRed">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.IndianRed"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Indigo">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Indigo"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Ivory">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Ivory"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Khaki">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Khaki"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Lavender">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Lavender"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LavenderBlush">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LavenderBlush"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LawnGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LawnGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LemonChiffon">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LemonChiffon"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightCoral">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightCoral"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightCyan">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightCyan"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightGoldenrodYellow">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightGoldenrodYellow"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightPink">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightPink"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightSalmon">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightSalmon"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightSeaGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightSeaGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightSkyBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightSkyBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightSlateGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightSlateGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightSteelBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightSteelBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LightYellow">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LightYellow"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Lime">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Lime"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.LimeGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.LimeGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Linen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Linen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Magenta">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Magenta"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Maroon">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Maroon"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumAquamarine">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumAquamarine"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumOrchid">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumOrchid"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumPurple">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumPurple"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumSeaGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumSeaGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumSlateBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumSlateBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumSpringGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumSpringGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumTurquoise">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumTurquoise"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MediumVioletRed">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MediumVioletRed"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MidnightBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MidnightBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MintCream">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MintCream"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.MistyRose">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.MistyRose"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Moccasin">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Moccasin"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.NavajoWhite">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.NavajoWhite"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Navy">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Navy"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.OldLace">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.OldLace"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Olive">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Olive"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.OliveDrab">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.OliveDrab"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Orange">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Orange"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.OrangeRed">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.OrangeRed"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Orchid">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Orchid"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PaleGoldenrod">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PaleGoldenrod"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PaleGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PaleGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PaleTurquoise">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PaleTurquoise"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PaleVioletRed">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PaleVioletRed"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PapayaWhip">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PapayaWhip"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PeachPuff">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PeachPuff"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Peru">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Peru"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Pink">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Pink"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Plum">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Plum"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.PowderBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.PowderBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Purple">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Purple"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Red">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Red"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.RosyBrown">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.RosyBrown"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.RoyalBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.RoyalBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SaddleBrown">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SaddleBrown"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Salmon">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Salmon"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SandyBrown">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SandyBrown"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SeaGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SeaGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SeaShell">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SeaShell"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Sienna">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Sienna"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Silver">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Silver"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SkyBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SkyBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SlateBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SlateBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SlateGray">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SlateGray"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Snow">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Snow"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SpringGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SpringGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.SteelBlue">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.SteelBlue"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Tan">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Tan"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Teal">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Teal"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Thistle">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Thistle"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Tomato">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Tomato"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Transparent">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Transparent"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Turquoise">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Turquoise"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Violet">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Violet"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Wheat">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Wheat"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.White">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.White"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.WhiteSmoke">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.WhiteSmoke"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.Yellow">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.Yellow"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Pens.YellowGreen">
      <summary>
            Returns a <see cref="P:System.Windows.Freezable.IsFrozen">frozen</see><see cref="T:System.Windows.Media.Pen"></see> that uses <see cref="P:System.Windows.Media.Brushes.YellowGreen"></see>
            as its <see cref="P:System.Windows.Media.Pen.Brush"></see> and has a <see cref="P:System.Windows.Media.Pen.Thickness"></see>
            of <c>1</c>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.PointSelectionPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see> implementation
            that draws an ellipse centered at a given point in world coordinate space.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.PointSelectionPaintable.#ctor(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a selection paintable that indicates a point.
            </summary>
      <param name="point">The point to use for the center of the painting.</param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.PointSelectionPaintable.Brush">
      <summary>
            Gets or sets the brush to use for filling the point's ellipse in the view coordinate system.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.PointSelectionPaintable.GetCenterPoint(System.Object)">
      <summary>
            Factory method that retrieves the center for a given user object.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.PointSelectionPaintable.Install(yWorks.Canvas.Model.IInstallerContext,System.Object)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.PointSelectionPaintable.Pen">
      <summary>
            Gets or sets the pen to use for drawing the point in the view coordinate system.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.RectangleMarqueeTestable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementation
            that checks for intersection with an <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangleMarqueeTestable.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates an instance using the given rectangle to check for intersection
            with the marquee box.
            </summary>
      <param name="rectangle">The rectangle to query intersections for.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangleMarqueeTestable.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the interface.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.RectangularFocusPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Input.IFocusIndicatorInstaller"></see> implementation
            that draws a rectangle of the bounds of the selected item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularFocusPaintable.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.RectangularFocusPaintable"></see> class.
            </summary>
      <param name="bounds">The bounds.</param>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularFocusPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Brush"></see>
            that will be used to fill the rectangular focus.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularFocusPaintable.GetBrushKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the brush.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.RectangularFocusPaintable.BrushKey"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularFocusPaintable.GetPenKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> to use for the pen.
            </summary>
      <returns>The <see cref="F:yWorks.Canvas.Drawing.RectangularFocusPaintable.PenKey"></see></returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularFocusPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the rectangular focus.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.RectangularHighlightPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see> and <see cref="T:yWorks.Canvas.Input.IHighlightInstaller"></see>
            implementation
            that draws a rectangular marks at the bounds of the selected or highlighted item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularHighlightPaintable.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a selection paintable that paints the bounds.
            </summary>
      <param name="bounds">The bounds to query for the painting.</param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Brush">
      <summary>
            Gets or sets the brush to use for filling the highlight.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularHighlightPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Brush"></see>
            that will be used to fill the highlight.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularHighlightPaintable.GetRectangle(System.Object)">
      <summary>
            Factory method that retrieves the bounds for a given user object.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.HighlightPen">
      <summary>
            Gets or sets the pen to use for drawing the highlight.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularHighlightPaintable.HighlightPenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Pen"></see>
            that will be used to draw the highlight.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Install(yWorks.Canvas.Model.IInstallerContext,System.Object)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Pen">
      <summary>
            Gets or sets the pen to use for drawing.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularHighlightPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularHighlightPaintable.Pen"></see>
            that will be used to draw the rectangular selection.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.RectangularSelectionPaintable">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see> implementation
            that draws a rectangle of the bounds of the selected item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.RectangularSelectionPaintable"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a selection paintable that paints the bounds.
            </summary>
      <param name="bounds">The bounds to query for the painting.</param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Brush">
      <summary>
            Gets or sets the brush to use for filling the rectangle in the view coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularSelectionPaintable.BrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Brush"></see>
            that will be used to fill the rectangular selection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.GetBrushKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Brush"></see>
            to use for drawing the rectangle.
            </summary>
      <returns>A <see cref="T:System.Windows.ResourceKey"></see> that can be used to find an instance of <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Brush"></see> or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.GetPenKey">
      <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Pen"></see>
            to use for drawing the rectangle.
            </summary>
      <returns>A <see cref="T:System.Windows.ResourceKey"></see> that can be used to find an instance of <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Pen"></see> or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.GetRectangle(System.Object)">
      <summary>
            Factory method that retrieves the bounds for a given user object.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Install(yWorks.Canvas.Model.IInstallerContext,System.Object)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Pen">
      <summary>
            Gets or sets the pen to use for drawing the rectangle in the view coordinate system.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.RectangularSelectionPaintable.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="P:yWorks.Canvas.Drawing.RectangularSelectionPaintable.Pen"></see>
            that will be used to draw the rectangular selection.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.ShapePaintable">
      <summary>
            Provides a number of <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementations for simple 
            geometric primitives.
            This is an abstract class that provides a number of factory methods that each return
            a concrete subclass of this.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.ShapePaintable" /> class</summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.ShapePaintable.brush">
      <summary>
            The brush to use for filling the interior of the shape.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.ShapePaintable.Brush">
      <summary>
            Gets or sets the brush for filling the interior of the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateCubicCurvePaintable(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint},System.Double)">
      <summary>
            Creates a dynamic paintable that will use the list of points to 
            create a cubic bezier curve.
            </summary>
      <param name="straightness">The ratio that determines how much the curve will coincide with
            each segment.</param>
      <param name="pointList">The list of points to use during painting.</param>
      <returns>A paintable that uses the points to poly line rounded usinge cubic bezier curves.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateEllipse(System.Windows.Rect)">
      <summary>
            Creates a fixed paintable that will draw
            and fill an ellipse using a provided bounding box.
            </summary>
      <param name="rect">The rectangle that describes the ellipse's bounds.</param>
      <returns>A paintable that draws an ellipse with the given bounds.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateEllipse(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a dynamic paintable that will use a <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> to draw
            and fill an ellipse.
            </summary>
      <param name="rect">The bounds of the ellipse to draw and fill.</param>
      <returns>A paintable that uses the rectangle's bounds to draw an ellipse.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateLine(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic paintable that will use the points to draw a line.
            </summary>
      <param name="p1">The first point that describes the line.</param>
      <param name="p2">The second point that describes the line.</param>
      <returns>A paintable that uses the points to draw a line.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreatePath(System.Windows.Media.Geometry)">
      <summary>
            Creates a dynamic paintable that draws a given path.
            </summary>
      <param name="path">The path to draw.</param>
      <returns>A paintable that fills and draws the path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreatePath(yWorks.Canvas.Drawing.GeneralPath)">
      <summary>
            Creates a dynamic paintable that draws a given path.
            </summary>
      <param name="path">The path to draw.</param>
      <returns>A paintable that fills and draws the path.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreatePolyLinePaintable(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})">
      <summary>
            Creates a dynamic paintable that will use the list of points to 
            create a series of connected line segments.
            </summary>
      <param name="pointList">The list of points to use during painting.</param>
      <returns>A paintable that uses the points to draw a poly line.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreatePolyLineViewPaintable(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})">
      <summary>
            Creates a dynamic paintable that will use the list of points to 
            create a series of connected line segments and paint them in the view coordinate system.
            </summary>
      <param name="pointList">The list of points to use during painting.</param>
      <returns>A paintable that uses the points to draw a poly line with fixed pen width.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateRectangle(System.Windows.Rect)">
      <summary>
            Creates a fixed paintable that will draw
            and fill a rectangle.
            </summary>
      <param name="rect">The rectangle to draw and fill.</param>
      <returns>A paintable that draws a rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateRectangle(yWorks.Canvas.Drawing.IBoundsProvider)">
      <summary>
            Creates a dynamic paintable that will use the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>
            to fill and draw a rectangle.
            </summary>
      <param name="provider">The provider to query the rectangle.</param>
      <returns>A paintable that draws the bounds returned by the provider.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateRectangle(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic paintable that will use two points to 
            draw a rectangle.
            </summary>
      <param name="p1">The first point that defines the bounds of the rectangle.</param>
      <param name="p2">The second point that defines the bounds of the rectangle.</param>
      <returns>A paintable that uses the points to draw a rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateRectangle(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a dynamic paintable that will use a <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> to draw
            and fill a rectangle.
            </summary>
      <param name="rect">The rectangle to draw and fill.</param>
      <returns>A paintable that uses the rectangle's values to draw a rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateRoundedRectanglePaintable(yWorks.Canvas.Geometry.IRectangle,System.Double)">
      <summary>
            Creates a dynamic paintable that will use the points to draw a rounded rectangle
            using the given arc radius.
            </summary>
      <param name="rect">The rectangle to use for the bounds of the rounded rectangle.</param>
      <param name="arcRadius">The radius of the corner arcs.</param>
      <returns>A paintable that uses the points to draw a rounded rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateSmoothedPolyLinePaintable(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint},System.Double)">
      <summary>
            Creates a dynamic paintable that will use the list of points to 
            create a series of connected line segments connected by small arcs.
            </summary>
      <param name="pointList">The list of points to use during painting.</param>
      <param name="smoothing">The radius of the arcs between each two line segments.</param>
      <returns>A paintable that uses the points to draw a rounded poly line.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateViewOrientedRectangle(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Creates a dynamic paintable that will use a <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> to draw
            and fill an IOrientedRectangle in the view coordinate system.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to draw and fill. The rectangle's geometry is 
            stored in world coordinates, it will be painted in the view coordinate system, however.</param>
      <returns>A paintable that uses the rectangle's values to draw an oriented rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateViewRectangle(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic paintable that will use two points to 
            draw a rectangle in the view.
            </summary>
      <param name="p1">The first point that defines the bounds of the rectangle.</param>
      <param name="p2">The second point that defines the bounds of the rectangle.</param>
      <returns>A paintable that uses the points to draw a rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateViewRectangle(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a dynamic paintable that will use a <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> to draw
            and fill a rectangle in the view coordinate system.
            </summary>
      <param name="rect">The rectangle to draw and fill. The rectangle's geometry is 
            stored in world coordinates, it will be painted in the view coordinate system, however.</param>
      <returns>A paintable that uses the rectangle's values to draw a rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface and actually paints the 
            shape onto a <see cref="T:System.Windows.Media.DrawingVisual"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that
            returns the painting bounds of the paintable.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface and tests for hits in the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> interface and tests for marquee intersections with the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> interface that
            checks for possible visibililty of the paintable in a clip.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface and paints the shape.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.ShapePaintable.pen">
      <summary>
            The pen to use for drawing the outline of the shape.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.ShapePaintable.Pen">
      <summary>
            Gets or sets the pen for drawing the outline of the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.ShapePaintable.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface and actually paints the 
            shape onto a <see cref="T:System.Windows.Media.DrawingVisual"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.TextPaintable">
      <summary>
            Provides <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementations for drawing text.
            This is an abstract class that provides factory methods that each return
            a concrete subclass of this.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.#ctor(System.Windows.Media.Typeface,System.Windows.Media.Brush)">
      <summary>
            Constructor for subclasses.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.TextPaintable.brush">
      <summary>
            The brush the draw the text.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.TextPaintable.Brush">
      <summary>
            Gets or sets the brush to draw the text with.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.Create(System.String,System.Windows.Media.Typeface,System.Windows.Media.Brush,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic paintable that renders the string using the font and brush
            at the given location.
            </summary>
      <param name="s">The string to draw.</param>
      <param name="font">The font to use.</param>
      <param name="brush">The brush to use.</param>
      <param name="location">The location of the rendering.</param>
      <returns>A dynamic paintable that renders the text.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.Create(System.Windows.Media.FormattedText,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a dynamic paintable that renders the text
            into the provided rectangle using the given string format.
            </summary>
      <param name="text">The text to draw.</param>
      <param name="box">The box to render into. This instance will be stored by reference and reevaluated for each operation.</param>
      <returns>A dynamic paintable that renders the text.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            This method is called by the framework to create a <see cref="T:System.Windows.Media.Visual"></see>
            that will be included into the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="ctx">The context that describes where the visual will be used.</param>
      <returns>The visual to include in the canvas object visual tree. This may be <see langword="null"></see>.</returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.TextPaintable.font">
      <summary>
            The font to use.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.TextPaintable.Font">
      <summary>
            Gets or sets the font to draw the text with.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that
            returns the painting bounds of the paintable.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface and tests for hits in the shape.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> interface and tests for marquee intersections with the image.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> interface that
            checks for possible visibililty of the paintable in a clip.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface and renders the text.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.TextPaintable.size">
      <summary>
            The size of the font.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.TextPaintable.Size">
      <summary>
            Gets or sets the size of the font.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.TextPaintable.text">
      <summary>
            The text to draw.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.TextPaintable.Text">
      <summary>
            Gets or sets the text to draw.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TextPaintable.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            This method updates or replaces a previously created <see cref="T:System.Windows.Media.Visual"></see> for inclusion
            in the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="ctx">The context that describes where the visual will be used in.</param>
      <param name="oldVisual">The visual instance that had been returned the last time the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see>
            method was called on this instance.</param>
      <returns>
        <paramref name="oldVisual">
        </paramref>, if this instance modified the visual, or a new visual that should replace the
            existing one in the canvas object visual tree.</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.TransformedVisualCreator">
      <summary>
            A decorator implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface that will apply a <see cref="T:System.Windows.Media.Transform"></see> to the 
            created visual.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TransformedVisualCreator.#ctor(yWorks.Canvas.Drawing.IVisualCreator,System.Windows.Media.Transform)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.TransformedVisualCreator"></see> class.
            </summary>
      <param name="creator">The original creator.</param>
      <param name="transform">The transform to apply.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TransformedVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates the visual and applies the transform
            </summary>
      <param name="ctx">The context to use</param>
      <returns>The visual</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.TransformedVisualCreator.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Updates the visual and reapplies the transform
            </summary>
      <param name="ctx">The context to use</param>
      <param name="oldVisual">The old visual</param>
      <returns>The visual</returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.VisibilityTest">
      <summary>
            Utility class that provides simple implementations of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.VisibilityTest.Always">
      <summary>
            An implementation of a <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see>
            that always yields <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VisibilityTest.CreateRectangleBasedTest(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates an implementation of a <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see>
            that delegates to <see cref="M:yWorks.Canvas.Geometry.Structs.RectD.Intersects(yWorks.Canvas.Geometry.Structs.RectD)"></see></summary>
      <param name="rect">The rectangle instance to use for the intersection test with the clip.</param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VisibilityTest.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether an element might intersect the visible region for a given context.
            </summary>
      <param name="clip">The visible region clip.</param>
      <param name="ctx">The context to determine the visibility for.</param>
      <returns>
        <see langword="false">
        </see> if and only if the it is safe not to paint the element because
            it would not affect the given clipping region.</returns>
    </member>
    <member name="F:yWorks.Canvas.Drawing.VisibilityTest.Never">
      <summary>
            An implementation of a <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see>
            that always yields <c>false</c>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.VisualEffectWrapper">
      <summary>
            A decorator class for <see cref="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Visual"></see>s that
            makes the various protected fields "accessible".
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VisualEffectWrapper.#ctor(System.Windows.Media.Visual)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.VisualEffectWrapper"></see> using
            the provided visual.
            </summary>
      <param name="visual">The visual to wrap.</param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.BitMapEffect">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualBitmapEffect"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.BitmapEffectInput">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualBitmapEffectInput"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.BitmapScalingMode">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualBitmapScalingMode"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Clip">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualClip"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.EdgeMode">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualEdgeMode"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VisualEffectWrapper.GetVisualChild(System.Int32)">
      <summary>
                    Returns the specified <see cref="T:System.Windows.Media.Visual" /> in the parent <see cref="T:System.Windows.Media.VisualCollection" />. 
                </summary>
      <param name="index">
                    The index of the visual object in the <see cref="T:System.Windows.Media.VisualCollection" />.
                </param>
      <returns>
                    The child in the <see cref="T:System.Windows.Media.VisualCollection" /> at the specified <paramref name="index" /> value.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Opacity">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualOpacity"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.OpacityMask">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualOpacityMask"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Tag">
      <summary>
            A user defined tag.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Transform">
      <summary>
            Provides public access to the <see cref="P:System.Windows.Media.Visual.VisualTransform"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.Visual">
      <summary>
            Gets or sets the visual.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.VisualEffectWrapper.VisualChildrenCount">
      <summary>
                    Gets the number of child elements for the <see cref="T:System.Windows.Media.Visual" />.
                </summary>
      <returns>
                    The number of child elements.
                </returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Visuals">
      <summary>
            Static helper class that provides utility methods that deal with <see cref="T:System.Windows.Media.Visual"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Visuals.CreateCompoundVisual(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.IVisualCreator,yWorks.Canvas.Drawing.IVisualCreator)">
      <summary>
            Creates a compound visual given a <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>
            and two <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> instances.
            </summary>
      <param name="ctx">The context to use.</param>
      <param name="c1">The first creator or <c>null</c>.</param>
      <param name="c2">The second creator or <c>null</c>.</param>
      <returns>A visual that contains the results of both visual creators.</returns>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Visuals.UpdateCompoundVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual,yWorks.Canvas.Drawing.IVisualCreator,yWorks.Canvas.Drawing.IVisualCreator)">
      <summary>
            Helper method that can be used in conjunction with <see cref="M:yWorks.Canvas.Drawing.Visuals.CreateCompoundVisual(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.IVisualCreator,yWorks.Canvas.Drawing.IVisualCreator)"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.VoidVisualCreator">
      <summary>
            A void/null implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface
            that does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VoidVisualCreator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.VoidVisualCreator" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VoidVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Returns <see langword="null"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Drawing.VoidVisualCreator.Instance">
      <summary>
            An immutable and shareable convenience instance of the <see cref="T:yWorks.Canvas.Drawing.VoidVisualCreator"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.VoidVisualCreator.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Returns <see langword="null"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.Close">
      <summary>
            Helper class for <see cref="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.Close.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Drawing.Markup.Close" /> class</summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.CubicTo">
      <summary>
            Helper class for <see cref="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.CubicTo.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.CubicTo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.CubicTo.#ctor(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.CubicTo.ControlPoint1">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.CubicTo.ControlPoint2">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.CubicTo.Point">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension">
      <summary>
            A <see cref="T:System.Windows.Markup.MarkupExtension"></see> that can be used to read and write
            <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.#ctor(yWorks.Canvas.Drawing.GeneralPath)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.AddChild(System.Object)">
      <summary>
                    Adds a child object. 
                </summary>
      <param name="value">
                    The child object to add.
                </param>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.AddText(System.String)">
      <summary>
                    Adds the text content of a node to the object. 
                </summary>
      <param name="text">
                    The text to add to the object.
                </param>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.Items">
      <summary>
            Contains the items that make up the <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>
                    When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension. 
                </summary>
      <param name="serviceProvider">
                    Object that can provide services for the markup extension.
                </param>
      <returns>
                    The object value to set on the property where the extension is applied. 
                </returns>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.LineTo">
      <summary>
            Helper class for <see cref="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.LineTo.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.LineTo.#ctor(System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.LineTo.#ctor(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.LineTo.Point">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.MoveTo">
      <summary>
            Helper class for <see cref="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.MoveTo.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.MoveTo.#ctor(System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.MoveTo.#ctor(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.MoveTo.Point">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Canvas.Drawing.Markup.QuadTo">
      <summary>
            Helper class for <see cref="T:yWorks.Canvas.Drawing.Markup.GeneralPathMarkupExtension"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.QuadTo.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.QuadTo.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Canvas.Drawing.Markup.QuadTo.#ctor(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.QuadTo.ControlPoint">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Canvas.Drawing.Markup.QuadTo.Point">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.AnchoredPoint">
      <summary>
            Provides implementations of the <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> 
            interface that are dynamically updated depending on the state of
            another geometric primitive they are being anchored to.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.#ctor(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates an implementation using the given anchor and offset.
            </summary>
      <param name="anchor">The anchor.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.AnchoredPoint.Anchor">
      <summary>
            Gets the point this instance is anchored to.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.Create(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates an implementation using the given anchor and an initial offset of (0,0).
            </summary>
      <param name="anchor">The anchor.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates an implementation using the given anchor and offset.
            </summary>
      <param name="anchor">The anchor.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.CreateAbsolute(yWorks.Canvas.Geometry.IPoint,System.Double,System.Double)">
      <summary>
            Creates an implementation using the given anchor and initializing
            the initial offsets so that the resulting point will have its
            initial position at the coordinates provided.
            </summary>
      <param name="anchor">The anchor.</param>
      <param name="x">The initial x coordinate of this point.</param>
      <param name="y">The initial y coordinate of this point.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.CreateCenterOffset(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates an implementation that is anchored to the center of the given rectangle at all times.
            </summary>
      <param name="rect">The rectangle that will be dynamically queried to obtain the center from.</param>
      <param name="relativeLocation">The initial offset to the center of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.CreateCenterOffsetScaled(yWorks.Canvas.Geometry.IRectangle,System.Double,System.Double)">
      <summary>
            Creates an implementation that is anchored to the center of the given rectangle at all times.
            </summary>
      <param name="rect">The rectangle that will be dynamically queried to obtain the center and size from.</param>
      <param name="xRatio">The initial x offset to <see cref="P:yWorks.Canvas.Geometry.ISize.Width"></see> ratio.</param>
      <param name="yRatio">The initial y offset to <see cref="P:yWorks.Canvas.Geometry.ISize.Height"></see> ratio.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.CreateCroppedCenterOffsetScaled(yWorks.Canvas.Geometry.IRectangle,System.Double,System.Double)">
      <summary>
            Creates an implementation that is anchored to the center of the given rectangle at all times and that will
            never lie outside of the bounds of the rectangle.
            </summary>
      <param name="rect">The rectangle that will be dynamically queried to obtain the center and size from.</param>
      <param name="xRatio">The initial x offset to <see cref="P:yWorks.Canvas.Geometry.ISize.Width"></see> ratio.</param>
      <param name="yRatio">The initial y offset to <see cref="P:yWorks.Canvas.Geometry.ISize.Height"></see> ratio.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.CreateOffset(yWorks.Canvas.Geometry.IPoint,System.Double,System.Double)">
      <summary>
            Creates an implementation using the given anchor and offsets.
            </summary>
      <param name="anchor">The anchor.</param>
      <param name="xOffset">The initial x offset.</param>
      <param name="yOffset">The initial y offset.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.AnchoredPoint.Offset">
      <summary>
            Gets the mutable offset this instance uses to calculate its
            position.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.AnchoredPoint.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.AnchoredPoint.X">
      <summary>
            Gets or sets the x coordinate of this instance modifying the offset
            according to the current state of the anchor.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.AnchoredPoint.Y">
      <summary>
            Gets or sets the y coordinate of this instance modifying the offset
            according to the current state of the anchor.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.GeomSupport">
      <summary>
            Utility class that performs all kind of geometric operations.
            Also it serves as a factory for various implementations of geometric
            primitives.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.GeomSupport.EllipseContains(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Checks whether an ellipse contains the given point.
            </summary>
      <param name="ellipseBounds">The coordinates of the bounds of the ellipse's enclosing rectangle.</param>
      <param name="testPoint">The coordinates of the point to test.</param>
      <param name="epsilon">A positive value allows for fuzzy hit testing. If the point lies outside
            the given object but it's distance is less than or equal to that value, it will
            be considered a hit.</param>
      <returns>Whethe the point lies within the ellipse</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.GeomSupport.FindEllipseLineIntersection(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Returns the ellipse/line intersection point for the given point pair.
            </summary>
      <param name="ellipseBounds">The coordinates of the bounds of the ellipse's enclosing rectangle.</param>
      <param name="inner">The coordinates of a point lying inside the ellipse.</param>
      <param name="outer">The coordinates of a point lying outside the ellipse.</param>
      <returns>The intersection point iff the inner point lies inside the ellipse and an intersection point has been found, otherwise <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.GeomSupport.FindRayIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the intersection between a line segment and an infinite ray.
            </summary>
      <param name="l1">The coordinates of the first end point of the line segment.</param>
      <param name="l2">The coordinates of the second end point of the line segment.</param>
      <param name="anchor">The coordinates of the starting point of the ray.</param>
      <param name="rayDirection">The direction vector of the ray.</param>
      <returns>The distance factor or <see cref="F:System.Double.PositiveInfinity"></see> if the ray does not intersect the line.</returns>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IContainsTest">
      <summary>
            An interface that checks for containment of a point in 2D coordinate space.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.IContainsTest.Contains(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether the provided point is deemed to lie within the shape
            this test is implemented for.
            </summary>
      <param name="location">The coordinates of the point to test.</param>
      <returns>
        <c>true</c> iff the point is contained within the shape.</returns>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ImmutableOrientedRectangle">
      <summary>
            An implementation of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> whose state cannot
            be changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an externally immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to dynamically delegate requests to.
            </summary>
      <param name="anchorX">The x coordinate to use for the anchor of the oriented rectangle.</param>
      <param name="anchorY">The y coordinate to use for the anchor of the oriented rectangle.</param>
      <param name="width">The width to use for the size of the rectangle.</param>
      <param name="height">The height to use for the size of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The y component of the up vector.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.#ctor(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize,System.Double,System.Double)">
      <summary>
            Creates an externally immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to dynamically delegate requests to.
            </summary>
      <param name="anchor">The point implementation to use for the anchor of the oriented rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The y component of the up vector.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.AnchorX">
      <summary>
            Returns the x coordinate of the anchor of the oriented rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.AnchorY">
      <summary>
            Returns the y coordinate of the anchor of the oriented rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates an immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to initialize the state.
            </summary>
      <param name="anchor">The point implementation to use for the anchor of the oriented rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <returns>An immutable instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize,System.Double,System.Double)">
      <summary>
            Creates an immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to initialize the state.
            </summary>
      <param name="anchor">The point implementation to use for the anchor of the oriented rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The y component of the up vector.</param>
      <returns>An immutable instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.CreateDynamic(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates an externally immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to dynamically delegate requests to.
            </summary>
      <param name="anchor">The point implementation to use for the anchor of the oriented rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <returns>An instance that cannot be cast to anything mutable.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.CreateDynamic(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize,System.Double,System.Double)">
      <summary>
            Creates an externally immutable <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> implementation
            using the given values to dynamically delegate requests to.
            </summary>
      <param name="anchor">The point implementation to use for the anchor of the oriented rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The y component of the up vector.</param>
      <returns>An instance that cannot be cast to anything mutable.</returns>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Empty">
      <summary>
            An immutable empty IOrientedRectangle with width and height of <c>-1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Height">
      <summary>
            Gets the current width of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.UpX">
      <summary>
            Returns the x value of the up vector.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.UpY">
      <summary>
            Returns the y value of the up vector.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableOrientedRectangle.Width">
      <summary>
            Gets the current width of this oriented rectangle.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ImmutablePoint">
      <summary>
            An implementation of an <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> whose state cannot
            be changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.#ctor(System.Double,System.Double)">
      <summary>
            Creates an instance using the given coordinate pair.
            </summary>
      <param name="x">The x coordinate</param>
      <param name="y">The y coordinate</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.Clone">
      <summary>
            Returns itself as this instance is immutable.
            </summary>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.Create(System.Double,System.Double)">
      <summary>
            Creates an immutable <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> instance
            using the given coordinate pair.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>An immutable instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.Create(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates an immutable <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> instance
            using coordinate of the provided point.
            </summary>
      <param name="p">The p to retrieve the initial state from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.CreateRelativeView(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a read-only view instance of <paramref name="point"></paramref> in the coordinate
            system provided by <paramref name="anchor"></paramref>.
            </summary>
      <param name="anchor">The point which will serve as the origin of the coordinate system in 
            which the second point will be expressed.</param>
      <param name="point">The point to provide a relative view for.</param>
      <returns>An instance that always reflects the relative location of the second point with respect to the first.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.CreateView(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a read-only view instance of the given point.
            </summary>
      <param name="p">The point to create an immutable view from.</param>
      <returns>An instance that always reflects the state of the provided point instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutablePoint.CreateView(yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a read-only view instance of the given <see cref="T:yWorks.Canvas.Geometry.ISize"></see> as a point.
            </summary>
      <param name="size">The size to create an immutable point view from.</param>
      <returns>An instance that always reflects the state of the provided size instance.</returns>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutablePoint.Origin">
      <summary>
            An instance of an immutable point whose coordinates are (0,0) always.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutablePoint.X">
      <summary>
            Returns the x coordinate of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutablePoint.Y">
      <summary>
            Returns the y coordinate of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ImmutableRectangle">
      <summary>
            An implementation of an <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> whose state cannot
            be changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new immutable instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="x">The x coordinate of the upper left corner of the rectangle.</param>
      <param name="y">The y coordinate of the upper left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.#ctor(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a new immutable instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="rect">The rectangle to get the initial values from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.Clone">
      <summary>
            Returns itself.
            </summary>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.Create(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new immutable instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="x">The x coordinate of the upper left corner of the rectangle.</param>
      <param name="y">The y coordinate of the upper left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a new immutable instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="position">The initial upper left corner of the rectangle.</param>
      <param name="size">The initial size of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.CreateDynamic(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates an externally immutable <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> implementation
            using the given values to dynamically delegate requests to.
            </summary>
      <param name="point">The point implementation to use for the position of the rectangle.</param>
      <param name="size">The size implementation to use for the size of the rectangle.</param>
      <returns>An instance that cannot be cast to anything mutable.</returns>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableRectangle.Empty">
      <summary>
            An immutable empty IRectangle with width and height of <c>-1</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableRectangle.Height">
      <summary>
            Gets the height of the rectangle.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableRectangle.Infinite">
      <summary>
            An infinitely large IRectangle with with and height of <c>double.PositiveInfinity</c>
            positioned at <c>(double.NegativeInfinity, double.NegativeInfinity)</c></summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableRectangle.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableRectangle.Width">
      <summary>
            Gets the width of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableRectangle.X">
      <summary>
            Gets the x coordinate of the upper left corner of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableRectangle.Y">
      <summary>
            Gets the y coordinate of the upper left corner of the rectangle.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableRectangle.ZeroInsets">
      <summary>
            An immutable empty IRectangle with x, y, width, and height of <c>0</c>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ImmutableSize">
      <summary>
            An implementation of an <see cref="T:yWorks.Canvas.Geometry.ISize"></see> whose state cannot
            be changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableSize.#ctor(System.Double,System.Double)">
      <summary>
            Creates an instance using the given width and height.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.ImmutableSize.Create(System.Double,System.Double)">
      <summary>
            Creates an immutable instance using the given width and height.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height</param>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableSize.Empty">
      <summary>
            An immutable instance that is treated as an empty size. Both width and height
            are always <c>0.0d</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableSize.Height">
      <summary>
            Returns the height of this instance.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Geometry.ImmutableSize.Unbound">
      <summary>
            An immutable instance that is treated as an unbound size. Both width and height
            are always <see cref="F:System.Double.MaxValue"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ImmutableSize.Width">
      <summary>
            Returns the width of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IMovable">
      <summary>
            Interface that is implemented by geometric objects that
            can be moved.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.IMovable.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Moves the instances coordinates by the given offsets.
            </summary>
      <param name="delta">The offset to move the instance's coordinates by.</param>
      <returns>Whether the instance has been moved.</returns>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IMutableOrientedRectangle">
      <summary>
            Interface for mutable oriented rectangles in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutableOrientedRectangle.AnchorX">
      <summary>
            Gets or sets the x coordinate for the anchor of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutableOrientedRectangle.AnchorY">
      <summary>
            Gets or sets the y coordinate for the anchor of the rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.IMutableOrientedRectangle.SetUpVector(System.Double,System.Double)">
      <summary>
            Sets the orientation of this oriented rectangle 
            by modifying the up vector components.
            </summary>
      <param name="upx">The x component of the normalized up vector.</param>
      <param name="upy">The y component of the normalized up vector.</param>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IMutablePoint">
      <summary>
            Interface for a mutable point in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutablePoint.X">
      <summary>
            Gets or sets the x coordinate for this point.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutablePoint.Y">
      <summary>
            Gets or sets the y coordinate for this point.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IMutableRectangle">
      <summary>
            Interface for mutable rectangles aligned to the axes in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IMutableSize">
      <summary>
            Interface for a mutable size in 2D coordinate space with double precision width and height.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutableSize.Height">
      <summary>
            Gets or sets the height of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IMutableSize.Width">
      <summary>
            Gets or sets the width of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IOrientedRectangle">
      <summary>
            Interface for oriented rectangles in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IOrientedRectangle.AnchorX">
      <summary>
            Returns the x coordinate of the anchor of the oriented rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IOrientedRectangle.AnchorY">
      <summary>
            Returns the y coordinate of the anchor of the oriented rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IOrientedRectangle.UpX">
      <summary>
            Returns the x value of the up vector.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IOrientedRectangle.UpY">
      <summary>
            Returns the y value of the up vector.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IPoint">
      <summary>
            Interface for a point in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IPoint.X">
      <summary>
            Gets the current x coordinate of this point.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IPoint.Y">
      <summary>
            Gets the current y coordinate of this point.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IPointSetter">
      <summary>
            Interface for write access to a point in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IPointSetter.X">
      <summary>
            Sets the x coordinate for the point.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.IPointSetter.Y">
      <summary>
            Sets the y coordinate for the point.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IRectangle">
      <summary>
            Interface for rectangles aligned to the axes in 2D coordinate space with double precision coordinates.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.IReshapeable">
      <summary>
            Interface for geometric primitives that can be reshaped, e.g. <see cref="T:yWorks.Canvas.Geometry.IMutableRectangle"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.IReshapeable.Reshape(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the bounds of the instance to the new values.
            </summary>
      <param name="x">The x coordinate of the upper left corner of the bounds.</param>
      <param name="y">The y coordinate of the upper left corner of the bounds.</param>
      <param name="w">The width of the bounds.</param>
      <param name="h">The height of the bounds</param>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ISize">
      <summary>
            Interface for an object that has a size in 2D coordinate space 
            with double precision floating point size values.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ISize.Height">
      <summary>
            Gets the current height of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ISize.Width">
      <summary>
            Gets the current width of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.ISizeSetter">
      <summary>
            Interface for write access to an instance that has a size in 2D coordinate space 
            with double precision floating point widht and height.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ISizeSetter.Height">
      <summary>
            Sets the height of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.ISizeSetter.Width">
      <summary>
            Sets the width of this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Matrix2D">
      <summary>
            A very simple <see cref="T:System.Windows.Media.Matrix"></see> replacement class,
            that offers better performance for many use cases.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.#ctor">
      <summary>
            Create an identity matrix.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a matrix using the provided matrix entries.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Clone">
      <summary>
            Clone's this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.CreateRotateInstance(System.Double)">
      <summary>
            Creates a matrix rotation instance around the origin.
            </summary>
      <param name="theta">The rotation angle in radians.</param>
      <returns>A new matrix.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Matrix2D.Elements">
      <summary>
            Returns a new double[] of the elements describing the matrix.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Invert">
      <summary>
            Inverts this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Multiply(yWorks.Canvas.Geometry.Matrix2D,yWorks.Canvas.Geometry.MatrixOrder)">
      <summary>
            Multiplies this matrix instance by the given instance using the given order.
            </summary>
      <param name="m">The matrix to multiply with this one.</param>
      <param name="matrixOrder">The order of the multiplication.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.op_Explicit(System.Windows.Media.Matrix)~yWorks.Canvas.Geometry.Matrix2D">
      <summary>
            Casts the given matrix to a matrix of this type.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.op_Explicit(System.Windows.Media.Transform)~yWorks.Canvas.Geometry.Matrix2D">
      <summary>
            Performs an explicit conversion from <see cref="T:System.Windows.Media.Transform"></see> to <see cref="T:yWorks.Canvas.Geometry.Matrix2D"></see>.
            </summary>
      <param name="transform">The transform to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.op_Explicit(yWorks.Canvas.Geometry.Matrix2D)~System.Windows.Media.Matrix">
      <summary>
            Casts a given matrix of this type to a .net matrix.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Reset">
      <summary>
            Resets this instance to the identity.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Rotate(System.Double)">
      <summary>
            Prepends a rotate operation to this matrix.
            </summary>
      <param name="theta">The angle to rotate in radians.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Rotate(System.Double,yWorks.Canvas.Geometry.MatrixOrder)">
      <summary>
            Prepends or appends a rotation operation to this matrix around the origin.
            </summary>
      <param name="theta">The rotation angle in radians</param>
      <param name="order">Whether to append or prepend the rotation matrix.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Rotate(System.Double,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Prepends a rotation operation to this matrix around the specified rotation center.
            </summary>
      <param name="theta">The rotation angle in radians</param>
      <param name="centerPoint">The coordinates of the center of the rotation.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Rotate(System.Double,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.MatrixOrder)">
      <summary>
            Prepends or appends a rotation operation to this matrix around the specified rotation center.
            </summary>
      <param name="theta">The rotation angle in radians</param>
      <param name="centerPoint">The coordinate of the center of the rotation.</param>
      <param name="order">Whether to append or prepend the rotation matrix.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Scale(System.Double,System.Double)">
      <summary>
            Prepends a scale operation to this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Scale(System.Double,System.Double,yWorks.Canvas.Geometry.MatrixOrder)">
      <summary>
            Appends or prepends a scale operation to this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Sets all elements of this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Set(System.Windows.Media.Matrix)">
      <summary>
            Sets the values of the given matrix to this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Set(yWorks.Canvas.Geometry.Matrix2D)">
      <summary>
            Sets the values of the given matrix to this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform(System.Double@,System.Double@)">
      <summary>
            Transforms the given coordinate pair in place.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform(System.Windows.Point@)">
      <summary>
            Transforms the given point in place.
            </summary>
      <param name="p">
      </param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform(System.Windows.Point[])">
      <summary>
            Transforms all of the points in place.
            </summary>
      <param name="p">The points to transform.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform``1(``0)">
      <summary>
            Transforms the given point in place.
            </summary>
      <param name="point">The point to transform and return.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Geometry.Matrix2D.Transform``1(``0)"]</p>
      </typeparam>
      <returns>
        <paramref name="point">
        </paramref>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform``1(yWorks.Canvas.Geometry.IPoint,``0)">
      <summary>
            Transforms the given point.
            </summary>
      <param name="point">The point to transform.</param>
      <param name="result">The point to put the result in and that will be returned.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Geometry.Matrix2D.Transform``1(yWorks.Canvas.Geometry.IPoint,``0)"]</p>
      </typeparam>
      <returns>
        <paramref name="result">
        </paramref>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Transform(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Transforms the given coordinate.
            </summary>
      <param name="p">The coordinate to transform.</param>
      <returns>The transformed coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Translate(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Prepends a translation to this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Matrix2D.Translate(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.MatrixOrder)">
      <summary>
            Appends or Prepends a translation to this instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.MatrixOrder">
      <summary>
            Enumeration constant for use in <see cref="T:yWorks.Canvas.Geometry.Matrix2D"></see> operations.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Geometry.MatrixOrder.Prepend">
      <summary>
            Constant that defines a prepend operation for matrix multiplications.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Geometry.MatrixOrder.Append">
      <summary>
            Constant that defines an append operation for matrix multiplications.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.OrientedRectangle">
      <summary>
            A simple default implementation of a mutable oriented rectangle in 2D coordinate space
            with double precision values stored in an instance of <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>
            and <see cref="T:yWorks.Canvas.Geometry.IMutableSize"></see> as well as two doubles for the up vector components.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.OrientedRectangle"></see> class
            located at <c>0.0d,0.0d</c> with empty width and height (<c>-1.0d</c>).
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="x">The x coordinate of the anchor of the oriented rectangle.</param>
      <param name="y">The y coordinate of the anchor of the oriented rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="x">The x coordinate of the anchor of the oriented rectangle.</param>
      <param name="y">The y coordinate of the anchor of the oriented rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The ycomponent of the up vector.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.#ctor(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutableSize)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="position">The provider for the dynamic anchor of this instance.</param>
      <param name="size">The provider for the dynamic size of this instance.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor">
      <summary>
            Returns the instance that stores the anchor of this oriented rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.AnchorX">
      <summary>
            Gets or sets the x coordinate of the anchor of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.AnchorY">
      <summary>
            Gets or sets the y coordinate of the anchor of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Angle">
      <summary>
            Gets or sets the for the orientation of this rectangle.
            An angle of <c>0</c> means the up vector points up in direction
            <c>(0,-1)</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Clone">
      <summary>
            Creates a copy of the current state of this instance using
            <see cref="T:yWorks.Canvas.Geometry.Point"></see> and <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Size"></see> to store the anchor
            and size.
            </summary>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create">
      <summary>
            Creates a default OrientedRectangle anchored at (0,0) with
            a size of (-1, -1) and an up vector of (0,-1).
            </summary>
      <returns>An empty oriented rectangle instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="x">The x coordinate of the anchor of the oriented rectangle.</param>
      <param name="y">The y coordinate of the anchor of the oriented rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="x">The x coordinate of the anchor of the oriented rectangle.</param>
      <param name="y">The y coordinate of the anchor of the oriented rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
      <param name="upX">The x component of the up vector.</param>
      <param name="upY">The ycomponent of the up vector.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(System.Windows.Rect)">
      <summary>
            Creates a new instance using the provided rectangle to initialize
            the anchor and size.
            </summary>
      <param name="rect">The rectangle to initialize the anchor and size from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutableSize)">
      <summary>
            Creates a new instance using the provided values to initialize
            the anchor and size.
            </summary>
      <param name="anchor">The provider for the dynamic anchor of this instance.</param>
      <param name="size">The provider for the dynamic size of this instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Creates a new instance using the provided rectangle to initialize
            itself.
            </summary>
      <param name="rect">The rectangle to initialize the anchor and size from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Create(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a new instance using the provided rectangle to initialize
            the anchor and size.
            </summary>
      <param name="rect">The rectangle to initialize the anchor and size from.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Empty">
      <summary>
            Returns whether this instance has negative width or height.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Height">
      <summary>
            Gets or sets the height of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Size"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Moves this rectangle by applying the offset to the <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor"></see></summary>
      <param name="delta">The offset to move the rectangle's anchor by.</param>
      <returns>
        <c>true</c> iff <c>dx != 0 || dy != 0</c></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.op_Explicit(System.Windows.Rect)~yWorks.Canvas.Geometry.OrientedRectangle">
      <summary>
            A casting operator that creates a new instance of <see cref="T:yWorks.Canvas.Geometry.OrientedRectangle"></see>
            using the current state of the rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current state from</param>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see> that holds no reference to 
            the rectangle provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.op_Explicit(yWorks.Canvas.Geometry.OrientedRectangle)~System.Windows.Size">
      <summary>
            A casting operator that creates a new instance of <see cref="T:System.Windows.Size"></see>
            using the current size of the oriented rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Size"></see> from</param>
      <returns>A new instance of <see cref="T:System.Windows.Size"></see> initialized to the size of the
            rectangle that holds no reference to the rectangle provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.op_Explicit(yWorks.Canvas.Geometry.Rectangle)~yWorks.Canvas.Geometry.OrientedRectangle">
      <summary>
            A casting operator that creates a new instance of <see cref="T:yWorks.Canvas.Geometry.OrientedRectangle"></see>
            using the current state of the rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current state from</param>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see> that holds no reference to 
            the rectangle provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.Set(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Sets the values of this instance to the values provided by the given instance.
            </summary>
      <param name="rectangle">The instance to retrieve the values from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.OrientedRectangle.SetUpVector(System.Double,System.Double)">
      <summary>
            Sets the components of the up vector to the new values.
            </summary>
      <param name="upx">The x component of the normalized up vector.</param>
      <param name="upy">The y component of the normalized up vector.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Size">
      <summary>
            Returns the instance that stores the size of this rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.UpX">
      <summary>
            Gets or sets the x component of the up vector to the new value.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.UpY">
      <summary>
            Gets or sets the y component of the up vector to the new value.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Width">
      <summary>
            Gets or sets the width of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Size"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.X">
      <summary>
            Gets or sets the x coordinate of the anchor of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.OrientedRectangle.Y">
      <summary>
            Gets or sets the y coordinate of the anchor of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.OrientedRectangle.Anchor"></see> instance.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Point">
      <summary>
            A simple default implementation of a mutable point in 2D coordinate space
            with double precision coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.#ctor">
      <summary>
            Creates the point with initially <c>0.0d</c> values for <see cref="P:yWorks.Canvas.Geometry.Point.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Point.Y"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.#ctor(System.Double,System.Double)">
      <summary>
            Creates an instance using the given coordinate pair.
            </summary>
      <param name="x">The x coordinate</param>
      <param name="y">The y coordinate</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Clone">
      <summary>
            Returns a clone of this instance.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Geometry.Point"></see> initialized to the current
            state of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.ClonePoint">
      <summary>
            A variant of <see cref="M:yWorks.Canvas.Geometry.Point.Clone"></see> that automatically casts to 
            this type.
            </summary>
      <returns>A <see cref="M:yWorks.Canvas.Geometry.Point.Clone"></see> of this.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Create">
      <summary>
            Creates an instance initialized to (0,0).
            </summary>
      <returns>A instance of the Point class.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Create(System.Double,System.Double)">
      <summary>
            Creates an instance using the given coordinate pair.
            </summary>
      <param name="x">The x coordinate</param>
      <param name="y">The y coordinate</param>
      <returns>A instance of the Point class.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Create(System.Windows.Point)">
      <summary>
            Creates an instance using the values provided by the point instance.
            </summary>
      <param name="p">A point to retrieve the initial values from.</param>
      <returns>A instance of the Point class.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Create(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates an instance using the values provided by the point instance.
            </summary>
      <param name="p">A point to retrieve the initial values from.</param>
      <returns>A instance of the Point class.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.CreateDynamic(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPointSetter)">
      <summary>
            Creates a dynamic <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> implementation that delegates to the given instances.
            </summary>
      <param name="getter">The instance used to read the state of the point.</param>
      <param name="setter">The instance used to write the state of the point.</param>
      <returns>An instance that provides a live view of the two given instances.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.CreateImmutableCopy">
      <summary>
            Creates an immutable copy of the current state of this point.
            </summary>
      <returns>An instance whose coordinates cannot be changed.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.CreateImmutableView">
      <summary>
            Creates an immutable view of this point.
            </summary>
      <returns>An instance that cannot be used to change the coordinates,
            whoever whose state always reflects the state of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.CreateOrthogonal(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates an instance of a point that is implicitly defined by two
            neighbouring points.
            </summary>
      <param name="p1">The first point that defines the x coordinate of the instance</param>
      <param name="p2">The second point that defines the y coordinate of the instance</param>
      <returns>an instance of <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> that is a dynamically
            built point using <paramref name="p1"></paramref> and <paramref name="p2"></paramref>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Moves this instance by adding the provided offsets to the coordinates of this 
            point.
            </summary>
      <param name="delta">The offset to add to this point's x coordinate</param>
      <returns>
        <c>true</c> iff <c>dx != 0 || dy != 0</c></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Normalize">
      <summary>
            Normalizes this point as if it was a vector.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.op_Explicit(System.Windows.Point)~yWorks.Canvas.Geometry.Point">
      <summary>
            A casting operator that creates a new instance of <see cref="T:yWorks.Canvas.Geometry.Point"></see>
            using the current state of the point that is cast.
            </summary>
      <param name="point">the point to get the current state from</param>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Point"></see> that holds no reference to 
            the point provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.op_Explicit(yWorks.Canvas.Geometry.Point)~System.Windows.Point">
      <summary>
            A casting operator that creates a new instance of <see cref="T:System.Windows.Point"></see>
            using the current state of this point.
            </summary>
      <param name="point">the point to get the current state from</param>
      <returns>A new instance of <see cref="T:System.Windows.Point"></see> that holds no reference to 
            the point being cast.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Set(System.Double,System.Double)">
      <summary>
            Sets both coordinates at the same time.
            </summary>
      <param name="newX">The new x coordinate.</param>
      <param name="newY">The new y coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.Set(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Sets the coordinates of this instance to the current state of the
            coordinates of the point provided.
            </summary>
      <param name="point">The point to obtain the values from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.ToPointF">
      <summary>
            Creates a <see cref="T:System.Windows.Point"></see> initialized using the current
            state of this instance.
            </summary>
      <returns>A new PointF instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Point.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Point.X">
      <summary>
            Gets or sets the x coordinate.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Point.Y">
      <summary>
            Gets or sets the y coordinate.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Rectangle">
      <summary>
            A simple default implementation of a mutable rectangle in 2D coordinate space
            with double precision values stored in an instance of <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>
            and <see cref="T:yWorks.Canvas.Geometry.IMutableSize"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.#ctor">
      <summary>
            Creates a new empty instance located at the origin.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="x">The x coordinate of the upper left corner of the rectangle.</param>
      <param name="y">The y coordinate of the upper left corner of the rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.#ctor(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutableSize)">
      <summary>
            Creates a new instance using the provided implementation for the 
            storage of the position and size of the rectangle.
            </summary>
      <param name="position">The provider for the dynamic position of this instance.</param>
      <param name="size">The provider for the dynamic size of this instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Add(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Add the given rectangle to this instance using the logic described
            in <see cref="M:yWorks.Support.Extensions.RectangleExtensions.Add(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.IRectangle)"></see>.
            </summary>
      <param name="bounds">The bounds to include in this instance.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.AnchorX">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> and will return the
            x coordinate of the <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.AnchorY">
      <summary>
            Implements the <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> and will return the
            y coordinate of the <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see> plus the <see cref="P:yWorks.Canvas.Geometry.ISize.Height"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Clone">
      <summary>
            Creates a copy of the current state of this instance using
            <see cref="T:yWorks.Canvas.Geometry.Point"></see> and <see cref="P:yWorks.Canvas.Geometry.Rectangle.Size"></see> to store the position
            and size.
            </summary>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create">
      <summary>
            Creates an empty rectangle with width and height of <c>-1</c> positioned at (0,0).
            </summary>
      <returns>A new rectangle (0,0,-1,-1)</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new instance using the provided values to initialize
            the position and size.
            </summary>
      <param name="x">The x coordinate of the upper left corner of the rectangle.</param>
      <param name="y">The y coordinate of the upper left corner of the rectangle.</param>
      <param name="w">The width of the rectangle.</param>
      <param name="h">The height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create(System.Windows.Rect)">
      <summary>
            Creates a new instance using the provided instance to retrieve the initial values for
            the position and size from.
            </summary>
      <param name="rect">The rectangle to retrieve the initial size from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates a new instance using the provided implementation for the 
            storage of the position and the combination of the two for the size of the rectangle.
            </summary>
      <param name="p1">The provider for the dynamic position of the rectangle.</param>
      <param name="p2">The provider for lower right corner of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create(yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Geometry.IMutableSize)">
      <summary>
            Creates a new instance using the provided implementation for the 
            storage of the position and size of the rectangle.
            </summary>
      <param name="position">The provider for the dynamic position of this instance.</param>
      <param name="size">The provider for the dynamic size of this instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Create(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates an instance using the values provided by the rectangle instance.
            </summary>
      <param name="rect">A rectangle to retrieve the initial values from.</param>
      <returns>A instance of the Rectangle class.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.CreateRectangleF">
      <summary>
            Creates a <see cref="T:System.Windows.Rect"></see> using the state of this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Empty">
      <summary>
            Returns whether this instance has negative width or height.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.GetCenterX(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Returns the x coordinate of the center of the given rectangle.
            </summary>
      <param name="rectangle">The rectangle.</param>
      <returns>The x coordinate of the center.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.GetCenterY(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Returns the y coordinate of the center of the given rectangle.
            </summary>
      <param name="rectangle">The rectangle.</param>
      <returns>The y coordinate of the center.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Height">
      <summary>
            Gets or sets the height of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Size"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Moves this rectangle by applying the offset to the <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see></summary>
      <param name="delta">The offset to move the rectangle's position by.</param>
      <returns>
        <c>true</c> iff <c>dx != 0 || dy != 0</c></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.op_Explicit(System.Windows.Rect)~yWorks.Canvas.Geometry.Rectangle">
      <summary>
            A casting operator that creates a new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see>
            using the current state of the rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current state from</param>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see> that holds no reference to 
            the rectangle provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.op_Explicit(yWorks.Canvas.Geometry.Rectangle)~System.Windows.Rect">
      <summary>
            A casting operator that creates a new instance of <see cref="T:System.Windows.Rect"></see>
            using the current state of the rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current state from</param>
      <returns>A new instance of <see cref="T:System.Windows.Rect"></see> that holds no reference to 
            the rectangle provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.op_Explicit(yWorks.Canvas.Geometry.Rectangle)~System.Windows.Size">
      <summary>
            A casting operator that creates a new instance of <see cref="T:System.Windows.Size"></see>
            using the current size of the rectangle that is cast.
            </summary>
      <param name="rect">the rectangle to get the current state from</param>
      <returns>A new instance of <see cref="T:System.Windows.Size"></see> initialized to the size of the
            rectangle that holds no reference to the rectangle provided.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Position">
      <summary>
            Returns the instance that stores the position of this rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Applies a new position and size in that order to the instances
            that hold the state of this rectangle.
            </summary>
      <param name="x">The new x coordinate of the upper left corner of the rectangle.</param>
      <param name="y">The new y coordinate of the upper left corner of the rectangle.</param>
      <param name="w">The new width of the rectangle.</param>
      <param name="h">The new height of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Windows.Rect)">
      <summary>
            Calls <see cref="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Double,System.Double,System.Double,System.Double)"></see>
            using the respective values obtained from the provided instance.
            </summary>
      <param name="rect">The rectangle to read the state from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Reshape(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Calls <see cref="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Double,System.Double,System.Double,System.Double)"></see>
            using the respective values obtained from the provided instance.
            </summary>
      <param name="rect">The rectangle to read the state from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Reshape(yWorks.Canvas.Geometry.Rectangle)">
      <summary>
            Calls <see cref="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Double,System.Double,System.Double,System.Double)"></see>
            using the respective values obtained from the provided instance.
            </summary>
      <param name="rect">The rectangle to read the state from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.Set(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
        <see cref="M:yWorks.Canvas.Geometry.Rectangle.Reshape(System.Double,System.Double,System.Double,System.Double)">Reshapes</see> this
            instance to the values provided by the given rectangle.
            </summary>
      <param name="rectangle">The rectangle to copy the state from</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Size">
      <summary>
            Returns the instance that stores the size of this rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Rectangle.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.UpX">
      <summary>
            Always returns <c>0</c></summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.UpY">
      <summary>
            Always returns <c>-1</c></summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Width">
      <summary>
            Gets or sets the width of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Size"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.X">
      <summary>
            Gets or sets the x coordinate of the upper left corner of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.X2">
      <summary>
            Gets or sets the x coordinate of the lower right corner of this instance using the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see> and <see cref="P:yWorks.Canvas.Geometry.Rectangle.Size"></see> instances.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Y">
      <summary>
            Gets or sets the y coordinate of the upper left corner of this instance from the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Rectangle.Y2">
      <summary>
            Gets or sets the y coordinate of the lower right corner of this instance using the
            <see cref="P:yWorks.Canvas.Geometry.Rectangle.Position"></see> and <see cref="P:yWorks.Canvas.Geometry.Rectangle.Size"></see> instances.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Size">
      <summary>
            A simple default implementation of a mutable size in 2D coordinate space
            with double precision values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.#ctor">
      <summary>
            Creates the initially empty size, i.e. both <see cref="P:yWorks.Canvas.Geometry.Size.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Size.Height"></see>
            are <c>0.0d</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.#ctor(System.Double,System.Double)">
      <summary>
            Creates an instance using the given width and height.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.Clone">
      <summary>
            Returns a memberwise clone of this instance.
            </summary>
      <returns>A clone that holds the same state initially as the current state of
            this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.Create(System.Double,System.Double)">
      <summary>
            Creates an instance using the given width and height.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates a size instance that is dynamically bound to the
            given point instances.
            </summary>
      <param name="p1">The upper left corner of the size.</param>
      <param name="p2">The lower right corner of the size.</param>
      <returns>A mutable size instance that is dynamically composed using the 
            provided instances.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.Create(yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates an instance using the values provided by the size instance.
            </summary>
      <param name="size">A size to retrieve the initial values from.</param>
      <returns>A instance of the Size class.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Size.Height">
      <summary>
            Gets or sets the height.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.op_Explicit(System.Windows.Size)~yWorks.Canvas.Geometry.Size">
      <summary>
            A casting operator that creates a new instance of <see cref="T:yWorks.Canvas.Geometry.Size"></see>
            using the current state of the size that is cast.
            </summary>
      <param name="size">the size to get the current state from</param>
      <returns>A new instance of <see cref="T:yWorks.Canvas.Geometry.Size"></see> that holds no reference to 
            the size provided.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Size.op_Explicit(yWorks.Canvas.Geometry.Size)~System.Windows.Size">
      <summary>
            A casting operator that creates a new instance of <see cref="T:System.Windows.Size"></see>
            using the current state of this size.
            </summary>
      <param name="size">the size to get the current state from</param>
      <returns>A new instance of <see cref="T:System.Windows.Size"></see> that holds no reference to 
            the size being cast.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Size.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.InsetsD">
      <summary>
            A struct that models the thickness of insets as double precision floating point values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> struct using the provided inset for all four sides.
            </summary>
      <param name="inset">The inset to use for all sides.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> struct.
            </summary>
      <param name="left">The left inset.</param>
      <param name="top">The top inset.</param>
      <param name="right">The right inset.</param>
      <param name="bottom">The bottom inset.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom">
      <summary>
            Gets or sets the bottom inset.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.CreateUnion(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Calculates the union of this insets struct and the given inset which 
            is done by performing <see cref="M:System.Math.Max(System.Double,System.Double)"></see> on 
            all four inset values.
            </summary>
      <param name="insets">The insets to max with these insets.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.Empty">
      <summary>
            Yields the "empty" insets that has all properties set to <c>0.0d</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj"></paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.Equals(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Determines whether this instance has the same values as the given one.
            </summary>
      <param name="obj">The second operand to compare with this struct.</param>
      <returns>Whether the <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>
            properties of the structs are equal.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.FromThickness(System.Windows.Thickness)">
      <summary>
            Creates an instance from the given <see cref="T:System.Windows.Thickness"></see>.
            </summary>
      <param name="f">The value to get the initial insets from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.GetEnlarged(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Creates an enlarged instance by adding the insets of the specified insets to this instance
            and returning the result.
            </summary>
      <param name="insets">The insets to add to this struct.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            The hash code is computed using the <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see>
            property.
            </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.HorizontalInsets">
      <summary>
            Gets the horizontal insets, which is the sum of <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty, i.e. all insets are <c>0.0d</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left">
      <summary>
            Gets or sets the left inset.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.op_Equality(yWorks.Canvas.Geometry.Structs.InsetsD,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Implements the equality operation on <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> comparing <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see> for equality.
            </summary>
      <param name="one">The first operand.</param>
      <param name="two">The second operand.</param>
      <returns>Whether the <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>
            properties of the structs are equal.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.op_Implicit(System.Windows.Thickness)~yWorks.Canvas.Geometry.Structs.InsetsD">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Windows.Thickness"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see>.
            </summary>
      <param name="thickness">The thickness to get the initial values from.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.op_Implicit(yWorks.Canvas.Geometry.Structs.InsetsD)~System.Windows.Thickness">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> to <see cref="T:System.Windows.Thickness"></see>.
            </summary>
      <param name="insets">The insets to get the initial values from.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsD.op_Inequality(yWorks.Canvas.Geometry.Structs.InsetsD,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Implements the inequality operation on <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> comparing <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see> for inequality.
            </summary>
      <param name="one">The first operand.</param>
      <param name="two">The second operand.</param>
      <returns>Whether any of the <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Left"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right"></see>
            properties of the structs are not equal.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.Right">
      <summary>
            Gets or sets the right inset.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top">
      <summary>
            Gets or sets the top inset.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.InsetsD.VerticalInsets">
      <summary>
            Gets the vertical insets, which is the sum of <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Top"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.InsetsD.Bottom"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.InsetsDConverter">
      <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> that can convert to and from <see cref="T:System.String"></see>
            for the <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsDConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.InsetsDConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert the object to the specified type, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="destinationType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert to. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given object to the type of this converter, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.InsetsDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the given value object to the specified type, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <param name="destinationType">
                    The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="destinationType" /> parameter is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.PointD">
      <summary>
            A <c>struct</c> that models a point in 2-d cartesian coordinate space with double coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct using the given values
            for the <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> properties.
            </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.#ctor(System.Windows.Point)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct using the coordinates of the provided point.
            </summary>
      <param name="p">The point to get the initial coordinates from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.#ctor(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct using the coordinates of the provided <see cref="T:yWorks.Canvas.Geometry.IPoint"></see>.
            </summary>
      <param name="p">The point to get the initial coordinates from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.#ctor(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct using the coordinates of the provided point.
            </summary>
      <param name="p">The point to get the initial coordinates from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.DistanceTo(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the euclidean distance to the given point.
            </summary>
      <param name="other">The other point.</param>
      <returns>The euclidean distance between the points.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.DistanceToSegment(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines the distance between this point and a line segment.
            </summary>
      <param name="l1">The coordinates of the first point of the line.</param>
      <param name="l2">The coordinates of the second point of the line.</param>
      <returns>The distance between this point and the closest point on the line segment.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj"></paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.Equals(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether this instance has the same coordinates as the provided point.
            </summary>
      <param name="other">The other point.</param>
      <returns>Whether <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> are the same.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.FromPoint(System.Windows.Point)">
      <summary>
            Creates a new instance of the struct using the coordinates of the given point.
            </summary>
      <param name="p">The point to get the coordinates from.</param>
      <returns>An instance with the same coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.FromPoint(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a new instance of the struct using the coordinates of the given point.
            </summary>
      <param name="p">The point to get the coordinates from.</param>
      <returns>An instance with the same coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.GetConstrained(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Create a constrained copy of this instance that lies within the given non-empty <paramref name="rectangle"></paramref>.
            </summary>
      <param name="rectangle">The rectangle to constrain this instance by.</param>
      <returns>A constrained copy of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.GetHashCode">
      <summary>
            Returns the hash code for this instance that is calculated using the <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> values.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.GetProjectionOnLine(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the projection of this point onto a line.
            </summary>
      <param name="lineAnchor">An anchor for the infinite line.</param>
      <param name="direction">A direction vector for the infinite line.</param>
      <returns>The point on the line that is closest to this point.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.GetProjectionOnRay(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the projection of this point onto a ray.
            </summary>
      <param name="rayStart">The start of the segment.</param>
      <param name="direction">The direction of the ray.</param>
      <returns>The point on the ray that is closest to this point.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.GetProjectionOnSegment(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the projection of this point onto a segment.
            </summary>
      <param name="segStart">The start of the segment.</param>
      <param name="segEnd">The end of the segment.</param>
      <returns>The point on the segment that is closest to this point.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.Hits(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Determines if the point lies close to this point given an epsilon.
            </summary>
      <param name="other">The coordinates of the other point.</param>
      <param name="hitTestRadius">The hit test epsilon.</param>
      <returns>Whether the distance between the two points is smaller than <paramref name="hitTestRadius"></paramref></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.HitsLineSegment(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Determines whether this point hist the line segment with respect to a given <paramref name="hitTestRadius"></paramref>.
            </summary>
      <param name="startPoint">The starting point of the line segment to test.</param>
      <param name="endPoint">The ending point of the line segment to test.</param>
      <param name="hitTestRadius">The hit test radius.</param>
      <returns>Whether this point hits the given line segment within the radius.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.HitsPolyline(System.Collections.Generic.IEnumerable{yWorks.Canvas.Geometry.IPoint},System.Double)">
      <summary>
            Determines whether a polygonal line is hit by this point given an epsilon.
            </summary>
      <param name="points">The list of points that is treated as a polygon</param>
      <param name="hitTestRadius">A positive value allows for fuzzy hit testing. If the point lies outside
            the given object but it's distance is less than or equal to that value, it will
            be considered a hit.</param>
      <returns>Whether the point hits the polygon.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.Normalized">
      <summary>
            Gets the normalized version of this vector.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Addition(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Implements the vector addition operator.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Addition(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the vector addition operator.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Division(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Implements scalar division.
            </summary>
      <param name="p">The point to divide the components of.</param>
      <param name="factor">The factor to divide the components by.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Equality(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the operator == which is applied componentwise to <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see>.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>Whether <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> are equal for both points.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Explicit(yWorks.Canvas.Geometry.Point)~yWorks.Canvas.Geometry.Structs.PointD">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Point"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="p">The point to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Implicit(System.Windows.Point)~yWorks.Canvas.Geometry.Structs.PointD">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Windows.Point"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="p">The point to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Implicit(yWorks.Canvas.Geometry.Structs.PointD)~System.Windows.Point">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> to <see cref="T:System.Windows.Point"></see>.
            </summary>
      <param name="p">The point to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Implicit(yWorks.Canvas.Geometry.Structs.PointD)~yWorks.Canvas.Geometry.Point">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> to <see cref="T:yWorks.Canvas.Geometry.Point"></see>.
            </summary>
      <param name="p">The point to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Inequality(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the operator != which is the inverse of the <c>==</c> operator.
            </summary>
      <returns>The inverse of the <c>==</c> operator.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Multiply(System.Double,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements scalar multiplication.
            </summary>
      <param name="p">The point to scale the components of.</param>
      <param name="factor">The factor to scale the components by.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Multiply(yWorks.Canvas.Geometry.Matrix2D,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the operator * by calling <see cref="M:yWorks.Canvas.Geometry.Matrix2D.Transform(yWorks.Canvas.Geometry.Structs.PointD)"></see>.
            </summary>
      <param name="m">The matrix to use for the transformation.</param>
      <param name="vector">The vector to transform.</param>
      <returns>The result of the transformation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Multiply(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Implements scalar multiplication.
            </summary>
      <param name="p">The point to scale the components of.</param>
      <param name="factor">The factor to scale the components by.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Subtraction(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Implements the vector subtraction operator.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_Subtraction(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the vector subtraction operator.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_UnaryNegation(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the negation operator.
            </summary>
      <param name="p1">The point to negate the components of.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.op_UnaryPlus(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Yields the point itself.
            </summary>
      <param name="p1">The point to return.</param>
      <returns>The point itself.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.Origin">
      <summary>
            Yields struct instance that has <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> set to <c>0.0d</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ScalarProduct(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the scalar product of this and the given vector.
            </summary>
      <param name="other">The other vector.</param>
      <returns>The scalar product (<c>X*other.X + Y*other.Y</c>)</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ScalarProduct(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates the scalar product of the two given points.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <returns>The scalar product of the two points.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.SquaredVectorLength">
      <summary>
            Yields the squared length of the vector that has <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> as its components.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ToImmutablePoint">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Geometry.ImmutablePoint"></see> that has the same coordinates as this struct.
            </summary>
      <returns>A <see cref="T:yWorks.Canvas.Geometry.ImmutablePoint"></see> with the same coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ToMutablePoint">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> that has the same coordinates as this struct.
            </summary>
      <returns>A <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> with the same coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ToPoint">
      <summary>
            Creates a <see cref="T:System.Windows.Point"></see> that has the same coordinates as this struct.
            </summary>
      <returns>A <see cref="T:System.Windows.Point"></see> with the same coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointD.ToString">
      <summary>
            Returns a human readable string of this point.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.VectorLength">
      <summary>
            Yields the length of the vector that has <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.PointD.Y"></see> as its components.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.X">
      <summary>
            Gets or sets the X coordinate of the point.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.PointD.Y">
      <summary>
            Gets or sets the Y coordinate of the point.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.PointDConverter">
      <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> that can convert to and from <see cref="T:System.String"></see>
            for the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointDConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert the object to the specified type, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="destinationType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert to. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given object to the type of this converter, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the given value object to the specified type, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <param name="destinationType">
                    The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="destinationType" /> parameter is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.PointDValueSerializer">
      <summary>
            A <see cref="T:System.Windows.Markup.ValueSerializer"></see> for the <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.PointDValueSerializer" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    String to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the value can be converted; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified object can be converted into a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    The string to convert.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.PointDValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts the specified object to a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to convert into a string.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A string representation of the specified object.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.RectD">
      <summary>
            A struct that models a rectangle in 2-d cartesian coordinate space with double coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct.
            </summary>
      <param name="x">The <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see> coordinate of the top left corner.</param>
      <param name="y">The <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see> coordinate of the top left corner.</param>
      <param name="width">The <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see> of the rectangle.</param>
      <param name="height">The <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see> of the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.#ctor(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct using two point to define the bounds
            </summary>
      <param name="p1">The first point to determine the bounds.</param>
      <param name="p2">The second point to determine the bounds.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.#ctor(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct using the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.TopLeft"></see> corner
            and the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Size"></see>.
            </summary>
      <param name="topLeft">The top left corner.</param>
      <param name="size">The size to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Add(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds the point to the given rectangle by enlarging the rectangle to <see cref="M:yWorks.Canvas.Geometry.Structs.RectD.Contains(yWorks.Canvas.Geometry.Structs.PointD)"></see>
            the point, if it is not yet contained.
            </summary>
      <param name="rect">The rectangle to modify.</param>
      <param name="point">The point to include in the rectangle's bounds.</param>
      <returns>The enlarged rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Add(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Combines the two rectangles creating a union.
            </summary>
      <param name="firstRect">The first rectangle to use for the union.</param>
      <param name="secondRect">The second rectangle to use for the union.</param>
      <returns>A rectangle that encompasses the area of the two given rectangles.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Area">
      <summary>
            Gets the area of this instance which is the product of <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.BottomLeft">
      <summary>
            Gets the coordinates of the bottom left corner of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.BottomRight">
      <summary>
            Gets the coordinates of the bottom right corner of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Center">
      <summary>
            Gets or sets the center of the rectangle using <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.CenterX"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.CenterY"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.CenterX">
      <summary>
            Gets the center X coordinate of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.CenterY">
      <summary>
            Gets the center Y coordinate of the rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Contains(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether this rectangle contains the specified point.
            </summary>
      <param name="p">The point to test.</param>
      <returns>
        <c>true</c> if this rectangle contains the specified point; otherwise, <c>false</c>.
            An <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.IsEmpty">empty</see> instance never contains any point. A point is considered to 
            be contained in the rectangle when the coordinates are not smaller than <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MinX"></see> and
            <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MinY"></see> nor greater than <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxX"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxY"></see>.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Contains(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Determines whether this rectangle contains the specified point with respect to a given epsilon.
            </summary>
      <param name="p">The point to test.</param>
      <param name="eps">The positive epsilon distance that the point may lie outside the rectangle and still
            be considered contained.</param>
      <returns>
        <c>true</c> if this rectangle contains the specified point; otherwise, <c>false</c>.
            An <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.IsEmpty">empty</see> instance never contains any point. A point is considered to 
            be contained in the rectangle when the coordinates are not smaller than <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MinX"></see> and
            <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MinY"></see> minus <paramref name="eps"></paramref> nor greater than <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxX"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxY"></see>
            plus <paramref name="eps"></paramref>.
            </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Empty">
      <summary>
            Gets an <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.IsEmpty">empty</see> rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj"></paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Equals(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Determines whether this instance has the same values as the given one.
            </summary>
      <param name="obj">The second operand to compare with this struct.</param>
      <returns>Whether the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see>
            properties of the structs are equal.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.FindLineIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the intersection between a rectangle and a line.
            </summary>
      <param name="inner">The coordinates of a point lying inside the rectangle.</param>
      <param name="outer">The coordinates of a point lying outside the rectangle.</param>
      <returns>The intersection point if the inner point lies inside the rectangle, the outer point lies outside the rectangle
            and thus an intersection point has been found, or <see langword="null"></see> otherwise.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.FromCenter(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Creates a new instance given the center of the rectangle and its size.
            </summary>
      <param name="center">The center to use.</param>
      <param name="size">The size to assign.</param>
      <returns>An instance whose center is set to <paramref name="center"></paramref>
            and size is <paramref name="size"></paramref></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.FromRect(System.Windows.Rect)">
      <summary>
            Factory method that creates a <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> using the values form the given
            <see cref="T:System.Windows.Rect"></see>.
            </summary>
      <param name="rect">The rectangle to get the initial values from.</param>
      <returns>An instance that is initialized using the values of <paramref name="rect"></paramref></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.FromRectangle(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Factory method that creates a <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> using the values form the given
            <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see>.
            </summary>
      <param name="rect">The rectangle to get the initial values from.</param>
      <returns>An instance that is initialized using the values of <paramref name="rect"></paramref></returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.GetEnlarged(System.Double)">
      <summary>
            Creates an enlarged instance of this rectangle using the same insets for all sides.
            </summary>
      <param name="size">The inset to add to each of the sides to grow the new instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.GetEnlarged(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Creates an enlarged instance that is the same as this one but enlarged by the specified insets.
            </summary>
      <param name="insets">The insets to use to add to the instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            The hash code is computed using the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see>
            property.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.GetTransformed(yWorks.Canvas.Geometry.Matrix2D)">
      <summary>
            Transforms this instance using specified transform storing the bounds in place.
            </summary>
      <param name="transform">The transform matrix to apply to this instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.GetTranslated(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Returns a translated instance of this which has modified <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see> by the given amount.
            </summary>
      <param name="delta">The delta to add to <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Height">
      <summary>
            Gets or sets the height of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Infinite">
      <summary>
            Gets an infinite rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Intersects(yWorks.Canvas.Geometry.IOrientedRectangle,System.Double)">
      <summary>
            Determines whether this rectangle intersects an oriented rectangle, given an epsilon.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to test.</param>
      <param name="eps">A positive value allows for fuzzy hit testing. If the point lies outside
            the given object but it's distance is less than or equal to that value, it will
            be considered a hit.</param>
      <returns>Whether they have a non-empty intersection.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.Intersects(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Determines whether the bounds of this struct intersect with the bounds of the specified rectangle.
            </summary>
      <param name="other">The rectangle to check.</param>
      <returns>Whether both instance are non-empty and have an intersection with positive <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Area"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.IntersectsLine(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether this rectangle intersects a line.
            </summary>
      <param name="p1">The first end point of the line.</param>
      <param name="p2">The second end point of the line.</param>
      <returns>Whether the line intersects the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.IntersectsPolyline(System.Collections.Generic.IEnumerable{yWorks.Canvas.Geometry.IPoint})">
      <summary>
            Determines whether a rectangle intersects a polygonal line.
            </summary>
      <param name="controlPointList">The list of points that is interpreted as a number of line segments.</param>
      <returns>
        <c>true</c> if the rectangle intersects at least one segment of the line.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is considered empty.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.IsFinite">
      <summary>
            Gets a value indicating whether this instance is finite.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.MaxX">
      <summary>
            Gets or sets the coordinates of the right border for this struct.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.MaxY">
      <summary>
            Gets or sets the coordinates of the lower border for this struct.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.MinX">
      <summary>
            Gets or sets the X coordinates of the left side of this struct without modifying the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxX"></see>
            by adjusting the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see> correspondingly.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.MinY">
      <summary>
            Gets or sets the Y coordinates of the top side of this struct without modifying the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.MaxY"></see>
            by adjusting the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see> correspondingly.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Addition(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Implements the + operator.
            </summary>
      <param name="rect">The rectangle to enlarge.</param>
      <param name="point">The point to add to the rectangle.</param>
      <returns>The result of the union.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Addition(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Implements the operator + for <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> like in <see cref="M:yWorks.Canvas.Geometry.Structs.RectD.Add(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)"></see>.
            </summary>
      <param name="firstRect">The first rectangle.</param>
      <param name="secondRect">The second rectangle.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Addition(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Implements the operator + mapping it to the <see cref="M:yWorks.Canvas.Geometry.Structs.RectD.GetEnlarged(yWorks.Canvas.Geometry.Structs.InsetsD)"></see> method.
            </summary>
      <param name="rect">The rectangle to enlarge.</param>
      <param name="insets">The insets to use.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Addition(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Implements the + operator.
            </summary>
      <param name="rect">The rectangle to enlarge.</param>
      <param name="point">The point to add to the rectangle.</param>
      <returns>The result of the union.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Addition(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Implements the operator + mapping it to the <see cref="M:yWorks.Canvas.Geometry.Structs.RectD.Add(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)"></see> method.
            </summary>
      <param name="firstRect">The first rectangle.</param>
      <param name="secondRect">The second rectangle.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Equality(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Implements the equality operation on <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> comparing <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see> for equality.
            </summary>
      <param name="p1">The first operand.</param>
      <param name="p2">The second operand.</param>
      <returns>Whether the <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see>, and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see>
            properties of the structs are equal.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Explicit(yWorks.Canvas.Geometry.Rectangle)~yWorks.Canvas.Geometry.Structs.RectD">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Explicit(yWorks.Canvas.Geometry.Structs.RectD)~System.Windows.Rect">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> to <see cref="T:System.Windows.Rect"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Explicit(yWorks.Canvas.Geometry.Structs.RectD)~yWorks.Canvas.Geometry.Rectangle">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> to <see cref="T:yWorks.Canvas.Geometry.Rectangle"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Implicit(System.Windows.Rect)~yWorks.Canvas.Geometry.Structs.RectD">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Windows.Rect"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Implicit(yWorks.Canvas.Geometry.ImmutableRectangle)~yWorks.Canvas.Geometry.Structs.RectD">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.ImmutableRectangle"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Implicit(yWorks.Canvas.Geometry.Structs.RectD)~yWorks.Canvas.Geometry.ImmutableRectangle">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> to <see cref="T:yWorks.Canvas.Geometry.ImmutableRectangle"></see>.
            </summary>
      <param name="rect">The rectangle to convert.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.op_Inequality(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Implements the inequality operation on <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> comparing <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see> for equality.
            </summary>
      <param name="p1">The first operand.</param>
      <param name="p2">The second operand.</param>
      <returns>Whether the at least one of <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.X"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Y"></see>, <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Width"></see>, or <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Height"></see>
            properties of the structs are not equal.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Size">
      <summary>
            Gets the size of this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.ToImmutableRectangle">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> using the values from this instance.
            </summary>
      <returns>An instance that has been initialized from the values of this struct.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.ToMutableRectangle">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Geometry.IMutableRectangle"></see> using the values from this instance.
            </summary>
      <returns>An instance that has been initialized from the values of this struct.</returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.TopLeft">
      <summary>
            Gets the coordinates of the top left corner of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.TopRight">
      <summary>
            Gets the coordinates of the top right corner of the rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.ToRect">
      <summary>
            Creates an <see cref="T:System.Windows.Rect"></see> instance that uses the same values as this instance.
            </summary>
      <returns>Returns an instance using the values from this struct.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.ToRectangle">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see> using the values from this instance.
            </summary>
      <returns>An instance that has been initialized from the values of this struct.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectD.ToString">
      <summary>
            Creates a human readable from of this instance.
            </summary>
      <returns>
            A string describing the properties of this instance.
            </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Width">
      <summary>
            Gets or sets the width of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.X">
      <summary>
            Gets or sets the X coordinate of the upper left corner of the rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.RectD.Y">
      <summary>
            Gets or sets the Y coordinate of the upper left corner of the rectangle.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.RectDConverter">
      <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> that can convert to and from <see cref="T:System.String"></see>
            for the <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.RectDConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert the object to the specified type, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="destinationType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert to. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given object to the type of this converter, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the given value object to the specified type, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <param name="destinationType">
                    The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="destinationType" /> parameter is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.RectDValueSerializer">
      <summary>
            A <see cref="T:System.Windows.Markup.ValueSerializer"></see> for the <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.RectDValueSerializer" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    String to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the value can be converted; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified object can be converted into a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    The string to convert.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.RectDValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts the specified object to a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to convert into a string.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A string representation of the specified object.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.SizeD">
      <summary>
            A struct implementation that holds two <see cref="T:System.Double"></see>s for <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see> to describe a size in two dimensional space.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new size using the provided width and height.
            </summary>
      <param name="width">The new width.</param>
      <param name="height">The new height.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.#ctor(System.Windows.Size)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct
            using the values of the provided <see cref="T:System.Windows.Size"></see>.
            </summary>
      <param name="s">The size to get the initial values from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.#ctor(yWorks.Canvas.Geometry.ISize)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct
            using the values of the provided <see cref="T:yWorks.Canvas.Geometry.ISize"></see>.
            </summary>
      <param name="s">The size to get the initial values from.</param>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.#ctor(yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct
            using the values of the provided <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see>.
            </summary>
      <param name="s">The size to get the initial values from.</param>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Area">
      <summary>
            Gets the area of this instance which is the product of <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Empty">
      <summary>
            Yields the "empty" size that has <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            set to <c>-1.0d</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.Equals(System.Object)">
      <summary>
                    Indicates whether this instance and a specified object are equal.
                </summary>
      <param name="obj">
                    Another object to compare to. 
                </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.Equals(yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Returns whether this instance has the same width and height as the given instance.
            </summary>
      <param name="obj">The other instance.</param>
      <returns>Whether they have the same width and height values.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.FromSize(System.Windows.Size)">
      <summary>
            Creates a new instance from the provided <see cref="T:System.Windows.Size"></see>, initializing
            the <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see> properties from
            the corresponding properties.
            </summary>
      <param name="size">The size to retrieve the initial values from.</param>
      <returns>A new size that is initialized with the values from the given size.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.FromSize(yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a new instance from the provided <see cref="T:yWorks.Canvas.Geometry.ISize"></see>, initializing
            the <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see> properties from
            the corresponding properties.
            </summary>
      <param name="size">The size to retrieve the initial values from.</param>
      <returns>A new size that is initialized with the values from the given size.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.GetHashCode">
      <summary>
                    Returns the hash code for this instance.
                </summary>
      <returns>
                    A 32-bit signed integer that is the hash code for this instance.
                </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Height">
      <summary>
            Gets the height.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Infinite">
      <summary>
            Yields the "infinite" size that has <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            set to <see cref="F:System.Double.PositiveInfinity"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is deemed empty.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.IsFinite">
      <summary>
            Gets a value indicating whether this instance is finite, i.e. neither <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see>
            nor <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see> are <see cref="M:System.Double.IsInfinity(System.Double)">infinite</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.Max(yWorks.Canvas.Geometry.Structs.SizeD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Returns a size whose <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            is the <see cref="M:System.Math.Max(System.Double,System.Double)"></see> of the respecting properties
            of the two parameters.
            </summary>
      <param name="size1">The first size.</param>
      <param name="size2">The second size.</param>
      <returns>A size whose <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            is the <see cref="M:System.Math.Max(System.Double,System.Double)"></see> of the respecting properties
            of the two parameters.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.Min(yWorks.Canvas.Geometry.Structs.SizeD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Returns a size whose <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            is the <see cref="M:System.Math.Min(System.Double,System.Double)"></see> of the respecting properties
            of the two parameters.
            </summary>
      <param name="size1">The first size.</param>
      <param name="size2">The second size.</param>
      <returns>A size whose <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            is the <see cref="M:System.Math.Min(System.Double,System.Double)"></see> of the respecting properties
            of the two parameters.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Equality(yWorks.Canvas.Geometry.Structs.SizeD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="p1">The first size.</param>
      <param name="p2">The second size.</param>
      <returns>The result of the operator, which is <see langword="true"></see> iff the <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see>
            and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see> of the two structs are identical.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Explicit(yWorks.Canvas.Geometry.Structs.SizeD)~yWorks.Canvas.Geometry.ImmutableSize">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> to <see cref="T:yWorks.Canvas.Geometry.ImmutableSize"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Explicit(yWorks.Canvas.Geometry.Structs.SizeD)~yWorks.Canvas.Geometry.Size">
      <summary>
            Performs an explicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> to <see cref="T:yWorks.Canvas.Geometry.Size"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Implicit(System.Windows.Size)~yWorks.Canvas.Geometry.Structs.SizeD">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Windows.Size"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Implicit(yWorks.Canvas.Geometry.ImmutableSize)~yWorks.Canvas.Geometry.Structs.SizeD">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.ImmutableSize"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Implicit(yWorks.Canvas.Geometry.Size)~yWorks.Canvas.Geometry.Structs.SizeD">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Size"></see> to <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Implicit(yWorks.Canvas.Geometry.Structs.SizeD)~System.Windows.Size">
      <summary>
            Performs an implicit conversion from <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> to <see cref="T:System.Windows.Size"></see>.
            </summary>
      <param name="theSize">The size.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Inequality(yWorks.Canvas.Geometry.Structs.SizeD,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="p1">The first size.</param>
      <param name="p2">The second size.</param>
      <returns>The result of the operator, which is the inverse of the <c>==</c> operator.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Multiply(System.Double,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Implements the operator * that multiplies the <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            by the given factor.
            </summary>
      <param name="size">The size to multiply the width and height of.</param>
      <param name="factor">The factor to multiply the width and height by.</param>
      <returns>The result of the operator, which is a new size that has the width and height multiplied by the factor.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.op_Multiply(yWorks.Canvas.Geometry.Structs.SizeD,System.Double)">
      <summary>
            Implements the operator * that multiplies the <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            by the given factor.
            </summary>
      <param name="size">The size to multiply the width and height of.</param>
      <param name="factor">The factor to multiply the width and height by.</param>
      <returns>The result of the operator, which is a new size that has the width and height multiplied by the factor.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.ToImmutableSize">
      <summary>
            Converts this instance to an <see cref="T:yWorks.Canvas.Geometry.ImmutableSize"></see> instance
            </summary>
      <returns>The <see cref="T:yWorks.Canvas.Geometry.ImmutableSize"></see> instance, whose attributes have been initialized with
            the values of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.ToMutableSize">
      <summary>
            Converts this instance to an <see cref="T:yWorks.Canvas.Geometry.Size"></see> instance
            </summary>
      <returns>The <see cref="T:yWorks.Canvas.Geometry.Size"></see> instance, whose attributes have been initialized with
            the values of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.ToSize">
      <summary>
            Converts this instance to a <see cref="T:System.Windows.Size"></see> instance
            </summary>
      <returns>The <see cref="T:System.Windows.Size"></see> instance, whose attributes have been initialized with
            the values of this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeD.ToString">
      <summary>
            Returns a human readable string that contains information about the
            values of this struct.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> containing the width and height.
            </returns>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Width">
      <summary>
            Gets or sets the width.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Geometry.Structs.SizeD.Zero">
      <summary>
            Yields the "zero" size that has <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Width"></see> and <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Height"></see>
            set to <c>0.0d</c>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.SizeDConverter">
      <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> for the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeDConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="sourceType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Returns whether this converter can convert the object to the specified type, using the specified context.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="destinationType">
                    A <see cref="T:System.Type" /> that represents the type you want to convert to. 
                </param>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the given object to the type of this converter, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.Exception">
    <c>Exception</c>.</exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the given value object to the specified type, using the specified context and culture information.
                </summary>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. 
                </param>
      <param name="culture">
                    A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to convert. 
                </param>
      <param name="destinationType">
                    The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. 
                </param>
      <returns>
                    An <see cref="T:System.Object" /> that represents the converted value.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="destinationType" /> parameter is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The conversion cannot be performed. 
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer">
      <summary>
            A <see cref="T:System.Windows.Markup.ValueSerializer"></see> for the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    String to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the value can be converted; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Determines whether the specified object can be converted into a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to evaluate for conversion.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.
                </summary>
      <param name="value">
                    The string to convert.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Geometry.Structs.SizeDValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
                    Converts the specified object to a <see cref="T:System.String" />.
                </summary>
      <param name="value">
                    The object to convert into a string.
                </param>
      <param name="context">
                    Context information that is used for conversion.
                </param>
      <returns>
                    A string representation of the specified object.
                </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.
                </exception>
    </member>
    <member name="T:yWorks.Canvas.Input.AbstractConcurrentInputMode">
      <summary>
            Abstract base class for an <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that can be used
            concurrently with other <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.AbstractConcurrentInputMode" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.Cancel">
      <summary>
            Overridden to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">release</see> the mutex if it is currently owned
            by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.CanRequestMutex">
      <summary>
            Determines whether this instance can request the <see cref="T:yWorks.Canvas.Input.InputMutex"></see>.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.RequestMutex"></see> would currently succeed.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Controller">
      <summary>
            Gets or injects the <see cref="T:yWorks.Canvas.Input.ConcurrencyController"></see> for this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled">
      <summary>
            Gets or sets the enabled state of this input mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">
      <summary>
            Determines whether this instance owns the input mutex.
            </summary>
      <returns>Whether this instance has the input mutex.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnDisabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>false</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnEnabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnMutexObtained">
      <summary>
            Called when this instance obtains the <see cref="T:yWorks.Canvas.Input.InputMutex"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnMutexReleased">
      <summary>
            Called when this instance released the <see cref="T:yWorks.Canvas.Input.InputMutex"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnPreferredCursorChanged(System.EventArgs)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursor"></see> property changes.
            </summary>
      <param name="args">The event arguments.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursor">
      <summary>
            Gets the cursor this mode would like to have displayed in the
            <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursorChanged">
      <summary>
            An event that will be triggered if the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursor"></see> property
            changes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">
      <summary>
            Releases the mutex that is currently owned by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.RequestMutex">
      <summary>
            Requests the <see cref="T:yWorks.Canvas.Input.InputMutex"></see> from the current <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Controller"></see>.
            </summary>
      <exception cref="T:System.Exception">If the mutex could not be obtained.</exception>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.Stop">
      <summary>
            Overridden to only return <see langword="true"></see> if this instance does not currently
            <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">have the input mutex</see>.
            </summary>
      <returns>
        <see langword="true">
        </see> iff this instance does not <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">own the mutex</see>.</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.AbstractInputMode">
      <summary>
            Abstract base class implementation of an <see cref="T:yWorks.Canvas.Input.IInputMode"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.AbstractInputMode" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Cancel">
      <summary>
            Cancels the editing of this mode. This implementation does nothing.
            Classes that need to perform clean-up should override this method
            and invoke <b>base.Cancel</b> as the last statement.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractInputMode.Canvas">
      <summary>
            Returns the canvas instance this mode is currently installed in or 
            <see langword="null"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Initialize">
      <summary>
            Performs one-time initialization of this instance. This method should not
            be invoked by subclasses. This will be done automatically upon first
            <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">installation</see> of this mode.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.AbstractInputMode.Initialized">
      <summary>
            Event that will be triggered after the call to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Initialize"></see></summary>
    </member>
    <member name="E:yWorks.Canvas.Input.AbstractInputMode.Initializing">
      <summary>
            Event that will be triggered before the call to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Initialize"></see></summary>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext">
      <summary>
            Returns the context instance this mode is currently installed in or 
            <c>null</c> if this instance is not installed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="P:yWorks.Canvas.Input.AbstractInputMode.Installed">
      <summary>
            Returns whether this mode is currently installed, i.e.
            if a call to <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Canvas"></see> will yield a non-<c>null</c>
            result.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Invalidate">
      <summary>
            Convenience method for subclass implementations that invalidates
            the canvas this mode is currently installed in.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.OnInitialized(System.EventArgs)">
      <summary>
            Event dispatch method that will dispatch the <see cref="E:yWorks.Canvas.Input.AbstractInputMode.Initialized"></see> event.
            </summary>
      <param name="eventArgs">The event arguments.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.OnInitializing(System.EventArgs)">
      <summary>
            Event dispatch method that will dispatch the <see cref="E:yWorks.Canvas.Input.AbstractInputMode.Initializing"></see> event.
            </summary>
      <param name="eventArgs">The event arguments.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.ReleaseKeyboard">
      <summary>
            Releases previously captured keyboard input.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.ReleaseMouse">
      <summary>
            Releases previously captured mouse input.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.RequestKeyboard">
      <summary>
            Requests capturing of all keyboard input that happens in the <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.RequestMouse">
      <summary>
            Requests capturing of all mouse input that happens in the <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Stop">
      <summary>
            Tries to stop the editing. This implementation always return true.
            Subclasses that want to prevent a stop or need to do special clean up
            should do this here if <c>base.Stop()</c> returns <c>true</c>.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.AbstractInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.ClickEventArgs">
      <summary>
            Event Arguments used by <see cref="E:yWorks.Canvas.Input.ClickInputMode.Clicked"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickEventArgs.#ctor(yWorks.Canvas.Geometry.Structs.PointD,System.Windows.Input.ModifierKeys)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ClickEventArgs"></see> class.
            </summary>
      <param name="location">The location.</param>
      <param name="modifierState">State of the modifiers.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickEventArgs.#ctor(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,System.Windows.Input.ModifierKeys)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ClickEventArgs"></see> class.
            </summary>
      <param name="context">The context in which the click occured.</param>
      <param name="location">The location.</param>
      <param name="modifierState">State of the modifiers.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickEventArgs.Context">
      <summary>
            Gets the context in which the click occured.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Input.ClickEventArgs"></see> have been handled.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickEventArgs.Location">
      <summary>
            Gets the location of the click.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickEventArgs.ModifierState">
      <summary>
            Gets the state of the modifiers at the time of the click.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ClickInputMode">
      <summary>
            An input mode that recognizes simple mouse clicks.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.#ctor">
      <summary>
            Creates a new instance of this mode that detects left mouse clicks.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.Begin(yWorks.Support.Transition)">
      <summary>
            Called once the gesture has begun.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.Cancel">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using the cancel and reset events, releases
            the input mutex and returns.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.ClickInputMode.Clicked">
      <summary>
            The event handler that will be triggered once a click has been
            detected.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.CreateClickRecognizer">
      <summary>
            Creates the event recognizer that is used to recognize the clicks for this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.CreatePressRecognizer">
      <summary>
            Creates the event recognizer that is used to recognize the press event for this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.CreateReleaseRecognizer">
      <summary>
            Creates the event recognizer that is used to recognize the release event for this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.DoubleClick">
      <summary>
            Whether to detect double clicks.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.End(yWorks.Support.Transition)">
      <summary>
            Called once the gesture has ended.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.GetClickPoint">
      <summary>
            Returns the location of the last click.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.InstallListeners">
      <summary>
            Installs all necessary listeners to trigger the <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.IsValidPress(System.Object,System.EventArgs)">
      <summary>
            Determines whether the given event is a valid press event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.LeftClick">
      <summary>
            Whether to detect left clicks.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.ModifierState">
      <summary>
            Returns the state of the modifier keys at the time of <see cref="M:yWorks.Canvas.Input.ClickInputMode.End(yWorks.Support.Transition)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.OnClicked(yWorks.Canvas.Input.ClickEventArgs)">
      <summary>
            Called once this mode has recognized a click gesture.
            </summary>
      <param name="eventArgs">The arguments.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.OnMachineReset">
      <summary>
            Resets the preferred cursor to <c>null</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.RequestMutextOnClick">
      <summary>
            Whether to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.RequestMutex">request the mutex</see> on a click.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.Stop">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the machine using a special stop event.
            </summary>
      <returns>
        <c>true</c> if and only if the editing has been stopped or there was
            no edit in progress</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.SwallowFocusClick">
      <summary>
            Gets or sets a property that determines whether clicks should
            be swallowed if they happen within a short amount of time 
            after the CanvasControl <see cref="E:System.Windows.UIElement.GotFocus">got focus</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ClickInputMode.UninstallListeners">
      <summary>
            Removes all listeners from the canvas that have been registered in <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.InstallListeners"></see></summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ClickInputMode.ValidClickHitTestable">
      <summary>
            Gets or sets a hit test that determines where this mode should recognize
            clicks.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.CompositeHandle`1">
      <summary>
            A controller class that makes multiple <see cref="T:yWorks.Canvas.Input.IHandle"></see>
            implementations appear to be synchronized.
            </summary>
      <typeparam name="T">The type of the tag that will be used to tag the wrapped handle instances with.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.#ctor">
      <summary>
            Constructs a new instance of this class.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.AddHandles(`0,yWorks.Canvas.Input.IHandle[])">
      <summary>
            Adds the array of handles so that they appear to be synchronized
            with all other handles previously being added to this instance.
            </summary>
      <param name="tag">The tag to use for <see cref="M:yWorks.Canvas.Input.CompositeHandle`1.RemoveHandles(`0)">removing</see> the handles later on.</param>
      <param name="handleArray">The handles to add to this instance.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.CompositeHandle`1.Handles">
      <summary>
            Returns a live collection of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s that wrap the handles
            added to this instance by <see cref="M:yWorks.Canvas.Input.CompositeHandle`1.AddHandles(`0,yWorks.Canvas.Input.IHandle[])"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.RemoveHandles(`0)">
      <summary>
            Removes the handles from the <see cref="P:yWorks.Canvas.Input.CompositeHandle`1.Handles"></see> collection that
            have been added to this instance previously using <see cref="M:yWorks.Canvas.Input.CompositeHandle`1.AddHandles(`0,yWorks.Canvas.Input.IHandle[])"></see> tagged
            with the same tag.
            </summary>
      <param name="tag">The tag used during the call to <see cref="M:yWorks.Canvas.Input.CompositeHandle`1.AddHandles(`0,yWorks.Canvas.Input.IHandle[])"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.Wrap(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Input.IHandle)">
      <summary>
            Wraps a given <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation so that it appears to be
            synchronized with all handles that are used for the same position identifier.
            </summary>
      <param name="position">The position the given handle should be synchronized with.</param>
      <param name="handle">The handle to wrap.</param>
      <returns>The wrapped implementation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.Wrap(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Input.IHandle,yWorks.Support.FactoryDelegate{yWorks.Canvas.Input.IHandle,`0},`0)">
      <summary>
            Wraps an <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation that will be obtained from
            the <paramref name="handleFactory"></paramref> each time
            <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">the drag is initialized</see>
            The wrapped handle will appear to be
            synchronized with all handles that are used for the same position identifier.
            </summary>
      <param name="position">The position the given handle should be synchronized with.</param>
      <param name="initialHandle">The handle to use initially.</param>
      <param name="handleFactory">The factory method that will be called initially and each time a drag is initialized.</param>
      <param name="handleFactoryContext">The context to pass to the <paramref name="handleFactory"></paramref> during invokation.</param>
      <returns>The wrapped implementation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositeHandle`1.Wrap(yWorks.Canvas.Input.HandlePositions,yWorks.Support.FactoryDelegate{yWorks.Canvas.Input.IHandle,`0},`0)">
      <summary>
            Wraps an <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation that will be obtained from
            the <paramref name="handleFactory"></paramref> initially and each time
            <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">the drag is initialized</see>
            The wrapped handle will appear to be
            synchronized with all handles that are used for the same position identifier.
            </summary>
      <param name="position">The position the given handle should be synchronized with.</param>
      <param name="handleFactory">The factory method that will be called initially and each time a drag is initialized.</param>
      <param name="handleFactoryContext">The context to pass to the <paramref name="handleFactory"></paramref> during invokation.</param>
      <returns>The wrapped implementation.</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.CompositePositionHandler`1">
      <summary>
            A composite implementation of the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> interface.
            </summary>
      <typeparam name="T">The type of the objects that will be used to tag given instances in
            the various Add and Remove methods.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.#ctor">
      <summary>
            Constructs a new compound <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see>instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddHandle(`0,yWorks.Canvas.Input.IHandle)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Input.IHandle"></see> to this instance
            using the given tag for later <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removal</see>.
            </summary>
      <param name="tag">An instance to tag the handler which must be used for <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removing</see>
            the instance from this composite later.
            </param>
      <param name="handle">A handle to delegate the repositioning to.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddLocatedMovable(`0,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IMovable)">
      <summary>
            Adds another position handler to this instance
            using the given tag for later <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removal</see>.
            </summary>
      <param name="tag">An instance to tag the handler which must be used for <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removing</see>
            the instance from this composite later.
            </param>
      <param name="location">A live view of the location of the element to reposition.</param>
      <param name="handler">The movable implementation that will be used for repositioning the element.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddMovable(`0,yWorks.Canvas.Geometry.IMovable)">
      <summary>
            Adds another position handler to this instance
            using the given tag for later <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removal</see>.
            </summary>
      <param name="tag">An instance to tag the handler which must be used for <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removing</see>
            the instance from this composite later.
            </param>
      <param name="movable">The movable implementation that will be used for repositioning the element.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddMutablePoint(`0,yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Adds a <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> to this instance
            using the given tag for later <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removal</see>.
            </summary>
      <param name="tag">An instance to tag the handler which must be used for <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removing</see>
            the instance from this composite later.
            </param>
      <param name="point">A point implementation to delegate the repositioning to.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddPositionHandler(`0,yWorks.Canvas.Input.IPositionHandler)">
      <summary>
            Adds another <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> instance to this instance
            using the given tag for later <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removal</see>.
            </summary>
      <param name="tag">An instance to tag the handler which must be used for <see cref="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">removing</see>
            the instance from this composite later.
            </param>
      <param name="handler">The instance to add to this composite.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.AddPositionHandler(`0,yWorks.Support.ILookup)">
      <summary>
            Tries to add a new handler to this composite by inspecting the provided lookup
            for suitable implementations that can be wrapped by this instance.
            </summary>
      <param name="tag">The tag to use.</param>
      <param name="lookup">The lookup to query implementations from.</param>
      <returns>Whether an implementation has been found and a handler has been added to this composite.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.Clear">
      <summary>
            Removes all previously registered handlers.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.CompositePositionHandler`1.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.RemovePositionHandler(`0)">
      <summary>
            Removes an implementation from this composite that has previously been added to
            this instance using the given tag.
            </summary>
      <param name="tag">The tag to identify the handler to remove from this composite.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.CompositePositionHandler`1.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the virtual position of this composite.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.CompoundKeyEventArgs">
      <summary>
            Event argument class for key events that carries the type of event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompoundKeyEventArgs.#ctor(System.Windows.Input.TextCompositionEventArgs)">
      <summary>
            Constructs a new event for a key that has been typed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.CompoundKeyEventArgs.#ctor(yWorks.Canvas.Input.CompoundKeyEventType,System.Windows.Input.KeyEventArgs)">
      <summary>
            Constructs a new event.
            </summary>
      <param name="type">The type to use</param>
      <param name="args">The KeyEventArgs to use.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.CompoundKeyEventArgs.EventType">
      <summary>
            Gets the type of the event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.CompoundKeyEventArgs.KeyCode">
      <summary>
            Returns the key code.
            This will be Keys.None for typed event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.CompoundKeyEventArgs.KeyValue">
      <summary>
            Returns the value of the character that has been typed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.CompoundKeyEventArgs.Modifiers">
      <summary>
            Returns the state of the modifiers at the time of the event.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.CompoundKeyEventHandler">
      <summary>
            Event handler signature that deals with <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see></summary>
      <param name="sender">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="T:yWorks.Canvas.Input.CompoundKeyEventType">
      <summary>
            The type of a <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.CompoundKeyEventType.None">
      <summary>
            Neither Pressed, nor Typed, nor Released.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.CompoundKeyEventType.Pressed">
      <summary>
            The key has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.CompoundKeyEventType.Typed">
      <summary>
            The character has been typed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.CompoundKeyEventType.Released">
      <summary>
            The key has been released.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ConcurrencyController">
      <summary>
            A controller class that manages a number of <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see>
            implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ConcurrencyController" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.CanRequestMutex">
      <summary>
            Determines if a mutex can be successfully requested currently.
            </summary>
      <returns>Whether <see cref="M:yWorks.Canvas.Input.ConcurrencyController.RequestMutex(yWorks.Canvas.Input.IConcurrentInputMode)"></see> would currently succeed.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.ConcurrencyController.CurrentOwner">
      <summary>
            Gets the current owner of the input mutex or <c>null</c> if no mode
            currently owns the mutex.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ConcurrencyController.Enabled">
      <summary>
            Enables or disables this controller.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.ConcurrencyController.MutexReleased">
      <summary>
            Event that will be triggered if the mutex has been released.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.ConcurrencyController.MutexRequested">
      <summary>
            Event that will be triggered if the mutex has been successfully requested.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.OnDisabled">
      <summary>
            Callback that is called if <see cref="P:yWorks.Canvas.Input.ConcurrencyController.Enabled"></see> has been successfully changed accordingly.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.OnEnabled">
      <summary>
            Callback that is called if <see cref="P:yWorks.Canvas.Input.ConcurrencyController.Enabled"></see> has been successfully changed accordingly.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.OnMutexReleased(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Callback method that will be triggered if a mode released the input mutex.
            </summary>
      <param name="oldOwner">The old owner of the mutex.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.OnMutexRequested(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Callback method that will be triggered if a mode requests the input mutex.
            </summary>
      <param name="newOwner">The new owner of the mutex.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.Register(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Registers the given mode with this controller.
            </summary>
      <param name="mode">The mode to register with this controller.</param>
      <exception cref="T:System.ArgumentException">If the <paramref name="mode"></paramref> is <see langword="null"></see> or 
            has already been registered with this instance.</exception>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.Release(yWorks.Canvas.Input.InputMutex)">
      <summary>
            Releases the given mutex.
            </summary>
      <param name="mutex">The mutex to release.</param>
      <exception cref="T:System.ArgumentException">If the <paramref name="mutex"></paramref> is not the current mutex of this controller.</exception>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.RequestMutex(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Can be called to request an <see cref="T:yWorks.Canvas.Input.InputMutex"></see> for the given mode.
            </summary>
      <param name="mode">The mode that should be given the mutex</param>
      <returns>The acquired mutex.</returns>
      <exception cref="T:System.InvalidOperationException">If the mutex could not be obtained.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>mode</c> is null.</exception>
    </member>
    <member name="M:yWorks.Canvas.Input.ConcurrencyController.Unregister(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Unregisters this mode from this controller.
            </summary>
      <param name="mode">The mode to remove from this controller.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.ConstrainedDragHandler`1">
      <summary>
            A utility implementation of the <see cref="T:yWorks.Canvas.Input.IDragHandler"></see> interface that 
            can be used to constrain the movement of an existing instance conveniently.
            </summary>
      <typeparam name="TDelegate">The exact type of the delegate implementation.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ConstrainedDragHandler`1"></see> class
            that delegates to the <paramref name="wrappedHandler"></paramref>.
            </summary>
      <param name="wrappedHandler">The handler to delegate to.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Cancels the move operation and calls <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnCanceled(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)"></see></summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.ConstrainNewLocation(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Callback that needs to implement the constraints for the new location.
            </summary>
      <param name="context">The context in which the drag will be performed.</param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> may or may not be modified to reflect the new value.</param>
      <returns>The constrained value of <paramref name="newLocation"></paramref>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.DelegateHandler">
      <summary>
            Gets the delegate handler to which calls will be ultimately delegated.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Handles the finish operation and invokes <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Handles the move operation and subsequently calls <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnMoved(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></summary>
      <param name="inputModeContext">The context in which the drag will be performed.</param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location"></see> may or may not be modified to reflect the new value.</param>
      <returns>
            Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Initializes the drag operation and subsequently calls <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnInitialized(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)"></see></summary>
      <param name="inputModeContext">The context in which the drag will be performed.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.Location">
      <summary>
            Delegates to the <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.DelegateHandler"></see>'s <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnCanceled(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called when the <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)"></see> method has been called.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <param name="originalLocation">The original location.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called when the <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see> method has been called.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <param name="originalLocation">The original location.</param>
      <param name="newLocation">The new location.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnInitialized(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called when the <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see> method has been called.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <param name="originalLocation">The original location.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.OnMoved(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called when the <see cref="M:yWorks.Canvas.Input.ConstrainedDragHandler`1.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see> operation has been performed.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <param name="originalLocation">The original location.</param>
      <param name="newLocation">The new location.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.ConstrainedHandle">
      <summary>
            A convenience implementation of the <see cref="T:yWorks.Canvas.Input.IHandle"></see> interface
            that can be used to constrain the handle of an item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedHandle.#ctor(yWorks.Canvas.Input.IHandle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ConstrainedHandle"></see> class that delegates to the
            <paramref name="wrappedHandle"></paramref>.
            </summary>
      <param name="wrappedHandle">The handle to delegate to.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ConstrainedHandle.Cursor">
      <summary>
            Delegates to <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.DelegateHandler"></see>'s <see cref="P:yWorks.Canvas.Input.IHandle.Cursor"></see>
            property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ConstrainedHandle.Type">
      <summary>
            Delegates to <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.DelegateHandler"></see>'s <see cref="P:yWorks.Canvas.Input.IHandle.Type"></see>
            property.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ConstrainedPositionHandler">
      <summary>
            A convenience implementation of the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> interface
            that can be used to constrain the position of an item.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedPositionHandler.#ctor(yWorks.Canvas.Input.IPositionHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ConstrainedPositionHandler"></see> class that delegates to the <paramref name="wrappedHandler"></paramref>.
            </summary>
      <param name="wrappedHandler">The handler to delegate to.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ConstrainedPositionHandler.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates to <see cref="P:yWorks.Canvas.Input.ConstrainedDragHandler`1.DelegateHandler"></see>'s <see cref="M:yWorks.Canvas.Input.IPositionHandler.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)"></see>
            method.
            </summary>
      <param name="location">
      </param>
    </member>
    <member name="T:yWorks.Canvas.Input.ContextMenuInputMode">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Input.IInputMode"></see> interface that will
            display a <see cref="T:System.Windows.Controls.ContextMenu"></see> when the user right clicks on the
            <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.#ctor">
      <summary>
            Creates a new instance with no initial context menu.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.#ctor(System.Windows.Controls.ContextMenu)">
      <summary>
            Creates a new instance using the provided menu.
            </summary>
      <param name="menu">The menu to show.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.Cancel">
      <summary>
            Makes the menu invisible.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ContextMenuInputMode.ClearMenu">
      <summary>
            Gets or sets a value indicating whether to clear menu the <see cref="T:System.Windows.Controls.ContextMenu"></see>'s
            <see cref="P:System.Windows.Controls.ItemsControl.Items"></see> before the <see cref="E:yWorks.Canvas.Input.ContextMenuInputMode.PopulateContextMenu"></see>
            event is triggered.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.CreateContextMenuHandlerInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the <see cref="E:yWorks.Canvas.Input.ContextMenuInputMode.PopulateContextMenu"></see> call in the upcoming
            query.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.CreateMenu">
      <summary>
            Factory method that creates the initial menu strip.
            </summary>
      <returns>An empty <see cref="T:System.Windows.Controls.ContextMenu"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode in the canvas, registering the <see cref="P:yWorks.Canvas.Input.ContextMenuInputMode.Menu"></see>
            as the canvas' <see cref="P:System.Windows.FrameworkElement.ContextMenu"></see></summary>
      <param name="canvas">The canvas to install this mode into.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ContextMenuInputMode.Menu">
      <summary>
            Gets or sets the menu to show.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.OnPopulateContextMenu(System.Windows.Controls.ContextMenu,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This will populate the context menu for the given world coordinate.
            </summary>
      <param name="menu">The menu to optionally populate with items.</param>
      <param name="position">The position in the world coordinate system for which the context menu has been invoked.</param>
      <returns>Whether to show the context menu.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.OnPopulateContextMenu(yWorks.Canvas.Input.PopulateContextMenuEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.Canvas.Input.ContextMenuInputMode.PopulateContextMenu"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Input.PopulateContextMenuEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="E:yWorks.Canvas.Input.ContextMenuInputMode.PopulateContextMenu">
      <summary>
            An event that will be triggered when the context menu is about to 
            be shown.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.Stop">
      <summary>
            Makes the menu invisible.
            </summary>
      <returns>
        <c>base.Stop()</c>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ContextMenuInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Removes the menu from the context and replaces it with the old instance.
            </summary>
      <param name="context">The context to uninstall this mode from.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ContextMenuInputMode.ValidContextMenuLocationHitTestable">
      <summary>
            Gets or sets an <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines whether
            it is valid to open a popup menu at the queried position.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.DropInputMode">
      <summary>
            This is an input mode handling drag and drop related events
            on a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.#ctor(System.String)">
      <summary>
            Constructs a new instance of class <see cref="T:yWorks.Canvas.Input.DropInputMode"></see> for the
            expected data format.
            </summary>
      <param name="expectedDataFormat">This is a string which can be given to
            <see cref="M:System.Windows.DataObject.GetData(System.String)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.#ctor(System.Type)">
      <summary>
            Constructs a new instance of class <see cref="T:yWorks.Canvas.Input.DropInputMode"></see> for the
            expected data format.
            </summary>
      <param name="expectedType">This is a type which can be given to
            <see cref="M:System.Windows.DataObject.GetData(System.Type)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.AdjustEffect(System.Windows.DragEventArgs)">
      <summary>
            Callback that adjusts the effect accordingly.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.Cancel">
      <summary>
            Cleanly cancels this mode.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.CaptureMouseInputDuringDrag">
      <summary>
            Gets or sets a value indicating whether to capture mouse input during drag operations.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.DragDropEffect">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DragDropEffects"></see> that will
            be used for drags on the canvas.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.DropInputMode.DragDropped">
      <summary>
            This event is raised, if a drag operation is dropped onto the
            <see cref="T:yWorks.Canvas.CanvasControl"></see> into which this instance is installed.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.DropInputMode.DragEntered">
      <summary>
            This event is raised, if a drag operation enters the
            <see cref="T:yWorks.Canvas.CanvasControl"></see> into which this instance is installed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.DropData">
      <summary>
            Gets the data carried by a drag operation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.DropLocation">
      <summary>
            Gets the current mouse position during drag operations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into the given canvas.
            <remarks>
            Clients should not call this method as this is handled by the framework.
            </remarks></summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.MousePosition">
      <summary>
            Gets the current mouse position during drag operations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.OnDisabled">
      <summary>
            Cleanly disables this mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.OnDragDropped(System.Windows.DragEventArgs)">
      <summary>
            Called once a drag has been dropped on the canvas.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.OnDragEntered(System.Windows.DragEventArgs)">
      <summary>
            Called once a drag has entered the canvas.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.OnDraggedOver(System.Windows.DragEventArgs)">
      <summary>
            Called whenever a drag is over the canvas.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.OnDragLeft">
      <summary>
            Called once a drag has left the canvas.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.DropInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">the context</param>
    </member>
    <member name="P:yWorks.Canvas.Input.DropInputMode.ValidDropHitTestable">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines
            whether the given location is a valid drop location.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.EventRecognizerCallback">
      <summary>
            An callback that recognizes events. Given a sender and an event argument, 
            delegates decide whether the event is treated as a match
            depending on the context.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.EventRecognizers">
      <summary>
            Utility class that holds implementation singletons and utility methods for simple
            <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>s and <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>s.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.EventRecognizers.Always">
      <summary>
            A callback that will always return true;
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.EventRecognizers.Create(System.Windows.Input.InputGesture)">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that uses an <see cref="T:System.Windows.Input.InputGesture"></see>
            to <see cref="M:System.Windows.Input.InputGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">match</see> input gestures.
            </summary>
      <param name="gesture">The gesture to use</param>
      <returns>An event recognizer that uses the gesture.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.EventRecognizers.Create(yWorks.Canvas.Input.EventRecognizerCallback)">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> from an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            delegate.
            </summary>
      <param name="callback">The callback to wrap in an interface.</param>
      <returns>An implementation that wraps the callback.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.EventRecognizers.Create(yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see> delegate from an <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            instance.
            </summary>
      <param name="instance">The instance to wrap as a delegate.</param>
      <returns>A delegate that delegates to the implementations.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.EventRecognizers.CreateAndRecognizer(yWorks.Canvas.Input.IEventRecognizer[])">
      <summary>
            Creates an instance that is the logical 'and' combination of the provided recognizers.
            </summary>
      <param name="recognizers">The recognizers to perform the logical operation on.</param>
      <returns>An instance that is the result of the logical 'and' operation of the provided instances.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.EventRecognizers.CreateOrRecognizer(yWorks.Canvas.Input.IEventRecognizer[])">
      <summary>
            Creates an instance that is the logical 'or' combination of the provided recognizers.
            </summary>
      <param name="recognizers">The recognizers to perform the logical operation on.</param>
      <returns>An instance that is the result of the logical 'or' operation of the provided instances.</returns>
    </member>
    <member name="F:yWorks.Canvas.Input.EventRecognizers.Never">
      <summary>
            A callback that will always return false;
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.FocusGuardInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> that can be added to a <see cref="T:yWorks.Canvas.Input.MultiplexingInputMode"></see>
            to suppress other modes from doing unwanted things if the control has just become focused.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.FocusGuardInputMode.#ctor">
      <summary>
            Creates a new instance of this mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.FocusGuardInputMode.Cancel">
      <summary>
            Overridden to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">release</see> the mutex if it is currently owned
            by this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.FocusGuardInputMode.GuardCursor">
      <summary>
            Gets or sets the Cursor that will be shown during active guards.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.FocusGuardInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.FocusGuardInputMode.Stop">
      <summary>
            Overridden to only return <see langword="true"></see> if this instance does not currently
            <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">have the input mutex</see>.
            </summary>
      <returns>
        <see langword="true">
        </see> iff this instance does not <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">own the mutex</see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.FocusGuardInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.HandleInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation that can handle a collection
            of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s. 
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.#ctor">
      <summary>
            Creates a new mode with no handles initially.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.Active">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> is active.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.AddHandle(yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Factory method that creates and <see cref="M:yWorks.Canvas.Input.HandleInputMode.AddHandle(yWorks.Canvas.Input.IHandle)">adds</see>
            a handle to this mode by wrapping a given <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>
            instance.
            </summary>
      <param name="p">The point to use as a handle.</param>
      <returns>The handle created.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.AddHandle(yWorks.Canvas.Geometry.IMutablePoint,System.Windows.Input.Cursor,yWorks.Canvas.Input.HandleType)">
      <summary>
            Factory method that creates and <see cref="M:yWorks.Canvas.Input.HandleInputMode.AddHandle(yWorks.Canvas.Input.IHandle)">adds</see>
            a handle to this mode by wrapping a given <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>
            instance.
            </summary>
      <param name="p">The point to use as a handle.</param>
      <param name="cursor">The cursor to use.</param>
      <param name="handleType">The type of the handle to create.</param>
      <returns>The handle created.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.AddHandle(yWorks.Canvas.Input.IHandle)">
      <summary>
            Adds a handle to the collection of handles managed by this instance.
            </summary>
      <param name="handle">The handle to add.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Arm(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Transition callback that is invoked when the mouse gets "armed".
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.BeginDrag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine if a beginning drag gesture has been recognized.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.BeginDragging(yWorks.Canvas.Input.IHandle)">
      <summary>
            Method that can be used to initialize the dragging of a given handle by hand.
            </summary>
      <param name="handle">The handle to be dragged.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.CancelDrag(yWorks.Support.Transition)">
      <summary>
            Called when the users cancels the dragging of the handle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.CancelRecognizer">
      <summary>
            Gets or sets the "cancel" recognizer.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.CanvasGroupProvider">
      <summary>
            Gets or sets the canvas object group provider this mode should render the
            visual representations of the handles in.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.CreateHandleInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the <see cref="T:yWorks.Canvas.Input.IHandle"></see> interface for the upcoming
            drag operation.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Disarm(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Transition callback that is invoked when the mouse gets "disarmed".
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.HandleInputMode.DragCanceled">
      <summary>
            Event that will be triggered when the drag has been canceled.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.HandleInputMode.DragFinished">
      <summary>
            Event that will be triggered once the drag has been finished.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.DraggedRecognizer">
      <summary>
            Gets or sets the "dragged" recognizer.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.HandleInputMode.Dragging">
      <summary>
            Event that will be triggered for every drag.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.HandleInputMode.DragStarting">
      <summary>
            Event that will be triggered once the drag has started.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.EndDrag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine once that drag has been finalized.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.GetClosestHitHandle(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the closest hit handle for the given world coordinate pair.
            </summary>
      <param name="location">The coordinates in the world coordinate system.</param>
      <returns>The closest handle that has been hit or <c>null</c></returns>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingDefaultKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Default.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingDefaultVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Default| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingDefaultVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Default| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingDefaultVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Default| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingInvisibleKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Invisible.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingInvisibleVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Invisible| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingInvisibleVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Invisible| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingInvisibleVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Invisible| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingMoveKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Move.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingMoveVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Move| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingMoveVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Move| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingMoveVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Move| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingResizeKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Resize.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingResizeVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Resize| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingResizeVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Resize| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingResizeVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Resize| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingRotateKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Rotate.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingRotateVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Rotate| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingRotateVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Rotate| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingRotateVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Rotate| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingShearKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Shear.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingShearVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Shear| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingShearVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Shear| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingShearVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Shear| HandleType.Variant4.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingWarpKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Warp.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingWarpVariant2Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Warp| HandleType.Variant2.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingWarpVariant3Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Warp| HandleType.Variant3.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleInputMode.HandleDrawingWarpVariant4Key">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.Canvas.Input.HandleInputMode"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s of <see cref="T:yWorks.Canvas.Input.HandleType">type</see> HandleType.Warp| HandleType.Variant4.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.HandleIsHit(yWorks.Canvas.Input.IHandle,yWorks.Canvas.Geometry.Structs.PointD,System.Double@)">
      <summary>
            Determines whether a given handle has been visually hit by the mouse at the
            given world coordinates.
            </summary>
      <param name="handle">The handle to check</param>
      <param name="location">The world coordinates to check.</param>
      <param name="distance">A distance metric that returns the distance from the mouse
            to the handle.</param>
      <returns>Whether the handle has been hit.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.Handles">
      <summary>
            Gets or sets the collection of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s this mode
            manages.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Initializes the state machine this input mode uses internally to manage its state.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs the visual representation of the handles into the canvas at the group provided by<see cref="P:yWorks.Canvas.Input.HandleInputMode.CanvasGroupProvider"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Invalidate">
      <summary>
            Convenience method for subclass implementations that invalidates
            the canvas this mode is currently installed in.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.IsHovering(System.Object,System.EventArgs)">
      <summary>
            Event recognizer callback used to determine whether the mouse is currently hovering
            over a handle.
            </summary>
      <returns>Whether the mouse is hovering over handle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.OnDrag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine during the drag.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.OnDragCanceled">
      <summary>
            Triggers the <see cref="E:yWorks.Canvas.Input.HandleInputMode.DragCanceled"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.OnDragFinished">
      <summary>
            Callback triggered once the drag has been finalized.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.OnDragStarting">
      <summary>
            Triggers the <see cref="E:yWorks.Canvas.Input.HandleInputMode.DragStarting"></see> event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.PressedRecognizer">
      <summary>
            Gets or sets the "pressed" state recognizer.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.HandleInputMode.ReleasedRecognizer">
      <summary>
            Gets or sets the "released" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.RemoveHandle(yWorks.Canvas.Input.IHandle)">
      <summary>
            Removes a handle from the collection of handles managed by this instance.
            </summary>
      <param name="handle">The handle to remove.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Render(System.Windows.Media.DrawingContext,yWorks.Canvas.Input.IHandle)">
      <summary>
            Callback that actually renders one handle onto the given <see cref="T:System.Windows.Media.DrawingContext"></see>.
            </summary>
      <param name="g">The context to paint the handle on</param>
      <param name="handle">The handle</param>
    </member>
    <member name="M:yWorks.Canvas.Input.HandleInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Removes the <see cref="T:yWorks.Canvas.ICanvasObject"></see> that displays the handles from the canvas.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.HandlePositions">
      <summary>
            The possible positions of a rectangle <see cref="T:yWorks.Canvas.Input.IHandle"></see>s.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.None">
      <summary>
            Indicates no position at all.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.NorthWest">
      <summary>
            Indicates the position at north west.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.North">
      <summary>
            Indicates the position at north.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.NorthEast">
      <summary>
            Indicates the position at north east.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.West">
      <summary>
            Indicates the position at west.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.Center">
      <summary>
            Indicates the position at the center.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.East">
      <summary>
            Indicates the position at east.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.SouthWest">
      <summary>
            Indicates the position at south west.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.South">
      <summary>
            Indicates the position at south.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandlePositions.SouthEast">
      <summary>
            Indicates the position at south east.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.HandleType">
      <summary>
            Describes the type of a <see cref="T:yWorks.Canvas.Input.IHandle"></see>.
            This type can be used by the rendering engine to render
            different types of handles differently.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Invisible">
      <summary>
            A handle which serves a general purpose but should not be displayed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Default">
      <summary>
            A default handle which serves a general purpose.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Resize">
      <summary>
            A handle which can be used to resize something.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Rotate">
      <summary>
            A handle which can be used to rotate something.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Move">
      <summary>
            A handle which can be used to move something.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Shear">
      <summary>
            A handle which can be used to shear an object.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Warp">
      <summary>
            A handle which can be used to warp an object.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.TypeMask">
      <summary>
            A bitmask that can be used to query the basic type of a handle type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Variant1">
      <summary>
            A default variant modifier that decorates a basic type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Variant2">
      <summary>
            The second variant modifier that decorates a basic type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Variant3">
      <summary>
            The third variant modifier that decorates a basic type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.Variant4">
      <summary>
            The forth variant modifier that decorates a basic type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.VariantMask">
      <summary>
            A bitmask that can be used to query the variant of a basic handle type.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.OffsetNorth">
      <summary>
            A modifier that can be used to tell the rendering engine to
            render the visual representation of this handle with an offset to 
            the north.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.OffsetEast">
      <summary>
            A modifier that can be used to tell the rendering engine to
            render the visual representation of this handle with an offset to 
            the east.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.OffsetSouth">
      <summary>
            A modifier that can be used to tell the rendering engine to
            render the visual representation of this handle with an offset to 
            the south.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.OffsetWest">
      <summary>
            A modifier that can be used to tell the rendering engine to
            render the visual representation of this handle with an offset to 
            the west.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.HandleType.OffsetMask">
      <summary>
            A bitmask that can be used to query the offsets of a basic handle type.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IConcurrentInputMode">
      <summary>
            Specializes the <see cref="T:yWorks.Canvas.Input.IInputMode"></see> interface to support
            concurrency via <see cref="T:yWorks.Canvas.Input.ConcurrencyController"></see> instances.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IConcurrentInputMode.Controller">
      <summary>
            Used by clients to provide this instance with a <see cref="T:yWorks.Canvas.Input.ConcurrencyController"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IConcurrentInputMode.Enabled">
      <summary>
            Gets or sets the enabled state of this input mode.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IConcurrentInputMode.PreferredCursor">
      <summary>
            Returns the cursor this mode would like to have displayed in the
            <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IDragHandler">
      <summary>
            Interface for an object that can be used to drag something
            displayed in a <see cref="T:yWorks.Canvas.CanvasControl"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IDragHandler.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.IDragHandler.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.IDragHandler.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IEventRecognizer">
      <summary>
            An interface that recognizes events. Given a sender and an event argument, 
            instances of this interface decide whether the event is treated as a match
            depending on the context.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IEventRecognizer.IsRecognized(System.Object,System.EventArgs)">
      <summary>
            Callback that decides whether a given pair of event source and event argument
            is considered a match.
            </summary>
      <param name="eventSource">the original source of the event</param>
      <param name="eventArg">the event argument</param>
      <returns>whether the pair is considered a match</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.IFocusIndicatorInstaller">
      <summary>
            An interface for objects that can install a visual 
            focus indicator decoration of an item in the model displayed in a canvas.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IGridConstraintProvider`1">
      <summary>
            Interface for classes that can snap coordinates of items of a specific type to a grid.
            </summary>
      <typeparam name="T">The type of the items this class can snap</typeparam>
    </member>
    <member name="P:yWorks.Canvas.Input.IGridConstraintProvider`1.GridOrigin">
      <summary>
            Gets the canonic origin of the grid.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IGridConstraintProvider`1.HorizontalGridWidth">
      <summary>
            Gets the canonic grid width in horizontal direction.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IGridConstraintProvider`1.SnapToGrid(yWorks.Canvas.Input.IInputModeContext,`0,yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Input.SnapPolicy,yWorks.Canvas.Input.SnapPolicy)">
      <summary>
            Performs the actual snapping to grid coordinates.
            </summary>
      <param name="context">The context in which the snapping should occur.</param>
      <param name="item">The item of which the coordinates should be snapped.</param>
      <param name="point">The coordinates to snap.</param>
      <param name="xSnapPolicy">The policy</param>
      <param name="ySnapPolicy">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.Canvas.Input.IGridConstraintProvider`1.VerticalGridWidth">
      <summary>
            Gets the canonic grid width in vertical direction.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IHandle">
      <summary>
            Interface for a handle that can be displayed in a <see cref="T:yWorks.Canvas.CanvasControl"></see>
            as a UI element for the user to modify the contents of the control.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IHandle.Cursor">
      <summary>
            Provides the cursor to display when the mouse hovers over or drags this
            handle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IHandle.Type">
      <summary>
            Returns the type of the handle that can be used by the rendering engine
            to render types differently.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IHandleProvider">
      <summary>
            Interface for an object that provides a number of
            <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IHandleProvider.GetHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns a collection of zero or more <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementations
            that are associated with this instance.
            </summary>
      <returns>A collection of handles.</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.IHighlightInstaller">
      <summary>
            An interface for objects that can install a visual representation of
            a highlight decoration of an item in the model displayed in a canvas.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IInputMode">
      <summary>
            Interface implemented by input modes that can be registered with a
            <see cref="T:yWorks.Canvas.CanvasControl"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IInputMode.Cancel">
      <summary>
            Called by the client to unconditionally cancel all editing.
            This will be called prior to the uninstalling of this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into the given context that is provided by the canvas.
            In general a mode can only be installed into a single canvas at all times.
            <remarks>
            This method is called to initialize this instance. Subclasses should override
            this method to register the corresponding event handler delegates for
            the various input events they need to register with.
            <br></br>
            When this instance gets <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">uninstalled</see> from the context
            the same context instance will be passed to it.
            <br></br>
            Implementations may hold a reference to the <paramref name="context"></paramref> instance
            and use it while they are being installed.
            </remarks></summary>
      <param name="context">The context that this instance shall be installed into.
            The same instance will be passed to this instance during <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>.
            A reference to the context may be kept and queried during the time the mode is installed.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.IInputMode.Stop">
      <summary>
            Called by the client in order to stop a current editing progress.
            This should stop the current edit, if one is in progress and possibly commit
            all of the changes. If stopping is not possible, this method can return <c>false</c></summary>
      <returns>
        <c>true</c> if and only if the editing has been stopped or there was
            no edit in progress</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the given context.
            This code should clean up all changes made to the canvas in the <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>
            method. After a mode has been uninstalled it can be installed again into the same or
            another canvas.
            </summary>
      <param name="context">The context to deregister from. This is the same instance that had been
            passed to <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see> during installation.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.IInputModeContext">
      <summary>
            The interface for the context object that is passed to <see cref="T:yWorks.Canvas.Input.IInputMode"></see>
            instances during <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see> and <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>
            and <see cref="T:yWorks.Canvas.Input.IDragHandler"></see>
            implementations like <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see>
            and <see cref="T:yWorks.Canvas.Input.IHandle"></see> to provide additional context for the implementations.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IInputModeContext.CanvasControl">
      <summary>
            Yields the <see cref="P:yWorks.Canvas.Input.IInputModeContext.CanvasControl"></see> on which the mode currently acts.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.IInputModeContext.ParentInputMode">
      <summary>
            Yields the <see cref="T:yWorks.Canvas.Input.IInputMode"></see> which issued the context object.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.InputMutex">
      <summary>
            An input mutex that can be obtained from <see cref="T:yWorks.Canvas.Input.ConcurrencyController"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.InputMutex.Controller">
      <summary>
            Gets the controller this mutex has been obtained from.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.InputMutex.MutexOwner">
      <summary>
            Returns the <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> that owns this mutex.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.InputMutex.Release">
      <summary>
            Releases this mutex.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.IPositionHandler">
      <summary>
            Interface for an object that can handle the position of an item 
            displayed in a <see cref="T:yWorks.Canvas.CanvasControl"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IPositionHandler.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to set the position to the given coordinates.
            </summary>
      <param name="location">The new location.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.IReshapeHandleProvider">
      <summary>
            A specialized version of the <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see> interface
            that can be used to query <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation for
            resizing an object.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.IReshapeHandleProvider.GetAvailableHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns a bitwise combination of all of the <see cref="T:yWorks.Canvas.Input.HandlePositions"></see>
            this interface can provide an implementation for.
            </summary>
      <param name="inputModeContext">The context for which the handles are queried.</param>
      <returns>A bitwise combination of all positions the <see cref="M:yWorks.Canvas.Input.IReshapeHandleProvider.GetHandle(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.HandlePositions)"></see> method
            can be queried for.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.IReshapeHandleProvider.GetHandle(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.HandlePositions)">
      <summary>
            Returns an implementation of an <see cref="T:yWorks.Canvas.Input.IHandle"></see> for the given position, that can be used to reshape an object.
            </summary>
      <param name="inputModeContext">The context for which the handles are queried.</param>
      <param name="position">The single position a handle implementation should be returned for.</param>
      <returns>An implementation of <see cref="T:yWorks.Canvas.Input.IHandle"></see> for the given position.</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.ISizeConstraintProvider`1">
      <summary>
            An interface used by implementations that provide various size constraints
            for items of a specific type.
            </summary>
      <typeparam name="T">The type this instance can provide constraints for.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.ISizeConstraintProvider`1.GetMaximumSize(`0)">
      <summary>
            Returns the maximum size allowed for the given item.
            </summary>
      <param name="item">The item to return the maximum size for.</param>
      <returns>The maximum size or <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Infinite"></see> if there is no constraint on the size.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ISizeConstraintProvider`1.GetMinimumEnclosedArea(`0)">
      <summary>
            Returns the minimum area that needs to be enclosed by the given item.
            </summary>
      <param name="item">The item to return the area for.</param>
      <returns>The area to enclose or <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Empty"></see> if there is no constraint on the size due to an enclosed area.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ISizeConstraintProvider`1.GetMinimumSize(`0)">
      <summary>
            Returns the minimum size allowed for the given item.
            </summary>
      <param name="item">The item to return the minimum size for.</param>
      <returns>The minimum size or <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Empty"></see> if there is no constraint on the size.</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.KeyboardInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that recognizes simple key events and invokes
            a registered handler.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.KeyboardInputMode" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.AddCommand(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)">
      <summary>
            Adds a command and associated handlers to this instance.
            </summary>
      <param name="command">The command to register handlers with.</param>
      <param name="executedHandler">The handler for the execution.</param>
      <param name="canExecuteHandler">The handler that determines executability.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.AddHandler(System.Windows.Input.InputGesture,System.EventHandler)">
      <summary>
            Adds an event handler for a specific <see cref="T:System.Windows.Input.InputGesture"></see> to this mode.
            </summary>
      <param name="inputGesture">The input gesture that will be used to recognize the gesture.</param>
      <param name="handler">The handler that will be used to handle the event.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.AddHandler(System.Windows.Input.InputGesture,System.Windows.Input.ICommand)">
      <summary>
            Adds a command to this instance that will be triggered for the specific
            input gesture.
            </summary>
      <param name="inputGesture">The input gesture that will be used to recognize invokations.</param>
      <param name="command">The command to execute.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.AddHandler(yWorks.Canvas.Input.IEventRecognizer,System.EventHandler)">
      <summary>
            Adds a given handler to this instance that will be triggered if the
            IEventRecognizer recognizes a <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs">key event</see>
            that has been triggered by the canvas control.
            </summary>
      <param name="recognizer">An event recognizer that will be fed with all key events.</param>
      <param name="handler">The handler to invoke if the recognizer matches an event.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.ClearHandlers">
      <summary>
            Removes all handlers that have been registered with this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.ClearHandlers(yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Removes all handlers that have been registered under the given recognizer.
            </summary>
      <param name="recognizer">The recognizer</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.GetHandlers(yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Returns all handlers registered using the given recognizer.
            </summary>
      <param name="recognizer">The recognizer.</param>
      <returns>An enumeration over all handlers.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.GetRegisteredRecognizers">
      <summary>
            Returns an enumerator over all distinct registered recognizers.
            </summary>
      <returns>An enumerator over the recognizers added using <see cref="M:yWorks.Canvas.Input.KeyboardInputMode.AddHandler(yWorks.Canvas.Input.IEventRecognizer,System.EventHandler)"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.HandleEvent(System.Object,yWorks.Canvas.Input.CompoundKeyEventArgs)">
      <summary>
            Traps key events from the canvas control and checks the list
            of recognizers.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.OnDisabled">
      <summary>
            Disables the registered commands.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.OnEnabled">
      <summary>
            Enables the registered commands.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.RemoveCommand(System.Windows.Input.ICommand)">
      <summary>
            Removes a previously registered command from this instance.
            </summary>
      <param name="command">The command to remove.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.RemoveHandler(System.Windows.Input.InputGesture,System.EventHandler)">
      <summary>
            Removes a previously registered handler.
            </summary>
      <param name="inputGesture">The gesture that had been registered.</param>
      <param name="handler">The handler that had been registered.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.RemoveHandler(System.Windows.Input.InputGesture,System.Windows.Input.ICommand)">
      <summary>
            Removes a previously registered handler.
            </summary>
      <param name="inputGesture">The gesture that had been registered.</param>
      <param name="command">The command that had been registered.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.RemoveHandler(yWorks.Canvas.Input.IEventRecognizer,System.EventHandler)">
      <summary>
            Removes a previously registered handler.
            </summary>
      <param name="recognizer">The recognizer that had been registered.</param>
      <param name="handler">The event handler that had been registered.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyboardInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.KeyEventRecognizer">
      <summary>
            A simple implementation of <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            that recognizes various <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.#ctor(System.Char)">
      <summary>
            Creates an instance that recognizes a key being typed.
            </summary>
      <param name="character">The text that has been typed.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.#ctor(System.String)">
      <summary>
            Creates an instance that recognizes a key being typed.
            </summary>
      <param name="text">The text that has been typed.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.#ctor(yWorks.Canvas.Input.CompoundKeyEventType,System.Windows.Input.Key)">
      <summary>
            Creates an event recognizer for a given key and type.
            </summary>
      <param name="type">The type of the event.</param>
      <param name="data">The key that is subject of the event.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.#ctor(yWorks.Canvas.Input.CompoundKeyEventType,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
      <summary>
            Creates an event recognizer for a given key and type using a given set of modifiers.
            </summary>
      <param name="type">The type of the event.</param>
      <param name="data">The key that is subject of the event.</param>
      <param name="modifier">The state of the modifiers that must be set.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.KeyEventRecognizer.IsRecognized(System.Object,System.EventArgs)">
      <summary>
            Callback that decides whether a given pair of event source and event argument
            is considered a match.
            </summary>
      <param name="eventSource">the original source of the event</param>
      <param name="eventArg">the event argument</param>
      <returns>whether the pair is considered a match</returns>
    </member>
    <member name="T:yWorks.Canvas.Input.KeyEvents">
      <summary>
            Utility class that holds implementation singletons for simple
            <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>s that work on <see cref="T:yWorks.Canvas.Input.CompoundKeyEventArgs"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.AltPressed">
      <summary>
            An event recognizer that recognizes when the alt modifier is active.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.ControlPressed">
      <summary>
            An event recognizer that recognizes when the shift modifier is active.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.DeletePressed">
      <summary>
            An event recognizer that recognizes when delete has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.EscapePressed">
      <summary>
            An event recognizer that recognizes when escape has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.EscapeReleased">
      <summary>
            An event recognizer that recognizes when escape has been released.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.EscapeTyped">
      <summary>
            An event recognizer that recognizes when escape has been typed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.KeyPressed">
      <summary>
            An event recognizer that recognizes when any key has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.KeyReleased">
      <summary>
            An event recognizer that recognizes when any key has been released.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.KeyTyped">
      <summary>
            An event recognizer that recognizes when any key has been typed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.KeyEvents.ShiftPressed">
      <summary>
            An event recognizer that recognizes when the shift modifier is active.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MainInputMode">
      <summary>
            A basic input mode implementation that uses multiple minor
            input modes to handle the basic application needs of a main input mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.#ctor(yWorks.Canvas.Model.ICollectionModel{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.ISelectionModel{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Constructs a new input mode using the given collection of items and a selection model.
            </summary>
      <param name="collectionModel">The collection of the items in the control.</param>
      <param name="selectionModel">The selection model for the items.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.ClearSelection">
      <summary>
            Clears the selection on the current <see cref="P:yWorks.Canvas.Input.MainInputMode.SelectionModel"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.ClickInputMode">
      <summary>
            Gets or sets the ClickInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.ClickModePriority">
      <summary>
            Gets or sets the click mode priority.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.CollectionModel">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see> of the <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            that make up the elements in the view this mode is acting upon.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.ContextMenuInputMode">
      <summary>
            Gets or sets the ContextMenuInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.ContextMenuModePriority">
      <summary>
            Gets or sets the context menu mode priority.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateClickInputMode">
      <summary>
            Factory method for the ClickInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.ClickInputMode"></see> property.
            </summary>
      <returns>a new instance of ClickInputMode</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateContextMenuInputMode">
      <summary>
            Factory method for the ContextMenuInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.ContextMenuInputMode"></see> property.
            </summary>
      <returns>a new instance of ContextMenuInputMode</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateHandleInputMode">
      <summary>
            Factory method for the HandleInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.HandleInputMode"></see> property.
            </summary>
      <returns>a new instance of HandleInputMode</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateInputModeController">
      <summary>
            Creates the <see cref="T:yWorks.Canvas.Model.InputModeController`1"></see> that will
            be used to coordinate the selection and the handles, etc.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Model.InputModeController`1"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateKeyboardInputMode">
      <summary>
            Factory method that creates the keyboard input mode instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateMarqueeSelectionInputMode">
      <summary>
            Factory method for the MarqueeSelectionInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.MarqueeSelectionInputMode"></see> property.
            </summary>
      <returns>a new instance of MarqueeSelectionInputMode</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateMouseHoverInputMode">
      <summary>
            Factory method for the <see cref="P:yWorks.Canvas.Input.MainInputMode.MouseHoverInputMode"></see> property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.MouseHoverInputMode"></see> property.
            </summary>
      <returns>a new instance of <see cref="P:yWorks.Canvas.Input.MainInputMode.MouseHoverInputMode"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateMoveInputMode">
      <summary>
            Factory method for the MoveInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode"></see> property.
            </summary>
      <returns>a new instance of MoveInputMode</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateMoveUnselectedInputMode(yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Helper method that can be used to create a <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see>
            instance that can be used to move unselected model items.
            </summary>
      <param name="modifierRecognizer">Use this instance to make this mode work under certain conditions only. <see langword="null"></see>
            for default behavior, one of the <see cref="T:yWorks.Canvas.Input.KeyEvents"></see> constants, e.g. for alternate behavior.</param>
      <returns>A <see cref="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode"></see> instance that uses the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> instances of 
            the items that are hit at the position of the cursor, regardless of their selection state.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.CreateWaitInputMode">
      <summary>
            Factory method for the WaitInputMode property. This method will be called 
            upon first access to the <see cref="P:yWorks.Canvas.Input.MainInputMode.WaitInputMode"></see> property.
            </summary>
      <returns>a new instance of <see cref="P:yWorks.Canvas.Input.MainInputMode.WaitInputMode"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.GetCanvasGroupProvider``1">
      <summary>
            Creates a group provider that yields <see cref="P:yWorks.Canvas.Input.MainInputMode.InputModeCanvasGroup"></see>.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
      <returns>A provider that always yields the value of <see cref="P:yWorks.Canvas.Input.MainInputMode.InputModeCanvasGroup"></see></returns>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.HandleInputMode">
      <summary>
            Gets or sets the HandleInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.HandleModePriority">
      <summary>
            Gets or sets the handle mode priority.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.Initialize">
      <summary>
            Performs one-time initialization of this instance. This method should not
            be invoked by subclasses. This will be done automatically upon first
            <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">installation</see> of this mode.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.InputModeCanvasGroup">
      <summary>
            The canvas group that can be used by input modes to add temporary top-level
            canvas objects to.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.InputModeController">
      <summary>
            Gets or sets the input mode controller helper instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.KeyboardInputMode">
      <summary>
            Gets or sets the keyboard input mode.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.KeyboardModePriority">
      <summary>
            Gets or sets the keyboard mode priority.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.MarqueeSelect``1(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Model.ICollectionModel{``0})">
      <summary>
            Selects the given elements in the editor inside the provided marquee selection rectangle.
            </summary>
      <param name="marqueeRectangle">The rectangle in world coordinates.</param>
      <param name="items">The items to iterate over.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Input.MainInputMode.MarqueeSelect``1(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Model.ICollectionModel{``0})"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.MarqueeSelect``1(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Model.ICollectionModel{``0},System.Predicate{``0})">
      <summary>
            Selects the given elements in the editor inside the provided marquee selection rectangle.
            </summary>
      <param name="marqueeRectangle">The rectangle in world coordinates.</param>
      <param name="items">The items to iterate over.</param>
      <param name="predicate">The predicate that determines whether the provided item should be tested at all.
            May be <see langword="null"></see>.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Input.MainInputMode.MarqueeSelect``1(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Model.ICollectionModel{``0},System.Predicate{``0})"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.MarqueeSelectElements(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Callback that selects the elements in the editor inside the marquee selection rectangle.
            </summary>
      <param name="marqueeRectangle">The rectangle in world coordinates.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MarqueeSelectionInputMode">
      <summary>
            Gets or sets the MarqueeSelectionInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MarqueeSelectionModePriority">
      <summary>
            Gets or sets the marquee selection mode priority.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MouseHoverInputMode">
      <summary>
            Gets or sets the MouseHoverInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MouseHoverModePriority">
      <summary>
            Gets or sets the mouse hover mode priority.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode">
      <summary>
            Gets or sets the MoveInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.MoveModePriority">
      <summary>
            Gets or sets the move mode priority.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnClickInputModeChanged(yWorks.Canvas.Input.ClickInputMode,yWorks.Canvas.Input.ClickInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.ClickInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldClickInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newClickInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)">
      <summary>
            Callback that gets triggered once <see cref="P:yWorks.Canvas.Input.MainInputMode.ClickInputMode"></see>
            triggers the <see cref="E:yWorks.Canvas.Input.ClickInputMode.Clicked"></see>
            event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnCollectionModelChanged(yWorks.Canvas.Model.ICollectionModel{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.ICollectionModel{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Callback that gets triggered once the <see cref="P:yWorks.Canvas.Input.MainInputMode.CollectionModel"></see> changes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnContextMenuInputModeChanged(yWorks.Canvas.Input.ContextMenuInputMode,yWorks.Canvas.Input.ContextMenuInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.ContextMenuInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldContextMenuInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newContextMenuInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnContextMenuInputModePopulateContextMenu(System.Object,yWorks.Canvas.Input.PopulateContextMenuEventArgs)">
      <summary>
            Convenience callback triggered by the <see cref="P:yWorks.Canvas.Input.MainInputMode.ContextMenuInputMode"></see> to populate or modify the
            context menu on an invocation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnHandleInputModeChanged(yWorks.Canvas.Input.HandleInputMode,yWorks.Canvas.Input.HandleInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.HandleInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldHandleInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newHandleInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnInputModeCanvasGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.InputModeCanvasGroup"></see> property changes.
            </summary>
      <param name="oldGroup">
      </param>
      <param name="newGroup">
      </param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnKeyboardInputModeChanged(yWorks.Canvas.Input.KeyboardInputMode,yWorks.Canvas.Input.KeyboardInputMode)">
      <summary>
            Called when the keyboard input mode changed.
            </summary>
      <param name="oldKeyboardInputMode">The old keyboard input mode.</param>
      <param name="newKeyboardInputMode">The new keyboard input mode.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMarqueeSelectionInputModeChanged(yWorks.Canvas.Input.MarqueeSelectionInputMode,yWorks.Canvas.Input.MarqueeSelectionInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.MarqueeSelectionInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldMarqueeSelectionInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newMarqueeSelectionInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMarqueeSelectionInputModeMarqueeSelected(System.Object,System.EventArgs)">
      <summary>
            Callback used by <see cref="P:yWorks.Canvas.Input.MainInputMode.MarqueeSelectionInputMode"></see> if the user
            has finished creating the marquee selection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMouseHoverInputModeChanged(yWorks.Canvas.Input.MouseHoverInputMode,yWorks.Canvas.Input.MouseHoverInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.MouseHoverInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldMouseHoverInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newMouseHoverInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMouseHoverInputModeQueryToolTip(System.Object,yWorks.Canvas.Input.ToolTipQueryEventArgs)">
      <summary>
            Callback method that will be triggered to display a tool tip for the given location.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMoveInputModeChanged(yWorks.Canvas.Input.MoveInputMode,yWorks.Canvas.Input.MoveInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldMoveInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newMoveInputMode">the new value</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnMoveInputModeDragFinished(System.Object,System.EventArgs)">
      <summary>
            Called when <see cref="E:yWorks.Canvas.Input.MoveInputMode.DragFinished"></see> is triggered.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnSelectionModelChanged(yWorks.Canvas.Model.ISelectionModel{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.ISelectionModel{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Callback that gets triggered once the <see cref="P:yWorks.Canvas.Input.MainInputMode.SelectionModel"></see> changes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.OnWaitInputModeChanged(yWorks.Canvas.Input.WaitInputMode,yWorks.Canvas.Input.WaitInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.WaitInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldWaitInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newWaitInputMode">the new value</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.SelectionModel">
      <summary>
            Gets the SelectionModel property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.SetSelected(yWorks.Canvas.Model.IModelItem,System.Boolean)">
      <summary>
            Uses the <see cref="P:yWorks.Canvas.Input.MainInputMode.SelectionModel"></see> to select the given item.
            </summary>
      <param name="item">The item to set the selection state on.</param>
      <param name="selected">The new selection state.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.ShouldBeMarqueeSelectable(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method used by <see cref="M:yWorks.Canvas.Input.MainInputMode.MarqueeSelect``1(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.Model.ICollectionModel{``0})"></see></summary>
      <param name="item">The item to check.</param>
      <returns>Whether to select that item in response to a marquee selection operation.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.ShouldBeMovable(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method that is used for <see cref="P:yWorks.Canvas.Model.InputModeController`1.AllowMovingPredicate"></see>.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to make the object movable.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.ShouldShowHandles(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method that is used for <see cref="P:yWorks.Canvas.Model.InputModeController`1.UseHandlesPredicate"></see>.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to show the handles.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MainInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.Waiting">
      <summary>
            Uses the <see cref="P:yWorks.Canvas.Input.MainInputMode.WaitInputMode"></see> to delegate wait requests to.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.WaitInputMode">
      <summary>
            Gets or sets the WaitInputMode associated with this instance.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.Canvas.Input.MainInputMode.CreateWaitInputMode"></see> will be called.
            Upon change the <see cref="M:yWorks.Canvas.Input.MainInputMode.OnWaitInputModeChanged(yWorks.Canvas.Input.WaitInputMode,yWorks.Canvas.Input.WaitInputMode)"></see> method will be called.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.Canvas.Input.MainInputMode.WaitModePriority">
      <summary>
            Gets or sets the wait mode priority.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MarqueeSelectionInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation that can
            handle marquee selections performed by the user with a mouse.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.#ctor">
      <summary>
            Creates a new instance of the marquee selection mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Begin(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to begin the marquee selection
            when the mouse is dragged.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Cancel">
      <summary>
            Cancels any pending marquee selection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.CanvasGroupProvider">
      <summary>
            Gets or sets the canvas object group provider this mode should render the 
            visual representations of the marquee in.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Drag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to drag the marquee selection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.DraggedRecognizer">
      <summary>
            Gets or sets the "dragged" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.End(yWorks.Support.Transition)">
      <summary>
            Called by the state machine once the selection has been finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.GetSelectionRectangle">
      <summary>
            Returns copy of the state of the current or last marquee selection rectangle.
            </summary>
      <returns>A copy of the state of the marquee box.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into the given canvas.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.LastModifierState">
      <summary>
            Returns the state of the modifier keys at the time of the last event.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.MarqueeSelectionInputMode.MarqueeBrushKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used to store a <see cref="T:System.Windows.Media.Brush"></see> 
            that will be used to fill the marquee box.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.MarqueeCursor">
      <summary>
            Gets or sets the cursor to use during the dragging of the marquee.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.MarqueeSelectionInputMode.MarqueePenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used to store a <see cref="T:System.Windows.Media.Pen"></see> 
            that will be used to draw the marquee box.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.MarqueeSelectionInputMode.MarqueeRectangleStyleKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used to store a <see cref="T:System.Windows.Style"></see> that can 
            be used to style a <see cref="T:System.Windows.Shapes.Rectangle"></see> that will be used to draw the marquee box.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MarqueeSelectionInputMode.MarqueeSelected">
      <summary>
            An event that will be triggered once the marquee selection has been finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.OnMarqueeSelected">
      <summary>
            Called when the marquee selection has been finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Prepare(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to prepare the marquee selection
            when the mouse is pressed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.PressedRecognizer">
      <summary>
            Gets or sets the "pressed" state recognizer.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MarqueeSelectionInputMode.ReleasedRecognizer">
      <summary>
            Gets or sets the "released" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MarqueeSelectionInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">the context</param>
    </member>
    <member name="T:yWorks.Canvas.Input.Mouse2DEventArgs">
      <summary>
            Complex event arguments that is used by the <see cref="T:yWorks.Canvas.CanvasControl"></see> to indicate
            mouse events in world coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.Mouse2DEventArgs.#ctor(yWorks.Canvas.Input.Mouse2DEventTypes,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.MouseButtons,System.Windows.Input.ModifierKeys,yWorks.Canvas.MouseButtons,System.Windows.Input.ModifierKeys)">
      <summary>
            Contructs a new Mouse2DEvent argument.
            </summary>
      <param name="eventType">The type of the event</param>
      <param name="location">the position of the mouse in world coordinates at the time of the event</param>
      <param name="buttonChanged">the mouse buttons that have changed state if the type of event
            is <see cref="F:yWorks.Canvas.Input.Mouse2DEventTypes.Pressed"></see> or <see cref="F:yWorks.Canvas.Input.Mouse2DEventTypes.Released"></see></param>
      <param name="modifierChanged">the modifier Keys that have been changed</param>
      <param name="buttonState">the current state of the MouseButtons</param>
      <param name="modifierState">the current state of the modifier Keys</param>
    </member>
    <member name="M:yWorks.Canvas.Input.Mouse2DEventArgs.#ctor(yWorks.Canvas.Input.Mouse2DEventTypes,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.MouseButtons,System.Windows.Input.ModifierKeys,yWorks.Canvas.MouseButtons,System.Windows.Input.ModifierKeys,System.Int32,System.Int32)">
      <summary>
            Contructs a new Mouse2DEvent argument.
            </summary>
      <param name="eventType">The type of the event</param>
      <param name="location">the position of the mouse in world coordinates at the time of the event</param>
      <param name="buttonChanged">the mouse buttons that have changed state if the type of event
            is <see cref="F:yWorks.Canvas.Input.Mouse2DEventTypes.Pressed"></see> or <see cref="F:yWorks.Canvas.Input.Mouse2DEventTypes.Released"></see></param>
      <param name="modifierChanged">the modifier Keys that have been changed</param>
      <param name="buttonState">the current state of the MouseButtons</param>
      <param name="modifierState">the current state of the modifier Keys</param>
      <param name="clickCount">the number of clicks this event represents, 2 for a double click</param>
      <param name="mouseWheelDelta">the signed number of mouse wheel turn units</param>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.ButtonPressedState">
      <summary>
            The state of the mouse buttons at the time of the event creation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.ChangedButtons">
      <summary>
            Returns the mouse buttons that have changed for this event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.ChangedModifiers">
      <summary>
            Returns the modifier keys that have changed for this event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.ClickCount">
      <summary>
            Returns the number of clicks the current event represents if it 
            is of type <see cref="F:yWorks.Canvas.Input.Mouse2DEventTypes.Clicked"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.EventType">
      <summary>
            Gets the type of this event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.Location">
      <summary>
            Returns the coordinates in the world coordinate space associated with this event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.ModifierState">
      <summary>
            The state of the modifier keys at the time of the event creation.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.Mouse2DEventArgs.ToString">
      <summary>
            Provides a human readable string representation of this event.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.Canvas.Input.Mouse2DEventArgs.WheelDelta">
      <summary>
            Gets the signed number of mouse wheel turn units.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.Mouse2DEventHandler">
      <summary>
            The delegate for handling mouse 2d events.
            </summary>
      <param name="sender">the sender of the event</param>
      <param name="me">the event arguments</param>
    </member>
    <member name="T:yWorks.Canvas.Input.Mouse2DEvents">
      <summary>
            A utility class that offers <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            implementations that deal with <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseDragged">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies mouse drag events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseLeftClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies left mouse button clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseLeftDoubleClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies left mouse button double clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseLeftDragged">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies left mouse button drags.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseLeftPressed">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies left mouse button press events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseLeftReleased">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies left mouse button release events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseMiddleClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies middle mouse button clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseMiddleDoubleClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies middle mouse button double clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseMiddleDragged">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies middle mouse button drags.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseMoved">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies mouse movements that are not drags.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseMovedOrDragged">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies mouse movements.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MousePressed">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies mouse movements.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseReleased">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies mouse movements.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseRightClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies right mouse button clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseRightDoubleClicked">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies right mouse button double clicks.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseRightDragged">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies right mouse button drags.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseRightPressed">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies right mouse button press events.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEvents.MouseRightReleased">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see> that identifies right mouse button release events.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.Mouse2DEventTypes">
      <summary>
            Enumeration of the possible Mouse2DEvent event types.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.None">
      <summary>
            Not a Mouse2DEvent.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Moved">
      <summary>
            The mouse has been moved.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Dragged">
      <summary>
            The mouse has been dragged, i.e. it has been moved while at least one button has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Pressed">
      <summary>
            A button has been pressed.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Released">
      <summary>
            A button has been released. If there was no drag event since the last press event, this 
            will result in a click.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Entered">
      <summary>
            The mouse has entered the control's bounds.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Exited">
      <summary>
            The mouse has exited the control's bounds.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.WheelTurned">
      <summary>
            The mouse whell has been turned.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.Mouse2DEventTypes.Clicked">
      <summary>
            A mouse click has been recognized. This is the case if a press has directly been followed by a release.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MouseHoverInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that detects when the mouse hovers over the
            <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.#ctor">
      <summary>
            Creates a new instance with default values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.#ctor(System.Windows.Controls.ToolTip,System.EventHandler{yWorks.Canvas.Input.ToolTipQueryEventArgs})">
      <summary>
            Creates a new instance using the provided <see cref="P:yWorks.Canvas.Input.MouseHoverInputMode.ToolTip"></see> and query callback.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.CreateHoverInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the <see cref="E:yWorks.Canvas.Input.MouseHoverInputMode.QueryToolTip"></see> event for the upcoming
            text query operation.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.CreateToolTip">
      <summary>
            Factory method that creates the <see cref="P:yWorks.Canvas.Input.MouseHoverInputMode.ToolTip"></see>.
            </summary>
      <returns>A simple ToolTip.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.MouseHoverInputMode.Duration">
      <summary>
            Gets or sets the duration to show the tooltip.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.GetToolTipLocation(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the position in canvas view coordintates to
            display the tooltip at for the given world coordinates.
            </summary>
      <param name="location">The position in world coordinates.</param>
      <returns>The position in view coordinates.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.GetToolTipText(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Callback method that provides a text for the given location or <c>null</c>.
            </summary>
      <param name="location">The location to find a text for.</param>
      <returns>A string or <c>null</c> to indicate that no ToolTip should be shown.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.Hide">
      <summary>
            Immediately hides the tooltip.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.OnDisabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>false</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.OnHide">
      <summary>
            Called when the tooltip should be hidden.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.OnQueryToolTip(yWorks.Canvas.Input.ToolTipQueryEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.Canvas.Input.MouseHoverInputMode.QueryToolTip"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Input.ToolTipQueryEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.OnShow(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Triggered when the mouse hovers over the given coordinates.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MouseHoverInputMode.QueryToolTip">
      <summary>
            Occurs when this mode queries the tooltip for a certain query location.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.Show(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Immediately shows the tooltip at the given location.
            </summary>
      <param name="location">The location in the world coordinate system.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MouseHoverInputMode.Showing">
      <summary>
            Determines whether the tooltip is currently showing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MouseHoverInputMode.ToolTip">
      <summary>
            Gets or sets the <see cref="P:yWorks.Canvas.Input.MouseHoverInputMode.ToolTip"></see> instance to use during display.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MouseHoverInputMode.ToolTipLocationOffset">
      <summary>
            Gets or sets the tool tip location offset in view coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MouseHoverInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MouseHoverInputMode.ValidHoverLocationHitTestable">
      <summary>
            Gets or sets an <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines where
            the mouse may hover and a Tooltip can be <see cref="M:yWorks.Canvas.Input.MouseHoverInputMode.OnShow(yWorks.Canvas.Geometry.Structs.PointD)">shown</see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MoveInputMode">
      <summary>
            Generic <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation that can be used
            to move something in the canvas using the mouse.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.Arm(yWorks.Support.Transition)">
      <summary>
            Callback used by the state machine to arm this mode.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.BeginDrag(yWorks.Support.Transition)">
      <summary>
            Callback used by the state machine to initialize the dragging.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.CancelDrag(yWorks.Support.Transition)">
      <summary>
            Called when the users cancels the dragging of the handle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.CancelRecognizer">
      <summary>
            Gets or sets the "cancel" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.CreatePositionHandlerInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> interface for the upcoming
            drag operation.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.Disarm(yWorks.Support.Transition)">
      <summary>
            Callback used by the state machine to disarm this mode.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MoveInputMode.DragCanceled">
      <summary>
            Event that will be triggered when the drag has been canceled.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MoveInputMode.DragFinished">
      <summary>
            Event that will be triggered once the drag has been finished.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.DraggedRecognizer">
      <summary>
            Gets or sets the "dragged" recognizer.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MoveInputMode.Dragging">
      <summary>
            Event that will be triggered for every drag.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.MoveInputMode.DragStarting">
      <summary>
            Event that will be triggered once the drag has started.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.EndDrag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to end the dragging.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.HitTestable">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that will be used
            by this mode to determine where the user may start dragging.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.HoverRecognizer">
      <summary>
            Gets or sets the "hovering" state recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.InitialLocation">
      <summary>
            Returns the initial x position where the dragging was initiated.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.IsHovering(System.Object,System.EventArgs)">
      <summary>
            Callback for the state machine that determines whether the mouse
            currently hovers over the elements to be moved.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.Movable">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Geometry.IMovable"></see> that will be used during
            dragging to perform the actual movement.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.MoveCursor">
      <summary>
            Gets or sets the cursor to use during the move.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.OnDrag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine during the dragging.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.OnDragCanceled">
      <summary>
            Triggers the <see cref="E:yWorks.Canvas.Input.MoveInputMode.DragCanceled"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.OnDragFinished">
      <summary>
            Callback triggered once the drag has been finalized.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveInputMode.OnDragStarting">
      <summary>
            Triggers the <see cref="E:yWorks.Canvas.Input.MoveInputMode.DragStarting"></see> event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.PositionHandler">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> that will be used
            to handle that actual movement of the elements during the drag.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.PressedRecognizer">
      <summary>
            Gets or sets the "pressed" state recognizer.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveInputMode.ReleasedRecognizer">
      <summary>
            Gets or sets the "released" recognizer.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MoveViewportInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation that can
            be used to grab and drag the viewport of the control it is installed in.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.#ctor">
      <summary>
            Creates a new instance of the move viewport mode
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.Begin(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to begin the dragging
            when the mouse is dragged.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.Drag(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to drag the viewport.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveViewportInputMode.DragCursor">
      <summary>
            The cursor to use during the dragging.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveViewportInputMode.DraggedRecognizer">
      <summary>
            Gets or sets the "dragged" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.End(yWorks.Support.Transition)">
      <summary>
            Called by the state machine once the dragging has been finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MoveViewportInputMode.Prepare(yWorks.Support.Transition)">
      <summary>
            Called by the state machine to prepare the marquee selection
            when the mouse is pressed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveViewportInputMode.PressedRecognizer">
      <summary>
            Gets or sets the "pressed" state recognizer.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.MoveViewportInputMode.ReleasedRecognizer">
      <summary>
            Gets or sets the "released" recognizer.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.MultiplexingInputMode">
      <summary>
            A composite <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation that additionally
            can deal with <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> instances .
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.#ctor">
      <summary>
            Creates an instance with no initial modes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Add(yWorks.Canvas.Input.IInputMode)">
      <summary>
            Adds a mode with default (<c>0</c>) priority.
            </summary>
      <param name="inputMode">The mode to add to this mode.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Add(yWorks.Canvas.Input.IInputMode,System.Int32)">
      <summary>
            Adds an input mode using the given priority to this compound mode.
            </summary>
      <param name="inputMode">The mode to install using the given installation priority.</param>
      <param name="priority">The priorty to use for sorting the modes before installation.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.AddConcurrent(yWorks.Canvas.Input.IConcurrentInputMode)">
      <summary>
            Adds an <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> to work concurrently with other
            concurrent instances.
            </summary>
      <param name="inputMode">
      </param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.AddConcurrent(yWorks.Canvas.Input.IConcurrentInputMode,System.Int32)">
      <summary>
            Adds an input mode as a concurrent mode using the given priority to this compound mode.
            </summary>
      <param name="inputMode">The mode to install using the given installation priority.</param>
      <param name="priority">The priority to use for sorting the modes before installation.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.AdjustCursor">
      <summary>
            Adjusts the cursor of the CanvasControl according to the
            current input mutex owner or the first mode in the list
            that returns a non-null <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.PreferredCursor"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Cancel">
      <summary>
            Cancels all modes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.ChildInputModeContextLookup(System.Type)">
      <summary>
            Callback method that will be used by the <see cref="M:yWorks.Canvas.Input.MultiplexingInputMode.CreateChildInputModeContext">child IInputModeContext</see></summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.CreateChildInputModeContext">
      <summary>
            Callback that creates the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for the child modes
            of this mode.
            </summary>
      <returns>A new instance that delegates to the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext">parent's context.</see></returns>
    </member>
    <member name="P:yWorks.Canvas.Input.MultiplexingInputMode.DefaultCursor">
      <summary>
            Gets or sets the cursor to use whenever no child mode prefers a different cursor.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.GetMutexOwner">
      <summary>
            Finds the <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> that currently
            owns the mutex or <c>null.</c></summary>
      <returns>The <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> that currently
            owns the mutex or <c>null.</c></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.GetSortedModes">
      <summary>
            Returns a list of all modes managed by this instance in sorted order.
            </summary>
      <returns>A list of the modes.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.OnDisabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>false</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.OnEnabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Remove(yWorks.Canvas.Input.IInputMode)">
      <summary>
            Removes the given mode from this compound mode.
            </summary>
      <param name="mode">The mode to remove.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.ReplaceCursor(System.Windows.Input.Cursor)">
      <summary>
            Potentially replaces the reported by the <see cref="P:yWorks.Canvas.Input.ConcurrencyController.CurrentOwner"></see>'s 
            <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.PreferredCursor"></see> property before it is set on the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Canvas"></see>.
            </summary>
      <param name="cursor">The cursor to adjust, can be <see langword="null"></see>.</param>
      <returns>The cursor to set on the control, may be <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Stop">
      <summary>
            Tries to stop all modes.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.MultiplexingInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.Canvas.Input.OverviewInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that can be used
            for an overview <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.OverviewInputMode.#ctor">
      <summary>
            Creates a new instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.OverviewInputMode.AutoInvalidate">
      <summary>
            Determines whether the the canvas this mode is installed in should automatically be
            invalidated if the client canvas gets invalidated.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.OverviewInputMode.AutoMouseWheelZoom">
      <summary>
            Determines whether the mouse wheel can be used to perform zooming in the <see cref="P:yWorks.Canvas.Input.OverviewInputMode.ClientCanvas"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.OverviewInputMode.Cancel">
      <summary>
            Cancels the editing of this mode. This implementation does nothing.
            Classes that need to perform clean-up should override this method
            and invoke <b>base.Cancel</b> as the last statement.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.OverviewInputMode.ClientCanvas">
      <summary>
            Gets or sets the canvas this canvas should use to
            navigate.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.OverviewInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.OverviewInputMode.Stop">
      <summary>
            Tries to stop the editing. This implementation always return true.
            Subclasses that want to prevent a stop or need to do special clean up
            should do this here if <c>base.Stop()</c> returns <c>true</c>.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Input.OverviewInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="F:yWorks.Canvas.Input.OverviewInputMode.ViewportBrushKey">
      <summary>
            A <see cref="T:System.Windows.ComponentResourceKey"></see> that should yield a <see cref="T:System.Windows.Media.Brush"></see> that will be used
            by this mode to fill the viewport rectangle's area.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.OverviewInputMode.ViewportPenKey">
      <summary>
            A <see cref="T:System.Windows.ComponentResourceKey"></see> that should yield a <see cref="T:System.Windows.Media.Pen"></see> that will be used
            by this mode to draw the viewport rectangle's border.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.PointHandle">
      <summary>
            Convenience implementation of the <see cref="T:yWorks.Canvas.Input.IHandle"></see> interface that
            delegates most of the work to instances of <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> and <see cref="T:yWorks.Canvas.Geometry.IPointSetter"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.#ctor(System.Windows.Input.Cursor,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPointSetter,yWorks.Canvas.Input.HandleType)">
      <summary>
            Constructor for subclass implementations.
            </summary>
      <param name="cursor">The cursor to use.</param>
      <param name="getter">The location of the handle.</param>
      <param name="setter">The location modifier of the handle.</param>
      <param name="type">The type of the cursor to create.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation uses the <see cref="T:yWorks.Canvas.Geometry.IPointSetter"></see> to set the original values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.Create(yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Factory method that creates a PointHandle using the given <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>.
            </summary>
      <param name="point">The point to use for the location and moving of the handle.</param>
      <returns>A PointHandle that uses the given point instance to delegate its work to.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.Create(yWorks.Canvas.Geometry.IMutablePoint,System.Windows.Input.Cursor,yWorks.Canvas.Input.HandleType)">
      <summary>
            Factory method that creates a PointHandle using the given <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>.
            </summary>
      <param name="cursor">The cursor to use for the handle</param>
      <param name="handleType">The type of the handle to create.</param>
      <param name="point">The point to use for the location and moving of the handle.</param>
      <returns>A PointHandle that uses the given point instance to delegate its work to.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPointSetter,System.Windows.Input.Cursor,yWorks.Canvas.Input.HandleType)">
      <summary>
            Factory method that creates a PointHandle using the given <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> for
            the location and <see cref="T:yWorks.Canvas.Geometry.IPointSetter"></see> for modifying it.
            </summary>
      <param name="cursor">The cursor to use for the handle</param>
      <param name="handleType">The type of the handle to create.</param>
      <param name="point">The point to use for the location</param>
      <param name="pointSetter">The point setter to use for moving the handle.</param>
      <returns>A PointHandle that uses the given point instances to delegate its work to.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.PointHandle.Cursor">
      <summary>
            Provides the cursor to display when the mouse hovers over or drags this
            handle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation uses the <see cref="T:yWorks.Canvas.Geometry.IPointSetter"></see> to set the new values.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PointHandle.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PointHandle.Point">
      <summary>
            Gets a point implementation that is based on the getter and setter.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PointHandle.Set(System.Double,System.Double)">
      <summary>
            Performs the actual setting of the new values on the IPointSetter
            </summary>
      <param name="newX">
      </param>
      <param name="newY">
      </param>
    </member>
    <member name="P:yWorks.Canvas.Input.PointHandle.Type">
      <summary>
            Returns the type of the handle that can be used by the rendering engine
            to render types differently.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.PopulateContextMenuEventArgs">
      <summary>
            The event arguments that are used during by the <see cref="E:yWorks.Canvas.Input.ContextMenuInputMode.PopulateContextMenu"></see>
            event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.PopulateContextMenuEventArgs.#ctor(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,System.Windows.Controls.ContextMenu)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.PopulateContextMenuEventArgs"></see> class.
            </summary>
      <param name="context">The context.</param>
      <param name="queryLocation">The query location.</param>
      <param name="contextMenu">The context menu.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.PopulateContextMenuEventArgs.Context">
      <summary>
            Gets the context that issued the query.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PopulateContextMenuEventArgs.ContextMenu">
      <summary>
            Gets the context menu to populate.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PopulateContextMenuEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Input.PopulateContextMenuEventArgs"></see> 
            has been handled.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PopulateContextMenuEventArgs.QueryLocation">
      <summary>
            Gets the queried location in world coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.PopulateContextMenuEventArgs.ShowMenu">
      <summary>
            Gets or sets a value indicating whether to actually display the context menu.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1">
      <summary>
            A specialized subclass of <see cref="T:yWorks.Canvas.Input.ToolTipQueryEventArgs"></see> that carries the 
            <see cref="P:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1.Item"></see> for which the tool tip is queried.
            </summary>
      <typeparam name="TModelItem">The type of the <see cref="P:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1.Item">model item</see>.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1.#ctor(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1"></see> class.
            </summary>
      <param name="context">The context to yield the tool tip for.</param>
      <param name="queryLocation">The query location.</param>
      <param name="item">The item for which the tool tip is queried..</param>
    </member>
    <member name="P:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1.Item">
      <summary>
            Gets the item for which the tool tip is queried.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.RectangleHandle">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation that modifies a rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.#ctor(System.Byte,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.IReshapeable)">
      <summary>
            Constructor for subclasses.
            </summary>
      <param name="index">The index of the handle's position. 0 is north-west and 8 is south-east.</param>
      <param name="location">The location of the upper left corner of the rectangle.</param>
      <param name="size">The size of the rectangle.</param>
      <param name="reshapeable">The reshapeable to write back the coordinates.</param>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.All">
      <summary>
            A combined bitset of all possible handle positions.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.Border">
      <summary>
            A combined bitset of all possible handle positions at the border of a rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation calls <see cref="M:yWorks.Canvas.Input.RectangleHandle.Set(System.Double,System.Double)"></see> using the original values.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.Corners">
      <summary>
            A combined bitset of all possible handle positions at the four corners of a rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Creates a handle for the given position that uses and modifies the rectangle instance
            provided.
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="rect">The rectangle that serves as a model for the handle.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.IReshapeable)">
      <summary>
            Creates a handle for the given position that uses and modifies the instances that
            are interpreted as a rectangle.
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="location">The upper left corner of the rectangle.</param>
      <param name="size">The size of the rectangle.</param>
      <param name="reshapeable">The reshapeable to use for writing back changes of the handle.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandle.Cursor">
      <summary>
            Returns an appropriate cursor for the position.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.GetPoint">
      <summary>
            Returns this.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation calls <see cref="M:yWorks.Canvas.Input.RectangleHandle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)"></see> using the delta values.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.Horizontal">
      <summary>
            A combined bitset of the two horizontal handles of a rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandle.Location">
      <summary>
            Returns the center of the handle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Actually moves this handle by modifying the reshapeable.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.None">
      <summary>
            An empty bitset that contains no Positions.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandle.Set(System.Double,System.Double)">
      <summary>
            Maps to <see cref="M:yWorks.Canvas.Input.RectangleHandle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)"></see></summary>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandle.Type">
      <summary>
            Returns an appropriate type for this position.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.RectangleHandle.Vertical">
      <summary>
            A combined bitset of the two vertical handles of a rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandle.X">
      <summary>
            Return the x coordinate of the position for this rectangle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandle.Y">
      <summary>
            Return the y coordinate of the position for this rectangle.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.RectangleHandles">
      <summary>
            A simple convenience implementation of an <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see>
            that returns handles that modify a <see cref="T:yWorks.Canvas.Geometry.IMutableRectangle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandles.#ctor(yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Creates a default instance that provides 8 handles for each corner and side
            for the given rectangle.
            </summary>
      <param name="rectangle">The rectangle to create handles for.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandles.#ctor(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Input.HandlePositions)">
      <summary>
            Creates a default instance that provide handle for each of the positions
            given for the rectangle.
            </summary>
      <param name="rectangle">The rectangle to create handles for.</param>
      <param name="handlePositions">A bitwise combination of all handle positions this instance should provide a handle for.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.RectangleHandles.GetHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns a collection of <see cref="T:yWorks.Canvas.Input.IHandle"></see>s that contains a handle
            for each position in <see cref="P:yWorks.Canvas.Input.RectangleHandles.HandlePositions"></see></summary>
      <returns>A collection of handles that modify the rectangle.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandles.HandlePositions">
      <summary>
            Gets or sets the bitwise combination of all handle positions this 
            instance provides a handle for.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.RectangleHandles.Rectangle">
      <summary>
            Gets the rectangle this instance works on.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ReshapeableHandle">
      <summary>
            A more sophisticated <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementation that modifies a rectangle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.#ctor(System.Byte,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Subclass constructor that creates a handle for the given position using the location instance
            as the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> for the handle. 
            </summary>
      <param name="index">The index of the handle - 0 being top left, 4 being center and 8 being bottom right.</param>
      <param name="location">The <see cref="P:yWorks.Canvas.Input.ReshapeableHandle.Location"></see> to use for the handle.</param>
      <param name="rect">The rectangle.</param>
      <param name="reshapeable">The reshapeable to write the changes to.</param>
      <param name="maximumSize">The maximum size allowed for the rectangle.</param>
      <param name="minimumSize">The minimum size allowed for the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.#ctor(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Subclass constructor that creates a handle for the given position using the location instance
            as the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> for the handle. 
            </summary>
      <param name="position">The position of the handle.</param>
      <param name="location">The <see cref="P:yWorks.Canvas.Input.ReshapeableHandle.Location"></see> to use for the handle.</param>
      <param name="rect">The rectangle.</param>
      <param name="reshapeable">The reshapeable to write the changes to.</param>
      <param name="maximumSize">The maximum size allowed for the rectangle.</param>
      <param name="minimumSize">The minimum size allowed for the rectangle.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates the original values to <see cref="M:yWorks.Canvas.Input.ReshapeableHandle.Set(System.Double,System.Double)"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Creates a handle for the given position that uses and modifies the rectangle instance
            provided.
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="rect">The rectangle that serves as a model for the handle.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable)">
      <summary>
            Creates a handle for the given position using the location instance
            as the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> for the handle. 
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="location">The <see cref="P:yWorks.Canvas.Input.ReshapeableHandle.Location"></see> to use for the handle.</param>
      <param name="rect">The rectangle.</param>
      <param name="reshapeable">The reshapeable to write the changes to.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a handle for the given position using the location instance
            as the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> for the handle. 
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="location">The <see cref="P:yWorks.Canvas.Input.ReshapeableHandle.Location"></see> to use for the handle.</param>
      <param name="rect">The rectangle.</param>
      <param name="reshapeable">The reshapeable to write the changes to.</param>
      <param name="maximumSize">The maximum size allowed for the rectangle.</param>
      <param name="minimumSize">The minimum size allowed for the rectangle.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.Create(yWorks.Canvas.Input.HandlePositions,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable)">
      <summary>
            Creates a handle for the given position that uses and modifies the instances using
            the reshapeable interface.
            </summary>
      <param name="position">The position to use for the handle.</param>
      <param name="rect">The rectangle.</param>
      <param name="reshapeable">The reshapeable to write the changes to.</param>
      <returns>A new instance that models a handle at the given position of the rectangle.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.Cursor">
      <summary>
            Gets or sets the cursor to display when the mouse hovers over or drags this
            handle.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates to <see cref="M:yWorks.Canvas.Input.ReshapeableHandle.Set(System.Double,System.Double)"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandle.index">
      <summary>
            The position of the handle. 0 for north-west up to 8 for south-east.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandle.location">
      <summary>
            The reference for the location of the handle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.Location">
      <summary>
            Returns a view of the center of the handle.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.MaximumSize">
      <summary>
            Gets or sets the maximum size allowed for the reshapeable.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.MinimumEnclosedArea">
      <summary>
            Gets or sets the minimum enclosed area that needs to be encompassed by this reshapeable.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.MinimumSize">
      <summary>
            Gets or sets the minimum size allowed for the reshapeable.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates the work to the reshapeable.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandle.rect">
      <summary>
            The rectangle instance to modify.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandle.reshapeable">
      <summary>
            The reshapeable instance to write the changes to.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandle.Set(System.Double,System.Double)">
      <summary>
            Delegates to <see cref="M:yWorks.Canvas.Input.ReshapeableHandle.MoveBy(yWorks.Canvas.Geometry.Structs.PointD)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.Type">
      <summary>
            Gets or sets the type of the handle that can be used by the rendering engine
            to render types differently.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.X">
      <summary>
            Gets or sets the x coordinate.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandle.Y">
      <summary>
            Gets or sets the y coordinate.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ReshapeableHandles">
      <summary>
            A simple convenience implementation of an <see cref="T:yWorks.Canvas.Input.IReshapeHandleProvider"></see>
            that returns handles that modify a <see cref="T:yWorks.Canvas.Geometry.IMutableRectangle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandles.#ctor(yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Creates a default instance that provides 8 handles for each corner and side
            for the given rectangle.
            </summary>
      <param name="rectangle">The rectangle to provide handles for.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandles.#ctor(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Input.HandlePositions)">
      <summary>
            Creates a default instance that provide handle for each of the positions
            given for the rectangle and reshapeable instance.
            </summary>
      <param name="rectangle">The rectangle to create handles for.</param>
      <param name="reshapeable">The reshapeable instance to use for the actual reshaping.</param>
      <param name="handlePositions">A bitwise combination of all handle positions this instance should provide a handle for.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandles.GetAvailableHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns the <see cref="P:yWorks.Canvas.Input.ReshapeableHandles.HandlePositions"></see> property.
            </summary>
      <returns>A bitwise combination of all handle positions this 
            instance provides a handle for if queried in <see cref="M:yWorks.Canvas.Input.ReshapeableHandles.GetHandle(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.HandlePositions)"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.ReshapeableHandles.GetHandle(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.HandlePositions)">
      <summary>
            Provides a <see cref="T:yWorks.Canvas.Input.IHandle"></see> that uses the rectangle and reshapeable instance
            bound to this instance to perform the actual reshaping.
            </summary>
      <param name="inputModeContext">The context for which the handles are queried.</param>
      <param name="position">The position to provide an instance for.</param>
      <returns>A handle implementation.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandles.HandlePositions">
      <summary>
            Gets or sets the bitwise combination of all handle positions this 
            instance provides a handle for.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandles.MaximumSize">
      <summary>
            Gets or sets the maximum size allowed for the reshapeable.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandles.MinimumEnclosedArea">
      <summary>
            Gets or sets the minimum rectangular area that needs to be contained in the reshapeable.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ReshapeableHandles.MinimumSize">
      <summary>
            Gets or sets the minimum size allowed for the reshapeable.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandles.rectangle">
      <summary>
            The rectangle to read the current state from.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.ReshapeableHandles.reshapeable">
      <summary>
            The reshapeable to use for reshapeing.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.SimpleGridConstraintProvider`1">
      <summary>
            A simple integer based implementation of <see cref="T:yWorks.Canvas.Input.IGridConstraintProvider`1"></see>
            that always applies the same grid.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleGridConstraintProvider`1.#ctor(System.Int32)">
      <summary>
            Creates a new instance using the same width for vertical and horizontal grid spacing.
            </summary>
      <param name="gridWidth">The spacing between the grid points.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.SimpleGridConstraintProvider`1.GridOrigin">
      <summary>
            Gets the canonic origin of the grid.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.SimpleGridConstraintProvider`1.HorizontalGridWidth">
      <summary>
            Gets the canonic grid width in horizontal direction.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleGridConstraintProvider`1.SnapToGrid(yWorks.Canvas.Input.IInputModeContext,`0,yWorks.Canvas.Geometry.IMutablePoint,yWorks.Canvas.Input.SnapPolicy,yWorks.Canvas.Input.SnapPolicy)">
      <summary>
            Performs the actual snapping to grid coordinates.
            </summary>
      <param name="context">The context in which the snapping should occur.</param>
      <param name="item">The item of which the coordinates should be snapped.</param>
      <param name="point">The coordinates to snap.</param>
      <param name="xSnapPolicy">The policy</param>
      <param name="ySnapPolicy">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.Canvas.Input.SimpleGridConstraintProvider`1.VerticalGridWidth">
      <summary>
            Gets the canonic grid width in vertical direction.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.SimpleInputModeContext">
      <summary>
            Simple default implementation of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Main constructor that initializes the state of this instance.
            </summary>
      <param name="canvasControl">The control to use, may not be <see langword="null"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Input.IInputMode)">
      <summary>
            Main constructor that initializes the state of this instance.
            </summary>
      <param name="canvasControl">The control to use, may not be <see langword="null"></see>.</param>
      <param name="mode">The mode to set as the parent. This may be <see langword="null"></see> for the canvas' context.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Input.IInputMode,yWorks.Support.ILookup)">
      <summary>
            Main constructor that initializes the state of this instance.
            </summary>
      <param name="canvasControl">The control to use, may not be <see langword="null"></see>.</param>
      <param name="mode">The mode to set as the parent. This may be <see langword="null"></see> for the canvas' context.</param>
      <param name="lookup">The lookup to use.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.SimpleInputModeContext.CanvasControl">
      <summary>
            Yields the <see cref="P:yWorks.Canvas.Input.IInputModeContext.CanvasControl"></see> on which the mode currently acts.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Create(yWorks.Canvas.Input.AbstractInputMode)">
      <summary>
            Factory method that creates a context that uses the provided parent mode
            to retrieve the various values from.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Create(yWorks.Canvas.Input.AbstractInputMode,yWorks.Support.ILookup)">
      <summary>
            Factory method that creates a context that uses the provided parent mode
            and lookup decoration.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Create(yWorks.Canvas.Input.AbstractInputMode,yWorks.Support.LookupCallback)">
      <summary>
            Factory method that creates a context that uses the provided parent mode
            and lookup decoration.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Create(yWorks.Canvas.Input.IInputMode,yWorks.Canvas.Input.IInputModeContext,yWorks.Support.ILookup)">
      <summary>
            Factory method that creates a context that uses the provided parent mode, parent context,
            and lookup decoration.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Create(yWorks.Canvas.Input.IInputMode,yWorks.Canvas.Input.IInputModeContext,yWorks.Support.LookupCallback)">
      <summary>
            Factory method that creates a context that uses the provided parent mode, parent context,
            and lookup decoration.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.SimpleInputModeContext.Empty">
      <summary>
            An empty context where both the inputmode and the canvas is null.
            The lookup always yields null, also.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.SimpleInputModeContext.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.Canvas.Input.SimpleInputModeContext.ParentInputMode">
      <summary>
            Yields the <see cref="T:yWorks.Canvas.Input.IInputMode"></see> which issued the context object.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.SizeConstraintProvider`1">
      <summary>
            A simple default implementation of <see cref="T:yWorks.Canvas.Input.ISizeConstraintProvider`1"></see></summary>
      <typeparam name="T">The type of the items whose size should be constrained.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Input.SizeConstraintProvider`1.#ctor(yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Creates a new instance using the provided size instances as the initial values.
            </summary>
      <param name="minimumSize">The <see cref="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MinimumSize"></see>.</param>
      <param name="maximumSize">The <see cref="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MaximumSize"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.SizeConstraintProvider`1.#ctor(yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.ISize,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates a new instance using the provided size instances as the initial values.
            </summary>
      <param name="minimumSize">The <see cref="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MinimumSize"></see>.</param>
      <param name="maximumSize">The <see cref="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MaximumSize"></see>.</param>
      <param name="minimumEnclosedArea">The <see cref="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MinimumEnclosedArea"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMaximumSize(`0)">
      <summary>
            Returns the maximum size allowed for the given item.
            </summary>
      <param name="item">The item to return the maximum size for.</param>
      <returns>The maximum size or <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Infinite"></see> if there is no constraint on the size.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMinimumEnclosedArea(`0)">
      <summary>
            Returns the minimum area that needs to be enclosed by the given item.
            </summary>
      <param name="item">The item to return the area for.</param>
      <returns>The area to enclose or <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Empty"></see> if there is no constraint on the size due to an enclosed area.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMinimumSize(`0)">
      <summary>
            Returns the minimum size allowed for the given item.
            </summary>
      <param name="item">The item to return the minimum size for.</param>
      <returns>The minimum size or <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Empty"></see> if there is no constraint on the size.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MaximumSize">
      <summary>
            Gets or sets the instance to return by <see cref="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMaximumSize(`0)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MinimumEnclosedArea">
      <summary>
            Gets or sets the instance to return by <see cref="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMinimumEnclosedArea(`0)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.SizeConstraintProvider`1.MinimumSize">
      <summary>
            Gets or sets the instance to return by <see cref="M:yWorks.Canvas.Input.SizeConstraintProvider`1.GetMinimumSize(`0)"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.SnapPolicy">
      <summary>
            The policy constants used by <see cref="T:yWorks.Canvas.Input.IGridConstraintProvider`1"></see></summary>
    </member>
    <member name="F:yWorks.Canvas.Input.SnapPolicy.NoSnapping">
      <summary>
            Don't perform snapping.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.SnapPolicy.ToNearest">
      <summary>
            Snap to the nearest grid coordinate.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.SnapPolicy.ToGreater">
      <summary>
            Snap to the nearest grid coordinate whose value is not less than the current coordinate.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.SnapPolicy.ToSmaller">
      <summary>
            Snap to the nearest grid coordinate whose value is not greater than the current coordinate.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.StateMachineInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> implementation that uses a <see cref="P:yWorks.Canvas.Input.StateMachineInputMode.StateMachine"></see>
            to manage its state.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.#ctor">
      <summary>
            Creates a new instance using an empty state machine.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.#ctor(yWorks.Support.StateMachine)">
      <summary>
            Creates a new instance using the given state machine.
            </summary>
      <param name="sm">The machine to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.#ctor(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Creates a new instance using the given state machine and states.
            </summary>
      <param name="stateMachine">The machine to use.</param>
      <param name="startState">The state to use as the start state.</param>
      <param name="canceledState">The state to use as the canceled state.</param>
      <param name="stoppedState">The state to use as the stopped state.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.Cancel">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using the cancel and reset events, releases
            the input mutex and returns.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CanceledState">
      <summary>
            Returns the canceled state of the state machine.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CancelEventRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode has been
            <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Cancel">canceled</see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CanRequestMutexRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.CanRequestMutex(System.Object,System.EventArgs)"></see>
            can request the input mutex.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CanvasEditableDisabledRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this canvas that is associated with this
            input mode has changed its <see cref="P:yWorks.Canvas.CanvasControl.Editable"></see> state to
            <c>false</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CanvasEditableEnabledRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this canvas that is associated with this
            input mode has changed its <see cref="P:yWorks.Canvas.CanvasControl.Editable"></see> state to
            <c>true</c>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.CaptureInputWithMutex">
      <summary>
            Gets or sets a value indicating whether to also capture mouse and keyboard input
            if this mode gets the <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnMutexObtained">mutex</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.CreateCanceledState(yWorks.Support.StateMachine)">
      <summary>
            Factory method that creates a canceled <see cref="T:yWorks.Support.State"></see>
            for the given machine.
            </summary>
      <param name="machine">The machine to create a state for.</param>
      <returns>This implementation returns a new state.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.CreateStartState(yWorks.Support.StateMachine)">
      <summary>
            Factory method that creates a start <see cref="T:yWorks.Support.State"></see>
            for the given machine.
            </summary>
      <param name="machine">The machine to create a state for.</param>
      <returns>This implementation returns <see cref="P:yWorks.Support.StateMachine.StartState"></see></returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.CreateStateMachine">
      <summary>
            Factory method that creates the state machine.
            </summary>
      <returns>A new StateMachine</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.CreateStoppedState(yWorks.Support.StateMachine)">
      <summary>
            Factory method that creates a stopped <see cref="T:yWorks.Support.State"></see>
            for the given machine.
            </summary>
      <param name="machine">The machine to create a state for.</param>
      <returns>This implementation returns a new state.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.DisabledEventRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode has been
            <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled">disabled</see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.EnabledEventRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode has been
            <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into the given canvas.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.InstallListeners">
      <summary>
            Installs all necessary listeners to trigger the <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsCancelEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as a <see cref="M:yWorks.Canvas.Input.IInputMode.Cancel">cancel</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsDisabledEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as a <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.Enabled">mode disabled</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsEnabledEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as an <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.Enabled">mode enabled</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsMutexAcquiredEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as an <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnMutexObtained">mutex acquired</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsMutexLostEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as an <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.OnMutexReleased">mutex released</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.IsStopEvent(System.Object,System.EventArgs)">
      <summary>
            Method that identifies an event as a <see cref="M:yWorks.Canvas.Input.IInputMode.Stop">stop</see> event.
            </summary>
      <returns>Whether the event describes that input mode event.</returns>
    </member>
    <member name="F:yWorks.Canvas.Input.StateMachineInputMode.lastEventArgs">
      <summary>
            The last event arguments that have been delivered to this instance.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.StateMachineInputMode.lastMouse2DEventArgs">
      <summary>
            The last <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> that have been delivered to this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.LastMouse2DEventArgs">
      <summary>
            Provides access to the last <see cref="T:yWorks.Canvas.Input.Mouse2DEventArgs"></see> that have been delivered to this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.MutexAcquiredRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode acquired the input mutex.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.MutexLostRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode lost
            the mutex.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnCancelStateEntered(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called when the cancel state has been entered.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnDisable">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using a disable event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnEnable">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using an enable event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnMachineReset">
      <summary>
            Resets the preferred cursor to <c>null</c>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnMutexObtained">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using a mutex obtained event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnMutexReleased">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the state machine using a mutex lost event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnRun(System.Object,System.EventArgs)">
      <summary>
            Callback method that will be called after the state machine has
            been run using the arguments provided.
            </summary>
      <param name="source">The source of the event that triggered the <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)"></see></param>
      <param name="e">The event that triggered the <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)"></see></param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.OnStopStateEntered(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called when the cancel state has been entered.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.ReleaseKeyboardTransition">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that request that <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllKeyboardInput">keyboard input 
            capturing</see> is disabled if it has previously been enabled by this instance.
            </summary>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.ReleaseMouseTransition">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that request that <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllMouseInput">mouse input
            capturing</see> is disabled if it has previously been enabled by this instance.
            </summary>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.ReleaseMutexTransition">
      <summary>
            Factory method that creates a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            for the state machine that <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">releases the input mutex</see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.RequestKeyboardTransition">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that request that <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllKeyboardInput">all keyboard input is
            captured</see> by the canvas.
            </summary>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.RequestMouseTransition">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that request that <see cref="P:yWorks.Canvas.CanvasControl.CaptureAllMouseInput">all mouse input is
            captured</see> by the canvas.
            </summary>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.RequestMutexTransition">
      <summary>
            Factory method that creates a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            for the state machine that <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.RequestMutex">requests the input mutex</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.ResetMachine">
      <summary>
            Runs the machine using a special reset event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.ResetPreferredCursorTransition">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that resets the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursor"></see>.
            </summary>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">
      <summary>
            Tries to run the virtual machine using the pair of source and event argument
            to determine which transition to take.
            </summary>
      <param name="source">The source of the event to use to decide whether to make the transition.</param>
      <param name="e">The event to use to decide whether to make the transition.</param>
    </member>
    <member name="E:yWorks.Canvas.Input.StateMachineInputMode.RunHandler">
      <summary>
            An event that will be triggered if this state machine <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.SetPreferredCursorTransition(System.Windows.Input.Cursor)">
      <summary>
            Factory method that can be used to obtain a <see cref="T:yWorks.Support.TransitionDoneHandler"></see>
            implementation that sets the given <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.PreferredCursor"></see>.
            </summary>
      <param name="cursor">The cursor to set if the transition is done.</param>
      <returns>An instance that can be added to a <see cref="T:yWorks.Support.Transition"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.StartState">
      <summary>
            Returns the start state of the state machine.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.StateMachine">
      <summary>
            Gets the state machine.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.Stop">
      <summary>
        <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Run(System.Object,System.EventArgs)">Runs</see> the machine using a special stop event.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.StopEventRecognizer">
      <summary>
            Factory method that creates an <see cref="T:yWorks.Canvas.Input.EventRecognizerCallback"></see>
            for the state machine that is triggered if this mode has been
            <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.Stop">stopped</see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.StateMachineInputMode.StoppedState">
      <summary>
            Returns the stopped state of the state machine.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">the context</param>
    </member>
    <member name="M:yWorks.Canvas.Input.StateMachineInputMode.UninstallListeners">
      <summary>
            Removes all listeners from the canvas that have been registered in <see cref="M:yWorks.Canvas.Input.StateMachineInputMode.InstallListeners"></see></summary>
    </member>
    <member name="T:yWorks.Canvas.Input.TextEditorInputMode">
      <summary>
            A simple <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that displays a <see cref="T:System.Windows.Controls.Primitives.TextBoxBase"></see>
            instance in the canvas control to let the user edit a text.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.#ctor">
      <summary>
            Creates a new instance using a default textbox.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.#ctor(System.Windows.Controls.TextBox)">
      <summary>
            Creates a new instance using the given text box instance.
            </summary>
      <param name="tb">The text box to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.AdjustPosition">
      <summary>
            Adjusts the position of the text box in the canvas control.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.AdjustSize">
      <summary>
            Adjusts the size of the position in the canvas control.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.Anchor">
      <summary>
            Gets or sets the anchor of the text box.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.AutoCommitOnFocusLost">
      <summary>
            Gets or sets a property that determines whether the text edited should
            be committed if the focus gets lost or the editing should be canceled.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.AutoFlipTextBox">
      <summary>
            Gets or sets a value indicating whether to automatically flip the orientation of
            the text box if the <see cref="P:yWorks.Canvas.Input.TextEditorInputMode.UpVector"></see> actually points downwards.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.AutoSelectCanvasOnEditorClosed">
      <summary>
            Gets or sets a property that determines whether this mode should
            try to <see cref="M:System.Windows.UIElement.Focus"></see>
            the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Canvas"></see> once the editor
            is closed via a keyboard gesture.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.AutoStartEditing">
      <summary>
            Determines whether this mode should automatically fire up the editor once it gets installed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.Cancel">
      <summary>
            Cancels editing of the text box.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.Clear">
      <summary>
            Resets the contents of the text box.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.CreateTextBox">
      <summary>
            Factory method that creates a default text box.
            </summary>
      <returns>A textbox implementation.</returns>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.Editing">
      <summary>
            Gets or sets the current editing state of the editor.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.TextEditorInputMode.EditingCanceled">
      <summary>
            Triggered if the editing has not been finished.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.InstallTextBox">
      <summary>
            Installs the text box in the canvas and puts focus into it.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.Location">
      <summary>
            Gets or sets the location of the text box in world coordinates.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.OnBeginEditing">
      <summary>
            Called when editing starts.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.OnCancelEditing">
      <summary>
            Called when editing gets canceled.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.OnStopEditing">
      <summary>
            Called when editing is stopped.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.ShowInViewCoordinates(yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Determines whether the textbox should be displayed in the view coordinate system,
            instead of in the world coordinate system.
            </summary>
      <param name="textBoxSize">The size of the text box to display.</param>
      <returns>Whether to show it in the view coordinate system.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.Stop">
      <summary>
            Stops editing and returns <c>true</c>.
            </summary>
      <returns>
        <c>base.Stop()</c>
      </returns>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.TextBox">
      <summary>
            Gets or sets the text box to use for displaying and editing.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Input.TextEditorInputMode.TextBoxStyleKey">
      <summary>
            The <see cref="T:System.Windows.ResourceKey"></see> that will be used to retrieve the style for the
            <see cref="T:System.Windows.Controls.TextBox"></see> that will be used for
            editing the text.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Input.TextEditorInputMode.TextEdited">
      <summary>
            Triggered once the text has been edited.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Input.TextEditorInputMode.UninstallTextBox">
      <summary>
            Removes the text box.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.TextEditorInputMode.UpVector">
      <summary>
            Gets or sets the point that describes the "up"-vector that will be used to
            determine the orientation of the text box in the world coordinate system.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.ToolTipQueryEventArgs">
      <summary>
            Event argument that can be used to query the text to display when
            the mouse hovers over the given point in world coordinate space.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.ToolTipQueryEventArgs.#ctor(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.ToolTipQueryEventArgs"></see> class.
            </summary>
      <param name="context">The context of the query.</param>
      <param name="queryLocation">The query location.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.ToolTipQueryEventArgs.Context">
      <summary>
            Gets the context of the query.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ToolTipQueryEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Input.ToolTipQueryEventArgs"></see> 
            has been handled.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ToolTipQueryEventArgs.QueryLocation">
      <summary>
            Gets the query location in world coordinates.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.ToolTipQueryEventArgs.ToolTip">
      <summary>
            Gets or sets the tool tip text to use.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Input.WaitInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IConcurrentInputMode"></see> implementation that can be used to block user interaction.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Canvas.Input.WaitInputMode" /> class</summary>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.Cancel">
      <summary>
            Overridden to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">release</see> the mutex if it is currently owned
            by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.EndWaiting">
      <summary>
            Called when waiting is finished.
            This will reset the <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.PreferredCursor"></see> and 
            <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.ReleaseMutex">the mutex is released.</see></summary>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.GetMultiplexingInputMode">
      <summary>
            Tries to get the <see cref="T:yWorks.Canvas.Input.MultiplexingInputMode"></see> instance this mode is used in.
            </summary>
      <returns>The mode or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.StartWaiting">
      <summary>
            This will initiate the waiting process by trying to <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.RequestMutex"></see>request the 
            input mutex.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.Stop">
      <summary>
            Overridden to only return <see langword="true"></see> if this instance does not currently
            <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">have the input mutex</see>.
            </summary>
      <returns>
        <see langword="true">
        </see> iff this instance does not <see cref="M:yWorks.Canvas.Input.AbstractConcurrentInputMode.HasMutex">own the mutex</see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Input.WaitInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="P:yWorks.Canvas.Input.WaitInputMode.WaitCursor">
      <summary>
            Gets or sets the WaitCursor property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Input.WaitInputMode.Waiting">
      <summary>
            Gets or sets the Waiting property.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.IO.IImageExporter">
      <summary>
            This is an interface for classes exporting the contents of a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.IO.IImageExporter.Configuration">
      <summary>
            Gets the configuration used for the export.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.IImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream)">
      <summary>
            Exports part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> instance to the
            given <see cref="T:System.IO.Stream"></see> instance using the <see cref="P:yWorks.Canvas.IO.IImageExporter.Configuration"></see>.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see> to export from</param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see> to export to</param>
    </member>
    <member name="T:yWorks.Canvas.IO.PixelImageExporter">
      <summary>
            This class exports the contents of a <see cref="T:yWorks.Canvas.CanvasControl"></see> to a <see cref="T:System.IO.Stream"></see>
            using a pixel based image format.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.#ctor(yWorks.Canvas.ContextConfigurator)">
      <summary>
            Creates a new instance of <see cref="T:yWorks.Canvas.IO.PixelImageExporter"></see> for the
            given configuration.
            </summary>
      <param name="configuration">the configuration</param>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.#ctor(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Creates a new instance of <see cref="T:yWorks.Canvas.IO.PixelImageExporter"></see> for the
            given configuration.
            </summary>
      <param name="worldBounds">world bounds to export.</param>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.Background">
      <summary>
            Gets or sets the background color for the output image.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.BitmapScalingMode">
      <summary>
            Gets or sets the bitmap scaling mode to use during the export.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.Compression">
      <summary>
            Gets or sets the compression to be used for TIFF images.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.Configuration">
      <summary>
            Gets the used configuration.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.CreateBitmapFrames(System.Windows.Media.Imaging.RenderTargetBitmap)">
      <summary>
            Callback method used by <see cref="M:yWorks.Canvas.IO.PixelImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream,System.Windows.Media.Imaging.BitmapEncoder)"></see>
            to create the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"></see>s that will be passed to the <see cref="T:System.Windows.Media.Imaging.BitmapEncoder"></see>'s <see cref="P:System.Windows.Media.Imaging.BitmapEncoder.Frames">Frames</see>
            property for encoding.
            </summary>
      <param name="bitmap">The render target that contains the rendered image.</param>
      <returns>The frames to encode.</returns>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.CreateRenderTarget(System.Int32,System.Int32)">
      <summary>
            Callback method for <see cref="M:yWorks.Canvas.IO.PixelImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream,System.Windows.Media.Imaging.BitmapEncoder)"></see> that creates
            the render target bitmap.
            </summary>
      <param name="width">The width of the bitmap.</param>
      <param name="height">The height of the bitmap.</param>
      <returns>The bitmap to render on.</returns>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.EdgeMode">
      <summary>
            Gets or sets the edge mode to use during the export.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream)">
      <summary>
            Exports a part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> to the given
            <see cref="T:System.IO.Stream"></see>.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see></param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see></param>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream,System.String)">
      <summary>
            Exports a part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> to the given
            <see cref="T:System.IO.Stream"></see> using the given output format.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see></param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see></param>
      <param name="format">the output format</param>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream,System.Windows.Media.Imaging.BitmapEncoder)">
      <summary>
            Exports a part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> to the given
            <see cref="T:System.IO.Stream"></see> using an image encoder specified by the given
            <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see>.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see></param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see></param>
      <param name="encoder">the <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo"></see></param>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.GetExtensionsForFormat(System.String)">
      <summary>
            Returns a list of file name extensions for a given format.
            </summary>
      <param name="format">the format</param>
      <returns>extensions for the given format</returns>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.GetOutputFormat(System.String)">
      <summary>
            Returns an output format supported by this class for a given file name
            based on its extension.
            </summary>
      <param name="fileName">the file name</param>
      <returns>the supported output format or <c>null</c></returns>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.GetOutputFormats">
      <summary>
            Returns a list of supported output formats.
            </summary>
      <returns>the supported output formats</returns>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.IsValidOutputFormat(System.String)">
      <summary>
            Returns whether the given format is valid for this class.
            </summary>
      <param name="formatString">the format</param>
      <returns>
        <c>true</c> if and only if the format is valid</returns>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.OutputFormat">
      <summary>
            Gets or sets the output format to use.
            </summary>
      <exception cref="T:System.FormatException">If the format is not supported.</exception>
    </member>
    <member name="P:yWorks.Canvas.IO.PixelImageExporter.Quality">
      <summary>
            Gets or set the quality of the output.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.RenderBackground(yWorks.Canvas.ContextConfigurator,System.Windows.Media.DrawingContext,System.Double,System.Double)">
      <summary>
            Callback method that can be used to render the background.
            </summary>
      <param name="configuration">The current configuration.</param>
      <param name="context">The context to render into.</param>
      <param name="width">The width of the rectangle to render into.</param>
      <param name="height">The height of the rectangle to render into.</param>
    </member>
    <member name="M:yWorks.Canvas.IO.PixelImageExporter.RenderForeground(yWorks.Canvas.ContextConfigurator,System.Windows.Media.DrawingContext,System.Double,System.Double)">
      <summary>
            Callback method that can be used to render in front of the actual contents.
            </summary>
      <param name="configuration">The current configuration.</param>
      <param name="context">The context to render into.</param>
      <param name="width">The width of the rectangle to render into.</param>
      <param name="height">The height of the rectangle to render into.</param>
    </member>
    <member name="T:yWorks.Canvas.IO.XpsExporter">
      <summary>
            This class exports the contents of a <see cref="T:yWorks.Canvas.CanvasControl"></see> to a <see cref="T:System.IO.Stream"></see>
            using the vector based XPS format.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.XpsExporter.#ctor(yWorks.Canvas.ContextConfigurator)">
      <summary>
            Returns a new instance of <see cref="T:yWorks.Canvas.IO.XpsExporter"></see> for the
            given configuration.
            </summary>
      <param name="configuration">the configuration</param>
    </member>
    <member name="P:yWorks.Canvas.IO.XpsExporter.BackColor">
      <summary>
            Gets or sets the background color for the output image.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.IO.XpsExporter.Configuration">
      <summary>
            Gets the used configuration.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.IO.XpsExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream)">
      <summary>
            Exports a part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> to the given
            <see cref="T:System.IO.Stream"></see>.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see></param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see></param>
    </member>
    <member name="M:yWorks.Canvas.IO.XpsExporter.Export(yWorks.Canvas.CanvasControl,System.IO.Stream,System.Windows.Xps.Packaging.XpsDocument)">
      <summary>
            Exports a part of the given <see cref="T:yWorks.Canvas.CanvasControl"></see> to the given
            <see cref="T:System.IO.Stream"></see> using the given <see cref="T:System.Windows.Xps.Packaging.XpsDocument"></see>.
            </summary>
      <param name="canvas">the <see cref="T:yWorks.Canvas.CanvasControl"></see></param>
      <param name="stream">the <see cref="T:System.IO.Stream"></see></param>
      <param name="document">the <see cref="T:System.Windows.Xps.Packaging.XpsDocument"></see></param>
    </member>
    <member name="M:yWorks.Canvas.IO.XpsExporter.RenderBackground(yWorks.Canvas.ContextConfigurator,System.Windows.Media.DrawingContext,System.Double,System.Double)">
      <summary>
            Callback method that can be used to render the background.
            </summary>
      <param name="configuration">The current configuration.</param>
      <param name="context">The context to render into.</param>
      <param name="width">The width of the rectangle to render into.</param>
      <param name="height">The height of the rectangle to render into.</param>
    </member>
    <member name="M:yWorks.Canvas.IO.XpsExporter.RenderForeground(yWorks.Canvas.ContextConfigurator,System.Windows.Media.DrawingContext,System.Double,System.Double)">
      <summary>
            Callback method that can be used to render in front of the actual contents.
            </summary>
      <param name="configuration">The current configuration.</param>
      <param name="context">The context to render into.</param>
      <param name="width">The width of the rectangle to render into.</param>
      <param name="height">The height of the rectangle to render into.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.BridgeManager">
      <summary>
            Helper managing class that can be used in conjunction with <see cref="P:yWorks.Canvas.Model.BridgeManager.CanvasControl"></see>
            instances to manage the calculation of bridges for paths over obstacles.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Model.BridgeManager"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.AddBridges(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Model.IAddBridgesCallback)">
      <summary>
            Core method that will add bridges to a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see>
            using the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see> callback to determine the type of the bridges.
            </summary>
      <param name="context">The context to use.</param>
      <param name="path">The path to calculate the bridged variant for.</param>
      <param name="callback">The callback or <see langword="null"></see> that determines the appearance of the bridges.</param>
      <returns>The path that might have been augmented by the bridges.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.AddObstacleProvider(yWorks.Canvas.Model.IObstacleProvider)">
      <summary>
            Adds another pair of an <see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see> implementation
            and an item that will later be passed to the <see cref="M:yWorks.Canvas.Model.IObstacleProvider.GetObstacles(yWorks.Canvas.Drawing.IRenderContext)"></see>
            method to determine the initial obstacles for this instance.
            </summary>
      <param name="provider">The provider instance to use for later queries.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.CanvasControl">
      <summary>
            Gets or sets the <see cref="P:yWorks.Canvas.Model.BridgeManager.CanvasControl"></see> that should be managed
            by this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.ClipMargin">
      <summary>
            Gets or sets the margin by which the <see cref="P:yWorks.Canvas.Drawing.IRenderContext.Clip"></see>
            should be enlarged to accommodate for clipped away lines being taken into
            account for bridge calculation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.ConsiderCurves">
      <summary>
            Gets or sets a value that determines whether curves 
            (<see cref="M:yWorks.Canvas.Drawing.GeneralPath.CubicTo(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">cubic</see>
            and <see cref="M:yWorks.Canvas.Drawing.GeneralPath.QuadTo(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">quadratic</see>) should
            be considered as obstacles.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.CrossingDetermination">
      <summary>
            Gets or sets the <see cref="P:yWorks.Canvas.Model.BridgeManager.CrossingDetermination"></see> mode
            that is used by this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.DefaultBridgeHeight">
      <summary>
            Gets or sets the default height of a bridge that will
            be used by the default implementation of the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see>
            that is initially assigned to the <see cref="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.DefaultBridgeOrientationStyle">
      <summary>
            Gets or sets the default <see cref="T:yWorks.Canvas.Model.BridgeOrientationStyle"></see> for bridges that will
            be used by the default implementation of the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see>
            that is initially assigned to the <see cref="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.DefaultBridgeWidth">
      <summary>
            Gets or sets the default width of a bridge that will
            be used by the default implementation of the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see>
            that is initially assigned to the <see cref="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback">
      <summary>
            Gets or sets the default implementation of the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see>
            that will be used if <see cref="M:yWorks.Canvas.Model.BridgeManager.AddBridges(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Model.IAddBridgesCallback)"></see>
            is invoked with a <see langword="null"></see> callback argument.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.DefaultCrossingStyle">
      <summary>
            Gets or sets the default <see cref="T:yWorks.Canvas.Model.CrossingStyle"></see> that will
            be used by the default implementation of the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see>
            that is initially assigned to the <see cref="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.Dispose">
      <summary>
            Disposes of this instance by resetting the <see cref="P:yWorks.Canvas.Model.BridgeManager.CanvasControl"></see> property
            to <see langword="null"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.GetObstacleHash(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Gets a hash code that describes the current state of the obstacles.
            </summary>
      <param name="context">The context to inspect.</param>
      <returns>A hash of the state of the obstacles.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.InsertDefaultCustomBridge(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Implementation that will be called by the default value of the <see cref="P:yWorks.Canvas.Model.BridgeManager.DefaultCallback"></see>
            to satisfy requests to <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.InsertCustomBridge(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)"></see>.
            </summary>
      <param name="context">The context for the call.</param>
      <param name="path">The path to append the next segment to.</param>
      <param name="startPoint">The coordinates of the starting point of the bridge.</param>
      <param name="endPoint">The coordinates of the ending point of the bridge.</param>
      <param name="gapLength">The distance between the starting point and the end point.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.Install(yWorks.Canvas.CanvasControl)">
      <summary>
            Installs this manager for the specified canvas control.
            </summary>
      <param name="canvas">The canvas control.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RegisterObstacle(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath)">
      <summary>
            Convenience method that can be called to dynamically register an obstacle
            path with the context during the rendering.
            </summary>
      <param name="context">The context to register the obstacles with.</param>
      <param name="path">The path that describes the obstacles.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RegisterObstacleCubicCurve(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Convenience method that can be called to dynamically register a single obstacle
            cubic curve with the context during the rendering.
            </summary>
      <param name="context">The context to register the obstacles with.</param>
      <param name="p1">The coordinates of the starting point of the line.</param>
      <param name="cp1">The coordinates of the first control point of the curve.</param>
      <param name="cp2">The coordinates of the second control point of the curve.</param>
      <param name="p2">The coordinates of the ending point of the line.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RegisterObstacleLine(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Convenience method that can be called to dynamically register a single obstacle
            line with the context during the rendering.
            </summary>
      <param name="context">The context to register the obstacles with.</param>
      <param name="p1">The coordinates of the first point of the line.</param>
      <param name="p2">The coordinates of the second point of the line.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RegisterObstacleQuadCurve(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Convenience method that can be called to dynamically register a single obstacle
            quadratic curve with the context during the rendering.
            </summary>
      <param name="context">The context to register the obstacles with.</param>
      <param name="p1">The coordinates of the starting point of the line.</param>
      <param name="cp">The coordinates of the control point of the curve.</param>
      <param name="p2">The coordinates of the ending point of the line.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RegisterObstacles(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Called to initialize the context with the obstacles.
            </summary>
      <param name="context">The context that will be used to store the obstacles with.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.RemoveObstacleProvider(yWorks.Canvas.Model.IObstacleProvider)">
      <summary>
            Removes a previously <see cref="M:yWorks.Canvas.Model.BridgeManager.AddObstacleProvider(yWorks.Canvas.Model.IObstacleProvider)">added</see><see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see> from the list of registered providers.
            </summary>
      <param name="provider">The provider instance to remove from this instance.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.BridgeManager.Uninstall(yWorks.Canvas.CanvasControl)">
      <summary>
            Reverts the <see cref="M:yWorks.Canvas.Model.BridgeManager.Install(yWorks.Canvas.CanvasControl)"></see> method.
            </summary>
      <param name="canvas">The canvas control.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.BridgeManager.ZoomThreshold">
      <summary>
            Gets or sets a threshold value that determines below which zoom level,
            there should be no more bridge calculation.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.BridgeOrientationStyle">
      <summary>
            Enumeration for use in conjunction with <see cref="T:yWorks.Canvas.Model.BridgeManager"></see>
            and <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.GetOrientationStyle(yWorks.Canvas.Drawing.IRenderContext)"></see></summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.FlowRight">
      <summary>
            Adds a bridge to the right of the flow of the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.FlowLeft">
      <summary>
            Adds a bridge to the left of the flow of the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Positive">
      <summary>
            Adds a bridge in the direction of the positive axes.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Negative">
      <summary>
            Adds a bridge in the direction of the negative axes.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Left">
      <summary>
            Adds bridges that point to the right.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Right">
      <summary>
            Adds bridges that point to the left.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Up">
      <summary>
            Adds bridges that point upwards.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.BridgeOrientationStyle.Down">
      <summary>
            Adds bridges that point downwards.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.CanvasGroupProviders">
      <summary>
            Static utility class that provides simple factory methods for <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see>
            convenience implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.CanvasGroupProviders.CreateBackgroundGroupProvider``1">
      <summary>
            Creates and returns an instance that will always return the bottom-most canvas group
            for the canvas it will be queried.
            </summary>
      <typeparam name="T">The type of the item used in the query.</typeparam>
      <returns>A provider that returns the group that is closest to the back.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CanvasGroupProviders.CreateConstant``1(yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Creates and returns an instance that always returns the provided group.
            </summary>
      <param name="group">The group instance to return.</param>
      <typeparam name="T">The type of installer to create.</typeparam>
      <returns>A group provider that always returns the group instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CanvasGroupProviders.CreateRootProvider``1">
      <summary>
            Creates and returns an instance that will always return the root canvas group
            for the canvas it will be queried.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Model.CanvasGroupProviders.CreateRootProvider``1"]</p>
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CanvasGroupProviders.CreateTopGroupProvider``1">
      <summary>
            Creates and returns an instance that will always return the topmost canvas group
            for the canvas it will be queried.
            </summary>
      <typeparam name="T">The type of the item used in the query.</typeparam>
      <returns>A provider that returns the top most group.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.CollectionModelManager`1">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see> class
            that automatically installs, updates and removes visual representations
            of items in a <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see>.
            </summary>
      <typeparam name="T">The type of items in the collection model.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates an instance for the given canvas.
            </summary>
      <param name="canvas">The canvas to manage.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Model.ICollectionModel{`0})">
      <summary>
            Creates a new instance for the given canvas and collection using 
            a simple <see cref="T:yWorks.Canvas.Model.DictionaryMapper`2"></see> to
            associate internal state for each item in the collection.
            </summary>
      <param name="canvas">The canvas to manage.</param>
      <param name="model">The model to manage.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Model.ICollectionModel{`0},yWorks.Canvas.Model.IMapper{`0,System.Object})">
      <summary>
            Creates a new instance for the given canvas using the mapper to efficiently
            associate internal state for each item in the model.
            </summary>
      <param name="canvas">The canvas to manage.</param>
      <param name="mapper">The mapper to use for mapping internal state.</param>
      <param name="model">The model to manage.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Model.IMapper{`0,System.Object})">
      <summary>
            Creates a new instance for the given canvas using the mapper to efficiently
            associate internal state for each item in the collection.
            </summary>
      <param name="canvas">The canvas to manage.</param>
      <param name="mapper">The mapper to use for mapping internal state.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.CollectionModelManager`1.CollectionModel">
      <summary>
            Gets or sets the model of the items to display in the canvas.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.CollectionModelManager`1.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Model.SelectionPaintManager`1"></see> is enabled.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.GetCanvasObject(`0)">
      <summary>
            Retrieves the main canvas object that has been registered for the given item
            or <c>null</c>.
            </summary>
      <param name="item">The item to retrieve "the" canvas object for.</param>
      <returns>A canvas object instance or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.GetDescriptor(`0)">
      <summary>
            Obtains the descriptor associated with the given item using the
            internal mapper.
            </summary>
      <param name="item">The item to retrieve the descriptor handle for.</param>
      <returns>The descriptor or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.GetItem(yWorks.Canvas.ICanvasObject)">
      <summary>
            Tries to find the item managed by this instance that is associated with
            the given canvas object.
            </summary>
      <param name="forObject">The canvas object to query the corresponding model item for.</param>
      <returns>The item or <c>null</c> if no such item could be found.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.Invalidate(`0)">
      <summary>
            This method can be called to <see cref="M:yWorks.Canvas.ICanvasObject.Invalidate">invalidate</see>
            the <see cref="T:yWorks.Canvas.ICanvasObject"></see>s that make up the visual representation of the given item.
            </summary>
      <param name="item">The item to invalidate the visual representation of.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.InvalidateDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})">
      <summary>
            Callback used by <see cref="M:yWorks.Canvas.Model.CollectionModelManager`1.Invalidate(`0)"></see> to actually perform the <see cref="M:yWorks.Canvas.ICanvasObject.Invalidate"></see>
            calls for the given descriptor.
            </summary>
      <param name="descriptor">The descriptor to invalide the canvas objects for.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.OnDisabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.CollectionModelManager`1.Enabled">disabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.OnEnabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.CollectionModelManager`1.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.CollectionModelManager`1.Update(`0)">
      <summary>
            This method may be called to update the visual representation of the given
            item.
            </summary>
      <param name="item">The item to update.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.CrossingDetermination">
      <summary>
            Enumeration used by <see cref="T:yWorks.Canvas.Model.BridgeManager"></see> that
            determines how crossings between obstacles and paths are determined.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingDetermination.HorizontalBridgesVertical">
      <summary>
            Makes horizontal segments bridge over vertical obstacles.
            Horizontal segments do not cross each other, as well as vertical ones will not cross each other.
            Horizontal segment are segments with a slope between 1 and -1. All others are vertical segments.
            For non-parallel intersecting pairs of segments there does not need to be a crossing unless
            only one of them is vertical.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingDetermination.VerticalBridgesHorizontal">
      <summary>
            Makes vertical segments bridge over vertical obstacles.
            Horizontal segments do not cross each other, as well as vertical ones will not cross each other.
            Horizontal segment are segments with a slope between 1 and -1. All others are vertical segments.
            For non-parallel intersecting pairs of segments there does not need to be a crossing unless
            only one of them is horizontal.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingDetermination.MoreHorizontalBridgesLessHorizontal">
      <summary>
            Makes more horizontal edges bridge over edges which are less horizontal.
            The smaller the absolute slope of an edge, the more horizontal it is.
            For each non-parallel intersecting pair of segments, there will be a crossing.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingDetermination.MoreVerticalBridgesLessVertical">
      <summary>
            Makes more vertical edges bridge over edges which are less vertical.
            The larger the absolute slope of an edge, the more vertical it is.
            For each non-parallel intersecting pair of segments, there will be a crossing.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.CrossingStyle">
      <summary>
            Enumeration for use in conjunction with <see cref="T:yWorks.Canvas.Model.BridgeManager"></see>
            and <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.GetCrossingStyle(yWorks.Canvas.Drawing.IRenderContext)"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.Gap">
      <summary>
            The style that indicates that there should be a gap left in the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.Rectangle">
      <summary>
            The style that makes the crossing look like the upper half of a rectangle being inserted into the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.RectangleScaled">
      <summary>
            The style that makes the crossing look like the upper half of a rectangle being inserted into the path, where
            the height has been scaled to keep the ascpet ratio for greater widths.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.TwoSides">
      <summary>
            The style that for each crossing inserts two sides of a triangle into the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.TwoSidesScaled">
      <summary>
            The style that for each crossing inserts two sides of a triangle into the path,
            where the height has been scaled to keep the ascpet ratio for greater widths.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.Arc">
      <summary>
            The style that for each crossing inserts two quarter circle arcs into the path, that are connected
            by a straight line.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.ArcScaled">
      <summary>
            The style that for each crossing inserts a half circle into the path.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.CrossingStyle.Custom">
      <summary>
            The style that will use the <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.InsertCustomBridge(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)"></see>
            method to insert the bridge.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.DefaultCanvasGroupProvider">
      <summary>
            Static utility class that provides simple factory methods for <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see>
            convenience implementations.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCanvasGroupProvider.CreateConstant``1(yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Creates and returns an instance that always returns the provided group.
            </summary>
      <param name="group">The group instance to return.</param>
      <typeparam name="T">The type of installer to create.</typeparam>
      <returns>A group provider that always returns the group instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCanvasGroupProvider.CreateRootProvider``1">
      <summary>
            Creates and returns an instance that will always return the root canvas group
            for the canvas it will be queried.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Canvas.Model.DefaultCanvasGroupProvider.CreateRootProvider``1"]</p>
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.Canvas.Model.DefaultCollectionModel`1">
      <summary>
            A simple default implementation of an <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see>
            that is backed by an ordinary <see cref="T:System.Collections.Generic.ICollection`1"></see></summary>
      <typeparam name="T">The type of the elements contained in this collection.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.#ctor">
      <summary>
            Creates a new instance using a <see cref="T:System.Collections.Generic.List`1"></see>
            as the backing store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.#ctor(System.Collections.Generic.ICollection{`0})">
      <summary>
            Creates a new instance using a provided collection
            as the backing store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.Add(`0)">
      <summary>
            Adds the item the the collection and triggers the <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemAdded"></see>
            event.
            </summary>
      <param name="item">The item to add to the collection.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.Clear">
      <summary>
            Clears this collection, triggering an <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemRemoved"></see>
            event for each element removed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.Contains(`0)">
      <summary>
            Checks for containment of the item in this collection.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item is contained in this collection.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the items to the given array.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.DefaultCollectionModel`1.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.GetEnumerator">
      <summary>
            Returns an enumerator over the elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.GetItems">
      <summary>
            Returns the collection used internally as the backing store.
            </summary>
      <returns>The backing store of this collection model.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.DefaultCollectionModel`1.IsReadOnly">
      <summary>
            Checks whether this collection is read only.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemAdded">
      <summary>
            Event that will be triggered if an item has been added to this collection.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemChanged">
      <summary>
            Event that will be triggered if an item has been changed inside this collection.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemRemoved">
      <summary>
            Event that will be triggered if an item has been removed from this collection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.OnItemAdded(`0)">
      <summary>
            Callback method that will trigger the <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemAdded"></see>
            event.
            </summary>
      <param name="item">The item that has just been added to the collection.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.OnItemChanged(`0)">
      <summary>
            Callback method that will trigger the <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemChanged"></see>
            event.
            </summary>
      <param name="item">The item that has changed.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.OnItemRemoved(`0)">
      <summary>
            Callback method that will trigger the <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemRemoved"></see>
            event.
            </summary>
      <param name="item">The item that has just been removed from the collection.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.PublishItemChanged(`0)">
      <summary>
            Method that may be called by client code to trigger an <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemChanged"></see>
            event.
            </summary>
      <param name="item">The item to trigger the change event for.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.Remove(`0)">
      <summary>
            Tries to remove the item from the collection and triggers the
            <see cref="E:yWorks.Canvas.Model.DefaultCollectionModel`1.ItemRemoved"></see> event.
            </summary>
      <param name="item">The item to remove.</param>
      <returns>Whether the item has been removed.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultCollectionModel`1.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:yWorks.Canvas.Model.DefaultSelectionModel`1">
      <summary>
            Default implementation of an <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> that 
            is based on a second collection model to hold the selected elements.
            </summary>
      <typeparam name="T">The type of the items to be selected.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.#ctor">
      <summary>
            Creates a default selection model implementation that uses a <see cref="T:yWorks.Canvas.Model.DefaultCollectionModel`1"></see>
            to hold the selection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.Clear">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.DefaultSelectionModel`1.Count">
      <summary>
            Returns the number of selected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.DefaultSelectionModel`1.Domain">
      <summary>
            Gets or sets the domain of the selection model.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.GetEnumerator"></member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.IsSelected(`0)">
      <summary>
            Determines whether an item is selected by checking for the containment
            in the <see cref="P:yWorks.Canvas.Model.DefaultSelectionModel`1.Selection"></see>.
            </summary>
      <param name="o">The item to check</param>
      <returns>Whether the item is selected.</returns>
    </member>
    <member name="E:yWorks.Canvas.Model.DefaultSelectionModel`1.ItemDeselected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            selected to unselected.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.DefaultSelectionModel`1.ItemSelected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            unselected to selected.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.OnItemDeselected(`0)">
      <summary>
            Called when an item gets deselected.
            </summary>
      <param name="o">The item.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.OnItemSelected(`0)">
      <summary>
            Called when an item gets selected.
            </summary>
      <param name="o">The item.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.DefaultSelectionModel`1.Selection">
      <summary>
            Provides a collection model view over the selected items.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DefaultSelectionModel`1.SetSelected(`0,System.Boolean)">
      <summary>
            Sets the selection state of the item.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.DictionaryMapper`2">
      <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"></see> based implementation of an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>
            that can handle <see langword="null"></see> and other default-value keys gracefully.
            </summary>
      <typeparam name="K">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="K"/&gt; documentation for "T:yWorks.Canvas.Model.DictionaryMapper`2"]</p>
      </typeparam>
      <typeparam name="V">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="V"/&gt; documentation for "T:yWorks.Canvas.Model.DictionaryMapper`2"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.#ctor">
      <summary>
            Creates an instance using a <see cref="T:System.Collections.Generic.Dictionary`2"></see> as the backing
            store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Creates an instance using the provided <see cref="T:System.Collections.Generic.Dictionary`2"></see> as the backing
            store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.Clear">
      <summary>
            Calls <see cref="M:System.Collections.Generic.Dictionary`2.Clear"></see> on the backing implementation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.DictionaryMapper`2.DefaultValue">
      <summary>
            Gets or sets the default value to return if no specific value has been set for 
            a given key.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.DictionaryMapper`2.Entries">
      <summary>
            Yields and enumerable over all entries in this (dictionary based) mapper.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.GetValue(`0)"></member>
    <member name="P:yWorks.Canvas.Model.DictionaryMapper`2.Item(`0)">
      <summary>
            Finds the associated value for the given key in the mapping or
            (re-)associates the given key with the value provided, removing previous associations.
            </summary>
      <param name="key">The key to use as the index.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.RemoveValue(`0)">
      <summary>
            Removes a previously created association with the given key.
            </summary>
      <param name="key">The key to remove from the mapping.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.DictionaryMapper`2.SetValue(`0,`1)"></member>
    <member name="T:yWorks.Canvas.Model.FocusPaintManager`1">
      <summary>
            A <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see> implementation that manages the 
            visual decoration of the focused element in a canvas.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates an instance that for all selected items in the model dynamically
            installs a selection paint decoration.
            </summary>
      <param name="canvas">The canvas to add the selection marks to.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.#ctor(yWorks.Canvas.Input.AbstractInputMode)">
      <summary>
            Creates a manager for the given input mode, reusing it's canvas and input mode context.
            </summary>
      <param name="inputMode">The input mode to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.CreateInstallerContext(`0)">
      <summary>
            Factory method that creates the installer context.
            </summary>
      <param name="member">The item to create the context for.</param>
      <returns>A new instance.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Model.FocusPaintManager`1"></see> is enabled.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.Focused">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:yWorks.Canvas.CanvasControl">container</see>
            this manager is installed in current is <see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see>.
            By default this property should be bound to the <see cref="M:yWorks.Canvas.CanvasControl.GetContentHost">content host's</see><see cref="P:System.Windows.UIElement.IsKeyboardFocused"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.FocusedItem">
      <summary>
            Gets or sets the focused item, updates the canvas and fires the corresponding property change event.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.GetFocusIndicatorInstaller(`0)">
      <summary>
            Callback used by <see cref="M:yWorks.Canvas.Model.FocusPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see> to retrieve the installer for a given item.
            </summary>
      <param name="item">The item to find an installer for.</param>
      <returns>An installer or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.GroupProvider">
      <summary>
            Gets or sets the group provider that will be used in <see cref="M:yWorks.Canvas.Model.FocusPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see>
            to determine the canvas group where the selection paint should be installed into.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.InputModeContext">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> to use for this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.OnDisabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.Enabled">disabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.OnEnabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.OnFocusedChanged">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.Focused"></see> property has changed.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.FocusPaintManager`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Callback method that is triggered when the focused item has changed.
            This method raises the <see cref="E:yWorks.Canvas.Model.FocusPaintManager`1.PropertyChanged"></see> event.
            Subclasses overriding this method should make sure to invoke the
            super class implementation.
            </summary>
      <param name="args">a description of the event</param>
    </member>
    <member name="E:yWorks.Canvas.Model.FocusPaintManager`1.PropertyChanged">
      <summary>
            A property change event that gets fired when the <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.FocusedItem"></see>
            property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.FocusPaintManager`1.ShowFocusPolicy">
      <summary>
            Gets or sets the show focus policy. The default is <see cref="F:yWorks.Canvas.Model.ShowFocusPolicy.WhenFocused"></see></summary>
    </member>
    <member name="T:yWorks.Canvas.Model.HighlightPaintManager`1">
      <summary>
            A <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see> implementation that manages the 
            visual decorations of highlighted elements in a canvas.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates a manager for the given control.
            </summary>
      <param name="canvas">The canvas to install the highlights into.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Model.ISelectionModel{`0})">
      <summary>
            Creates an instance that for all selected items in the model dynamically
            installs a selection paint decoration.
            </summary>
      <param name="canvas">The canvas to add the selection marks to.</param>
      <param name="selectionModel">The model that determines which items are highlighted.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.#ctor(yWorks.Canvas.Input.AbstractInputMode)">
      <summary>
            Creates a manager for the given input mode, reusing it's canvas and input mode context.
            </summary>
      <param name="inputMode">The input mode to use.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.AddHighlight(`0)">
      <summary>
            Adds another highlight.
            </summary>
      <param name="item">The item to highlight.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.AddSelection(`0)">
      <summary>
            Adds an item to the current highlight selection.
            </summary>
      <param name="item">The item whose highlight decorator will added.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.ClearHighlights">
      <summary>
            Removes all highlights.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.CreateInstallerContext(`0)">
      <summary>
            Factory method that creates the installer context.
            </summary>
      <param name="member">The item to create the context for.</param>
      <returns>A new instance.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.HighlightPaintManager`1.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Model.HighlightPaintManager`1"></see> is enabled.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.GetHighlightInstaller(`0)">
      <summary>
            Callback used by <see cref="M:yWorks.Canvas.Model.HighlightPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see> to retrieve the installer for a given item.
            </summary>
      <param name="item">The item to find an installer for.</param>
      <returns>An installer or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.Canvas.Model.HighlightPaintManager`1.GroupProvider">
      <summary>
            Gets or sets the group provider that will be used in <see cref="M:yWorks.Canvas.Model.HighlightPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see>
            to determine the canvas group where the selection paint should be installed into.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.HighlightPaintManager`1.InputModeContext">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> to use for this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.OnDisabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.HighlightPaintManager`1.Enabled">disabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.OnEnabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.HighlightPaintManager`1.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.Remove(`0)">
      <summary>
            Removes the provided item from this managers set of managed items.
            </summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.HighlightPaintManager`1.RemoveHighlight(`0)">
      <summary>
            Removes an item from the current highlight selection.
            </summary>
      <param name="item">The item whose highlight decorator will be removed.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.HighlightPaintManager`1.SelectionModel">
      <summary>
            Gets or sets the selection model that determines which items are highlighted.
            May be <c>null</c>, in which case no elements are considered highlighted.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.IAddBridgesCallback">
      <summary>
            Callback used by <see cref="T:yWorks.Canvas.Model.BridgeManager"></see>
            to <see cref="M:yWorks.Canvas.Model.BridgeManager.AddBridges(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Model.IAddBridgesCallback)">add bridges</see>
            to a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.IAddBridgesCallback.GetBridgeHeight(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Gets the height of the bridge for the given <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="context">The context where the bridge will be created for.</param>
      <returns>The non-negative preferred basic unscaled height of the bridge.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.IAddBridgesCallback.GetBridgeWidth(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Gets the width of the bridge for the given <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="context">The context where the bridge will be created for.</param>
      <returns>The positive preferred width of the bridge.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.IAddBridgesCallback.GetCrossingStyle(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Model.CrossingStyle"></see> to use in the given <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="context">The context in which the crossing will be used.</param>
      <returns>The style to use, or <see cref="F:yWorks.Canvas.Model.CrossingStyle.Custom"></see> in order
            to let <see cref="T:yWorks.Canvas.Model.BridgeManager"></see> call <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.InsertCustomBridge(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)"></see>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.IAddBridgesCallback.GetOrientationStyle(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Model.BridgeOrientationStyle"></see> to use in the given <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="context">The context in which the style will be used..</param>
      <returns>The style to use. Any value can be returned and will be ignored if the 
            <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.GetCrossingStyle(yWorks.Canvas.Drawing.IRenderContext)">crossing style</see> is set to <see cref="F:yWorks.Canvas.Model.CrossingStyle.Custom"></see>.
            </returns>
    </member>
    <member name="M:yWorks.Canvas.Model.IAddBridgesCallback.InsertCustomBridge(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Callback that will be used by the <see cref="T:yWorks.Canvas.Model.BridgeManager"></see> if the 
            <see cref="M:yWorks.Canvas.Model.IAddBridgesCallback.GetCrossingStyle(yWorks.Canvas.Drawing.IRenderContext)"></see> method yields <see cref="F:yWorks.Canvas.Model.CrossingStyle.Custom"></see>
            to actually insert a bridge into the given <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see>.
            </summary>
      <param name="context">The context for the call.</param>
      <param name="path">The path to append the bridge segment to.</param>
      <param name="startPoint">The coordinates of the starting point of the bridge.</param>
      <param name="endPoint">The coordinates of the ending point of the bridge.</param>
      <param name="gapLength">The distance between the starting point and the end point.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.ICanvasGroupProvider`1">
      <summary>
            Simple query interface that returns an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            for a given item.
            </summary>
      <typeparam name="T">The type of the item that is used in the query</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.ICanvasGroupProvider`1.GetCanvasObjectGroup(yWorks.Canvas.CanvasControl,`0)">
      <summary>
            Returns the canvas object group for the given canvas control and item.
            </summary>
      <param name="canvas">The canvas to return a group for.</param>
      <param name="forItem">The item.</param>
      <returns>The canvas object group.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.ICollectionModel`1">
      <summary>
            The interface for a collection that will notify registered event handlers
            of changes to its contents.
            </summary>
      <typeparam name="T">The type of the items in the collection.</typeparam>
    </member>
    <member name="E:yWorks.Canvas.Model.ICollectionModel`1.ItemAdded">
      <summary>
            An event that will be triggered if an item has been added to this collection.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.ICollectionModel`1.ItemChanged">
      <summary>
            An event that will be triggered if an item in this collection has changed significantly.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.ICollectionModel`1.ItemRemoved">
      <summary>
            An event that will be triggered if an item has been removed from this collection.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.IInstallerContext">
      <summary>
            The context object that is passed to <see cref="T:yWorks.Canvas.Model.IModelItemInstaller`1"></see>,
            <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see>, <see cref="T:yWorks.Canvas.Input.IHighlightInstaller"></see>, etc.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">
      <summary>
            This method collects the <see cref="T:yWorks.Canvas.ICanvasObject"></see>s that the callee
            has created in the <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
      <param name="canvasObject">The canvas object that has been added by the implementation.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.IInstallerContext.Canvas">
      <summary>
            Gets the canvas into which the items shall be installed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.IInstallerContext.CanvasObjectGroup">
      <summary>
            Gets the suggested canvas object group to install the items into.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.IListEnumerable`1">
      <summary>
            An extension to the <see cref="T:System.Collections.Generic.IEnumerable`1"></see> interface
            that allows for indexed access and retrieval of the element count.
            </summary>
      <typeparam name="T">The type of the contained elements.</typeparam>
    </member>
    <member name="P:yWorks.Canvas.Model.IListEnumerable`1.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.IListEnumerable`1.Item(System.Int32)">
      <summary>
            Returns the i-th element in the collection.
            </summary>
      <param name="i">the zero-based index of the item in this collection</param>
      <returns>the item for the given index</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.IMapper`2">
      <summary>
            A simple interface for a typed dictionary-like implementation.
            </summary>
      <typeparam name="K">The type of element this interface accepts as keys for the map.</typeparam>
      <typeparam name="V">The type of element this interface accepts as values for the map.</typeparam>
    </member>
    <member name="P:yWorks.Canvas.Model.IMapper`2.Item(`0)">
      <summary>
            Finds the associated value for the given key in the mapping or
            (re-)associates the given key with the value provided, removing previous associations.
            </summary>
      <param name="key">The key to use as the index.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.IMapper`2.RemoveValue(`0)">
      <summary>
            Removes a previously created association with the given key.
            </summary>
      <param name="key">The key to remove from the mapping.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.IModelItem">
      <summary>
            The interface used by items that belong to a model, that most 
            of the utility classes for the <see cref="T:yWorks.Canvas.CanvasControl"></see>
            can deal with.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.IModelItemDescriptor`1">
      <summary>
            Simple handle interface used by <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see></summary>
      <typeparam name="T">The type this descriptor has been created for.</typeparam>
    </member>
    <member name="P:yWorks.Canvas.Model.IModelItemDescriptor`1.CanvasObjects">
      <summary>
            The list of canvas objects that have been associated with the item.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.IModelItemDescriptor`1.Item">
      <summary>
            The item this descriptor handle is associated with.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.IModelItemInstaller`1">
      <summary>
            An interface for a class that installs visual representations of items
            in a canvas control.
            </summary>
      <typeparam name="T">The type this installer can install into the canvas.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.IModelItemInstaller`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.InputModeController`1">
      <summary>
            A utility class that offers various implementations of interfaces
            that can be used by different <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementations.
            </summary>
      <typeparam name="T">The type of the items contained in the collection model.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.InputModeController`1.#ctor(yWorks.Canvas.Model.ICollectionModel{`0},yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Creates an instance that can be used for the given collection model.
            </summary>
      <param name="collectionModel">The model to get the entities from.</param>
      <param name="inputModeContext">The context to use for queries that require an input mode context.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.AllowMovingPredicate">
      <summary>
            Gets or sets a <see cref="T:System.Predicate`1"></see> that determines whether
            the given items should be allowed to move.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.Canvas">
      <summary>
            Gets or sets the canvas to use.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.CollectionModel">
      <summary>
            Gets or sets the collection model this instance acts upon.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InputModeController`1.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InputModeController`1.GetHandleProvider(`0)">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see> for a given item.
            </summary>
      <param name="item">The item to query the provider from.</param>
      <returns>The provider or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.InputModeController`1.GetHandles(yWorks.Canvas.Input.IInputModeContext,`0)">
      <summary>
            Returns the <see cref="T:yWorks.Canvas.Input.IHandle"></see>s for a given element.
            </summary>
      <param name="context">The context for which the handles shall be queried.</param>
      <param name="t">The element to retrieve handles for.</param>
      <returns>An enumerable or <c>null</c>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.InputModeContext">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> that is used by this instance.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.ItemHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that
            is a live composite of all <c>IHitTestable</c> implementations of the items contained
            in the model.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedItemHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that
            is a live composite of all <c>IHitTestable</c> implementations of the currently
            selected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedItemsHandles">
      <summary>
            Gets a live collection over the <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementations that
            have been obtained from the selected items in the collection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedItemsHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that
            is a live composite of all <c>IHitTestable</c> implementations of the currently
            selected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedItemsMovable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Geometry.IMovable"></see> interface that
            is a live composite of all <c>IMovable</c> implementations of the currently
            selected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedItemsPositionHandler">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> interface
            that is a live composite of all position handler interfaces provided by
            the currently selected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectedMovableItemsHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that
            is a live composite of all <c>IHitTestable</c> implementations of the currently
            selected items that also provide a <see cref="T:yWorks.Canvas.Geometry.IMovable"></see> implementation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.SelectionModel">
      <summary>
            Gets or sets the selection model, that will be used by all implementations
            that use the selection state of an item.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.UnselectedItemHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that
            is a live composite of all <c>IHitTestable</c> implementations of the currently
            unselected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.UnselectedMovableItemsHitTestable">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Geometry.IMovable"></see> interface that
            is a live composite of all <c>IMovable</c> implementations of the currently
            unselected items.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InputModeController`1.UseHandlesPredicate">
      <summary>
            Gets or sets a <see cref="T:System.Predicate`1"></see> that determines whether
            the handles of the given item should be used or discarded.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.InstallerBasedModelManager`1">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see> class
            that automatically installs, updates and removes visual representations
            of items in a <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see>.
            </summary>
      <typeparam name="T">The type of items in the collection model.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates a new instance for the given canvas using the mapper to efficiently
            associate internal state for each item in the collection.
            </summary>
      <param name="canvas">The canvas to manage.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.AddInstaller(yWorks.Canvas.Model.IModelItemInstaller{`0})">
      <summary>
            Adds an item installer to the list of installers that will be queried 
            during an <see cref="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.Install(`0)"></see> call.
            </summary>
      <param name="installer">An installer that is capable of installing
            an item of type T into the canvas.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.CreateInstallerContext(`0)">
      <summary>
            Factory method that creates the installer context.
            </summary>
      <param name="forItem">The item to create the context for.</param>
      <returns>A new instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.Install(`0)">
      <summary>
            Effectively installs a member of the collection into the canvas
            using the internally held list of installers.
            </summary>
      <param name="member">The member to install.</param>
      <returns>The canvas objects that have been returned by the installers.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerBasedModelManager`1.RemoveInstaller(yWorks.Canvas.Model.IModelItemInstaller{`0})">
      <summary>
            Removes a previously registered installer from the list of installers.
            </summary>
      <param name="installer">The installer to remove.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.InstallerContext">
      <summary>
            Simple basic implementation of the <see cref="T:yWorks.Canvas.Model.IInstallerContext"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContext.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Model.InstallerContext"></see> class
            using the provided canvas.
            </summary>
      <param name="canvas">The canvas to use for <see cref="P:yWorks.Canvas.Model.InstallerContext.Canvas"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContext.#ctor(yWorks.Canvas.CanvasControl,System.Collections.Generic.IList{yWorks.Canvas.ICanvasObject})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Canvas.Model.InstallerContext"></see> class
            using the provided canvas and the backing store for the 
            <see cref="P:yWorks.Canvas.Model.InstallerContext.InstalledObjects"></see> property.
            </summary>
      <param name="canvas">The canvas to use for <see cref="P:yWorks.Canvas.Model.InstallerContext.Canvas"></see>.</param>
      <param name="installedObjects">The backing store to use for <see cref="P:yWorks.Canvas.Model.InstallerContext.InstalledObjects"></see>.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">
      <summary>
            Adds the installed object to the <see cref="P:yWorks.Canvas.Model.InstallerContext.InstalledObjects"></see> list.
            </summary>
      <param name="canvasObject">The object to add to the installed objects list.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.InstallerContext.Canvas">
      <summary>
            Gets the canvas into which the items shall be installed.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InstallerContext.CanvasObjectGroup">
      <summary>
            Gets the suggested canvas object group to install the items into.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.InstallerContext.InstalledObjects">
      <summary>
            Gets or sets the list to use for storing the installed objects.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContext.Lookup(System.Type)">
      <summary>
            Provides additional optional information to implementations of the <see cref="T:yWorks.Canvas.Model.IModelItemInstaller`1"></see>
            interface.
            </summary>
      <param name="type">The type to query</param>
      <returns>A corresponding value or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.InstallerContext.LookupCallback">
      <summary>
            Gets or sets the lookup callback to optionally use in the <see cref="M:yWorks.Canvas.Model.InstallerContext.Lookup(System.Type)"></see>
            method.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContext.Reset">
      <summary>
            Resets this instance by calling the <see cref="M:System.Collections.Generic.ICollection`1.Clear"></see> method
            on <see cref="P:yWorks.Canvas.Model.InstallerContext.InstalledObjects"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.InstallerContextExtensions">
      <summary>
            Extension method class for <see cref="T:yWorks.Canvas.Model.IInstallerContext"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContextExtensions.Add(yWorks.Canvas.Model.IInstallerContext,System.Object,yWorks.Canvas.ICanvasObjectDescriptor)">
      <summary>
            Convenience extension method that <see cref="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)"></see>
            the given user object using the descriptor and the group provided by the <see cref="P:yWorks.Canvas.Model.IInstallerContext.CanvasObjectGroup"></see>
            property to the <see cref="T:yWorks.Canvas.CanvasControl"></see>
            and <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">adds</see> the result to the installer
            context at the same time.
            </summary>
      <param name="context">The context to use and add the canvas object to.</param>
      <param name="userObject">The user object.</param>
      <param name="descriptor">The descriptor.</param>
      <returns>The canvas object, that has already been <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">added</see>
            to the context.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.InstallerContextExtensions.Add(yWorks.Canvas.Model.IInstallerContext,System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Convenience extension method that <see cref="M:yWorks.Canvas.CanvasControl.Add(System.Object,yWorks.Canvas.ICanvasObjectDescriptor,yWorks.Canvas.ICanvasObjectGroup)"></see>
            the given user object using the descriptor and the group to the <see cref="T:yWorks.Canvas.CanvasControl"></see>
            and <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">adds</see> the result to the installer
            context at the same time.
            </summary>
      <param name="context">The context to use and add the canvas object to.</param>
      <param name="userObject">The user object.</param>
      <param name="descriptor">The descriptor.</param>
      <param name="canvasObjectGroup">The canvas object group.</param>
      <returns>The canvas object, that has already been <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">added</see>
            to the context.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.IObstacleProvider">
      <summary>
            The interface that is used by <see cref="T:yWorks.Canvas.Model.BridgeManager"></see>
            to <see cref="M:yWorks.Canvas.Model.BridgeManager.AddObstacleProvider(yWorks.Canvas.Model.IObstacleProvider)">add obstacles</see>
            to list of obstacles that need to be taken into account during rendering.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.IObstacleProvider.GetObstacles(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Yield the obstacles that the item that provided this instance
            would add to the scene for the given <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
      <param name="canvasContext">The context for which the obstacles are queried.</param>
      <returns>A path that describes the obstacles or <see langword="null"></see> if there 
            are no obstacles for the given context.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.ISelectionInstaller">
      <summary>
            An interface for objects that can install a visual representation of
            a selection decoration of an item in the model displayed in a canvas.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.ISelectionModel`1">
      <summary>
            An interface that models the selection state of a set of items.
            </summary>
      <typeparam name="T">The type of items contained in the selection's domain.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.ISelectionModel`1.Clear">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.ISelectionModel`1.Count">
      <summary>
            Returns the number of selected items.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.ISelectionModel`1.IsSelected(`0)">
      <summary>
            Determines whether an item is currently selected.
            </summary>
      <param name="o">The item to check.</param>
      <returns>Whether it is currently selected.</returns>
    </member>
    <member name="E:yWorks.Canvas.Model.ISelectionModel`1.ItemDeselected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            selected to unselected.
            </summary>
    </member>
    <member name="E:yWorks.Canvas.Model.ISelectionModel`1.ItemSelected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            unselected to selected.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.ISelectionModel`1.SetSelected(`0,System.Boolean)">
      <summary>
            Sets the selection state of an item.
            </summary>
      <param name="o">The object to set the selection state for.</param>
      <param name="selected">Whether to select the object.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.ItemEventArgs`1">
      <summary>
            Event argument class used by <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see> and 
            similar that holds a specific item that is related to the event.
            </summary>
      <typeparam name="T">The type of the item contained in the event.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.ItemEventArgs`1.#ctor(`0)">
      <summary>
            Creates a new event argument for the given item.
            </summary>
      <param name="item">The item which is the subject of the event.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.ItemEventArgs`1.Item">
      <summary>
            Gets the item that is the subject of the event.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.ItemEventHandler`1">
      <summary>
            An event handler delegate used for <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> in
            the context of <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see> and the like.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="evt">The event arguments.</param>
      <typeparam name="T">The type of item that is the subject of the event.</typeparam>
    </member>
    <member name="T:yWorks.Canvas.Model.ListEnumerable`1">
      <summary>
            Wraps a simple <see cref="T:System.Collections.Generic.IEnumerable`1"></see>
            into a <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see>.
            </summary>
      <typeparam name="T">The type of the enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.ListEnumerable`1.#ctor">
      <summary>
            Creates a new instance with a backing <see cref="T:System.Collections.Generic.List`1"></see>
            as the backing store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.ListEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance using the given backing enumerable.
            </summary>
      <param name="backingEnumerable">The enumerable to back this instance.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.ListEnumerable`1.BackingEnumerable">
      <summary>
            Gets the backing enumerable.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.ListEnumerable`1.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.ListEnumerable`1.GetEnumerator"></member>
    <member name="P:yWorks.Canvas.Model.ListEnumerable`1.Item(System.Int32)">
      <summary>
            Returns the i-th element in the collection.
            </summary>
      <param name="i">the zero-based index of the item in this collection</param>
      <returns>the item for the given index</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.MapperDelegate`2">
      <summary>
            A delegate that mimics the <see cref="P:yWorks.Canvas.Model.IMapper`2.Item(`1)"></see> access.
            </summary>
      <param name="key">The key to lookup the value for.</param>
      <typeparam name="K">The type of the key to use.</typeparam>
      <typeparam name="V">The type of the value to use.</typeparam>
      <returns>The value or a suitable default.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.MapperExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> type with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.MapperExtensions.GetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0)">
      <summary>
            Finds the associated value for the given key in the map.
            </summary>
      <param name="mapper">The mapper to use (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="key">The key to find the value for.</param>
      <typeparam name="K">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="K"/&gt; documentation for "M:yWorks.Canvas.Model.MapperExtensions.GetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0)"]</p>
      </typeparam>
      <typeparam name="V">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="V"/&gt; documentation for "M:yWorks.Canvas.Model.MapperExtensions.GetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0)"]</p>
      </typeparam>
      <returns>The value of an association or a default value if no such association exists.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.MapperExtensions.SetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0,``1)">
      <summary>
            Associates the given key with the value provided, removing previous associations.
            </summary>
      <param name="mapper">The mapper to use (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="key">The key to associate with a value.</param>
      <param name="value">The value to associate the key with.</param>
      <typeparam name="K">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="K"/&gt; documentation for "M:yWorks.Canvas.Model.MapperExtensions.SetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0,``1)"]</p>
      </typeparam>
      <typeparam name="V">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="V"/&gt; documentation for "M:yWorks.Canvas.Model.MapperExtensions.SetValue``2(yWorks.Canvas.Model.IMapper{``0,``1},``0,``1)"]</p>
      </typeparam>
    </member>
    <member name="T:yWorks.Canvas.Model.Mappers">
      <summary>
            Utility class that provides convenience methods related to <see cref="T:yWorks.Canvas.Model.IMapper`2"></see></summary>
    </member>
    <member name="M:yWorks.Canvas.Model.Mappers.CreateConstant``2(``1)">
      <summary>
            Creates a constant mapper that will always return the <paramref name="constant"></paramref>.
            </summary>
      <param name="constant">The constant to return in <seealso cref="P:yWorks.Canvas.Model.IMapper`2.Item(`1)"></seealso></param>
      <typeparam name="K">The type of the key to use.</typeparam>
      <typeparam name="V">The type of the value to use.</typeparam>
      <returns>A new instance that will always return the same constant.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.Mappers.CreateMapper``2(yWorks.Canvas.Model.MapperDelegate{``0,``1})">
      <summary>
            Create an implementation of <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that delegates <see cref="P:yWorks.Canvas.Model.IMapper`2.Item(`1)"></see> getter calls to
            the provided handler.
            </summary>
      <param name="mapperDelegate">The delegate to delegate <see cref="P:yWorks.Canvas.Model.IMapper`2.Item(`1)"></see> getter calls to.</param>
      <typeparam name="K">The type of the key to use.</typeparam>
      <typeparam name="V">The type of the value to use.</typeparam>
      <returns>An implementation that delegates to <paramref name="mapperDelegate"></paramref>.</returns>
    </member>
    <member name="T:yWorks.Canvas.Model.ModelManager`1">
      <summary>
            An abstract implementation of a utility class that manages
            the visual representations of items in a <see cref="T:yWorks.Canvas.CanvasControl"></see></summary>
      <typeparam name="T">The type of items this instance deals with.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates a new instance that will manage the items for the given canvas.
            </summary>
      <param name="canvas">The canvas to manage.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.Add(`0)">
      <summary>
            Adds an item to the canvas.
            </summary>
      <param name="o">The item to add to the canvas.</param>
      <returns>A handle that can be used for the <see cref="M:yWorks.Canvas.Model.ModelManager`1.RemoveDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})"></see> and <see cref="M:yWorks.Canvas.Model.ModelManager`1.UpdateDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})"></see> methods.
            This method may return <see langword="null"></see> to indicate that nothing was installed.</returns>
    </member>
    <member name="F:yWorks.Canvas.Model.ModelManager`1.canvas">
      <summary>
            The canvas instance this instance is managing.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.ModelManager`1.Canvas">
      <summary>
            Gets the canvas instance this instance is managing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.ContainsDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})">
      <summary>
            Checks whether this descriptor is currently being managed by this instance.
            </summary>
      <param name="desc">The descriptor handle.</param>
      <returns>Whether the descriptor is actively managed by this instance.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.Install(`0)">
      <summary>
            Abstract method that actually adds the visual representation of an item
            to the canvas.
            </summary>
      <param name="member">The item whose visual representation is to be added to the canvas.</param>
      <returns>A non-<see langword="null"></see> but possibly empty list of canvas objects this instance has added to the canvas for the given item.</returns>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.RemoveDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})">
      <summary>
            Removes the canvas objects associated with the given descriptor handle.
            </summary>
      <param name="desc">The handle as obtained from <see cref="M:yWorks.Canvas.Model.ModelManager`1.Add(`0)"></see></param>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.UnInstall(yWorks.Canvas.Model.IModelItemDescriptor{`0},System.Collections.Generic.IList{yWorks.Canvas.ICanvasObject})">
      <summary>
            Simple implementation that removes all of the given canvasObjects.
            </summary>
      <param name="descriptor">The descriptor as obtained from a previous <see cref="M:yWorks.Canvas.Model.ModelManager`1.Add(`0)"></see> call.</param>
      <param name="canvasObjects">The canvas objects that have been associated with the descriptor.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.ModelManager`1.UpdateDescriptor(yWorks.Canvas.Model.IModelItemDescriptor{`0})">
      <summary>
            Updates the item in the canvas by uninstalling and reinstalling it
            into the canvas.
            </summary>
      <param name="desc">The descriptor to update.</param>
    </member>
    <member name="T:yWorks.Canvas.Model.SelectionPaintManager`1">
      <summary>
            A <see cref="T:yWorks.Canvas.Model.ModelManager`1"></see> implementation that manages the 
            visual decorations of selected elements in a canvas.
            </summary>
      <typeparam name="T">The type of the items in the collection and selection model.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.Model.ICollectionModel{`0},yWorks.Canvas.Model.ISelectionModel{`0})">
      <summary>
            Creates an instance that for all selected items in the model dynamically
            installs a selection paint decoration.
            </summary>
      <param name="canvas">The canvas to add the selection marks to.</param>
      <param name="model">The model that holds the domain.</param>
      <param name="selectionModel">The model that determines which items are selected.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.AddSelection(`0)">
      <summary>
            Adds an item to the current selection.
            </summary>
      <param name="item">The item whose selection decorator will added.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.CreateInstallerContext(`0)">
      <summary>
            Factory method that creates the installer context.
            </summary>
      <param name="forItem">The item to create the context for.</param>
      <returns>A new instance.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.SelectionPaintManager`1.Enabled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Canvas.Model.SelectionPaintManager`1"></see> is enabled.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.GetSelectionInstaller(`0)">
      <summary>
            Callback used by <see cref="M:yWorks.Canvas.Model.SelectionPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see> to retrieve the installer for a given item.
            </summary>
      <param name="item">The item to find an installer for.</param>
      <returns>An installer or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.Canvas.Model.SelectionPaintManager`1.GroupProvider">
      <summary>
            Gets or sets the group provider that will be used in <see cref="M:yWorks.Canvas.Model.SelectionPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see>
            to determine the canvas group where the selection paint should be installed into.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="context">The context to install the item into and
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <param name="item">The item to install.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.SelectionPaintManager`1.Model">
      <summary>
            Gets or sets the model that describes the domain for the selection.
            Only item contained in this model can be rendered as selected.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.OnDisabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.SelectionPaintManager`1.Enabled">disabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.OnEnabled">
      <summary>
            Called when this mode gets <see cref="P:yWorks.Canvas.Model.SelectionPaintManager`1.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.Remove(`0)">
      <summary>
            Removes the provided item from this managers set of managed items.
            </summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.SelectionPaintManager`1.RemoveSelection(`0)">
      <summary>
            Removes an item from the current selection.
            </summary>
      <param name="item">The item whose selection decorator will be removed.</param>
    </member>
    <member name="P:yWorks.Canvas.Model.SelectionPaintManager`1.SelectionModel">
      <summary>
            Gets or sets the selection model that determines which items are selected.
            May be <c>null</c>, in which case no elements are considered selected.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.ShowFocusPolicy">
      <summary>
            The enumeration that describes the possible different policies for displaying the 
            focus of items managed by the <see cref="T:yWorks.Canvas.Model.FocusPaintManager`1"></see></summary>
    </member>
    <member name="F:yWorks.Canvas.Model.ShowFocusPolicy.Always">
      <summary>
            Indicates that irrespectively of the keyboard focus, the focus should always be
            rendered for the <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.FocusedItem"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Canvas.Model.ShowFocusPolicy.WhenFocused">
      <summary>
            Indicates that depending on the value of <see cref="P:yWorks.Canvas.Model.FocusPaintManager`1.Focused"></see>the focus should only be
            rendered if this property is set to <see langword="true"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.TypeBasedItemInstaller`1">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Model.IModelItemInstaller`1"></see> interface
            that will use a fixed <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> for
            each item that is assignable a specific type.
            </summary>
      <typeparam name="T">The type of the item installer.</typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.#ctor(yWorks.Canvas.ICanvasObjectDescriptor,System.Type)">
      <summary>
            Creates an instance using the given descriptor and
            using the type to determine whether it <see cref="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.CanInstall(`0,yWorks.Canvas.CanvasControl)"></see>
            an item.
            </summary>
      <param name="descriptor">
      </param>
      <param name="type">
      </param>
    </member>
    <member name="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.CanInstall(`0,yWorks.Canvas.CanvasControl)">
      <summary>
            Returns <c>true</c> if the type of the item is assignable to <see cref="P:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Type"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Descriptor">
      <summary>
            Gets or sets the descriptor to use for installing the item.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Group">
      <summary>
            Gets or sets the group to install the items in the canvas at.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Install(yWorks.Canvas.CanvasControl)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            Adds the given item to the canvas using the <see cref="P:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Descriptor"></see>.
            </summary>
      <param name="item">The item to install</param>
      <param name="context">The context to <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add</see> the item into.</param>
      <returns>An array containing one element.</returns>
    </member>
    <member name="P:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Type">
      <summary>
            Gets or sets the type to filter items that can be installed by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.TypeBasedItemInstaller`1.Uninstall(yWorks.Canvas.CanvasControl)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="T:yWorks.Canvas.Model.WeakDictionaryMapper`2">
      <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"></see> based implementation of an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>
            that can handle <c>null</c> keys gracefully and uses weak keys.
            </summary>
      <typeparam name="K">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="K"/&gt; documentation for "T:yWorks.Canvas.Model.WeakDictionaryMapper`2"]</p>
      </typeparam>
      <typeparam name="V">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="V"/&gt; documentation for "T:yWorks.Canvas.Model.WeakDictionaryMapper`2"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Canvas.Model.WeakDictionaryMapper`2.#ctor">
      <summary>
            Creates an instance using a <see cref="T:System.Collections.Generic.Dictionary`2"></see> as the backing
            store.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.WeakDictionaryMapper`2.Clear">
      <summary>
            Calls <see cref="M:System.Collections.Generic.Dictionary`2.Clear"></see> on the backing implementation.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.WeakDictionaryMapper`2.DefaultValue">
      <summary>
            Gets or sets the default value to return if no specific value has been set for 
            a given key.
            </summary>
    </member>
    <member name="P:yWorks.Canvas.Model.WeakDictionaryMapper`2.Empty">
      <summary>
            Determines whether this mapper is currently backed by an empty dictionary.
            </summary>
    </member>
    <member name="M:yWorks.Canvas.Model.WeakDictionaryMapper`2.GetValue(`0)"></member>
    <member name="P:yWorks.Canvas.Model.WeakDictionaryMapper`2.Item(`0)">
      <summary>
            Finds the associated value for the given key in the mapping or
            (re-)associates the given key with the value provided, removing previous associations.
            </summary>
      <param name="key">The key to use as the index.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.WeakDictionaryMapper`2.RemoveValue(`0)">
      <summary>
            Removes a previously created association with the given key.
            </summary>
      <param name="key">The key to remove from the mapping.</param>
    </member>
    <member name="M:yWorks.Canvas.Model.WeakDictionaryMapper`2.SetValue(`0,`1)"></member>
    <member name="T:yWorks.Option.ColorBrushConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.ColorBrushConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.ColorBrushConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.ColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.ColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.DialogItemsControl">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.DialogItemsControl.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.DoubleConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.DoubleConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DoubleConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.DoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.DoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.DoubleConverter.Validate(System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.EnumDomainConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.EnumDomainConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.EnumDomainConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.EnumDomainConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.EnumDomainConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.IntConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.IntConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.IntConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.IntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.IntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.IntConverter.Validate(System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.LevelToIndentConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.LevelToIndentConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.LevelToIndentConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.LevelToIndentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.LevelToIndentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.OptionItemAttributeConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.OptionItemAttributeConverter.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.OptionItemAttributeConverter.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.OptionItemAttributeConverter.AttributeName">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.OptionItemAttributeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.OptionItemAttributeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.SolidColorBrushColorConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.SolidColorBrushColorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.SolidColorBrushColorConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.SolidColorBrushColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.SolidColorBrushColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.TreeListView">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.TreeListView.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.TreeListViewItem">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.TreeListViewItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.TreeListViewItem" /> class</summary>
    </member>
    <member name="P:yWorks.Option.TreeListViewItem.Level">
      <summary>
            Item's hierarchy in the tree
            </summary>
    </member>
    <member name="T:yWorks.Option.XamlDomainConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlDomainConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlDomainConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlDomainConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlDomainConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlItemIsUndefinedConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlItemIsUndefinedConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlItemIsUndefinedConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlItemIsUndefinedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlItemIsUndefinedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlItemTypeConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlItemTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlItemTypeConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlItemTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlItemTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlLocalizingConverter">
      <summary>
            A helper class that is used by the <see cref="T:System.Windows.Controls.ItemsControl"></see>s used by the option handler 
            implementations.
            </summary>
    </member>
    <member name="M:yWorks.Option.XamlLocalizingConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlLocalizingConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlLocalizingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlLocalizingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.XamlLocalizingConverter.OptionItem">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.XamlLocalizingConverter.PostFix">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.XamlLocalizingConverter.PreFix">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlOptionItemEditorSelector">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlOptionItemEditorSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlOptionItemEditorSelector" /> class</summary>
    </member>
    <member name="P:yWorks.Option.XamlOptionItemEditorSelector.CustomEditorAttribute">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlOptionItemEditorSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlOptionTemplateSelector">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlOptionTemplateSelector.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlOptionTemplateSelector.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.XamlOptionTemplateSelector.Prefix">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlOptionTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlUndefinedNullConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlUndefinedNullConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.XamlUndefinedNullStringConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullStringConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.XamlUndefinedNullStringConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.XamlUndefinedNullStringConverter.Item">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.XamlUndefinedNullStringConverter.Validate(System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Constraint.AbstractCondition">
      <summary>
            Abstract implementation of <see cref="T:yWorks.Option.Constraint.ICondition"></see> that provides
            the basic infrastructure for correct installation of this condition in 
            a <see cref="T:yWorks.Option.View.IModelView"></see>. 
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.#ctor">
      <summary>
            Create a new instance with an empty input list.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.#ctor(System.Collections.Generic.List{System.ComponentModel.INotifyPropertyChanged})">
      <summary>
            Create a new instance for the given list of <paramref name="inputs"></paramref></summary>
      <param name="inputs">The initial inputs for this condition</param>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.#ctor(System.ComponentModel.INotifyPropertyChanged[])">
      <summary>
            Create a new instance for the given array of <paramref name="inputs"></paramref></summary>
      <param name="inputs">The initial inputs for this condition</param>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.AddInput(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Add a new event source, but do not register any listeners. 
            </summary>
      <param name="item">The new input source</param>
    </member>
    <member name="E:yWorks.Option.Constraint.AbstractCondition.ConditionTriggered">
      <summary>
            This event is fired whenever the condition decides it is necessary to inform subscribers.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.CreateCopy(System.ComponentModel.INotifyPropertyChanged[])">
      <summary>
            Create a new copy of this condition for the correct type of the condition, but
            with the copied input list instead of the original one.
            </summary>
      <param name="copiedInput">array of  copied inputs for this condition.</param>
      <returns> a new copy of this condition for the copied input list.</returns>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.GetItemCopy(yWorks.Option.View.IModelView,System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            This method is needed to find the correct item in <paramref name="view"></paramref> that corresponds
            to the original input source <paramref name="item"></paramref>. It is called by 
            <see cref="M:yWorks.Option.Constraint.AbstractCondition.InstallInView(yWorks.Option.View.IModelView)"></see> to correctly determine the new event inputs for the copied
            condition.
            </summary>
      <param name="view">The view where the condition is currently installed</param>
      <param name="item">
      </param>
      <returns>A <see cref="T:System.ComponentModel.INotifyPropertyChanged"></see> instance that corresponds
            to <paramref name="item"></paramref> in <paramref name="view"></paramref>.</returns>
    </member>
    <member name="P:yWorks.Option.Constraint.AbstractCondition.Inputs">
      <summary>
            Read-Only list of all inputs that this condition should listen to.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.InstallInView(yWorks.Option.View.IModelView)">
      <summary>
            This method provides ensures correct installation of this condition in 
             a <see cref="T:yWorks.Option.View.IModelView"></see>. 
             </summary>
    </member>
    <member name="P:yWorks.Option.Constraint.AbstractCondition.IsTrue">
      <summary>
            Returns <see langword="true"></see> iff the condition is logically true wrt to it's input values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.OnConditionFailed">
      <summary>
            Should be called to trigger the failed result event of this condition
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.OnConditionSuccessful">
      <summary>
            Should be called to trigger the successful result event of this condition
            </summary>
    </member>
    <member name="E:yWorks.Option.Constraint.AbstractCondition.PropertyChanged">
      <summary>
                    Occurs when a property value changes.
                </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.RemoveInput(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Remove a given input source.
            </summary>
      <param name="item">The input source that is to be removed</param>
    </member>
    <member name="M:yWorks.Option.Constraint.AbstractCondition.SourceValueChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called <see cref="E:yWorks.Option.Constraint.AbstractCondition.ConditionTriggered"></see> whenever a source input value
            raises a <see cref="E:yWorks.Option.Constraint.AbstractCondition.PropertyChanged"></see> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:yWorks.Option.Constraint.ConditionActionConstraint">
      <summary>
            Implementation of interface <see cref="T:yWorks.Option.Constraint.IConstraint"></see> that wires a single source <see cref="T:yWorks.Option.Constraint.ICondition"></see>
            and a single target <see cref="T:yWorks.Option.Constraint.IAction"></see> together.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConditionActionConstraint.#ctor(yWorks.Option.Constraint.ICondition,yWorks.Option.Constraint.IAction)">
      <summary>
            Create a new instance for the given source and target objects
            </summary>
      <param name="sourceCondition">The source condition</param>
      <param name="targetAction">The target action</param>
    </member>
    <member name="M:yWorks.Option.Constraint.ConditionActionConstraint.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConditionActionConstraint.InstallInView(yWorks.Option.View.IModelView)">
      <summary>
            This implementation creates copies of the source condition and the target action configured
            for <paramref name="view"></paramref>, and registeres the target copy as a listener for the source copy's
            <see cref="E:yWorks.Option.Constraint.ICondition.ConditionTriggered"></see> event.
            </summary>
      <param name="view">The view where to install this constraint.</param>
      <returns>A correctly configured copy of the original constraint</returns>
    </member>
    <member name="T:yWorks.Option.Constraint.ConditionTriggeredEventArgs">
      <summary>
            Extension of <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> that also indicates
            whether the condition has executed succesfully.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConditionTriggeredEventArgs.#ctor(System.Boolean)">
      <summary>
            Create new parameter
            </summary>
      <param name="isTrue">used to track status changes without the need
            to query the sender again</param>
    </member>
    <member name="P:yWorks.Option.Constraint.ConditionTriggeredEventArgs.IsTrue">
      <summary>
            Returns the status value of the event
            </summary>
    </member>
    <member name="T:yWorks.Option.Constraint.ConditionTriggeredEventHandler">
      <summary>
            Specialized event handler for condition status changes.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:yWorks.Option.Constraint.ConstraintManager">
      <summary>
            This is the main class foer constraint handling.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.#ctor(yWorks.Option.Handler.OptionHandler)">
      <summary>
            Create a new ConstraintManager that is automatically bound to <paramref name="_handler"></paramref>
            view change events.
            </summary>
      <param name="_handler">
      </param>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.AddConstraint(yWorks.Option.Constraint.IConstraint)">
      <summary>
            Add a new constraint that can be installed onto new views
            </summary>
      <param name="constraint">The new constraint that is registered.</param>
    </member>
    <member name="P:yWorks.Option.Constraint.ConstraintManager.AutoInstallConstraints">
      <summary>
            Get or set whether new constraints should be automatically registered for all active views.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.Clear">
      <summary>
            Clear all registered constraints.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.CreateActionConstraint(yWorks.Option.Constraint.ICondition,yWorks.Option.Constraint.IAction)">
      <summary>
            Create a new constraint that executes an action when the condition is triggered.
            </summary>
      <param name="trigger">
      </param>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.CreateIsEnabledCondition(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Create a new Condition that is true iff the editor for <paramref name="source"></paramref> 
            is enabled.
            </summary>
      <param name="source">
      </param>
      <returns>New Condition that is true iff the editor for <paramref name="source"></paramref> 
            is enabled.</returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.CreateValueEqualsCondition(yWorks.Option.Handler.IOptionItem,System.Object)">
      <summary>
            Create a new Condition that is true iff the value in the editor for <paramref name="source"></paramref> 
            has the value <paramref name="triggerValue"></paramref>.
            </summary>
      <param name="source">
      </param>
      <param name="triggerValue">
      </param>
      <returns>New Condition that is true iff the value in the editor for <paramref name="source"></paramref> 
            has the value <paramref name="triggerValue"></paramref></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.CreateValueIsOneOfCondition(yWorks.Option.Handler.IOptionItem,System.Collections.IList)">
      <summary>
            Create a new Condition that is true iff the editor for <paramref name="source"></paramref> 
            has a value that appears in <paramref name="triggerValues"></paramref>.
            </summary>
      <param name="source">The input source of the condition</param>
      <param name="triggerValues">List of values for the source which set the condition to true</param>
      <returns>New Condition that is true iff the editor for <paramref name="source"></paramref> 
            has a value that appears in <paramref name="triggerValues"></paramref></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.CreateValueIsOneOfCondition(yWorks.Option.Handler.IOptionItem,System.Object[])">
      <summary>
            Create a new Condition that is true iff the editor for <paramref name="source"></paramref> 
            has a value that appears in <paramref name="triggerValues"></paramref>.
            </summary>
      <param name="source">The input source of the condition</param>
      <param name="triggerValues">Array of values for the source which set the condition to true</param>
      <returns>New Condition that is true iff the editor for <paramref name="source"></paramref> 
            has a value that appears in <paramref name="triggerValues"></paramref></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.ForceInstall">
      <summary>
            Force registration of all constraints to all active views
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.SetEnabledOnCondition(yWorks.Option.Constraint.ICondition,yWorks.Option.Handler.IOptionItem)">
      <summary>
            Creates and registers a constraint that automatically enables the editor for the item <paramref name="target"></paramref>
            iff the condition <paramref name="cond"></paramref> becomes true.
            </summary>
      <param name="cond">
      </param>
      <param name="target">New constraint that automatically enables the editor for the item <paramref name="target"></paramref>
            iff the condition <paramref name="cond"></paramref> becomes true</param>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.SetEnabledOnValueEquals(yWorks.Option.Handler.IOptionItem,System.Object,yWorks.Option.Handler.IOptionItem)">
      <summary>
            Creates and registers a constraint that automatically enables the editor for the item <paramref name="target"></paramref>
            iff the value in the editor for <paramref name="source"></paramref> has the value <paramref name="value"></paramref>.
            </summary>
      <param name="source">
      </param>
      <param name="value">
      </param>
      <param name="target">
      </param>
    </member>
    <member name="T:yWorks.Option.Constraint.ConstraintManager.LogicalCondition">
      <summary>
            Factory class for logical conditions that can be used to build more complex conditions
            out of existing ones.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.LogicalCondition.And(yWorks.Option.Constraint.ICondition,yWorks.Option.Constraint.ICondition)">
      <summary>
            Create a new condition that is <see langword="true"></see> iff both <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> are <see langword="true"></see>.
            </summary>
      <param name="cond1">
      </param>
      <param name="cond2">
      </param>
      <returns>
        <see langword="true">
        </see> iff both <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> are <see langword="true"></see></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.LogicalCondition.Not(yWorks.Option.Constraint.ICondition)">
      <summary>
            Create a new condition that is <see langword="true"></see> 
            iff <paramref name="cond1"></paramref> is <see langword="false"></see>.
            </summary>
      <param name="cond1">
      </param>
      <returns>
        <see langword="true">
        </see> iff <paramref name="cond1"></paramref> is 
            <see langword="false"></see></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.LogicalCondition.Or(yWorks.Option.Constraint.ICondition,yWorks.Option.Constraint.ICondition)">
      <summary>
            Create a new condition that is <see langword="true"></see> iff one or both 
            of <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> are <see langword="true"></see>.
            </summary>
      <param name="cond1">
      </param>
      <param name="cond2">
      </param>
      <returns>
        <see langword="true">
        </see> iff one or both of <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> are <see langword="true"></see></returns>
    </member>
    <member name="M:yWorks.Option.Constraint.ConstraintManager.LogicalCondition.Xor(yWorks.Option.Constraint.ICondition,yWorks.Option.Constraint.ICondition)">
      <summary>
            Create a new condition that is <see langword="true"></see> iff exactly one of 
            <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> is <see langword="true"></see>.
            </summary>
      <param name="cond1">
      </param>
      <param name="cond2">
      </param>
      <returns>
        <see langword="true">
        </see> iff exactly one of 
            <paramref name="cond1"></paramref> and
            <paramref name="cond2"></paramref> is <see langword="true"></see>.</returns>
    </member>
    <member name="T:yWorks.Option.Constraint.IAction">
      <summary>
            This interface describes the general contract for an action that can be used as a building block
            in <see cref="T:yWorks.Option.Constraint.IConstraint"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.IAction.InstallInView(yWorks.Option.View.IModelView)">
      <summary>
            Register this action into the given <paramref name="view"></paramref>.
            </summary>
      <param name="view">The view where the action should be regstered</param>
      <returns>A copy of the action that is correctly configured to work on <paramref name="view"></paramref>.
            </returns>
    </member>
    <member name="M:yWorks.Option.Constraint.IAction.PerformAction(System.Object,yWorks.Option.Constraint.ConditionTriggeredEventArgs)">
      <summary>
            Perform an action on the view where this action is registered.
            </summary>
      <param name="source">The event source</param>
      <param name="statusInformation">The event parameters</param>
    </member>
    <member name="T:yWorks.Option.Constraint.ICondition">
      <summary>
            This interface describes the general contract for a condition that can be used as a building block
            in <see cref="T:yWorks.Option.Constraint.IConstraint"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ICondition.AddInput(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Add a new event source, but do not register any listeners. 
            </summary>
      <param name="item">The new input source</param>
    </member>
    <member name="E:yWorks.Option.Constraint.ICondition.ConditionTriggered">
      <summary>
            This event is fired whenever the condition decides it is necessary to inform subscribers.
            </summary>
    </member>
    <member name="P:yWorks.Option.Constraint.ICondition.Inputs">
      <summary>
            Read-Only list of all inputs that this condition should listen to.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ICondition.InstallInView(yWorks.Option.View.IModelView)">
      <summary>
            Install the condition into the given <paramref name="view"></paramref></summary>
      <param name="view">The view where this constraint will be installed.</param>
      <returns>A copy of this condition that is configured to work on the 
            given <paramref name="view"></paramref>.</returns>
    </member>
    <member name="P:yWorks.Option.Constraint.ICondition.IsTrue">
      <summary>
            Returns <see langword="true"></see> iff the condition is logically true wrt to it's input values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.ICondition.RemoveInput(System.ComponentModel.INotifyPropertyChanged)">
      <summary>
            Remove a given input source.
            </summary>
      <param name="item">The input source that is to be removed</param>
    </member>
    <member name="M:yWorks.Option.Constraint.ICondition.SourceValueChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when an input property has been changed.
            </summary>
      <param name="sender">The origin of the event</param>
      <param name="e">The parameters for the event</param>
    </member>
    <member name="T:yWorks.Option.Constraint.IConstraint">
      <summary>
            Interface for installable constraints.
            </summary>
    </member>
    <member name="M:yWorks.Option.Constraint.IConstraint.InstallInView(yWorks.Option.View.IModelView)">
      <summary>
            Install the constraint into the given <paramref name="view"></paramref></summary>
      <param name="view">The view where this constraint will be installed.</param>
      <returns>A copy of this constraint that is configured to work on the 
            given <paramref name="view"></paramref>.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1">
      <summary>
            Abstract base class implementation of <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> with sophisticated
            default behavior.
            </summary>
      <typeparam name="TSubject">The type of the subject this implementation deals with.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.#ctor(System.Boolean)">
      <summary>
            Sole constructor of this class which has to be called by all subclasses.
            </summary>
      <param name="useCloneForNewInstance">This setting determines whether the <see cref="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.CreateCopy(yWorks.Option.DataBinding.IPropertyBuildContext{`0},`0)"></see> mechanism
            should be used to fulfill the <see cref="F:yWorks.Option.DataBinding.AssignmentPolicy.CreateNewInstance"></see> policy. If set to <see langword="false"></see>
            the implementation needs to obey the <see cref="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.Policy"></see> setting and
            use the <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.SetNewInstance(`0)"></see> if appropriate.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.BuildPropertyMap``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})">
      <summary>
            Default implementation that wraps the provided context as needed and
            delegates to <see cref="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.BuildPropertyMapImpl(yWorks.Option.DataBinding.IPropertyBuildContext{`0})"></see>, which needs to be implemented by subclasses.
            </summary>
      <param name="context">The context to use for the building of the property map.</param>
      <typeparam name="T">The type of the context that is passed in.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.BuildPropertyMapImpl(yWorks.Option.DataBinding.IPropertyBuildContext{`0})">
      <summary>
            The core method that needs to be implemented by subclasses.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="P:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.Cloner">
      <summary>
            Gets or sets the delegate that will perform the cloning of the instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractPropertyMapBuilder`1.CreateCopy(yWorks.Option.DataBinding.IPropertyBuildContext{`0},`0)">
      <summary>
            Creates a copy of the provided item to comply with the <see cref="F:yWorks.Option.DataBinding.AssignmentPolicy.CreateNewInstance"></see> policy
            if that policy is set on the current context.
            </summary>
      <param name="context">The context that the subject needs to be cloned for. Note that this method should not
            have side effects on the context.</param>
      <param name="item">The item to create a (deep) copy of.</param>
      <returns>A clone of this item.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.AbstractSelectionProvider`1">
      <summary>
            A simple abstract implementation of <see cref="T:yWorks.Option.DataBinding.ISelectionProvider`1"></see>
            that provides a couple of convenience methods and default implementations where applicable.
            </summary>
      <typeparam name="T">The type of the items in the provider.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DataBinding.AbstractSelectionProvider`1" /> class</summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.BeginValueUpdate">
      <summary>
            Modifies <see cref="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InUpdate"></see> if applicable.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.EndValueUpdate">
      <summary>
            Modifies <see cref="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InUpdate"></see> if applicable.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InnerLookup">
      <summary>
            Gets or sets the <see cref="T:yWorks.Support.ILookup"></see> implementation that is used
            to resolve calls to <see cref="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.Lookup(System.Type)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InUpdate">
      <summary>
            Whether there is currently an update in progress.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.Lookup(System.Type)">
      <summary>
            Uses <see cref="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InnerLookup"></see> to satisfy requests.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.OnSelectedItemsUpdated">
      <summary>
            Called by <see cref="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.UpdateSelectedItems"></see>
            triggers the <see cref="E:yWorks.Option.DataBinding.AbstractSelectionProvider`1.PropertyItemsChanged"></see> event
            and calls <see cref="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.UpdateProperties"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.OnSelectionContentUpdated">
      <summary>
            Can be called to trigger <see cref="E:yWorks.Option.DataBinding.AbstractSelectionProvider`1.SelectedItemsChanged"></see>
            but will not do so if <see cref="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.InUpdate"></see>.
            </summary>
    </member>
    <member name="E:yWorks.Option.DataBinding.AbstractSelectionProvider`1.PropertyItemsChanged">
      <summary>
            This event gets fired whenever the properties
            of the items in the properties views have been changed and should be committed to the 
            corresponding items in the selection.
            </summary>
    </member>
    <member name="E:yWorks.Option.DataBinding.AbstractSelectionProvider`1.SelectedItemsChanged">
      <summary>
            This event gets fired whenever the content or properties
            of the items in the selection have been changed.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.AbstractSelectionProvider`1.Selection">
      <summary>
            The current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.UpdateProperties">
      <summary>
            Needs to be implemented by subclasses in order to update the property maps.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.UpdatePropertyViews">
      <summary>
            This method is called to update properties views that display the properties
            of the current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AbstractSelectionProvider`1.UpdateSelectedItems">
      <summary>
            This method is called to update the currently selected items using the
            values in the properties views.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.ArgbEqualityComparer">
      <summary>
        <see cref="T:System.Collections.IEqualityComparer">
        </see> implementation that compares Color values solely
            based on their ARGB values
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ArgbEqualityComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DataBinding.ArgbEqualityComparer" /> class</summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ArgbEqualityComparer.Equals(System.Object,System.Object)">
      <summary>
            For Color values, only ARGB values are compared, for other types, the method delegates to 
            <see cref="M:System.Object.Equals(System.Object,System.Object)"></see></summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
        <see langword="true">
        </see> iff <paramref name="x"></paramref> and <paramref name="y"></paramref> are to be considered equal.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.ArgbEqualityComparer.GetHashCode(System.Object)">
      <summary>
            Returns a hash code that is consistent with the result of <see cref="M:yWorks.Option.DataBinding.ArgbEqualityComparer.Equals(System.Object,System.Object)"></see>.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.AssignmentPolicy">
      <summary>
            An enumeration used by <see cref="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.Policy"></see>
            to determine how the modification of mutable reference values should be performed.
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.AssignmentPolicy.Default">
      <summary>
            The client does not have any preferences, the context itself may decide what to do.
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.AssignmentPolicy.ModifyInstance">
      <summary>
            The context may modify the instance, there is no need to 
            stay immutable.
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.AssignmentPolicy.CreateNewInstance">
      <summary>
            The context may not be modified, instead a new instance needs to be created that reflects
            the modification.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.AssignmentPolicyAttribute">
      <summary>
            Attribute that will be evaluated by <see cref="T:yWorks.Option.DataBinding.AttributeBasedPropertyMapBuilderAttribute"></see>
            during the creation of the <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see> to determine
            the <see cref="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.Policy"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AssignmentPolicyAttribute.#ctor(yWorks.Option.DataBinding.AssignmentPolicy)">
      <summary>
            Creates a new instance using the provided policy.
            </summary>
      <param name="policy">
      </param>
    </member>
    <member name="P:yWorks.Option.DataBinding.AssignmentPolicyAttribute.Policy">
      <summary>
            Retrieves the policy to use.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.AttributeBasedOptionBuilder">
      <summary>
            A generic implementation of an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> 
            that uses reflection and <see cref="T:System.Attribute"></see>s to build the options
            of a given subject and type.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedOptionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DataBinding.AttributeBasedOptionBuilder" /> class</summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)">
      <summary>
            Adds new option items to the given <paramref name="context"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedOptionBuilder.ConfigureItem(yWorks.Option.Handler.IOptionItem,System.Reflection.PropertyInfo)">
      <summary>
            Configures additional attributes for an option item or option group, such as collapsed state and group visibility.
            </summary>
      <param name="item">The item or group to configure.</param>
      <param name="propertyInfo">The associated property info.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedOptionBuilder.CreateItem(yWorks.Option.DataBinding.IOptionBuilderContext,System.Reflection.PropertyInfo,System.Type,System.String,System.Object)">
      <summary>
            Factory method that creates the option item using the provided parameters.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedOptionBuilder.SortProperties(System.Reflection.PropertyInfo[],yWorks.Option.DataBinding.IOptionBuilderContext)">
      <summary>
            Sorts the list of displayed properties.
            </summary>
      <param name="properties">
      </param>
      <param name="context">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.AttributeBasedPropertyMapBuilderAttribute">
      <summary>
            The attribute that is used to specify that the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            implementation for the annotated type should be created dynamically by
            introspecting the type.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedPropertyMapBuilderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DataBinding.AttributeBasedPropertyMapBuilderAttribute" /> class</summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.AttributeBasedPropertyMapBuilderAttribute.CreateBuilder(System.Type)">
      <summary>
            Creates the builder for a given type.
            </summary>
      <param name="t">The type to create an attribute based builder for.</param>
      <returns>A builder that is based on the attributes found in the type.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.DefaultSelectionProvider`1">
      <summary>
            The default implementation of <see cref="T:yWorks.Option.DataBinding.ISelectionProvider`1"></see>
            that is used to <see cref="M:yWorks.Option.Handler.OptionHandler.BuildFromSelection``1(yWorks.Option.DataBinding.ISelectionProvider{``0},yWorks.Support.IContextLookup)">drive OptionHandler instances.</see>.
            </summary>
      <typeparam name="T">The type of the items to act on.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance using the provided domain and a filter.
            </summary>
      <param name="model">The domain to work on.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0})">
      <summary>
            Creates a new instance using the provided domain and a filter.
            </summary>
      <param name="model">The domain to work on.</param>
      <param name="filter">A filter that works on the domain.</param>
    </member>
    <member name="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.ContextLookup">
      <summary>
            Gets or sets the <see cref="T:yWorks.Support.IContextLookup"></see> implementation that
            will be used by <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.DescriptorContextLookupCallback(System.Object,System.Type)"></see>
            which itself will be used to satisfy calls to the
            implementation of <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.GetPropertyMapBuilder(System.Object)"></see>
            and <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.GetPropertyMapBuilder(System.Type,System.Object)"></see>
            during calls to <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.CreateDescriptor(`0)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.CreateDescriptor(`0)">
      <summary>
            Creates and populates a <see cref="T:yWorks.Option.DataBinding.IPropertyItemDescriptor`1"></see>
            for the given item.
            </summary>
      <param name="o">The item to introspect and create a descriptor for.</param>
      <returns>The descriptor to put into the <see cref="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.Selection"></see>.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.CreateDescriptor(`0,yWorks.Option.DataBinding.IPropertyMap)">
      <summary>
            Factory method that actually creates the descriptor instance for the provided parameters.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.DescriptorContextLookupCallback(System.Object,System.Type)">
      <summary>
            The <see cref="T:yWorks.Support.IContextLookup"></see> callback that is used during <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.CreateDescriptor(`0)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.EventCollapseTimeSpan">
      <summary>
            The timespan during which recurring calls to <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.UpdatePropertyViews"></see>
            are collapsed into a single call.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.EventRestartsTimer">
      <summary>
            Gets or sets a value indicating whether a new event restarts the timer.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.IsValid(`0)">
      <summary>
            Returns <see langword="true"></see> if the registered predicate does so
            </summary>
      <param name="o">The item to check.</param>
      <returns>Whether to add this item to the selection.</returns>
    </member>
    <member name="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.Selection">
      <summary>
            The current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.UpdateProperties">
      <summary>
            Needs to be implemented by subclasses in order to update the property maps.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.UpdateProperties(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.ICollection{yWorks.Option.DataBinding.IPropertyItemDescriptor{`0}})">
      <summary>
            Updates the items, calling <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.CreateDescriptor(`0)"></see>
            for each <see cref="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.IsValid(`0)"></see> item in <paramref name="sourceItems"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.UpdatePropertyViews">
      <summary>
            This method is called to update properties views that display the properties
            of the current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.DefaultSelectionProvider`1.UpdatePropertyViewsNow">
      <summary>
            Foreces the update of the properties view, regardless of the <see cref="P:yWorks.Option.DataBinding.DefaultSelectionProvider`1.EventCollapseTimeSpan"></see> value
            currently being set.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.DelegateGetter`1">
      <summary>
            An adapter class that adapts <see cref="T:yWorks.Option.DataBinding.ValueGetterDelegate`1"></see>
            and <see cref="T:yWorks.Option.DataBinding.ValueGetterValidityPredicate"></see> to the <see cref="T:yWorks.Option.DataBinding.IValueGetter"></see>
            interface.
            </summary>
      <typeparam name="T">The type of the items.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateGetter`1.#ctor(yWorks.Option.DataBinding.ValueGetterDelegate{`0})">
      <summary>
            Creates a new instance.
            </summary>
      <param name="getter">The getter to use.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateGetter`1.#ctor(yWorks.Option.DataBinding.ValueGetterDelegate{`0},yWorks.Option.DataBinding.ValueGetterValidityPredicate)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="getter">The getter to use.</param>
      <param name="predicate">The predicate to use.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateGetter`1.CanGet">
      <summary>
            Determines whether this instance can get the value from it's context.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Option.DataBinding.IValueGetter.GetValue"></see> can be made.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateGetter`1.GetValue">
      <summary>
            Retrieves the value from it's context.
            </summary>
      <returns>The current value.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.DelegateSetter`1">
      <summary>
            An adapter class that adapts <see cref="T:yWorks.Option.DataBinding.ValueSetterDelegate`1"></see>
            and <see cref="T:yWorks.Option.DataBinding.ValueSetterValidityPredicate"></see> to the <see cref="T:yWorks.Option.DataBinding.IValueSetter"></see>
            interface.
            </summary>
      <typeparam name="T">The type of the items to set.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateSetter`1.#ctor(yWorks.Option.DataBinding.ValueSetterDelegate{`0})">
      <summary>
            Creates a new instance.
            </summary>
      <param name="setter">The setter to use.</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateSetter`1.#ctor(yWorks.Option.DataBinding.ValueSetterDelegate{`0},yWorks.Option.DataBinding.ValueSetterValidityPredicate)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="setter">The setter to use.</param>
      <param name="predicate">The predicate to use</param>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateSetter`1.CanSet">
      <summary>
            Determines whether this instance can perform a <see cref="M:yWorks.Option.DataBinding.IValueSetter.SetValue(System.Object)"></see>.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Option.DataBinding.IValueSetter.SetValue(System.Object)"></see> would succeed.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.DelegateSetter`1.SetValue(System.Object)">
      <summary>
            Sets the new value in the context.
            </summary>
      <param name="value">The new value to set.</param>
    </member>
    <member name="T:yWorks.Option.DataBinding.GetInstanceDelegate`1">
      <summary>
            The delegate that is used by <see cref="T:yWorks.Option.DataBinding.IPropertyBuildContext`1"></see>'s
            <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.CreateChildContext``1(System.String,yWorks.Option.DataBinding.GetInstanceDelegate{``0},yWorks.Option.DataBinding.SetInstanceDelegate{``0},yWorks.Option.DataBinding.AssignmentPolicy)"></see> method.
            </summary>
      <typeparam name="T">The type of the instance that is retrieved via this getter.</typeparam>
      <returns>The value of the instance.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.IOptionBuilder">
      <summary>
            Interface for classes that can provide an <see cref="T:yWorks.Option.Handler.OptionHandler"></see> presentation of a given set of properties.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)">
      <summary>
            Adds new option items to the given <paramref name="context"></paramref>.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.IOptionBuilderContext">
      <summary>
            The interface for the context object used in <see cref="M:yWorks.Option.DataBinding.IOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.Boolean,System.String,System.Boolean)">
      <summary>
            Tries to bind an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> that has not been added to an <see cref="T:yWorks.Option.Handler.OptionHandler"></see>
            to a <see cref="T:yWorks.Option.DataBinding.IPropertyItem"></see> that is referenced by an id in the current context.
            </summary>
      <param name="item">The item to add to the optionhandler and bind to the corresponding property.</param>
      <param name="fullyQualifiedId">Whether to interpret <paramref name="id"></paramref> as a fully qualified id or not.</param>
      <param name="addToOptionHandler">Whether to add the item at its default location to 
            the context if it is bound successfully or not.</param>
      <param name="id">The id of the item in the current context, this can be a fully qualified id if <paramref name="fullyQualifiedId"></paramref> is
            set to <see langword="true"></see>.</param>
      <returns>Whether the item was successfully bound.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)">
      <summary>
            Tries to bind an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> that has not been added to an <see cref="T:yWorks.Option.Handler.OptionHandler"></see>
            to a <see cref="T:yWorks.Option.DataBinding.IPropertyItem"></see> that is referenced by an id in the current context.
            </summary>
      <param name="item">The item to add to the optionhandler and bind to the corresponding property.</param>
      <param name="localId">The local id of the item in the current context.</param>
      <returns>Whether the item was successfully bound and added.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">
      <summary>
            Creates a child builder context of this context using a provided prefix for the properties ids
            and creating a new <see cref="T:yWorks.Option.Handler.IOptionGroup"></see> in the optionhandler using <paramref name="prefix"></paramref>
            as the symbolic name.
            </summary>
      <param name="prefix">The name to use for the <see cref="T:yWorks.Option.Handler.IOptionGroup"></see> and to use for prefixing the
            property item ids. This prefix will be appended to the local prefix.</param>
      <returns>A nested child context.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilderContext.GetOptionBuilder(System.Object)">
      <summary>
            Tries to find a suitable <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the specified subject.
            </summary>
      <param name="subject">The non-<see langword="null"></see> subject to retrieve a builder instance for.</param>
      <returns>A builder instance or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionBuilderContext.GetOptionBuilder(System.Type,System.Object)">
      <summary>
            Tries to find a suitable <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the specified subject based
            on the type information.
            </summary>
      <param name="type">The type of the subject for which a builder should be returned.</param>
      <param name="subject">The possibly <see langword="null"></see> subject to retrieve a builder instance for.</param>
      <returns>A builder instance or <see langword="null"></see></returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.IOptionItemFilter`1">
      <summary>
            Interface for classes that check whether an option item should be <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.ReadWrite"></see>, <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.ReadOnly"></see> or
            <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.Invalid"></see>, based on the capabilities of the items in a given <see cref="T:yWorks.Option.DataBinding.ISelectionProvider`1"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "T:yWorks.Option.DataBinding.IOptionItemFilter`1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.IOptionItemFilter`1.CheckValidity(yWorks.Option.DataBinding.ISelectionProvider{`0})">
      <summary>
            Check whether an option item should be <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.ReadWrite"></see>, <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.ReadOnly"></see> or
            <see cref="F:yWorks.Option.DataBinding.OptionItemValidity.Invalid"></see>, based on the capabilities of the items in <paramref name="selection"></paramref>.
            </summary>
      <param name="selection">The selectiion</param>
      <returns>An enumeration value from <see cref="T:yWorks.Option.DataBinding.OptionItemValidity"></see>, depending on the items in <paramref name="selection"></paramref></returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.IPropertyBuildContext`1">
      <summary>
            The interface that is used by implementations that are passed to
            calls to <see cref="M:yWorks.Option.DataBinding.IPropertyMapBuilder.BuildPropertyMap``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})"></see>.
            </summary>
      <typeparam name="TSubject">The type of the subject the context is working on.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry(System.String,yWorks.Option.DataBinding.IValueGetter,yWorks.Option.DataBinding.IValueSetter)">
      <summary>
            Create and add a new virtual property with the given parameters
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter that is used to set the value on the property</param>
      <returns>A new virtual property</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry(System.String,yWorks.Option.DataBinding.IValueGetter,yWorks.Option.DataBinding.IValueSetter,System.Collections.IEqualityComparer)">
      <summary>
            Create and add a new virtual property with the given parameters
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter taht is used to set the value on the property</param>
      <param name="comparer">An optional comparer that is used instead of object equality for forming the composites and write back</param>
      <returns>A new virtual property</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry``1(System.String,yWorks.Option.DataBinding.ValueGetterDelegate{``0},yWorks.Option.DataBinding.ValueSetterDelegate{``0})">
      <summary>
            Create and add a new virtual property with the given parameters
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter taht is used to set the value on the property</param>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry``1(System.String,yWorks.Option.DataBinding.ValueGetterDelegate{``0},yWorks.Option.DataBinding.ValueSetterDelegate{``0})"]</p>
      </typeparam>
      <returns>A new virtual property</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry``1(System.String,yWorks.Option.DataBinding.ValueGetterDelegate{``0},yWorks.Option.DataBinding.ValueSetterDelegate{``0},System.Collections.IEqualityComparer)">
      <summary>
            Create and add a new virtual property with the given parameters
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter taht is used to set the value on the property</param>
      <param name="comparer">An optional comparer that is used instead of object equality for forming the composites and write back</param>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry``1(System.String,yWorks.Option.DataBinding.ValueGetterDelegate{``0},yWorks.Option.DataBinding.ValueSetterDelegate{``0},System.Collections.IEqualityComparer)"]</p>
      </typeparam>
      <returns>A new virtual property</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.CreateChildContext``1(System.String,yWorks.Option.DataBinding.GetInstanceDelegate{``0},yWorks.Option.DataBinding.SetInstanceDelegate{``0},yWorks.Option.DataBinding.AssignmentPolicy)">
      <summary>
            Creates a build context that can be used to recursively build the properties of a compound type.
            </summary>
      <param name="name">The name of the child context.</param>
      <param name="getHandler">The handler that retrieves the value of the property. It must use <see cref="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.CurrentInstance"></see>
            to retrieve the value if it depends on that context.</param>
      <param name="setHandler">The handler that can actually set a new instance of the property to this context.</param>
      <param name="policy">The policy the child context should use.</param>
      <typeparam name="TChild">The type of the property.</typeparam>
      <returns>A context to use for adding properties of a child of the current context.</returns>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.CurrentInstance">
      <summary>
            Retrieves the current instance the getter and setter implementations need to perform their query.
            Note that this is a dynamic instance and has be requeried each time it is needed.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.GetPropertyMapBuilder(System.Object)">
      <summary>
            Tries to retrieve a builder instance for the given subject.
            </summary>
      <param name="subject">The subject to retrieve a builder for.</param>
      <returns>A builder instance that can be used for building the properties of the provided subject or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.GetPropertyMapBuilder(System.Type,System.Object)">
      <summary>
            Tries to retrieve a builder instance for the given subject or type, e.g. if subject itself is <see langword="null"></see>.
            </summary>
      <param name="type">The type of the subject to retrieve a builder for.</param>
      <param name="subject">The subject to retrieve a builder for.</param>
      <returns>A builder instance that can be used for building the properties of the provided subject or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.Policy">
      <summary>
            Gets the policy the client requests for the building of the property map.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.SetNewInstance(`0)">
      <summary>
            Callback that is used to set a new instance for this context.
            </summary>
      <param name="newInstance">The new instance to set for this context.</param>
    </member>
    <member name="T:yWorks.Option.DataBinding.IPropertyItem">
      <summary>
            The interface used by <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see>
            to hold the entries.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyItem.EqualityComparer">
      <summary>
            Returns the comparer to use.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyItem.Getter">
      <summary>
            Returns the getter method.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyItem.Setter">
      <summary>
            Returns the setter method.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.IPropertyItemDescriptor`1">
      <summary>
            A descriptor that is used by the <see cref="T:yWorks.Option.DataBinding.ISelectionProvider`1"></see> interface.
            </summary>
      <typeparam name="T">The item of the items being described.</typeparam>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyItemDescriptor`1.Item">
      <summary>
            Returns the item whose virtual properties can be accessed via the <see cref="P:yWorks.Option.DataBinding.IPropertyItemDescriptor`1.Properties"></see>
            map.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyItemDescriptor`1.Properties">
      <summary>
            Retrieves the map of the properties for the <see cref="P:yWorks.Option.DataBinding.IPropertyItemDescriptor`1.Item"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.IPropertyMap">
      <summary>
            Interface for classes that manage a list of virtual properties for a specific context.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyMap.AddEntry(System.String,yWorks.Option.DataBinding.IValueGetter,yWorks.Option.DataBinding.IValueSetter)">
      <summary>
            Create and add a new virtual property with the given parameters to this map.
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter that is used to set the value on the property</param>
      <returns>The item that has been added to the property map.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyMap.AddEntry(System.String,yWorks.Option.DataBinding.IValueGetter,yWorks.Option.DataBinding.IValueSetter,System.Collections.IEqualityComparer)">
      <summary>
            Create and add a new virtual property with the given parameters to this map.
            </summary>
      <param name="virtualPropertyName">The name of the property</param>
      <param name="getter">The getter that is used to retrieve the value from the property</param>
      <param name="setter">The setter that is used to set the value on the property</param>
      <param name="comparer">An optional comparer that is used instead of object equality for forming the composites and write back</param>
      <returns>The item that has been added to the map.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyMap.GetEntry(System.String)">
      <summary>
            Retrieve the specified virtual property.
            </summary>
      <param name="virtualPropertyName">The virtual name of the property.</param>
      <returns>The property item with the virtual name or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.Option.DataBinding.IPropertyMap.VirtualProperties">
      <summary>
            Retrieve an anumeration of the fully qualified property names in this map (prefix+property name)
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.IPropertyMapBuilder">
      <summary>
            This is the interface that is implemented by classes that create a map of 
            named properties for a given 
            <see cref="P:yWorks.Option.DataBinding.IPropertyBuildContext`1.CurrentInstance">dynamically retrieved</see>
            instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IPropertyMapBuilder.BuildPropertyMap``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})">
      <summary>
            Populates the map of properties via the methods provided by the <paramref name="builder"></paramref>.
            </summary>
      <param name="builder">The builder to use for populating the property map.</param>
      <typeparam name="T">The type of the builder context that is passed to this method.</typeparam>
    </member>
    <member name="T:yWorks.Option.DataBinding.ISelectionProvider`1">
      <summary>
            The interface that is used by <see cref="M:yWorks.Option.Handler.OptionHandler.BuildFromSelection``1(yWorks.Option.DataBinding.ISelectionProvider{``0},yWorks.Support.IContextLookup)"></see>
            to create and populate a set of properties for a given selection.
            </summary>
      <typeparam name="T">The type of the items in the selection.</typeparam>
    </member>
    <member name="M:yWorks.Option.DataBinding.ISelectionProvider`1.BeginValueUpdate">
      <summary>
            Bracketing event call that indicates a compound update.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ISelectionProvider`1.EndValueUpdate">
      <summary>
            Bracketing event call that indicates the end of a compound update.
            </summary>
    </member>
    <member name="E:yWorks.Option.DataBinding.ISelectionProvider`1.PropertyItemsChanged">
      <summary>
            This event gets fired whenever the properties
            of the items in the properties views have been changed and should be committed to the 
            corresponding items in the selection.
            </summary>
    </member>
    <member name="E:yWorks.Option.DataBinding.ISelectionProvider`1.SelectedItemsChanged">
      <summary>
            This event gets fired whenever the content or properties
            of the items in the selection have been changed.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.ISelectionProvider`1.Selection">
      <summary>
            The current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ISelectionProvider`1.UpdatePropertyViews">
      <summary>
            This method is called to update properties views that display the properties
            of the current selection.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ISelectionProvider`1.UpdateSelectedItems">
      <summary>
            This method is called to update the currently selected items using the
            values in the properties views.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.ItemRenderingHintsAttribute">
      <summary>
            Provides rendering hints for OptionItems.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ItemRenderingHintsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.DataBinding.ItemRenderingHintsAttribute" /> class</summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.ItemRenderingHintsAttribute.DialogRenderingHints">
      <summary>
            Gets or sets <see cref="T:yWorks.Option.Editor.DefaultEditorFactory.RenderingHints"></see> for an item in a dialog view.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.ItemRenderingHintsAttribute.TableRenderingHints">
      <summary>
            Gets or sets <see cref="T:yWorks.Option.Editor.TableEditorFactory.RenderingHints"></see> for an item in a table view.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.IValueGetter">
      <summary>
            The interface that is used by <see cref="T:yWorks.Option.DataBinding.IPropertyItem"></see> to retrieve a value from a given
            context.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IValueGetter.CanGet">
      <summary>
            Determines whether this instance can get the value from it's context.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Option.DataBinding.IValueGetter.GetValue"></see> can be made.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IValueGetter.GetValue">
      <summary>
            Retrieves the value from it's context.
            </summary>
      <returns>The current value.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.IValueSetter">
      <summary>
            The interface that is used by <see cref="T:yWorks.Option.DataBinding.IPropertyItem"></see> to set a value in a given
            context.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.IValueSetter.CanSet">
      <summary>
            Determines whether this instance can perform a <see cref="M:yWorks.Option.DataBinding.IValueSetter.SetValue(System.Object)"></see>.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Option.DataBinding.IValueSetter.SetValue(System.Object)"></see> would succeed.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.IValueSetter.SetValue(System.Object)">
      <summary>
            Sets the new value in the context.
            </summary>
      <param name="value">The new value to set.</param>
    </member>
    <member name="T:yWorks.Option.DataBinding.NullableAttribute">
      <summary>
            Determines whether the annotated property may be <see langword="null"></see> during the 
            creation of an <see cref="T:yWorks.Option.DataBinding.AttributeBasedOptionBuilder">attribute based</see><see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.NullableAttribute.#ctor(System.Boolean)">
      <summary>
            Creates a new instance.
            </summary>
    </member>
    <member name="P:yWorks.Option.DataBinding.NullableAttribute.IsNullable">
      <summary>
            Whether the value may be set to <see langword="null"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.OptionBuilderAttribute">
      <summary>
            When this attribute is set to a type or property, the framework will use the given type to create a new <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.OptionBuilderAttribute.#ctor(System.Type)">
      <summary>
            Creates a new attribute that specifies that the given builder type should be used by default for the target type.
            </summary>
      <param name="optionBuilderType">The type of the builder to use.</param>
    </member>
    <member name="P:yWorks.Option.DataBinding.OptionBuilderAttribute.OptionBuilderType">
      <summary>
            Gets the type of builder to use for the attribute target.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.OptionItemValidity">
      <summary>
            Enumeration that describes the capabilities that an option item should have.
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.OptionItemValidity.Invalid">
      <summary>
            The item is invalid for the selection
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.OptionItemValidity.ReadOnly">
      <summary>
            The item should be set for the selection
            </summary>
    </member>
    <member name="F:yWorks.Option.DataBinding.OptionItemValidity.ReadWrite">
      <summary>
            The item should be set read-write for the selection
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.PropertyMapBuilderAttribute">
      <summary>
            The attribute that is used to specify the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            implementation type for a given type or property.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.PropertyMapBuilderAttribute.#ctor(System.Type)">
      <summary>
            Creates a new instance using the provided type.
            </summary>
      <param name="propertyMapBuilderType">
      </param>
    </member>
    <member name="P:yWorks.Option.DataBinding.PropertyMapBuilderAttribute.PropertyMapBuilderType">
      <summary>
            Returns the type to use for the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> implementation.
            </summary>
    </member>
    <member name="T:yWorks.Option.DataBinding.ReflectionHelper">
      <summary>
            Static helper class that retrieves <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            and <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instances for a given type via annotations.
            </summary>
    </member>
    <member name="M:yWorks.Option.DataBinding.ReflectionHelper.GetOptionBuilderFromAttribute(System.Type)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> via attributes for a given
            type.
            </summary>
      <param name="type">The type to introspect.</param>
      <returns>An instance or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Option.DataBinding.ReflectionHelper.GetPropertyBuilderFromAttribute(System.Type)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> via attributes for a given
            type.
            </summary>
      <param name="type">The type to introspect.</param>
      <returns>An instance or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.SetInstanceDelegate`1">
      <summary>
            The delegate that is used by <see cref="T:yWorks.Option.DataBinding.IPropertyBuildContext`1"></see>'s
            <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.CreateChildContext``1(System.String,yWorks.Option.DataBinding.GetInstanceDelegate{``0},yWorks.Option.DataBinding.SetInstanceDelegate{``0},yWorks.Option.DataBinding.AssignmentPolicy)"></see> method.
            </summary>
      <param name="newInstance">The new instance or value to set.</param>
      <typeparam name="T">The type of the instance that will be set via this setter.</typeparam>
    </member>
    <member name="T:yWorks.Option.DataBinding.ValueGetterDelegate`1">
      <summary>
            A typed delegate version of <see cref="T:yWorks.Option.DataBinding.IValueGetter"></see> used primarily by
            <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry``1(System.String,yWorks.Option.DataBinding.ValueGetterDelegate{``0},yWorks.Option.DataBinding.ValueSetterDelegate{``0})"></see>.
            </summary>
      <typeparam name="TValue">The type of the value to get.</typeparam>
      <returns>The value.</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.ValueGetterValidityPredicate">
      <summary>
            A typed delegate version of <see cref="T:yWorks.Option.DataBinding.IValueGetter"></see> used by
            <see cref="T:yWorks.Option.DataBinding.DelegateGetter`1"></see>.
            </summary>
      <returns>Whether a value can be "get".</returns>
    </member>
    <member name="T:yWorks.Option.DataBinding.ValueSetterDelegate`1">
      <summary>
            A delegate version of the <see cref="T:yWorks.Option.DataBinding.IValueSetter"></see> interface.
            </summary>
      <param name="value">The value to set on the context.</param>
      <typeparam name="TValue">The type of value to set.</typeparam>
    </member>
    <member name="T:yWorks.Option.DataBinding.ValueSetterValidityPredicate">
      <summary>
            A delegate version of the <see cref="T:yWorks.Option.DataBinding.IValueSetter"></see> interface.
            </summary>
      <returns>Whether setting would succeed.</returns>
    </member>
    <member name="T:yWorks.Option.Editor.ColorChooser">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.ColorChooser.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Alpha">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.AlphaProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Blue">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.BlueProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Brightness">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.BrightnessProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Color">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="E:yWorks.Option.Editor.ColorChooser.ColorChanged">
      <summary>
            Occurs when the Color property changes.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.ColorChangedEvent">
      <summary>
            Identifies the ColorChanged routed event.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.ColorProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Green">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.GreenProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Hue">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.HueProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.ColorChooser.OnColorChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Windows.Media.Color})">
      <summary>
            Raises the ColorChanged event.
            </summary>
      <param name="args">Arguments associated with the ValueChanged event.</param>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Red">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.RedProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.ColorChooser.Saturation">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.ColorChooser.SaturationProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.ColorHexConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.ColorHexConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.ColorHexConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.ColorHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.ColorHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.DefaultEditorFactory">
      <summary>
            Create a dialog representation of an <see cref="T:yWorks.Option.Handler.OptionHandler"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.DefaultEditorFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.DefaultEditorFactory" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.DefaultEditorFactory.CreateControl(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean)">
      <summary>
            Create the core control for a visual representation of an OptionHandler.
            </summary>
      <param name="oh">The OptionHandler for which to create an EditorControl.</param>
      <param name="autoAdopt">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoAdopt"></see> property.</param>
      <param name="autoCommit">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoCommit"></see> property.</param>
      <returns>An embeddable <see cref="T:yWorks.Option.Editor.EditorControl"></see> for the OptionHandler <paramref name="oh"></paramref>.</returns>
    </member>
    <member name="F:yWorks.Option.Editor.DefaultEditorFactory.RENDERING_HINTS_ATTRIBUTE">
      <summary>
            Attribute key for display-related settings that can be used on an 
            <see cref="T:yWorks.Option.Handler.IOptionItem"></see> as
            attribute key for <see cref="M:yWorks.Option.Handler.IOptionItem.SetAttribute(System.String,System.Object)"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Option.Editor.DefaultEditorFactory.RenderingHints">
      <summary>
            Enum that provides item rendering hints.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.DefaultEditorFactory.RenderingHints.Invisible">
      <summary>
            If set on an <see cref="T:yWorks.Option.Handler.IOptionGroup"></see>, the item will not be shown as a group,
            but its children will be visible as children of the item's owner. This can be used
            to enforce logical structuring of a handler without actually displaying a lot of nested groups.
            </summary>
    </member>
    <member name="T:yWorks.Option.Editor.DialogEditorControl">
      <summary>
            A specialized <see cref="T:yWorks.Option.Editor.EditorControl"></see>
            for displaying <see cref="T:yWorks.Option.Handler.OptionHandler"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.DialogEditorControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.DialogEditorControl" /> class</summary>
    </member>
    <member name="T:yWorks.Option.Editor.DoubleMultiplyConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.DoubleMultiplyConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.DoubleMultiplyConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.DoubleMultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.DoubleMultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.EditorControl">
      <summary>
            Base class for <see cref="T:System.Windows.Controls.Control"></see>s that create a GUI for
            an <see cref="P:yWorks.Option.Editor.EditorControl.OptionHandler"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.#ctor">
      <summary>
            Create a new instance that is bound to an <see cref="T:yWorks.Option.View.IModelView"></see> abstraction
            of an option handler.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.AdoptValues">
      <summary>
            Get all values from the underlying OptionHandler
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.AdoptValuesCommand">
      <summary>
            The routed command that performs the <see cref="M:yWorks.Option.Editor.EditorControl.AdoptValues"></see> action.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.CommitValues">
      <summary>
            Write back all values to the underlying OptionHandler
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.CommitValuesCommand">
      <summary>
            The routed command that performs the <see cref="M:yWorks.Option.Editor.EditorControl.CommitValues"></see> action.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.CreateView(yWorks.Option.Handler.OptionHandler)">
      <summary>
            Creates the <see cref="P:yWorks.Option.Editor.EditorControl.View"></see> for the provided <see cref="P:yWorks.Option.Editor.EditorControl.OptionHandler"></see>.
            </summary>
      <param name="forHandler">The handler to create the view for.</param>
      <returns>A view instance.</returns>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.CreateView(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean)">
      <summary>
            Helper method that creates a view for a specifice <see cref="T:yWorks.Option.Handler.OptionHandler"></see>.
            </summary>
      <param name="forHandler">The handler to create a view for.</param>
      <param name="autoAdopt">if set to <c>true</c> value changes in 
            the handler will automatically be adopted by the view.</param>
      <param name="autoCommit">if set to <c>true</c> value changes in 
            the view will automatically be committed to the handler.</param>
      <returns>A new view.</returns>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.I18NFactory">
      <summary>
            Returns the <see cref="T:yWorks.Option.I18N.I18NFactory"></see> that is currently
            in effect for the underlying handler
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.IsAutoAdopt">
      <summary>
            Controls the synchronization mode of this control for
            external changes.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.IsAutoAdoptProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoAdopt"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.IsAutoCommit">
      <summary>
            Controls the synchronization mode of this control for
            writing back the values to the OptionHandler.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.IsAutoCommitProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoCommit"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.Items">
      <summary>
            Gets the items that make up this editor.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.ItemsProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorControl.Items"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.OnOptionHandlerChanged(yWorks.Option.Handler.OptionHandler,yWorks.Option.Handler.OptionHandler)">
      <summary>
            Callback that is triggered once the <see cref="P:yWorks.Option.Editor.EditorControl.OptionHandler"></see> property changes.
            </summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.OnViewChanged(yWorks.Option.View.IModelView,yWorks.Option.View.IModelView)">
      <summary>
            Called when the <see cref="P:yWorks.Option.Editor.EditorControl.View">view</see> changed.
            </summary>
      <param name="oldView">The old view.</param>
      <param name="newView">The new view.</param>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.OptionHandler">
      <summary>
            Convenience property that will automatically create a <see cref="P:yWorks.Option.Editor.EditorControl.View"></see> for the given
            option handler.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.OptionHandlerProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorControl.OptionHandler"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.ResetItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Calls <see cref="M:yWorks.Option.View.IModelView.ResetValue(yWorks.Option.Handler.IOptionItem)"></see> on the given item.
            </summary>
      <param name="item">The item to reset the value of.</param>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.ResetItemCommand">
      <summary>
            The routed command that performs the <see cref="M:yWorks.Option.Editor.EditorControl.ResetItem(yWorks.Option.Handler.IOptionItem)"></see> action.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorControl.ResetValues">
      <summary>
            Reset all values.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.ResetValuesCommand">
      <summary>
            The routed command that performs the <see cref="M:yWorks.Option.Editor.EditorControl.ResetValues"></see> action.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.Title">
      <summary>
            Gets the title for this Control, which may appear as the window title
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorControl.View">
      <summary>
            Gets or sets the <see cref="T:yWorks.Option.View.IModelView">view</see> of an <see cref="P:yWorks.Option.Editor.EditorControl.OptionHandler"></see>.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorControl.ViewProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorControl.View"></see> property.
            </summary>
    </member>
    <member name="T:yWorks.Option.Editor.EditorFactory">
      <summary>
            Abstract base class for factories that can create visual representations of OptionHandlers
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.EditorFactory" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorFactory.CreateControl(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean)">
      <summary>
            Create the core control for a visual representation of an OptionHandler.
            </summary>
      <param name="oh">The OptionHandler for which to create an EditorControl.</param>
      <param name="autoAdopt">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoAdopt"></see> property.</param>
      <param name="autoCommit">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoCommit"></see> property.</param>
      <returns>An embeddable <see cref="T:yWorks.Option.Editor.EditorControl"></see> for the OptionHandler <paramref name="oh"></paramref>.</returns>
    </member>
    <member name="M:yWorks.Option.Editor.EditorFactory.CreateEditor(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean)">
      <summary>
            Create a complete editor that allows to edit values in an OptionHandler, together with buttons
            for applying and adopting values and canceling the editor.
            </summary>
      <param name="oh">The OptionHandler for which to create an editor.</param>
      <param name="autoAdopt">Whether the Editor should be in autoAdopt state. If <see langword="false"></see>,
            an Adopt button is shown on the form, and values that are changed externally must be explicitly
            adopted from the underlying OptionHandler <paramref name="oh"></paramref>.</param>
      <param name="autoCommit">Whether the Editor should be in autoCommit state. If <see langword="false"></see>,
            an Apply button is shown on the form, and values that are changed in the editor must be explicitly
            commited to the underlying OptionHandler <paramref name="oh"></paramref>.</param>
      <returns>A new EditorForm</returns>
    </member>
    <member name="M:yWorks.Option.Editor.EditorFactory.CreateEditor(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Create a complete editor that allows to edit values in an OptionHandler, together with buttons
            for applying and adopting values and canceling the editor.
            </summary>
      <param name="oh">The OptionHandler for which to create an editor.</param>
      <param name="autoAdopt">Whether the Editor should be in autoAdopt state. If <see langword="false"></see>,
            an Adopt button is shown on the form, and values that are changed externally must be explicitly
            adopted from the underlying OptionHandler <paramref name="oh"></paramref>.</param>
      <param name="autoCommit">Whether the Editor should be in autoCommit state. If <see langword="false"></see>,
            an Apply button is shown on the form, and values that are changed in the editor must be explicitly
            commited to the underlying OptionHandler <paramref name="oh"></paramref>.</param>
      <param name="showResetButton">Whether the "reset" button should be visible. Default is true</param>
      <returns>A new EditorForm</returns>
    </member>
    <member name="T:yWorks.Option.Editor.EditorForm">
      <summary>
            Convenience class that wraps an <see cref="P:yWorks.Option.Editor.EditorForm.EditorControl"></see> instance and adds some buttons.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.EditorControl">
      <summary>
            Get the <see cref="P:yWorks.Option.Editor.EditorForm.EditorControl"></see> that is wrapped by this form.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorForm.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.IsAutoAdopt">
      <summary>
            Return whether the Editor is in auto adopt state
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.IsAutoCommit">
      <summary>
            Return whether the Editor is in auto commit state
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.EditorForm.OnValuesAdopted(System.Object,System.EventArgs)">
      <summary>
            This method is called when values have been adopted in the form.
            </summary>
      <param name="form">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:yWorks.Option.Editor.EditorForm.OnValuesCommitted(System.Object,System.EventArgs)">
      <summary>
            This method is called when values have been committed by the form.
            </summary>
      <param name="form">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.ShowAdoptButton">
      <summary>
            Return whether the Editor should show an adopt button.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorForm.ShowAdoptButtonProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorForm.ShowAdoptButton"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.ShowApplyButton">
      <summary>
            Return whether the Editor should show an apply button for non-modal dialogs.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorForm.ShowApplyButtonProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorForm.ShowApplyButton"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.Option.Editor.EditorForm.ShowResetButton">
      <summary>
            Return whether the Editor should show a reset button.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.EditorForm.ShowResetButtonProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.Option.Editor.EditorForm.ShowResetButton"></see> property.
            </summary>
    </member>
    <member name="E:yWorks.Option.Editor.EditorForm.ValuesAdopted">
      <summary>
            This events is fired when values have been adopted by the form.
            </summary>
    </member>
    <member name="E:yWorks.Option.Editor.EditorForm.ValuesCommitted">
      <summary>
            This events is fired when values have been committed by the form.
            </summary>
    </member>
    <member name="T:yWorks.Option.Editor.HsbImageSourceConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbImageSourceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.HsbImageSourceConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.HsbRangeImageSourceConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbRangeImageSourceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.HsbRangeImageSourceConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbRangeImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.HsbRangeImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.InverseConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.InverseConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.InverseConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.InverseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.InverseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.MyThumb">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.MyThumb.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.MyThumb.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.MyThumb.X">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.MyThumb.XProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.MyThumb.Y">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.MyThumb.YProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.PopupButton">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.PopupButton.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.PopupButton" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.PopupButton.OnClick">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.Option.Editor.PopupButton.Popup">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.PopupButton.PopupProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.RgbImageSourceConverter">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.RgbImageSourceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.RgbImageSourceConverter" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.RgbImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.RgbImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.StringConvertibleOptionItemTextBox">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.Option.Editor.StringConvertibleOptionItemTextBox.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.StringConvertibleOptionItemTextBox" /> class</summary>
    </member>
    <member name="P:yWorks.Option.Editor.StringConvertibleOptionItemTextBox.OptionItem">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.Option.Editor.StringConvertibleOptionItemTextBox.OptionItemProperty">
      <summary>
      Helper field for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.Option.Editor.TableEditorControl">
      <summary>
            A specialized <see cref="T:yWorks.Option.Editor.EditorControl"></see>
            for displaying <see cref="T:yWorks.Option.Handler.OptionHandler"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.TableEditorControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.TableEditorControl" /> class</summary>
    </member>
    <member name="T:yWorks.Option.Editor.TableEditorFactory">
      <summary>
            Create a Grid like representation of an <see cref="T:yWorks.Option.Handler.OptionHandler"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.Editor.TableEditorFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Editor.TableEditorFactory" /> class</summary>
    </member>
    <member name="M:yWorks.Option.Editor.TableEditorFactory.CreateControl(yWorks.Option.Handler.OptionHandler,System.Boolean,System.Boolean)">
      <summary>
            Create the core control for a visual representation of an OptionHandler.
            </summary>
      <param name="oh">The OptionHandler for which to create an EditorControl.</param>
      <param name="autoAdopt">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoAdopt"></see> property.</param>
      <param name="autoCommit">Sets the resulting EditorControl's 
            <see cref="P:yWorks.Option.Editor.EditorControl.IsAutoCommit"></see> property.</param>
      <returns>An embeddable <see cref="T:yWorks.Option.Editor.EditorControl"></see> for the OptionHandler <paramref name="oh"></paramref>.</returns>
    </member>
    <member name="F:yWorks.Option.Editor.TableEditorFactory.RENDERING_HINTS_ATTRIBUTE">
      <summary>
            Attribute key for display-related settings that can be used on an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> as
            attribute key for <see cref="M:yWorks.Option.Handler.IOptionItem.SetAttribute(System.String,System.Object)"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Option.Editor.TableEditorFactory.RenderingHints">
      <summary>
            Defines hints that can be used to fine-tune the appearance of an item in the table view.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.TableEditorFactory.RenderingHints.None">
      <summary>
            Specifies that no hints should be applied to the item.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.TableEditorFactory.RenderingHints.Invisible">
      <summary>
            If set, the item is not displayed. If the item is a group, its children
            are moved to the group's parent.
            </summary>
    </member>
    <member name="F:yWorks.Option.Editor.TableEditorFactory.RenderingHints.Collapsed">
      <summary>
            If set, this section is shown collapsed when the table view is built.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.AttributeChangedEventArgs">
      <summary>
            Represents the change of an attribute value
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.AttributeChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
      <summary>
            Create a new instance.
            </summary>
      <param name="key">The key of the attribute that has been changed</param>
      <param name="oldValue">The old value of the attribute</param>
      <param name="newValue">The new value of the attribute</param>
    </member>
    <member name="P:yWorks.Option.Handler.AttributeChangedEventArgs.Key">
      <summary>
            Get the key of the attribute that has been changed
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.AttributeChangedEventArgs.NewValue">
      <summary>
            Get the new value of the attribute
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.AttributeChangedEventArgs.OldValue">
      <summary>
            Get the old value of the attribute
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.AttributeChangedHandler">
      <summary>
            Event handler for attribute changes
            </summary>
      <param name="source">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="T:yWorks.Option.Handler.BoolOptionItem">
      <summary>
            OptionItem for bool values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.BoolOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.BoolOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.BoolOptionItem.Type">
      <summary>
            Returns <c>typeof(double)</c></summary>
    </member>
    <member name="T:yWorks.Option.Handler.CollectionOptionItem`1">
      <summary>
            Option item that can have a list of valid entries for the item's value
            </summary>
      <typeparam name="T">The type of the entries.</typeparam>
    </member>
    <member name="M:yWorks.Option.Handler.CollectionOptionItem`1.#ctor(System.String,System.Collections.Generic.ICollection{`0})">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="domain">The list of valid values</param>
    </member>
    <member name="M:yWorks.Option.Handler.CollectionOptionItem`1.#ctor(System.String,System.Collections.Generic.ICollection{`0},System.Object)">
      <summary>
            Create a new instance with the given name.
            </summary>
      <param name="name">The name of the item</param>
      <param name="domain">The list of valid values</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.CollectionOptionItem`1.Domain">
      <summary>
            Gets the domain this item is working on.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.CollectionOptionItem`1.DOMAIN_ATTRIBUTE">
      <summary>
            If <see langword="true"></see>, values that are not in the list of valid values are rejected.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.CollectionOptionItem`1.EntryType">
      <summary>
            Gets the type of the entries.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.CollectionOptionItem`1.ITEM_TEMPLATE_DISPLAY_ATTRIBUTE">
      <summary>
            If set to an instance, a type, or a fully qualified classname of
            a <see cref="T:System.Windows.DataTemplate"></see> this one can be used to display the possible values in the UI.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.CollectionOptionItem`1.ITEM_TEMPLATE_EDIT_ATTRIBUTE">
      <summary>
            If set to an instance, a type, or a fully qualified classname of
            a <see cref="T:System.Windows.DataTemplate"></see> this one can be used to edit a value in the UI.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.CollectionOptionItem`1.Type">
      <summary>
            Always returns <c>typeof (ICollection&lt;T&gt;)</c></summary>
    </member>
    <member name="F:yWorks.Option.Handler.CollectionOptionItem`1.USE_ONLY_DOMAIN_ATTRIBUTE">
      <summary>
            If <see langword="true"></see>, values that are not in the list of valid values are rejected.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.CollectionOptionItem`1.Value">
      <summary>
            Get or set the value of this item.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.ColorOptionItem">
      <summary>
            Specialized OptionItem for Color values
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name. The initial value is set to <see cref="P:System.Windows.Media.Colors.Transparent"></see></summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance with the given name. The initial value is set to <see cref="P:System.Windows.Media.Colors.Transparent"></see></summary>
      <param name="name">The name of the item</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.#ctor(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.GetStringValue">
      <summary>
            Returns the current value of the item as string
            </summary>
      <returns>Returns the current value of the item as string</returns>
    </member>
    <member name="M:yWorks.Option.Handler.ColorOptionItem.GetValueFromNode(System.Xml.XmlElement)">
      <summary>
            Gets the current value of the item from the given XML node
             </summary>
      <param name="value">The XML node that contains the elements value</param>
      <returns>The current value of the item as stored in <paramref name="value"></paramref></returns>
    </member>
    <member name="T:yWorks.Option.Handler.DoubleOptionItem">
      <summary>
            OptionItem for double values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.DoubleOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.DoubleOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.DoubleOptionItem.Type">
      <summary>
            Returns <c>typeof(double)</c></summary>
    </member>
    <member name="T:yWorks.Option.Handler.FloatOptionItem">
      <summary>
            OptionItem for float values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.FloatOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.FloatOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.FloatOptionItem.Type">
      <summary>
            Returns <c>typeof(double)</c></summary>
    </member>
    <member name="T:yWorks.Option.Handler.GenericOptionItem`1">
      <summary>
            This class is a quick'n'dirty hack to create option handlers with specific type constraints.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "T:yWorks.Option.Handler.GenericOptionItem`1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.#ctor(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.GetStringValue">
      <summary>
            Returns the current value of the item as string
            </summary>
      <returns>Returns the current value of the item as string</returns>
    </member>
    <member name="M:yWorks.Option.Handler.GenericOptionItem`1.GetValueFromNode(System.Xml.XmlElement)">
      <summary>
            Gets the current value of the item from the given XML node
             </summary>
      <param name="value">The XML node that contains the elements value</param>
      <returns>The current value of the item as stored in <paramref name="value"></paramref></returns>
    </member>
    <member name="P:yWorks.Option.Handler.GenericOptionItem`1.Type">
      <summary>
            Always returns <typeparamref name="T"></typeparamref>.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.IntOptionItem">
      <summary>
            OptionItem for int values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IntOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.IntOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.IntOptionItem.Type">
      <summary>
            Returns <c>typeof(double)</c></summary>
    </member>
    <member name="T:yWorks.Option.Handler.IOptionGroup">
      <summary>
            interface for all classes that support the nesting of IOptionItems
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionGroup.AddOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Add a new <see cref="T:yWorks.Option.Handler.IOptionItem"></see> to this group
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionGroup.Clear">
      <summary>
            Clear the list of all children
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionGroup.Count">
      <summary>
            Return the number of children.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionGroup.GetItemByName(System.String)">
      <summary>
            Retrieve an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> instance from nested groups.
            </summary>
      <param name="itemPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionGroup.Item(System.String)">
      <summary>
            Retrieve the child item with name <paramref name="index"></paramref></summary>
      <param name="index">The name of the item to find</param>
      <returns>the child item with name <paramref name="index"></paramref>, or <see langword="null"></see>
            if nno such child exists.</returns>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionGroup.Items">
      <summary>
            Return a readonly list of all children
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionGroup.RemoveOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Remove the specified child.
            </summary>
      <param name="item">The child to remove</param>
    </member>
    <member name="T:yWorks.Option.Handler.IOptionItem">
      <summary>
            This implements the basic interface for an atomic item in an <see cref="T:yWorks.Option.Handler.OptionHandler"></see></summary>
    </member>
    <member name="E:yWorks.Option.Handler.IOptionItem.AttributeChanged">
      <summary>
            This event should be fired whenever an attribute value has been changed.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionItem.Enabled">
      <summary>
            Get or set whether this item is enabled or not.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.GetAttribute(System.String)">
      <summary>
            Get the value of an attribute
            </summary>
      <param name="key">The attribute key for which to get a value.</param>
      <returns>The value for the attribute</returns>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.GetAttributeKeys">
      <summary>
            Return a readonly List of all attribute keys currently set for this item.
            </summary>
      <returns>Readlonly list of keys</returns>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionItem.Name">
      <summary>
            Get the canonical name for this item, which will be used for i18n lookups and
            item identification
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionItem.Owner">
      <summary>
            Get or set the owning group of an item
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.RestoreState(System.Xml.XmlElement)">
      <summary>
            Reads the state from the children of the given XML element
            </summary>
      <param name="elem">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.SaveState(System.Xml.XmlElement)">
      <summary>
            Writes the state as child nodes of the given XML element
            </summary>
      <param name="parent">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.SetAttribute(System.String,System.Object)">
      <summary>
            Set the value of an attribute.
            </summary>
      <param name="key">The attribute key for which to set a value.</param>
      <param name="value">The value for the attribute</param>
    </member>
    <member name="M:yWorks.Option.Handler.IOptionItem.SetLookup(System.Type,System.Object)">
      <summary>
            Adds an element to the internal item's lookup
            </summary>
      <param name="t">The type of the element</param>
      <param name="impl">an implementation for <paramref name="t"></paramref></param>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionItem.Type">
      <summary>
            The actual type that this item can contain.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.IOptionItem.Value">
      <summary>
            The actual value that is currently stored in this item.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.OptionGroup">
      <summary>
            Used to classify option items into groups.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.#ctor(System.String)">
      <summary>
            Create new instance with the given <paramref name="name"></paramref> and no children.
            </summary>
      <param name="name">The name of the group</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddBool(System.String,System.Boolean)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.BoolOptionItem"></see> to this group
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.BoolOptionItem"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddColor(System.String,System.Windows.Media.Color)">
      <summary>
            Convenience method to add a OptionItem for <see cref="T:System.Windows.Media.Color"></see> values to this handler
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.GenericOptionItem`1"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddDouble(System.String,System.Double)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.DoubleOptionItem"></see> to this group
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.DoubleOptionItem"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddGeneric``1(System.String,``0)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.GenericOptionItem`1"></see> to this handler
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Option.Handler.OptionGroup.AddGeneric``1(System.String,``0)"]</p>
      </typeparam>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.GenericOptionItem`1"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddGroup(System.String)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.OptionGroup"></see> to this handler
            </summary>
      <param name="name">The name of the group where this item belongs to. If 
            <see langword="null"></see>, the item is added directly to the handler itself.</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.OptionGroup"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddInt(System.String,System.Int32)">
      <summary>
            Convenience method to add an <see cref="T:yWorks.Option.Handler.IntOptionItem"></see> to this group
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.IntOptionItem"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddList``1(System.String,System.Collections.Generic.ICollection{``0},``0)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.CollectionOptionItem`1"></see> to this group
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="domain">List of initial values for this item.</param>
      <param name="initialValue">The initial value of the item</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Option.Handler.OptionGroup.AddList``1(System.String,System.Collections.Generic.ICollection{``0},``0)"]</p>
      </typeparam>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.CollectionOptionItem`1"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Add a new <see cref="T:yWorks.Option.Handler.IOptionItem"></see> to this group
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.AddString(System.String,System.String)">
      <summary>
            Convenience method to add a <see cref="T:yWorks.Option.Handler.StringOptionItem"></see> to this group
            </summary>
      <param name="itemName">The name of the item</param>
      <param name="initialValue">The initial value of the item</param>
      <returns>A new instance of <see cref="T:yWorks.Option.Handler.StringOptionItem"></see></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.Clear">
      <summary>
            Clear the list of all children
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionGroup.Count">
      <summary>
            Return the number of children.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetGroupByName(System.String)">
      <summary>
            Retrieve an <see cref="T:yWorks.Option.Handler.OptionGroup"></see> instance from nested groups.
            </summary>
      <param name="groupPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetItemByName(System.String)">
      <summary>
            Retrieve an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> instance from nested groups.
            </summary>
      <param name="itemPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetStringValue">
      <summary>
            Returns the current value of the item as string
            </summary>
      <returns>Returns the current value of the item as string</returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetValue(System.String)">
      <summary>
            Get the value of an item, given it's canonical path.
            </summary>
      <param name="itemPath">
      </param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetValue(System.String,System.String)">
      <summary>
            Get the value of an item, given it's canonical path without the item's name and item name.
            </summary>
      <param name="itemPath">the canonical path without the item's name</param>
      <param name="itemName">The name of the item.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.GetValueFromNode(System.Xml.XmlElement)">
      <summary>
            Gets the current value of the item from the given XML node
             </summary>
      <param name="value">The XML node that contains the elements value</param>
      <returns>The current value of the item as stored in <paramref name="value"></paramref></returns>
    </member>
    <member name="P:yWorks.Option.Handler.OptionGroup.Item(System.String)">
      <summary>
            Retrieve the child item with name <paramref name="index"></paramref></summary>
      <param name="index">The name of the item to find</param>
      <returns>the child item with name <paramref name="index"></paramref>, or <see langword="null"></see>
            if nno such child exists.</returns>
    </member>
    <member name="P:yWorks.Option.Handler.OptionGroup.Items">
      <summary>
            Return a readonly list of all children
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.ReadStateFromItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Callback method that can be used to copy the state and value from an existing option item
            to this instance.
            </summary>
      <param name="savedItem">The existing instance to be used as reference.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.RemoveOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Remove the specified child.
            </summary>
      <param name="item">The child to remove</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.RestoreState(System.Xml.XmlElement)">
      <summary>
            Reads the state from the children of the given XML element
            </summary>
      <param name="elem">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.SaveState(System.Xml.XmlElement)">
      <summary>
            Writes the state as child nodes of the given XML element
            </summary>
      <param name="parent">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionGroup.SetValue(System.String,System.Object)">
      <summary>
            Set the value of an nested item, given it's canonical path.
            </summary>
      <param name="itemPath">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="P:yWorks.Option.Handler.OptionGroup.Type">
      <summary>
            Always returns <c>typeof(IList&lt;IOptionItem&gt;)</c></summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionGroup.Value">
      <summary>
            Get or set the value of this item.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.OptionHandler">
      <summary>
            This class can be used to manage settings and options that belong together
            with a consistent interface.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.#ctor(System.String)">
      <summary>
            Creates a new option handler.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.AddOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Add a new <see cref="T:yWorks.Option.Handler.IOptionItem"></see> to this group
            </summary>
      <param name="item">
      </param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.BuildFromSelection``1(yWorks.Option.DataBinding.ISelectionProvider{``0},yWorks.Support.IContextLookup)">
      <summary>
            Populates this instance from scratch using a provided selection provider.
            </summary>
      <param name="selectionProvider">
      </param>
      <param name="contextLookup">The lookup tunnel through to the created
            <see cref="T:yWorks.Option.DataBinding.IOptionBuilderContext"></see> that will be used to query the <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see>
            instances for recursive sets of properties.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.Option.Handler.OptionHandler.BuildFromSelection``1(yWorks.Option.DataBinding.ISelectionProvider{``0},yWorks.Support.IContextLookup)"]</p>
      </typeparam>
    </member>
    <member name="E:yWorks.Option.Handler.OptionHandler.ContentChanged"></member>
    <member name="M:yWorks.Option.Handler.OptionHandler.EndContentChange">
      <summary>
            EventBracketing method for content changes.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionHandler.Groups">
      <summary>
            Return a <b>read-only</b> list of all contained option groups
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionHandler.I18nFactory">
      <summary>
            Gets or sets an <see cref="T:yWorks.Option.I18N.I18NFactory"></see> instance that can be
            used for localization of various string values such as item names, tooltips,
            button labels, etc.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionHandler.IsUpdating">
      <summary>
            Returns whether the handler is currently updating its structure.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.ReadState(yWorks.Option.Handler.OptionHandler)">
      <summary>
            Restore a complete state from an existing option handler instance
            </summary>
      <param name="backupHandler">
      </param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.RemoveOptionItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Remove the specified child.
            </summary>
      <param name="item">The child to remove</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionHandler.StartContentChange">
      <summary>
            EventBracketing method for content changes.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.OptionItem">
      <summary>
            Abstract implementation of interface <see cref="T:yWorks.Option.Handler.OptionItem"></see> that handles general objects.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.#ctor(System.String)">
      <summary>
            Create new ObjectOptionItem with given name and no initial value set.
            </summary>
      <param name="name">The canonical (non-localized) name of the option</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create new ObjectOptionItem with given name and no initial value set.
            </summary>
      <param name="name">The canonical (non-localized) name of the option</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create new ObjectOptionItem with given name and initial value.
            </summary>
      <param name="name">The canonical (non-localized) name of the option</param>
      <param name="initialValue">The initial value for this item.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.#ctor(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create new ObjectOptionItem with given name and initial value.
            </summary>
      <param name="name">The canonical (non-localized) name of the option</param>
      <param name="initialValue">The initial value for this item.</param>
      <param name="attributes">An optional map of attributes for the item</param>
    </member>
    <member name="E:yWorks.Option.Handler.OptionItem.AttributeChanged">
      <summary>
            This event should be fired whenever an attribute value has been changed.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.CUSTOM_CONVERTER_ATTRIBUTE">
      <summary>
            Allows to specify an alternative <see cref="T:System.ComponentModel.TypeConverter"></see> for UI editors.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.CUSTOM_DIALOGITEM_EDITOR">
      <summary>
            Allows to specify an alternative <see cref="T:System.Windows.DataTemplate"></see> for UI editors in
            a dialog like view.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.CUSTOM_I18N_PREFIX">
      <summary>
            Allows to specify an alternative internationalization prefix for the localization of this item.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.CUSTOM_TABLEITEM_EDITOR">
      <summary>
            Allows to specify an alternative <see cref="T:System.Windows.DataTemplate"></see> for UI editors in
            a table editor like view.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.DESCRIPTION_ATTRIBUTE">
      <summary>
            An optional string that can be used as the description in a 
            view.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.DISPLAYNAME_ATTRIBUTE">
      <summary>
            An alternative label for UI editors that will be used instead of the name.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionItem.Enabled">
      <summary>
            Get or set whether this item is enabled or not.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.GetAttribute(System.String)">
      <summary>
            Get the value of an attribute
            </summary>
      <param name="key">The attribute key for which to get a value.</param>
      <returns>The value for the attribute</returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.GetAttributeKeys">
      <summary>
            Return a readonly List of all attribute keys currently set for this item.
            </summary>
      <returns>Readlonly list of keys</returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.GetStringValue">
      <summary>
            Returns the current value of the item as string
            </summary>
      <returns>Returns the current value of the item as string</returns>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.GetValueFromNode(System.Xml.XmlElement)">
      <summary>
            Gets the current value of the item from the given XML node
             </summary>
      <param name="value">The XML node that contains the elements value</param>
      <returns>The current value of the item as stored in <paramref name="value"></paramref></returns>
    </member>
    <member name="P:yWorks.Option.Handler.OptionItem.IsUndefined">
      <summary>
            Convenience method that allows to check whether an OptionItem has an undefined Value
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.ITEM_TEMPLATE_ATTRIBUTE">
      <summary>
            Allows to specify an alternative <see cref="T:System.Windows.DataTemplate"></see> for the content
            of editors in the views.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.Option.Handler.OptionItem.Name">
      <summary>
            Get the canonical name for this item, which will be used for i18n lookups and
            item identification
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.NULL_VALUE_OBJECT">
      <summary>
            Allows to specify an alternative object that plays the role of <see langword="null"></see> e.g. for value types.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.NULL_VALUE_STRING_ATTRIBUTE">
      <summary>
            A custom representation string for <see langword="null"></see> values in UI editors.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.OnAttributeChanged(System.String,System.Object,System.Object)">
      <summary>
            Raises the <see cref="E:yWorks.Option.Handler.OptionItem.AttributeChanged"></see> event
            </summary>
      <param name="key">The key to the attribute.</param>
      <param name="oldValue">The old value</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.Option.Handler.OptionItem.PropertyChanged"></see> event.
            </summary>
      <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.OnValueChanged(yWorks.Option.Handler.OptionItem,System.Object,System.Object)"></member>
    <member name="P:yWorks.Option.Handler.OptionItem.Owner">
      <summary>
            Get or set the owning group of an item
            </summary>
    </member>
    <member name="E:yWorks.Option.Handler.OptionItem.PropertyChanged">
      <summary>
            This event gets fired (only) whenever the <see cref="P:yWorks.Option.Handler.OptionItem.Value"></see> property is changed.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.ReadStateFromItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Callback method that can be used to copy the state and value from an existing option item
            to this instance.
            </summary>
      <param name="savedItem">The existing instance to be used as reference.</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.RestoreState(System.Xml.XmlElement)">
      <summary>
            Reads the state from the children of the given XML element
            </summary>
      <param name="elem">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.SaveState(System.Xml.XmlElement)">
      <summary>
            Writes the state as child nodes of the given XML element
            </summary>
      <param name="parent">the parent element of the serialization structure</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.SetAttribute(System.String,System.Object)">
      <summary>
            Set the value of an attribute.
            </summary>
      <param name="key">The attribute key for which to set a value.</param>
      <param name="value">The value for the attribute</param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.SetLookup(System.Type,System.Object)">
      <summary>
            Adds an element to the internal item's lookup
            </summary>
      <param name="t">The type of the element</param>
      <param name="impl">an implementation for <paramref name="t"></paramref></param>
    </member>
    <member name="M:yWorks.Option.Handler.OptionItem.SetUndefined">
      <summary>
            Convenience method to set the item state to an undefined value.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.SUPPORT_NULL_VALUE_ATTRIBUTE">
      <summary>
            Attribute key that controls this option item supports the "no value" concept. 
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.SUPPORT_UNDEFINED_VALUE_ATTRIBUTE">
      <summary>
            Attribute key that controls this option item supports the "undefined value" concept. 
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionItem.Type">
      <summary>
            The actual type that this item can contain.
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionItem.Value">
      <summary>
            Get or set the value of this item.
            </summary>
    </member>
    <member name="F:yWorks.Option.Handler.OptionItem.VALUE_UNDEFINED">
      <summary>
            Singleton instance for a object that marks an <c>undefined</c> value.
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.OptionValueChangedEventArgs">
      <summary>
            Represents the value change of an <see cref="T:yWorks.Option.Handler.IOptionItem"></see></summary>
    </member>
    <member name="M:yWorks.Option.Handler.OptionValueChangedEventArgs.#ctor(System.String,System.Object,System.Object,System.Boolean)">
      <summary>
            Create a new instance
            </summary>
      <param name="propertyName">The <see cref="P:yWorks.Option.Handler.IOptionItem.Name"></see> 
            of the item that has been changed</param>
      <param name="oldValue">The old value of the item that has been changed</param>
      <param name="newValue">The new value of the item that has been changed</param>
      <param name="undefined">
        <see langword="true">
        </see> iff the item is in undefined state now</param>
    </member>
    <member name="P:yWorks.Option.Handler.OptionValueChangedEventArgs.IsUndefined">
      <summary>
            Return <see langword="true"></see> iff the item is in undefined state now
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionValueChangedEventArgs.NewValue">
      <summary>
            Get the new value of the item that has been changed
            </summary>
    </member>
    <member name="P:yWorks.Option.Handler.OptionValueChangedEventArgs.OldValue">
      <summary>
            Get the old value of the item that has been changed
            </summary>
    </member>
    <member name="T:yWorks.Option.Handler.StringOptionItem">
      <summary>
            OptionItem for string values.
            </summary>
    </member>
    <member name="M:yWorks.Option.Handler.StringOptionItem.#ctor(System.String)">
      <summary>
            Create a new instance with the given name and an undefined initial value.
            </summary>
      <param name="name">The name of the item</param>
    </member>
    <member name="M:yWorks.Option.Handler.StringOptionItem.#ctor(System.String,System.Object)">
      <summary>
            Create a new instance with the given name and the specified initial value.
            </summary>
      <param name="name">The name of the item</param>
      <param name="value">The initial value for this item</param>
    </member>
    <member name="P:yWorks.Option.Handler.StringOptionItem.Type">
      <summary>
            Returns <c>typeof(double)</c></summary>
    </member>
    <member name="T:yWorks.Option.Handler.StructureChangedHandler">
      <summary>
            Event handler for strucure change events
            </summary>
      <param name="source">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:yWorks.Option.Handler.StructureChangeEventArgs">
      <summary>
            Specialized EventArgs for use with a <see cref="T:yWorks.Option.Handler.StructureChangedHandler"></see></summary>
    </member>
    <member name="M:yWorks.Option.Handler.StructureChangeEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Option.Handler.StructureChangeEventArgs" /> class</summary>
    </member>
    <member name="T:yWorks.Option.I18N.I18NFactory">
      <summary>
            Interface for classes that support localization of OptionHandler components.
            </summary>
    </member>
    <member name="M:yWorks.Option.I18N.I18NFactory.GetString(System.String,System.String)">
      <summary>
            Return the localized string for the given <paramref name="key"></paramref> in the
            specified <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context where the localization is searched. This allows
            for duplicate <paramref name="key"></paramref> values in different contexts</param>
      <param name="key">The key value for which a localization is needed.</param>
      <returns>A localized string for the given <paramref name="key"></paramref></returns>
    </member>
    <member name="T:yWorks.Option.I18N.ResourceManagerI18NFactory">
      <summary>
            Wraps a .NET <see cref="T:System.Resources.ResourceManager"></see> into a <see cref="T:yWorks.Option.I18N.I18NFactory"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.Option.I18N.ResourceManagerI18NFactory.#ctor">
      <summary>
            Create a new factory.
            </summary>
    </member>
    <member name="M:yWorks.Option.I18N.ResourceManagerI18NFactory.AddResourceManager(System.String,System.Resources.ResourceManager)">
      <summary>
            Add a ResourceManager to the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context where this ResourceManager is bound to. Typically
            the name of an OptionHandler for which the ResourceManaer is responsible</param>
      <param name="manager">The new resource manager</param>
    </member>
    <member name="M:yWorks.Option.I18N.ResourceManagerI18NFactory.GetString(System.String,System.String)">
      <summary>
            Return the localized string for the given <paramref name="key"></paramref> in the
            specified <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context where the localization is searched. This allows
            for duplicate <paramref name="key"></paramref> values in different contexts</param>
      <param name="key">The key value for which a localization is needed.</param>
      <returns>A localized string for the given <paramref name="key"></paramref></returns>
    </member>
    <member name="T:yWorks.Option.View.IModelView">
      <summary>
            Interface for classes that present a specialized view on an OptionHandler.
            </summary>
    </member>
    <member name="M:yWorks.Option.View.IModelView.AdoptValues">
      <summary>
            Adopt values from the underlying OptionHandler.
            </summary>
    </member>
    <member name="M:yWorks.Option.View.IModelView.CommitValues">
      <summary>
            Propagate all values to the underlying OptionHandler
            </summary>
    </member>
    <member name="M:yWorks.Option.View.IModelView.GetViewItem(yWorks.Option.Handler.IOptionItem)">
      <summary>
            Get the structural item that corresponds to <paramref name="item"></paramref> in the original
            option handler.
            </summary>
      <param name="item">The item in the original option handler.</param>
      <returns>the structural item that corresponds to <paramref name="item"></paramref></returns>
    </member>
    <member name="P:yWorks.Option.View.IModelView.Handler">
      <summary>
            Return the <see cref="T:yWorks.Option.Handler.OptionHandler"></see> instance where this view is currently registered.
            </summary>
    </member>
    <member name="P:yWorks.Option.View.IModelView.IsAutoAdopt">
      <summary>
            Enable or disable automatic value adoption from the underlying OptionHandler
            </summary>
    </member>
    <member name="P:yWorks.Option.View.IModelView.IsAutoCommit">
      <summary>
            Enable or disable automatic value propagation to the underlying OptionHandler
            </summary>
    </member>
    <member name="M:yWorks.Option.View.IModelView.ResetValue(yWorks.Option.Handler.IOptionItem)">
      <summary>
            This method resets the value of the provided item to a backup value.
            </summary>
    </member>
    <member name="M:yWorks.Option.View.IModelView.ResetValues">
      <summary>
            This method resets all values of a view to a backup value.
            </summary>
    </member>
    <member name="T:yWorks.Support.AbstractContextLookupChainLink">
      <summary>
            Abstract base class that simplifies the implementation of <see cref="T:yWorks.Support.IContextLookupChainLink"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.AbstractContextLookupChainLink.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.AbstractContextLookupChainLink" /> class</summary>
    </member>
    <member name="M:yWorks.Support.AbstractContextLookupChainLink.Lookup(System.Object,System.Type)">
      <summary>
            Returns the result of a query to the next lookup chain element.
            </summary>
      <param name="item">the item to lookup a type for</param>
      <param name="type">the type to look up</param>
      <returns>
            an implementation or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.Support.AbstractContextLookupChainLink.SetNext(yWorks.Support.IContextLookup)">
      <summary>
            This method is called by the framework to register the fallback lookup implementation
            that will be used during a call to <c>base.</c><see cref="M:yWorks.Support.AbstractContextLookupChainLink.Lookup(System.Object,System.Type)"></see>.
            </summary>
      <param name="next">The context to use as a fallback.</param>
    </member>
    <member name="T:yWorks.Support.AbstractUndoUnit">
      <summary>
            An abstract base implementation of <see cref="T:yWorks.Support.IUndoUnit"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.#ctor(System.String)">
      <summary>
            Creates a new instance using the given name as undo and redo name.
            </summary>
      <param name="undoName">The undo and redo name.</param>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance using the given name as undo and redo name.
            </summary>
      <param name="undoName">The undo name.</param>
      <param name="redoName">The redo name.</param>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Allows for collapsing multiple units into one.
            </summary>
      <param name="unit">The unit to incorporate that happened after this unit.</param>
      <returns>Whether the state change of <paramref name="unit"></paramref> has been incorporated into this
            unit and <c>unit</c> can be disposed of.</returns>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.CanRedo">
      <summary>
            Determines whether this instance can currently <see cref="M:yWorks.Support.IUndoUnit.Redo"></see> its work.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Support.IUndoUnit.Redo"></see> will succeed.</returns>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.CanUndo">
      <summary>
            Determines whether this instance can currently <see cref="M:yWorks.Support.IUndoUnit.Undo"></see> its work.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Support.IUndoUnit.Undo"></see> will succeed.</returns>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.Redo">
      <summary>
            Redoes the change that is represented by this unit.
            </summary>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.RedoImpl">
      <summary>
            Actually redoes the operation.
            </summary>
    </member>
    <member name="P:yWorks.Support.AbstractUndoUnit.RedoName">
      <summary>
            Returns the name of the redo unit.
            </summary>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.ReplaceUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Allows for collapsing multiple units into one.
            </summary>
      <param name="unit">The unit to incorporate that happened before this unit.</param>
      <returns>Whether the state change of <paramref name="unit"></paramref> has been incorporated into this
            unit and <c>unit</c> can be disposed of.</returns>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.Undo">
      <summary>
            Undoes the change that is represented by this unit.
            </summary>
    </member>
    <member name="M:yWorks.Support.AbstractUndoUnit.UndoImpl">
      <summary>
            Actuall undoes the operation.
            </summary>
    </member>
    <member name="P:yWorks.Support.AbstractUndoUnit.UndoName">
      <summary>
            Returns the name of the undo unit.
            </summary>
    </member>
    <member name="T:yWorks.Support.CallbackLookup">
      <summary>
            Utility class that implements the <see cref="T:yWorks.Support.ILookup"></see> interface
            by delegating to a <see cref="T:yWorks.Support.LookupCallback"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.Support.CallbackLookup.#ctor(yWorks.Support.LookupCallback)">
      <summary>
            Creates this instance using a <see langword="null"></see><see cref="P:yWorks.Support.CallbackLookup.Subject"></see> and specifies the <see cref="P:yWorks.Support.CallbackLookup.Handler"></see>.
            </summary>
      <param name="handler">The handler to use for <see cref="M:yWorks.Support.CallbackLookup.Lookup(System.Type)"></see> calls.</param>
    </member>
    <member name="M:yWorks.Support.CallbackLookup.#ctor(yWorks.Support.LookupCallback,System.Object)">
      <summary>
            Creates this instance using the specified <see cref="P:yWorks.Support.CallbackLookup.Handler"></see> and <see cref="P:yWorks.Support.CallbackLookup.Subject"></see>.
            </summary>
      <param name="subject">The subject to use for <see cref="T:yWorks.Support.LookupCallback"></see> calls.</param>
      <param name="handler">The handler to use for <see cref="M:yWorks.Support.CallbackLookup.Lookup(System.Type)"></see> calls.</param>
    </member>
    <member name="P:yWorks.Support.CallbackLookup.Handler">
      <summary>
            Gets or sets the actual callback implementation.
            </summary>
    </member>
    <member name="M:yWorks.Support.CallbackLookup.Lookup(System.Type)">
      <summary>
            Performst the actual <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> operation.
            </summary>
      <param name="type">The type to query</param>
      <returns>The result of the query or <see langword="null"></see> if the handler is <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.Support.CallbackLookup.Subject">
      <summary>
            Gets or sets the subject to use for <see cref="T:yWorks.Support.LookupCallback"></see> calls.
            </summary>
    </member>
    <member name="T:yWorks.Support.CastingEnumerable`2">
      <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that casts items.
            </summary>
      <typeparam name="R">The type of the enumerable to cast.</typeparam>
      <typeparam name="T">The type of this enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.CastingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new instance wrapping the provided one.
            </summary>
      <param name="wrapped">The instance to wrap.</param>
    </member>
    <member name="M:yWorks.Support.CastingEnumerable`2.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:yWorks.Support.CastingEnumerator`2">
      <summary>
            A wrapping implementation of an <see cref="T:System.Collections.Generic.IEnumerator`1"></see>
            that upcasts elements from a given enumerator to
            another one.
            </summary>
      <typeparam name="R">The type of the elements in the enumerator to be wrapped.</typeparam>
      <typeparam name="T">The type of the elements in this enumerator.</typeparam>
    </member>
    <member name="M:yWorks.Support.CastingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0})">
      <summary>
            Creates a new instance wrapping the provided one.
            </summary>
      <param name="enumerator">The enumerator to wrap.</param>
    </member>
    <member name="P:yWorks.Support.CastingEnumerator`2.Current">
      <summary>
                    Gets the element in the collection at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:yWorks.Support.CastingEnumerator`2.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.CastingEnumerator`2.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:yWorks.Support.CastingEnumerator`2.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:yWorks.Support.CompositeCollectionModel`1">
      <summary>
            A <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see> implementation that is the composite of two
            models of the same type.
            </summary>
      <typeparam name="T">The type of the models.</typeparam>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.#ctor(yWorks.Canvas.Model.ICollectionModel{`0},yWorks.Canvas.Model.ICollectionModel{`0})">
      <summary>
            Creates a new instance using the two provided collection models.
            </summary>
      <param name="collection1">The first collection.</param>
      <param name="collection2">The second collection.</param>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.CompositeCollectionModel`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.GetEnumerator"></member>
    <member name="P:yWorks.Support.CompositeCollectionModel`1.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`1.ItemAdded">
      <summary>
            An event that will be triggered if an item has been added to this collection.
            </summary>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`1.ItemChanged">
      <summary>
            An event that will be triggered if an item in this collection has changed significantly.
            </summary>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`1.ItemRemoved">
      <summary>
            An event that will be triggered if an item has been removed from this collection.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`1.Remove(`0)">
      <summary>
            Not supported by this read only model.
            </summary>
    </member>
    <member name="T:yWorks.Support.CompositeCollectionModel`3">
      <summary>
            A <see cref="T:yWorks.Canvas.Model.ICollectionModel`1"></see> implementation that is the composite of two
            models.
            </summary>
      <typeparam name="T">The type of this model.</typeparam>
      <typeparam name="R">The type of the first model.</typeparam>
      <typeparam name="S">The type of the second model.</typeparam>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.#ctor(yWorks.Canvas.Model.ICollectionModel{`1},yWorks.Canvas.Model.ICollectionModel{`2})">
      <summary>
            Creates a new instance using the two provided collection models.
            </summary>
      <param name="collection1">The first collection.</param>
      <param name="collection2">The second collection.</param>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.CompositeCollectionModel`3.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.GetEnumerator"></member>
    <member name="P:yWorks.Support.CompositeCollectionModel`3.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`3.ItemAdded">
      <summary>
            An event that will be triggered if an item has been added to this collection.
            </summary>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`3.ItemChanged">
      <summary>
            An event that will be triggered if an item in this collection has changed significantly.
            </summary>
    </member>
    <member name="E:yWorks.Support.CompositeCollectionModel`3.ItemRemoved">
      <summary>
            An event that will be triggered if an item has been removed from this collection.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompositeCollectionModel`3.Remove(`0)">
      <summary>
            Not supported by this read only model.
            </summary>
    </member>
    <member name="T:yWorks.Support.CompositeEnumerable`3">
      <summary>
            A composite enumerable that enumerates two given enumerables one after the other.
            </summary>
      <typeparam name="T">The type of this enumerator.</typeparam>
      <typeparam name="R">The type of the items in the first enumerable.</typeparam>
      <typeparam name="S">The type of the items in the second enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerable`3.#ctor(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
      <summary>
            Creates an instance that is a composite of the given two instances.
            </summary>
      <param name="first">The first one.</param>
      <param name="second">The second one.</param>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerable`3.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="T:yWorks.Support.CompositeEnumerator`3">
      <summary>
            A composite enumerator that enumerates two given enumerators one after the other.
            </summary>
      <typeparam name="T">The type of this enumerator.</typeparam>
      <typeparam name="R">The type of the items in the first enumeration.</typeparam>
      <typeparam name="S">The type of the items in the second enumeration.</typeparam>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerator`3.#ctor(System.Collections.Generic.IEnumerator{`1},System.Collections.Generic.IEnumerator{`2})">
      <summary>
            Creates an instance that enumerates over <paramref name="first"></paramref> and <paramref name="second"></paramref>.
            </summary>
      <param name="first">The first enumerator.</param>
      <param name="second">The second enumerator.</param>
    </member>
    <member name="P:yWorks.Support.CompositeEnumerator`3.Current">
      <summary>
                    Gets the current element in the collection.
                </summary>
      <returns>
                    The current element in the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element.
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerator`3.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerator`3.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:yWorks.Support.CompositeEnumerator`3.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:yWorks.Support.CompoundUndoUnit">
      <summary>
            A generic support class that can manage <see cref="T:yWorks.Support.IUndoUnit"></see> instances
            to support undoability.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.#ctor">
      <summary>
            Creates a new instance with null names.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance using the provided names.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Adds a new <see cref="T:yWorks.Support.IUndoUnit"></see> to the queue.
            </summary>
      <param name="unit">The unit of work to add.</param>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.CanRedo">
      <summary>
            Determines whether a call to <see cref="M:yWorks.Support.CompoundUndoUnit.Redo"></see> can be made.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.CanUndo">
      <summary>
            Determines whether a call to <see cref="M:yWorks.Support.CompoundUndoUnit.Undo"></see> can be made.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.Clear">
      <summary>
            Clears the internal collection of units.
            </summary>
    </member>
    <member name="P:yWorks.Support.CompoundUndoUnit.Count">
      <summary>
            Yields the number of units that are contained in this compound unit.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.Dispose">
      <summary>
            Disposes this unit and all of its contents.
            </summary>
    </member>
    <member name="P:yWorks.Support.CompoundUndoUnit.Disposed">
      <summary>
            Determines whether this instance has been <see cref="M:yWorks.Support.CompoundUndoUnit.Dispose">disposed.</see></summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.Redo">
      <summary>
            Redoes the next <see cref="T:yWorks.Support.IUndoUnit"></see>.
            </summary>
      <exception cref="T:System.NotSupportedException">If an undo operation is already in progress.</exception>
      <exception cref="T:System.Exception">If <see cref="M:yWorks.Support.CompoundUndoUnit.CanRedo"></see> would yield <c>false</c>.</exception>
    </member>
    <member name="P:yWorks.Support.CompoundUndoUnit.RedoName">
      <summary>
            Returns the current redo name.
            </summary>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.RemoveUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Tries to remove a given unit from this compound unit.
            </summary>
      <param name="unit">The unit to remove.</param>
      <returns>
        <see langword="true">
        </see> iff the unit has been removed from this instance.</returns>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.CompoundUndoUnit.Undo">
      <summary>
            Undoes the next <see cref="T:yWorks.Support.IUndoUnit"></see>.
            </summary>
      <exception cref="T:System.NotSupportedException">If an undo operation is already in progress.</exception>
      <exception cref="T:System.Exception">If <see cref="M:yWorks.Support.CompoundUndoUnit.CanUndo"></see> would yield <c>false</c>.</exception>
    </member>
    <member name="P:yWorks.Support.CompoundUndoUnit.UndoName">
      <summary>
            Returns the current redo name.
            </summary>
    </member>
    <member name="T:yWorks.Support.DelegateUndoUnit`1">
      <summary>
            A convenience implementation of the <see cref="T:yWorks.Support.IUndoUnit"></see> interface that uses simple delegates 
            for the actual undo and redo operations.
            </summary>
      <typeparam name="T">The type of the single parameter that is passed to the delegate.</typeparam>
    </member>
    <member name="M:yWorks.Support.DelegateUndoUnit`1.#ctor(System.String,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,`0,`0)">
      <summary>
            Creates a new instance using the provided name and a undo/redo handler
            as well as the parameters to pass to the delegates.
            </summary>
      <param name="undoName">The name of the undo.</param>
      <param name="undoRedo">The undo and redo handler delegate.</param>
      <param name="undoParam">The undo parameter to pass to the delegate.</param>
      <param name="redoParam">The redo parameter to pass to the delegate.</param>
    </member>
    <member name="M:yWorks.Support.DelegateUndoUnit`1.#ctor(System.String,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate)">
      <summary>
            Creates a new instance using the provided name and a undo and redo handler
            that take default values as argument.
            </summary>
      <param name="undoName">The name of the undo.</param>
      <param name="undo">The undo handler delegate.</param>
      <param name="redo">The redo handler delegate.</param>
    </member>
    <member name="M:yWorks.Support.DelegateUndoUnit`1.#ctor(System.String,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,`0)">
      <summary>
            Creates a new instance using the provided name and a undo and redo handler
            as well as the parameter to pass to the delegates.
            </summary>
      <param name="undoName">The name of the undo.</param>
      <param name="undo">The undo handler delegate.</param>
      <param name="redo">The redo handler delegate.</param>
      <param name="param">The parameter to pass to the two delegates.</param>
    </member>
    <member name="M:yWorks.Support.DelegateUndoUnit`1.#ctor(System.String,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,yWorks.Support.DelegateUndoUnit{`0}.DoHandlerDelegate,`0,`0)">
      <summary>
            Creates a new instance using the provided name and a undo and redo handler
            as well as the parameters to pass to the delegates.
            </summary>
      <param name="undoName">The name of the undo.</param>
      <param name="undo">The undo handler delegate.</param>
      <param name="redo">The redo handler delegate.</param>
      <param name="undoParam">The undo parameter to pass to the delegate.</param>
      <param name="redoParam">The redo parameter to pass to the delegate.</param>
    </member>
    <member name="T:yWorks.Support.DelegateUndoUnit`1.DoHandlerDelegate">
      <summary>
            The delegate that is used by <see cref="T:yWorks.Support.DelegateUndoUnit`1"></see>.
            </summary>
      <param name="param">An usage dependent parameter that is passed to the delegate.</param>
    </member>
    <member name="T:yWorks.Support.DictionaryLookup">
      <summary>
            A simple mutable <see cref="T:yWorks.Support.ILookup"></see> implementation that
            is backed by a dictionary.
            </summary>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.#ctor">
      <summary>
            Creates an instance with an initially empty map as backing store.
            </summary>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.#ctor(System.Collections.Generic.IDictionary{System.Type,System.Object})">
      <summary>
            Creates an instance with the given map as the backing store.
            </summary>
      <param name="map">
      </param>
      <exception cref="T:System.ArgumentNullException">if the <paramref name="map"></paramref> is <c>null</c></exception>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.HasLookup(System.Type)">
      <summary>
            Determines whether the specified type exists in this lookup.
            </summary>
      <param name="type">The type to look up.</param>
      <returns>
        <c>true</c> if the specified type exists in this lookup; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.Lookup(System.Type)">
      <summary>
            Performs the lookup using the map as the backing store.
            </summary>
      <param name="type">the type to query</param>
      <returns>the instance found in the map or <c>null</c></returns>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.Put(System.Type,System.Object)">
      <summary>
            Adds an in instance to the map for the given type.
            </summary>
      <param name="type">the type that will be used as a key for queries</param>
      <param name="value">the instance implementing <paramref name="type"></paramref> or <c>null</c></param>
      <exception cref="T:System.ArgumentException">if the parameters do not match</exception>
    </member>
    <member name="M:yWorks.Support.DictionaryLookup.Remove(System.Type)">
      <summary>
            Removes the specified type from this lookup.
            </summary>
      <param name="type">The type to remove from this instance.</param>
    </member>
    <member name="T:yWorks.Support.EmptyCollection`1">
      <summary>
            A utility class that implements an immutable always empty <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
      <typeparam name="T">The type of the items that are not contained in this collection.</typeparam>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.EmptyCollection`1" /> class</summary>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.Add(`0)">
      <summary>
            Not supported by this implementation.
            </summary>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.Contains(`0)">
      <summary>
            Always returns <see langword="false"></see></summary>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.EmptyCollection`1.Count">
      <summary>
            Always returns <c>0</c>.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.GetEnumerator"></member>
    <member name="F:yWorks.Support.EmptyCollection`1.Instance">
      <summary>
            A shareable static instance of this class.
            </summary>
    </member>
    <member name="P:yWorks.Support.EmptyCollection`1.IsReadOnly">
      <summary>
            Always returns <see langword="true"></see></summary>
    </member>
    <member name="M:yWorks.Support.EmptyCollection`1.Remove(`0)">
      <summary>
            Always returns <see langword="false"></see> since this item cannot be contained in this implementation.
            </summary>
    </member>
    <member name="T:yWorks.Support.EmptyEnumerable`1">
      <summary>
            A utility class that implements an immutable always empty <see cref="T:System.Collections.Generic.IEnumerable`1"></see>.
            </summary>
      <typeparam name="T">The type of the items that are not enumerated by this enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.EmptyEnumerable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.EmptyEnumerable`1" /> class</summary>
    </member>
    <member name="M:yWorks.Support.EmptyEnumerable`1.GetEnumerator"></member>
    <member name="F:yWorks.Support.EmptyEnumerable`1.Instance">
      <summary>
            A shareable static instance of this class.
            </summary>
    </member>
    <member name="T:yWorks.Support.EmptyEnumerator`1">
      <summary>
            A utility class that implements an always empty <see cref="T:System.Collections.Generic.IEnumerator`1"></see>.
            </summary>
      <typeparam name="T">The type of the items that are not enumerated by this enumerator.</typeparam>
    </member>
    <member name="M:yWorks.Support.EmptyEnumerator`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.EmptyEnumerator`1" /> class</summary>
    </member>
    <member name="P:yWorks.Support.EmptyEnumerator`1.Current"></member>
    <member name="M:yWorks.Support.EmptyEnumerator`1.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="F:yWorks.Support.EmptyEnumerator`1.Instance">
      <summary>
            A shareable static instance of this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyEnumerator`1.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:yWorks.Support.EmptyEnumerator`1.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:yWorks.Support.EmptyList`1">
      <summary>
            A utility class that implements an immutable always empty <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
      <typeparam name="T">The type of the items that are not contained in this collection.</typeparam>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.EmptyList`1" /> class</summary>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.Add(`0)">
      <summary>
            Not supported by this implementation.
            </summary>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.Contains(`0)">
      <summary>
            Always returns <see langword="false"></see></summary>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.EmptyList`1.Count">
      <summary>
            Always returns <c>0</c>.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.GetEnumerator"></member>
    <member name="M:yWorks.Support.EmptyList`1.IndexOf(`0)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.Insert(System.Int32,`0)">
      <summary>
            Not supported by this instance.
            </summary>
    </member>
    <member name="F:yWorks.Support.EmptyList`1.Instance">
      <summary>
            A shareable static instance of this class.
            </summary>
    </member>
    <member name="P:yWorks.Support.EmptyList`1.IsReadOnly">
      <summary>
            Always returns <see langword="true"></see></summary>
    </member>
    <member name="P:yWorks.Support.EmptyList`1.Item(System.Int32)">
      <summary>
            Not supported by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.Remove(`0)">
      <summary>
            Always returns <see langword="false"></see> since this item cannot be contained in this implementation.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyList`1.RemoveAt(System.Int32)">
      <summary>
            Not supported by this instance.
            </summary>
    </member>
    <member name="T:yWorks.Support.EmptyListEnumerable`1">
      <summary>
            A utility class that implements an immutable always empty <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see>.
            </summary>
      <typeparam name="T">The type of the items that are not contained in this collection.</typeparam>
    </member>
    <member name="M:yWorks.Support.EmptyListEnumerable`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.EmptyListEnumerable`1" /> class</summary>
    </member>
    <member name="P:yWorks.Support.EmptyListEnumerable`1.Count">
      <summary>
            Always returns <c>0</c>.
            </summary>
    </member>
    <member name="M:yWorks.Support.EmptyListEnumerable`1.GetEnumerator"></member>
    <member name="F:yWorks.Support.EmptyListEnumerable`1.Instance">
      <summary>
            A shareable static instance of this class.
            </summary>
    </member>
    <member name="P:yWorks.Support.EmptyListEnumerable`1.IsReadOnly">
      <summary>
            Always returns <see langword="true"></see></summary>
    </member>
    <member name="P:yWorks.Support.EmptyListEnumerable`1.Item(System.Int32)">
      <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"></see></summary>
    </member>
    <member name="T:yWorks.Support.EventFilter`1">
      <summary>
            An event "filter" implementation that can be used to collapse events within a given
            time span and fire a final event after the time has ellapsed.
            </summary>
      <typeparam name="T">The type of the event to fire.</typeparam>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.#ctor">
      <summary>
            Creates a new instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Creates a new instance using the container for the construction of the internal timer.
            </summary>
      <param name="container">The container for the timer or <c>null</c>.</param>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.#ctor(System.Windows.Controls.Control)">
      <summary>
            Creates the filter for the control.
            </summary>
      <param name="control">The control to use <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)"></see> for the safe
            starting and stopping of the Timer instance.</param>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.#ctor(System.Windows.Controls.Control,System.TimeSpan)">
      <summary>
            Creates the filter for the control.
            </summary>
      <param name="control">The control to use <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)"></see> for the safe
            starting and stopping of the Timer instance.</param>
      <param name="duration">The initial value for <see cref="P:yWorks.Support.EventFilter`1.Duration"></see>.</param>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.Cancel">
      <summary>
            Cancels any pending events.
            </summary>
    </member>
    <member name="P:yWorks.Support.EventFilter`1.Duration">
      <summary>
            Gets or sets the duration during which events should be collapsed.
            </summary>
    </member>
    <member name="E:yWorks.Support.EventFilter`1.Event">
      <summary>
            The event clients can register with.
            </summary>
    </member>
    <member name="P:yWorks.Support.EventFilter`1.EventRestartsTimer">
      <summary>
            Whether another arriving event restarts the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.Flush">
      <summary>
            Flushes pending events and immediately fires them.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnEvent">
      <summary>
            Event handler that can be used to trigger the start of the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnEvent(System.Object,`0)">
      <summary>
            Event handler that can be used to trigger the start of the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnEvent``1(System.Object,``0)">
      <summary>
            Generic Event handler that can be used to trigger the start of the timer.
            </summary>
      <typeparam name="TEventArgs">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TEventArgs"/&gt; documentation for "M:yWorks.Support.EventFilter`1.OnEvent``1(System.Object,``0)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnEvent(`0)">
      <summary>
            Event handler that can be used to trigger the start of the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnEventCaptured(System.Object,`0)">
      <summary>
            Called whenever an event is captured.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnFilteredEvent(System.Object,`0)">
      <summary>
            Called once the timer went off to trigger the <see cref="E:yWorks.Support.EventFilter`1.Event"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.OnTick">
      <summary>
            Called once the timer goes off.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.RestartTimer">
      <summary>
            Restarts the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.StartTimer">
      <summary>
            Starts the timer.
            </summary>
    </member>
    <member name="M:yWorks.Support.EventFilter`1.StopTimer">
      <summary>
            Stops the timer.
            </summary>
    </member>
    <member name="T:yWorks.Support.FactoryDelegate`2">
      <summary>
            A generic factory method delegate that creates instances of a given type
            and takes a context object of a given type.
            </summary>
      <param name="context">The context to pass to the factory. The semantic of this value 
            depends on the implementation and use.</param>
      <typeparam name="TResult">The type of the object to create.</typeparam>
      <typeparam name="TContext">The type of the context to provide to the factory method.</typeparam>
      <returns>A newly created instance, or a shared instance, or <c>null</c>, depending on the implementation and use case.</returns>
    </member>
    <member name="T:yWorks.Support.FilteredCollectionModel`1">
      <summary>
            A collection model that filters items from the underlying collection given a predicate function.
            </summary>
      <typeparam name="T">The type of the items in the model.</typeparam>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.#ctor(yWorks.Canvas.Model.ICollectionModel{`0},System.Predicate{`0})">
      <summary>
            Creates a new instance using the provided instance and predicate.
            </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Accepts(`0)">
      <summary>
            Determines whether the given item is accepted by this instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.FilteredCollectionModel`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.GetEnumerator"></member>
    <member name="P:yWorks.Support.FilteredCollectionModel`1.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="E:yWorks.Support.FilteredCollectionModel`1.ItemAdded">
      <summary>
            An event that will be triggered if an item has been added to this collection.
            </summary>
    </member>
    <member name="E:yWorks.Support.FilteredCollectionModel`1.ItemChanged">
      <summary>
            An event that will be triggered if an item in this collection has changed significantly.
            </summary>
    </member>
    <member name="E:yWorks.Support.FilteredCollectionModel`1.ItemRemoved">
      <summary>
            An event that will be triggered if an item has been removed from this collection.
            </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.OnItemAdded(yWorks.Canvas.Model.ItemEventArgs{`0})">
      <summary>
            Called whenever an item has been added.
            </summary>
      <param name="evt">The event parameter.</param>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.OnItemChanged(yWorks.Canvas.Model.ItemEventArgs{`0})">
      <summary>
            Called whenever an item has been changed.
            </summary>
      <param name="evt">The event parameter.</param>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.OnItemRemoved(yWorks.Canvas.Model.ItemEventArgs{`0})">
      <summary>
            Called whenever an item has been removed.
            </summary>
      <param name="evt">The event parameter.</param>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.PredicateChanged">
      <summary>
            Called by clients to indicate that the <see cref="T:System.Predicate`1"></see> function
            has changed in such a way that items that have previously been 
            accepted might not be accepted anymore and vice versa.
            </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.PredicateChanged(`0)">
      <summary>
            Called by clients to indicate that the <see cref="T:System.Predicate`1"></see> function
            has changed in such a way that for the provided item that has previously been 
            accepted the predicate might not have changed.
            </summary>
    </member>
    <member name="M:yWorks.Support.FilteredCollectionModel`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="T:yWorks.Support.FilteredEnumerable`1">
      <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> implementation that
            applies a <see cref="T:System.Predicate`1"></see> to determine which elements 
            to yield in the enumeration.
            </summary>
      <typeparam name="T">The type of the items in the <see cref="T:System.Collections.Generic.IEnumerable`1"></see></typeparam>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Support.FilteredEnumerable`1"></see> class.
            </summary>
      <param name="backing">The backing enumerable to filter.</param>
      <param name="predicate">The predicate that determines which items should be yielded.</param>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerable`1.GetEnumerator"></member>
    <member name="T:yWorks.Support.FilteredEnumerator`1">
      <summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> implementation that
            applies a <see cref="T:System.Predicate`1"></see> to filter a backing enumerator.
            </summary>
      <typeparam name="T">The type of the items to yield.</typeparam>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Predicate{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Support.FilteredEnumerator`1"></see> class.
            </summary>
      <param name="backing">The backing enumerator.</param>
      <param name="predicate">The predicate to use.</param>
    </member>
    <member name="P:yWorks.Support.FilteredEnumerator`1.Current">
      <summary>
                    Gets the element in the collection at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerator`1.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerator`1.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:yWorks.Support.FilteredEnumerator`1.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:yWorks.Support.Future`1">
      <summary>
            A helper holder class that can contain a <see cref="P:yWorks.Support.Future`1.Value"></see>
            of a specific type.
            </summary>
      <typeparam name="T">The type of the <see cref="P:yWorks.Support.Future`1.Value"></see></typeparam>
    </member>
    <member name="M:yWorks.Support.Future`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Support.Future`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.Support.Future`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Support.Future`1"></see> class.
            </summary>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="P:yWorks.Support.Future`1.HasValue">
      <summary>
            Gets a value indicating whether this instance has been <see cref="M:yWorks.Support.Future`1.OnValueDetermined(`0)">assigned</see>
            a <see cref="P:yWorks.Support.Future`1.Value"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.Future`1.OnValueDetermined(`0)">
      <summary>
            Called when the <see cref="P:yWorks.Support.Future`1.Value"></see> property of this future has been determined.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="E:yWorks.Support.Future`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:yWorks.Support.Future`1.Value">
      <summary>
             The value of this future, which can be a default value unless
             <see cref="P:yWorks.Support.Future`1.HasValue"></see> yields <see langword="true"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Support.GenericInvoker`2">
      <summary>
            This is a utility class that makes it possible to call a parameterized method with 1,2, or 3 arguments
            specifying the type parameters at runtime.
            </summary>
      <typeparam name="TResult">The result of the method calls.</typeparam>
      <typeparam name="TParam">The type of the parameter to the method calls.</typeparam>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.GenericInvoker`2" /> class</summary>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.InvokeM1(System.Type,`1)">
      <summary>
            Invokes the method <see cref="M:yWorks.Support.GenericInvoker`2.M1``1(`1)"></see> using <paramref name="typeParam"></paramref> as the type parameter.
            </summary>
      <param name="typeParam">The type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M1``1(`1)"></see>.</param>
      <param name="param">The parameter to pass to <see cref="M:yWorks.Support.GenericInvoker`2.M1``1(`1)"></see>.</param>
      <returns>The result as returned by <see cref="M:yWorks.Support.GenericInvoker`2.M1``1(`1)"></see></returns>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)">
      <summary>
            Invokes the method <see cref="M:yWorks.Support.GenericInvoker`2.M2``2(`1)"></see> using the given type parameters
            </summary>
      <param name="typeParam1">The first type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M2``2(`1)"></see>.</param>
      <param name="typeParam2">The second type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M2``2(`1)"></see>.</param>
      <param name="param">The parameter to pass to <see cref="M:yWorks.Support.GenericInvoker`2.M2``2(`1)"></see>.</param>
      <returns>The result as returned by <see cref="M:yWorks.Support.GenericInvoker`2.M2``2(`1)"></see></returns>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)">
      <summary>
            Invokes the method <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see> using the given type parameters
            </summary>
      <param name="typeParam1">The first type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see>.</param>
      <param name="typeParam2">The second type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see>.</param>
      <param name="typeParam3">The third type parameter to use for <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see>.</param>
      <param name="param">The parameter to pass to <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see>.</param>
      <returns>The result as returned by <see cref="M:yWorks.Support.GenericInvoker`2.M3``3(`1)"></see></returns>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.M1``1(`1)">
      <summary>
            The method that is invoked in response to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM1(System.Type,`1)"></see></summary>
      <param name="param">The parameter that is passed to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM1(System.Type,`1)"></see>.</param>
      <typeparam name="T">The type parameter that is the argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM1(System.Type,`1)"></see>.</typeparam>
      <returns>The result that is returned by <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM1(System.Type,`1)"></see></returns>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.M2``2(`1)">
      <summary>
            The method that is invoked in response to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)"></see></summary>
      <param name="param">The parameter that is passed to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)"></see>.</param>
      <typeparam name="T1">The type parameter that is the first argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)"></see>.</typeparam>
      <typeparam name="T2">The type parameter that is the second argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)"></see>.</typeparam>
      <returns>The result that is returned by <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM2(System.Type,System.Type,`1)"></see></returns>
    </member>
    <member name="M:yWorks.Support.GenericInvoker`2.M3``3(`1)">
      <summary>
            The method that is invoked in response to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see></summary>
      <param name="param">The parameter that is passed to <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see>.</param>
      <typeparam name="T1">The type parameter that is the first argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see>.</typeparam>
      <typeparam name="T2">The type parameter that is the second argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see>.</typeparam>
      <typeparam name="T3">The type parameter that is the third argument of <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see>.</typeparam>
      <returns>The result that is returned by <see cref="M:yWorks.Support.GenericInvoker`2.InvokeM3(System.Type,System.Type,System.Type,`1)"></see></returns>
    </member>
    <member name="T:yWorks.Support.GenericListCell`1">
      <summary>
            The cell class that constitutes <see cref="T:yWorks.Support.GenericYList`1"></see>s.
            </summary>
      <typeparam name="T">The type of the values of the cells.</typeparam>
    </member>
    <member name="P:yWorks.Support.GenericListCell`1.Next">
      <summary>
            Returns the successor cell of this cell.
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericListCell`1.Previous">
      <summary>
            Returns the predecessor cell of this cell.
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericListCell`1.Value">
      <summary>
            Get or set the actual value stored in this cell
            </summary>
    </member>
    <member name="T:yWorks.Support.GenericYList`1">
      <summary>
            A generic linked list implementation.
            </summary>
      <typeparam name="T">The type of the items in the list.</typeparam>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.#ctor">
      <summary>
            Creates an empty doubly linked list
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.#ctor(`0[])">
      <summary>
            Creates a list that is initialized with the elements provided
            by the given array of objects
            </summary>
      <param name="a">The source array</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Add(`0)">
      <summary>
            Same as <see cref="M:yWorks.Support.GenericYList`1.AddLast(`0)"></see></summary>
      <param name="o">The object to add</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.AddFirst(`0)">
      <summary>
            Inserts Object <paramref name="o"></paramref> at the head of this list
            </summary>
      <param name="o">The object to store</param>
      <returns>the GenericListCell where the object <paramref name="o"></paramref> is stored.</returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.AddFirstCell(yWorks.Support.GenericListCell{`0})">
      <summary>
            Adds a formerly removed GenericListCell at the head of this list.
            </summary>
      <param name="cell">A list cell which is not part of any list.</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.AddLast(`0)">
      <summary>
            Inserts Object <paramref name="o"></paramref> at the tail of this list
            </summary>
      <param name="o">The object to store</param>
      <returns>the GenericListCell where the object <paramref name="o"></paramref> is stored.</returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.AddLastCell(yWorks.Support.GenericListCell{`0})">
      <summary>
            Adds a formerly removed GenericListCell at the tail of this list.
            </summary>
      <param name="cell">A list cell which is not part of any list.</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Clear">
      <summary>
            Removes all elements from this lsit
            </summary>
    </member>
    <member name="E:yWorks.Support.GenericYList`1.CollectionChanged">
      <summary>
            Implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.CopyTo(System.Array,System.Int32)">
      <summary>
            Inserts the contents of the list into the target array, starting from index <paramref name="index"></paramref></summary>
      <param name="array">The target array</param>
      <param name="index">The starting index</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.FindCell(`0)">
      <summary>
            Returns the cell where object <paramref name="o"></paramref> is stored.
            </summary>
      <param name="o">The object to search for</param>
      <returns>The first cell containing <paramref name="o"></paramref>, or <see langword="null"></see>
            if no such cell exists</returns>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.First">
      <summary>
            Returns the first element in this list.
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.FirstCell">
      <summary>
            Returns the first cell in this list.
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.GetCell(System.Int32)">
      <summary>
            Get the GenericListCell at index <paramref name="index"></paramref></summary>
      <param name="index">The index for which to retrieve the cell</param>
      <returns>the GenericListCell at index <paramref name="index"></paramref>.</returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.GetEnumerator"></member>
    <member name="M:yWorks.Support.GenericYList`1.GetIndex(yWorks.Support.GenericListCell{`0})">
      <summary>
            Gets the index of the given cell.
            </summary>
      <param name="cell">The cell.</param>
      <returns>The zero based index of the cell.</returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.IndexOf(`0)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Insert(System.Int32,`0)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.InsertAfter(`0,yWorks.Support.GenericListCell{`0})">
      <summary>
            Inserts the given object to this list.
            </summary>
      <param name="o">the object to be inserted</param>
      <param name="refCell">the cell used to reference the position</param>
      <returns>the newly created GenericListCell, which contains <paramref name="o"></paramref></returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.InsertBefore(`0,yWorks.Support.GenericListCell{`0})">
      <summary>
            Inserts the given object to this list.
            </summary>
      <param name="o">the object to be inserted</param>
      <param name="refCell">the cell used to reference the position</param>
      <returns>the newly created GenericListCell, which contains <paramref name="o"></paramref></returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.InsertCellAfter(yWorks.Support.GenericListCell{`0},yWorks.Support.GenericListCell{`0})">
      <summary>
            Inserts a formerly removed GenericListCell after the specified position.
            </summary>
      <param name="cellToInsert">A list cell which is not part of any list.</param>
      <param name="refCell">A list cell that is contained in this list</param>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.InsertCellBefore(yWorks.Support.GenericListCell{`0},yWorks.Support.GenericListCell{`0})">
      <summary>
            Inserts a formerly removed GenericListCell before the specified position.
            </summary>
      <param name="cellToInsert">A list cell which is not part of any list.</param>
      <param name="refCell">A list cell that is contained in this list</param>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.IsEmpty">
      <summary>
            Checks whether this list contains elements
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.IsFixedSize">
      <summary>
            Return whether this List has a fixed size
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.IsReadOnly">
      <summary>
            Return whether this List is read-only
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.IsSynchronized">
      <summary>
            Returns whether this list allows concurrent access
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.Item(System.Int32)">
      <summary>
            Returns the <paramref name="i"></paramref>-th element in this list.
            </summary>
      <param name="i">The index of the list element</param>
      <returns>The element at index <paramref name="i"></paramref></returns>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.Last">
      <summary>
            Returns the last element in this list.
            </summary>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.LastCell">
      <summary>
            Returns the last cell in this list.
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Peek">
      <summary>Same as <see cref="P:yWorks.Support.GenericYList`1.First"></see></summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Pop">
      <summary>
            Removes the first element from this list and returns it.
            </summary>
      <returns>The first element in this list</returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.PopLast">
      <summary>
            Removes the last element from this list and returns it.
            </summary>
      <returns>The last element in this list</returns>
    </member>
    <member name="E:yWorks.Support.GenericYList`1.PropertyChanged">
      <summary>
            Implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Push(`0)">
      <summary>
            Same as <see cref="M:yWorks.Support.GenericYList`1.AddFirst(`0)"></see></summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.RemoveCell(yWorks.Support.GenericListCell{`0})">
      <summary>
            Removes the GenericListCell <paramref name="c"></paramref> 
            and the element stored in it from this list.
            </summary>
      <param name="c">
      </param>
      <returns>The element the contained in the removed cell <paramref name="c"></paramref></returns>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.SyncRoot">
      <summary>
            Returns the syncroot instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.GenericYList`1.ToArray">
      <summary>
            Returns an array representation of this List. 
            </summary>
      <returns>An array representation of this List. </returns>
    </member>
    <member name="P:yWorks.Support.GenericYList`1.UserObject">
      <summary>
            The tag that is associated with this list.
            </summary>
    </member>
    <member name="T:yWorks.Support.HashSet`1">
      <summary>
            An <see cref="T:System.Collections.Generic.ICollection`1"></see> that obeys the 'set' semantics.
            </summary>
      <typeparam name="T">The type of the items in the set.</typeparam>
    </member>
    <member name="M:yWorks.Support.HashSet`1.#ctor">
      <summary>
            Creates a new empty hashset.
            </summary>
    </member>
    <member name="M:yWorks.Support.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new hashset using the elements to initialize the set.
            </summary>
    </member>
    <member name="M:yWorks.Support.HashSet`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
      <summary>
            Creates a new hashset using the elements to initialize the set.
            </summary>
    </member>
    <member name="M:yWorks.Support.HashSet`1.Add(`0)">
      <summary>
            Adds the given item to this set.
            </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:yWorks.Support.HashSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a range of elements to this set.
            </summary>
    </member>
    <member name="M:yWorks.Support.HashSet`1.AddRange(System.Collections.Generic.IEnumerator{`0})">
      <summary>
            Adds a range of elements to this set.
            </summary>
    </member>
    <member name="M:yWorks.Support.HashSet`1.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:yWorks.Support.HashSet`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.HashSet`1.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.HashSet`1.GetEnumerator"></member>
    <member name="P:yWorks.Support.HashSet`1.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.HashSet`1.Remove(`0)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="T:yWorks.Support.ICompoundEdit">
      <summary>
            The interface used by <see cref="T:yWorks.Support.IUndoSupport"></see>'s and <see cref="T:yWorks.Support.UndoEngine"></see>'s <see cref="M:yWorks.Support.UndoEngine.BeginCompoundEdit(System.String,System.String)"></see> implementation.
            </summary>
    </member>
    <member name="M:yWorks.Support.ICompoundEdit.Cancel">
      <summary>
            This method cancels the compound editing process that has been initialized in <see cref="M:yWorks.Support.UndoEngine.BeginCompoundEdit(System.String,System.String)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.ICompoundEdit.End">
      <summary>
            This method ends the compound editing process that has been initialized in <see cref="M:yWorks.Support.UndoEngine.BeginCompoundEdit(System.String,System.String)"></see>
            or in the <see cref="M:yWorks.Support.IUndoSupport.BeginEdit(System.String,System.String)"></see> methods.
            </summary>
    </member>
    <member name="T:yWorks.Support.IContextLookup">
      <summary>
            An interface for instances that can provide a <see cref="T:yWorks.Support.ILookup"></see> capabilities
            for a given object.
            </summary>
    </member>
    <member name="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)">
      <summary>
            Tries to create or retrieve an implementation of the given type
            for a given item.
            </summary>
      <param name="item">the item to lookup a type for</param>
      <param name="type">the type to look up</param>
      <returns>an implementation or <see langword="null"></see></returns>
    </member>
    <member name="T:yWorks.Support.IContextLookupChainLink">
      <summary>
            An interface for instances that can be used to chain lookup operations.
            </summary>
    </member>
    <member name="M:yWorks.Support.IContextLookupChainLink.SetNext(yWorks.Support.IContextLookup)">
      <summary>
            This method is called by the framework to register the fallback lookup implementation
            that should be used during a call to <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see>.
            </summary>
      <param name="next">The context to use as a fallback.</param>
    </member>
    <member name="T:yWorks.Support.ILookup">
      <summary>
            The basic lookup interface that allows for retrieving implementations
            for different aspects of the current instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.ILookup.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.Support.ILookupDecorator">
      <summary>
            Interface that can be used to decorate the lookup result for a set of types.
            </summary>
    </member>
    <member name="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">
      <summary>
            Adds a lookup chain element to the chain of lookups for a given type.
            </summary>
      <param name="t">The type to decorate the lookup.</param>
      <param name="lookup">The chain element to add to the lookup of the given type.</param>
    </member>
    <member name="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">
      <summary>
            Determines whether this instance can be used to decorate the lookup for a certain type.
            </summary>
      <param name="t">The type to decorate the lookup for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)">
      <summary>
            Removes a previously registered lookup chain element from the chain of lookups for a given type.
            </summary>
      <param name="t">The type to remove the decorator from.</param>
      <param name="lookup">The chain element to remove from the lookup of the given type.</param>
    </member>
    <member name="T:yWorks.Support.ILookupProvider`1">
      <summary>
            An interface for instances that can provide an <see cref="T:yWorks.Support.ILookup"></see> implementation
            for a given object.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "T:yWorks.Support.ILookupProvider`1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.Support.ILookupProvider`1.GetContext(`0)">
      <summary>
            Creates or retrieves an <see cref="T:yWorks.Support.ILookup"></see> implementation 
            for a given item of type <typeparamref name="T"></typeparamref>.
            </summary>
      <param name="item">the item to find a lookup implementation for</param>
      <returns>an implementation or <see langword="null"></see></returns>
    </member>
    <member name="T:yWorks.Support.IMementoSupport">
      <summary>
            Utility interface that can be used in conjunction with <see cref="T:yWorks.Support.MementoUndoUnit"></see>
            to create <see cref="T:yWorks.Support.IUndoUnit"></see> implementations.
            </summary>
    </member>
    <member name="M:yWorks.Support.IMementoSupport.ApplyState(System.Object,System.Object)">
      <summary>
            Reapplies a previously queried state memento object to a given subject.
            </summary>
      <param name="subject">The subject to modify the state.</param>
      <param name="state">The state memento object as returned by <see cref="M:yWorks.Support.IMementoSupport.GetState(System.Object)"></see></param>
    </member>
    <member name="M:yWorks.Support.IMementoSupport.GetState(System.Object)">
      <summary>
            Retrieves the state of a given subject as a memento.
            </summary>
      <param name="subject">The subject to read the state from</param>
      <returns>An instance that describes the current state of <paramref name="subject"></paramref>.</returns>
    </member>
    <member name="M:yWorks.Support.IMementoSupport.StateEquals(System.Object,System.Object)">
      <summary>
            Utility method that can determine whether two state memento object are equal.
            </summary>
      <param name="state1">The first state as obtained from <see cref="M:yWorks.Support.IMementoSupport.GetState(System.Object)"></see></param>
      <param name="state2">The first state as obtained from <see cref="M:yWorks.Support.IMementoSupport.GetState(System.Object)"></see></param>
      <returns>If the states equal and thus there is no need to apply <paramref name="state1"></paramref> to an instance 
            whose state is already <paramref name="state2"></paramref></returns>
    </member>
    <member name="T:yWorks.Support.ITagOwner">
      <summary>
            Interface implemented by items that can be tagged with arbitrary objects.
            </summary>
    </member>
    <member name="P:yWorks.Support.ITagOwner.Tag">
      <summary>
            Gets or sets the tag associated with this instance.
            </summary>
    </member>
    <member name="T:yWorks.Support.ItemInputEventArgs`1">
      <summary>
            A subclass of <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see>
            that stores a typed <see cref="P:yWorks.Canvas.Model.ItemEventArgs`1.Item"></see>
            and that can be marked as <see cref="P:yWorks.Support.ItemInputEventArgs`1.Handled"></see>.
            </summary>
      <typeparam name="T">The type of the item this event carries.</typeparam>
    </member>
    <member name="M:yWorks.Support.ItemInputEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.Support.ItemInputEventArgs`1"></see> class.
            </summary>
      <param name="item">The item which is the subject of the event.</param>
    </member>
    <member name="P:yWorks.Support.ItemInputEventArgs`1.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.Support.ItemInputEventArgs`1"></see> is handled.
            </summary>
    </member>
    <member name="T:yWorks.Support.IUndoSupport">
      <summary>
            Interface that is mostly used in <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> for entities
            that support undoability.
            </summary>
    </member>
    <member name="M:yWorks.Support.IUndoSupport.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Directly enqueues a custom <see cref="T:yWorks.Support.IUndoUnit"></see> into the queue that this instance
            represents.
            </summary>
      <param name="unit">The unit to place onto the undo stack.</param>
    </member>
    <member name="M:yWorks.Support.IUndoSupport.BeginEdit(System.String,System.String)">
      <summary>
            Starts a compound unit of edits.
            </summary>
      <param name="undoName">The undo name for the compound edit.</param>
      <param name="redoName">The redo name for the compound edit.</param>
      <returns>The handle to call <see cref="M:yWorks.Support.ICompoundEdit.Cancel"></see> or <see cref="M:yWorks.Support.ICompoundEdit.End"></see> on.</returns>
    </member>
    <member name="M:yWorks.Support.IUndoSupport.BeginEdit``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Calling this method indicates to the callee that <paramref name="items"></paramref> 
            are going to be modified.
            </summary>
      <param name="undoName">The <see cref="P:yWorks.Support.IUndoUnit.UndoName"></see> of the <see cref="T:yWorks.Support.IUndoUnit"></see>
            that will be placed into the undo queue after <see cref="M:yWorks.Support.ICompoundEdit.End"></see> has been called.</param>
      <param name="redoName">The <see cref="P:yWorks.Support.IUndoUnit.RedoName"></see> of the <see cref="T:yWorks.Support.IUndoUnit"></see>
            that will be placed into the undo queue after <see cref="M:yWorks.Support.ICompoundEdit.End"></see> has been called.</param>
      <param name="items">The items that will be changed after this call and before the call
            to <see cref="M:yWorks.Support.ICompoundEdit.End"></see>.</param>
      <typeparam name="T">The type of the items that will be modified subsequently.</typeparam>
      <returns>An implementation of the <see cref="T:yWorks.Support.ICompoundEdit"></see> interface whose
            <see cref="M:yWorks.Support.ICompoundEdit.End"></see> or <see cref="M:yWorks.Support.ICompoundEdit.Cancel"></see> methods 
            need to be called after the items have been modified.</returns>
    </member>
    <member name="T:yWorks.Support.IUndoUnit">
      <summary>
            Implements a unit that can be undone and redone.
            </summary>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Allows for collapsing multiple units into one.
            </summary>
      <param name="unit">The unit to incorporate that happened after this unit.</param>
      <returns>Whether the state change of <paramref name="unit"></paramref> has been incorporated into this
            unit and <c>unit</c> can be disposed of.</returns>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.CanRedo">
      <summary>
            Determines whether this instance can currently <see cref="M:yWorks.Support.IUndoUnit.Redo"></see> its work.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Support.IUndoUnit.Redo"></see> will succeed.</returns>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.CanUndo">
      <summary>
            Determines whether this instance can currently <see cref="M:yWorks.Support.IUndoUnit.Undo"></see> its work.
            </summary>
      <returns>Whether a call to <see cref="M:yWorks.Support.IUndoUnit.Undo"></see> will succeed.</returns>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.Redo">
      <summary>
            Redoes the change that is represented by this unit.
            </summary>
    </member>
    <member name="P:yWorks.Support.IUndoUnit.RedoName">
      <summary>
            Returns the name of the redo unit.
            </summary>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.ReplaceUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Allows for collapsing multiple units into one.
            </summary>
      <param name="unit">The unit to incorporate that happened before this unit.</param>
      <returns>Whether the state change of <paramref name="unit"></paramref> has been incorporated into this
            unit and <c>unit</c> can be disposed of.</returns>
    </member>
    <member name="M:yWorks.Support.IUndoUnit.Undo">
      <summary>
            Undoes the change that is represented by this unit.
            </summary>
    </member>
    <member name="P:yWorks.Support.IUndoUnit.UndoName">
      <summary>
            Returns the name of the undo unit.
            </summary>
    </member>
    <member name="T:yWorks.Support.LookupCallback">
      <summary>
            Callback delegate that can be used to query results of a virtual <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>
            call on objects that don't necessarily implement <c>ILookup</c>.
            </summary>
      <param name="subject">the subject for which a lookup shall be made</param>
      <param name="type">the type to look up</param>
      <returns>an instance that can be assigned to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.Support.LookupChain">
      <summary>
            An implementation of a chain of <see cref="T:yWorks.Support.IContextLookupChainLink"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.Support.LookupChain.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.LookupChain" /> class</summary>
    </member>
    <member name="M:yWorks.Support.LookupChain.Add(yWorks.Support.IContextLookupChainLink)">
      <summary>
            Adds the given link to the end of the chain.
            </summary>
      <param name="link">The link to add.</param>
    </member>
    <member name="M:yWorks.Support.LookupChain.Lookup(System.Object,System.Type)">
      <summary>
            Performs the actual lookup operation.
            </summary>
      <param name="item">The item to use as the context.</param>
      <param name="type">The type of the query.</param>
      <returns>The result of the query.</returns>
    </member>
    <member name="M:yWorks.Support.LookupChain.NotifyChange">
      <summary>
            Can be called by client code to trigger the <see cref="E:yWorks.Support.LookupChain.PropertyChanged"></see>
            event manually.
            </summary>
    </member>
    <member name="M:yWorks.Support.LookupChain.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Notifies client code that the lookup of this instance might have changed.
            </summary>
      <param name="eventArgs">The arguments</param>
    </member>
    <member name="E:yWorks.Support.LookupChain.PropertyChanged">
      <summary>
            This event will be triggered if the lookup of this instance
            has changed for some or all of the types or items.
            </summary>
    </member>
    <member name="M:yWorks.Support.LookupChain.Remove(yWorks.Support.IContextLookupChainLink)">
      <summary>
            Removes the link that has previously been added to this instance from this chain.
            </summary>
      <param name="link">The link to remove.</param>
    </member>
    <member name="T:yWorks.Support.Lookups">
      <summary>
            Static utility class that servers as a factory for various <see cref="T:yWorks.Support.ILookup"></see>
            implementations and provides static utility methods that simplify the usage of <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>
            calls.
            </summary>
    </member>
    <member name="M:yWorks.Support.Lookups.AddingLookupChainLink(System.Object)">
      <summary>
            Factory method for a lookup chain element that adds an dynamic instance to a lookup chain.
            </summary>
      <param name="instance">The instance to query the type from dynamically.</param>
      <returns>An instance that can be used in a lookup chain.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.AddingLookupChainLink(System.Type,System.Object)">
      <summary>
            Factory method for a lookup chain element that simply adds an entry to a lookup chain.
            </summary>
      <param name="type">The type to add to the lookup.</param>
      <param name="instance">The instance to return if the <paramref name="type"></paramref>is being looked up.</param>
      <returns>An instance that can be used in a lookup chain.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.AddingLookupChainLink(yWorks.Support.ILookup)">
      <summary>
            Factory method for a lookup chain element that adds an ILookup layer to a lookup chain.
            </summary>
      <param name="lookup">The lookup to use.</param>
      <returns>An instance that can be used in a lookup chain.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.CreateContextLookupChainLink(yWorks.Support.LookupCallback)">
      <summary>
            Creates a lookup chain link that is backed by the given callback.
            </summary>
      <param name="callback">The callback to invoke.</param>
      <returns>The implementation of the link that uses the callback.</returns>
    </member>
    <member name="P:yWorks.Support.Lookups.Default">
      <summary>
            The static default lookup instance.
            </summary>
    </member>
    <member name="M:yWorks.Support.Lookups.Dynamic(System.Object)">
      <summary>
            Creates a dynamic lookup implementation that for each type that the given subject
            can be assigned to yields that subject.
            </summary>
      <param name="subject">the subject to yield if it is assignable to the type in the lookup query</param>
      <returns>an instance that will either yield <paramref name="subject"></paramref> or <c>null</c></returns>
    </member>
    <member name="F:yWorks.Support.Lookups.Empty">
      <summary>
            An <c>ILookup</c> instance that always returns <c>null</c>.
            </summary>
    </member>
    <member name="F:yWorks.Support.Lookups.EmptyContextLookup">
      <summary>
            An <c>ILookupContext</c> instance that always returns <c>null</c>.
            </summary>
    </member>
    <member name="M:yWorks.Support.Lookups.FactoryLookupChainLink``2(yWorks.Support.FactoryDelegate{``1,``0})">
      <summary>
            Factory method for a lookup chain element that uses a <see cref="T:yWorks.Support.FactoryDelegate`2"></see>
            to yield a <typeparam name="TResult">result</typeparam> for a specific <typeparam name="TContext">context item type</typeparam>.
            </summary>
      <param name="factory">The factory delegate to use that yields the result for a given context.</param>
      <typeparam name="TContext">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TContext"/&gt; documentation for "M:yWorks.Support.Lookups.FactoryLookupChainLink``2(yWorks.Support.FactoryDelegate{``1,``0})"]</p>
      </typeparam>
      <typeparam name="TResult">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TResult"/&gt; documentation for "M:yWorks.Support.Lookups.FactoryLookupChainLink``2(yWorks.Support.FactoryDelegate{``1,``0})"]</p>
      </typeparam>
      <returns>An instance that can be used in a lookup chain.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Get``1(System.Object,yWorks.Support.IContextLookup)">
      <summary>
            Utility method that helps keeping code more clean when using <see cref="T:yWorks.Support.IContextLookup"></see><see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> calls.
            </summary>
      <param name="context">The context object to pass to the <paramref name="lookup"></paramref>.</param>
      <param name="lookup">The actual lookup provider.</param>
      <typeparam name="T">The type that is the target of the lookup.</typeparam>
      <returns>The value returned by <paramref name="lookup"></paramref> which may be <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Get``1(System.Object,yWorks.Support.IContextLookup,``0)">
      <summary>
            Utility method that helps keeping code more clean when using <see cref="T:yWorks.Support.IContextLookup"></see><see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> calls.
            </summary>
      <param name="context">The context object to pass to the <paramref name="lookup"></paramref>.</param>
      <param name="lookup">The actual lookup provider.</param>
      <param name="fallback">The fallback value to use if the lookup yields <see langword="null"></see></param>
      <typeparam name="T">The type that is the target of the lookup.</typeparam>
      <returns>The value returned by <paramref name="lookup"></paramref> or <paramref name="fallback"></paramref> if the former yields <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Get``1(yWorks.Support.ILookup)">
      <summary>
            Utility method that helps keeping code more clean when using <see cref="T:yWorks.Support.ILookup"></see><see cref="M:yWorks.Support.ILookup.Lookup(System.Type)">()</see> calls.
            </summary>
      <param name="lookup">The actual lookup provider.</param>
      <typeparam name="T">The type that is the target of the lookup.</typeparam>
      <returns>The value returned by <paramref name="lookup"></paramref> which may be <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Get``1(yWorks.Support.ILookup,``0)">
      <summary>
            Utility method that helps keeping code more clean when using <see cref="T:yWorks.Support.ILookup"></see><see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> calls.
            </summary>
      <param name="lookup">The actual lookup provider.</param>
      <param name="fallback">The fallback value to use if the lookup yields <see langword="null"></see></param>
      <typeparam name="T">The type that is the target of the lookup.</typeparam>
      <returns>The value returned by <paramref name="lookup"></paramref> or <paramref name="fallback"></paramref> if the former yields <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.HidingLookupChainLink(System.Type)">
      <summary>
            Factory method for a lookup chain element that removes the entry from the lookup chain
            for a given type.
            </summary>
      <param name="type">The type to hide from the lookup.</param>
      <returns>An instance that can be used in a lookup chain.</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Single(System.Object,System.Type)">
      <summary>
            Creates a simple lookup implementation that yields <c>subject</c>
            if <c>type</c> is queried.
            </summary>
      <param name="subject">the subject to yield</param>
      <param name="type">the type that should yield the subject</param>
      <returns>an ILookup implementation</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Single``1(``0)">
      <summary>
            Creates a simple lookup implementation that yields <c>subject</c>
            if <c>type</c> is queried.
            </summary>
      <param name="subject">the subject to yield</param>
      <typeparam name="T">The type of the subject that will be used as a key for the lookup process.</typeparam>
      <returns>an ILookup implementation</returns>
    </member>
    <member name="M:yWorks.Support.Lookups.Wrapped(yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Creates a lookup implementation that wraps an existing <c>ILookup</c>
            instance using an additional lookup implementations.
            </summary>
      <param name="basicLookup">the fallback lookup implementation</param>
      <param name="additionalLookup">the lookup that has precedence over the fallback</param>
      <returns>an implementation that decorates the first with the latter</returns>
    </member>
    <member name="T:yWorks.Support.MementoStateStruct">
      <summary>
            A simple struct that holds a tuple consisting of an implementation
            of <see cref="T:yWorks.Support.IMementoSupport"></see>, an object instance and its state memento.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoStateStruct.#ctor(yWorks.Support.IMementoSupport,System.Object,System.Object)">
      <summary>
            Creates and initializes a new instance of this struct.
            </summary>
    </member>
    <member name="F:yWorks.Support.MementoStateStruct.mementoSupport">
      <summary>
            The implementation that can <see cref="M:yWorks.Support.IMementoSupport.ApplyState(System.Object,System.Object)">apply</see>
            and <see cref="M:yWorks.Support.IMementoSupport.GetState(System.Object)">retrieve</see> the current state from the subject.
            </summary>
    </member>
    <member name="F:yWorks.Support.MementoStateStruct.state">
      <summary>
            The state of the subject before the subject has been changed.
            </summary>
    </member>
    <member name="F:yWorks.Support.MementoStateStruct.subject">
      <summary>
            The subject for which the state is changed.
            </summary>
    </member>
    <member name="T:yWorks.Support.MementoUndoableEdit">
      <summary>
            An <see cref="T:yWorks.Support.ICompoundEdit"></see> implementation that uses
            <see cref="T:yWorks.Support.IMementoSupport"></see> to track changes on a set of items.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoableEdit.#ctor(yWorks.Support.IUndoSupport,System.Collections.Generic.IEnumerable{yWorks.Support.MementoStateStruct},System.String,System.String)">
      <summary>
            Creates a new instance using a set of <see cref="T:yWorks.Support.MementoStateStruct"></see>s.
            </summary>
      <param name="undoSupport">The support item that will be used to <see cref="M:yWorks.Support.IUndoSupport.AddUnit(yWorks.Support.IUndoUnit)">enqueue</see> the
            undo units.</param>
      <param name="mementos">The structs that hold the state information about a set of items.</param>
      <param name="undoName">The name for the undo units to create.</param>
      <param name="redoName">The name for the undo units to create.</param>
    </member>
    <member name="M:yWorks.Support.MementoUndoableEdit.Cancel">
      <summary>
            This method cancels the compound editing process that has been initialized in <see cref="M:yWorks.Support.UndoEngine.BeginCompoundEdit(System.String,System.String)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoableEdit.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoableEdit.End">
      <summary>
            Ends the editing and enqueues appropriate <see cref="T:yWorks.Support.IUndoUnit"></see>s into the undo engine.
            </summary>
    </member>
    <member name="T:yWorks.Support.MementoUndoUnit">
      <summary>
            A simple <see cref="T:yWorks.Support.IUndoUnit"></see> implementation that uses
            a <see cref="T:yWorks.Support.IMementoSupport"></see> to track, undo, and redo state changes
            on a given subject.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.#ctor(yWorks.Support.IMementoSupport,System.Object,System.Object,System.Object,System.String,System.String)">
      <summary>
            Initializes this unit using a given support instance, the subject and the state that to which
            this unit should undo initially.
            </summary>
      <param name="support">The support that will be used to update and apply the state.</param>
      <param name="subject">The instance that will be modified.</param>
      <param name="oldState">The memento state object to which the subject will be rolled back
            upon the first undo operation.</param>
      <param name="newState">The memento state object to which the subject will be rolled back
            upon the first redo operation.</param>
      <param name="undoName">The name of the undo action.</param>
      <param name="redoName">The name of the redo action.</param>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.#ctor(yWorks.Support.IMementoSupport,System.Object,System.Object,System.String,System.String)">
      <summary>
            Initializes this unit using a given support instance, the subject and the state that to which
            this unit should undo initially.
            </summary>
      <param name="support">The support that will be used to update and apply the state.</param>
      <param name="subject">The instance that will be modified.</param>
      <param name="oldState">The memento state object to which the subject will be rolled back
            upon the first undo operation.</param>
      <param name="undoName">The name of the undo action.</param>
      <param name="redoName">The name of the redo action.</param>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Merges this unit if <paramref name="unit"></paramref> is of this type and they describe the 
            same subject.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.RedoImpl">
      <summary>
            Stores the current state and applies the state saved in <see cref="M:yWorks.Support.MementoUndoUnit.UndoImpl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.ReplaceUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Replaces this unit if <paramref name="unit"></paramref> is of this type and they describe the 
            same subject.
            </summary>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.MementoUndoUnit.UndoImpl">
      <summary>
            Reads the current state and applies the old one.
            </summary>
    </member>
    <member name="T:yWorks.Support.SingleEnumerable`1">
      <summary>
            An enumerable that enumerates a single item, only.
            </summary>
      <typeparam name="T">The type of the item and enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.SingleEnumerable`1.#ctor(`0)">
      <summary>
            Creates this instance using the provided single item.
            </summary>
      <param name="value">The single item.</param>
    </member>
    <member name="P:yWorks.Support.SingleEnumerable`1.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingleEnumerable`1.GetEnumerator"></member>
    <member name="P:yWorks.Support.SingleEnumerable`1.Item(System.Int32)"></member>
    <member name="T:yWorks.Support.SingleEnumerator`1">
      <summary>
            An enumerator that enumerates a single item, only.
            </summary>
      <typeparam name="T">The type of the item and enumerator.</typeparam>
    </member>
    <member name="M:yWorks.Support.SingleEnumerator`1.#ctor(`0)">
      <summary>
            Creates a new instance using the provided item as the only value to enumerate.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:yWorks.Support.SingleEnumerator`1.Current">
      <summary>
                    Gets the current element in the collection.
                </summary>
      <returns>
                    The current element in the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element.
                </exception>
    </member>
    <member name="M:yWorks.Support.SingleEnumerator`1.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="M:yWorks.Support.SingleEnumerator`1.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="M:yWorks.Support.SingleEnumerator`1.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
    </member>
    <member name="T:yWorks.Support.SingletonCollection`1">
      <summary>
            A lightweight collection that contains exactly one single item.
            </summary>
      <typeparam name="T">The type of the item and enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.#ctor(`0)">
      <summary>
            Creates a new instance that holds the provided singleton value.
            </summary>
      <param name="value">The single value this collection holds.</param>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.Add(`0)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.Clear">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="P:yWorks.Support.SingletonCollection`1.IsReadOnly">
      <summary>
            Returns <see langword="true"></see>, always.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonCollection`1.Remove(`0)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="T:yWorks.Support.SingletonList`1">
      <summary>
            A lightweight list that contains exactly one single item.
            </summary>
      <typeparam name="T">The type of the item and enumerable.</typeparam>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.#ctor(`0)">
      <summary>
            Creates a new instance that holds the provided singleton value.
            </summary>
      <param name="value">The single value this collection holds.</param>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.Add(`0)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.Clear">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.Contains(`0)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.CopyTo(`0[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.IndexOf(`0)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.Insert(System.Int32,`0)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="P:yWorks.Support.SingletonList`1.IsReadOnly">
      <summary>
            Returns <see langword="true"></see>, always.
            </summary>
    </member>
    <member name="P:yWorks.Support.SingletonList`1.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <returns>
                    The element at the specified index.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.Remove(`0)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="M:yWorks.Support.SingletonList`1.RemoveAt(System.Int32)">
      <summary>
            Not supported by this class.
            </summary>
    </member>
    <member name="T:yWorks.Support.State">
      <summary>
            A state for use in a <see cref="T:yWorks.Support.StateMachine"></see></summary>
    </member>
    <member name="P:yWorks.Support.State.Enabled">
      <summary>
            Enables or disables this state. 
            </summary>
    </member>
    <member name="E:yWorks.Support.State.StateEntered">
      <summary>
            An event that will be triggered once the machine enters this state.
            </summary>
    </member>
    <member name="E:yWorks.Support.State.StateExited">
      <summary>
            An event that will be triggered once the machine exits this state.
            </summary>
    </member>
    <member name="P:yWorks.Support.State.Tag">
      <summary>
            Gets or sets a custom tag that is associated with this state.
            </summary>
    </member>
    <member name="M:yWorks.Support.State.ToString">
      <summary>
            Returns a string representation of this state that mentions the <see cref="P:yWorks.Support.State.Tag"></see>.
            </summary>
    </member>
    <member name="T:yWorks.Support.StateEnteredHandler">
      <summary>
            Callback method that will be called when a <see cref="T:yWorks.Support.State"></see>
            has been entered in a <see cref="T:yWorks.Support.StateMachine"></see>.
            </summary>
      <param name="lastState">The old state of the state machine.</param>
      <param name="newState">The new state of the state machine.</param>
    </member>
    <member name="T:yWorks.Support.StateExitedHandler">
      <summary>
            Callback method that will be called when a <see cref="T:yWorks.Support.State"></see>
            has been exited in a <see cref="T:yWorks.Support.StateMachine"></see>.
            </summary>
      <param name="lastState">The old state of the state machine.</param>
      <param name="newState">The new state of the state machine.</param>
    </member>
    <member name="T:yWorks.Support.StateHandler">
      <summary>
            Callback that is used by <see cref="E:yWorks.Support.StateMachine.StateCreated"></see>
            and <see cref="E:yWorks.Support.StateMachine.StateRemoved"></see></summary>
    </member>
    <member name="T:yWorks.Support.StateMachine">
      <summary>
            A state machine implementation that can be used to manage complex
            state and transitions.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.#ctor">
      <summary>
            Creates an empty machine with no callback handlers.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.#ctor(yWorks.Support.TransitionDoneHandler,yWorks.Support.StateEnteredHandler)">
      <summary>
            Creates an empty machine using the provided callbacks.
            </summary>
      <param name="td">A callback.</param>
      <param name="se">A callback.</param>
    </member>
    <member name="M:yWorks.Support.StateMachine.#ctor(yWorks.Support.TransitionDoneHandler,yWorks.Support.StateEnteredHandler,yWorks.Support.State)">
      <summary>
            Creates an empty machine using a given start state.
            </summary>
      <param name="td">The handler that will handle <see cref="T:yWorks.Support.TransitionDoneHandler"></see> events.</param>
      <param name="se">The handler that will handle <see cref="T:yWorks.Support.StateEnteredHandler"></see> events.</param>
      <param name="startState">The state to use as the start state.</param>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateState">
      <summary>
            Creates a new state.
            </summary>
      <returns>The new state.</returns>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateState(yWorks.Support.StateEnteredHandler)">
      <summary>
            Creates a new state given a handler that will be notified if that state is entered.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateTransition(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Creates a transition between two given states.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateTransition(yWorks.Support.State,yWorks.Support.State,yWorks.Canvas.Input.EventRecognizerCallback)">
      <summary>
            Creates a conditional transition between two given states.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateTransition(yWorks.Support.State,yWorks.Support.State,yWorks.Canvas.Input.EventRecognizerCallback,yWorks.Support.TransitionDoneHandler)">
      <summary>
            Creates a conditional transition between two given states using a callback.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateTransition(yWorks.Support.State,yWorks.Support.State,yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Creates a conditional transition between two given states.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.CreateTransition(yWorks.Support.State,yWorks.Support.State,yWorks.Canvas.Input.IEventRecognizer,yWorks.Support.TransitionDoneHandler)">
      <summary>
            Creates a conditional transition between two given states using a callback.
            </summary>
    </member>
    <member name="P:yWorks.Support.StateMachine.CurrentState">
      <summary>
            Gets or sets the current state the machine is in.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.FindTransition(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Finds a transistion that connects two given states.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.OnStateChange(yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called when the current state changes.
            </summary>
      <param name="s">The new state.</param>
      <param name="oldState">The old state.</param>
    </member>
    <member name="M:yWorks.Support.StateMachine.OnTransition(yWorks.Support.Transition)">
      <summary>
            Called when a transition is being traversed.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.PerformTransition(yWorks.Support.Transition)">
      <summary>
            Executes a given transition programmatically, regardless of this 
            is currently allowed.
            </summary>
      <param name="t">The transition to traverse.</param>
    </member>
    <member name="M:yWorks.Support.StateMachine.Remove(yWorks.Support.State)">
      <summary>
            Removes a state from this machine.
            </summary>
      <param name="state">A state to remove. This may not be the <see cref="P:yWorks.Support.StateMachine.StartState"></see></param>
    </member>
    <member name="M:yWorks.Support.StateMachine.Remove(yWorks.Support.Transition)">
      <summary>
            Removes a transition from this state machine.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.Reset">
      <summary>
            Resets this machine so that the current state is the <see cref="P:yWorks.Support.StateMachine.StartState"></see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.StateMachine.Run(System.Object,System.EventArgs)">
      <summary>
            Runs this machine using the given event source and event argument
            to determine which transition to take from the <see cref="P:yWorks.Support.StateMachine.CurrentState"></see>.
            </summary>
      <param name="eventSource">The source of the event that caused this machine to run.</param>
      <param name="eventArgs">The event argument of the event that caused this machine to run.</param>
    </member>
    <member name="P:yWorks.Support.StateMachine.StartState">
      <summary>
            Gets the start state.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.StateCreated">
      <summary>
            An event that will be triggerd if a state has been created.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.StateEntered">
      <summary>
            An event that is triggered when a state has been entered
            during a <see cref="M:yWorks.Support.StateMachine.Run(System.Object,System.EventArgs)"></see> call.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.StateExited">
      <summary>
            An event that is triggered when a state has been exited
            during a <see cref="M:yWorks.Support.StateMachine.Run(System.Object,System.EventArgs)"></see> call.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.StateRemoved">
      <summary>
            An event that will be triggerd if a state has been removed.
            </summary>
    </member>
    <member name="P:yWorks.Support.StateMachine.States">
      <summary>
            Returns all states in this machine.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.TransitionCreated">
      <summary>
            An event that will be triggerd if a transition has been created.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.TransitionDone">
      <summary>
            An event that is triggered when the state has traversed a <see cref="T:yWorks.Support.Transition"></see>
            during a <see cref="M:yWorks.Support.StateMachine.Run(System.Object,System.EventArgs)"></see> call.
            </summary>
    </member>
    <member name="E:yWorks.Support.StateMachine.TransitionRemoved">
      <summary>
            An event that will be triggerd if a transition has been removed.
            </summary>
    </member>
    <member name="P:yWorks.Support.StateMachine.Transitions">
      <summary>
            Returns all transitions in this machine.
            </summary>
    </member>
    <member name="T:yWorks.Support.TagOwnerMapper`2">
      <summary>
            A casting <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> implementation that uses
            the <see cref="T:yWorks.Support.ITagOwner"></see> implementation of the <see cref="T:yWorks.Canvas.Model.IModelItem"></see>.
            </summary>
      <typeparam name="TItemType">The exact type of the <see cref="T:yWorks.Canvas.Model.IModelItem"></see> that implements the <c>ITagOwner</c> interface.</typeparam>
      <typeparam name="TValue">The type of the values to map.</typeparam>
    </member>
    <member name="M:yWorks.Support.TagOwnerMapper`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.TagOwnerMapper`2" /> class</summary>
    </member>
    <member name="P:yWorks.Support.TagOwnerMapper`2.Item(`0)"></member>
    <member name="M:yWorks.Support.TagOwnerMapper`2.RemoveValue(`0)"></member>
    <member name="T:yWorks.Support.Transition">
      <summary>
            A transition for use in a <see cref="T:yWorks.Support.StateMachine"></see>.
            </summary>
    </member>
    <member name="P:yWorks.Support.Transition.Enabled">
      <summary>
            Enables or disables this transition.
            </summary>
    </member>
    <member name="P:yWorks.Support.Transition.EventRecognizer">
      <summary>
            Gets or sets the event recognizer that will be used in the <see cref="M:yWorks.Support.Transition.IsTrigger(System.Object,System.EventArgs)"></see>
            method.
            </summary>
    </member>
    <member name="M:yWorks.Support.Transition.IsTrigger(System.Object,System.EventArgs)">
      <summary>
            Determines whether this transition is triggered given the pair
            of event source and event arguments.
            </summary>
      <param name="eventSource">The source of an event.</param>
      <param name="eventArgs">The event argument.</param>
      <returns>Whether the state machine should traverse this transition
            in response to the event.</returns>
    </member>
    <member name="P:yWorks.Support.Transition.Source">
      <summary>
            Gets the source state this transition connects to.
            </summary>
    </member>
    <member name="P:yWorks.Support.Transition.Tag">
      <summary>
            Gets or sets a custom tag that is associated with this state.
            </summary>
    </member>
    <member name="P:yWorks.Support.Transition.Target">
      <summary>
            Gets the target state this transition connects to.
            </summary>
    </member>
    <member name="E:yWorks.Support.Transition.TransitionDone">
      <summary>
            The event that gets triggered once the transition is performed.
            </summary>
    </member>
    <member name="T:yWorks.Support.TransitionDoneHandler">
      <summary>
            Callback method that will be called when a <see cref="T:yWorks.Support.Transition"></see>
            has been traversed in a <see cref="T:yWorks.Support.StateMachine"></see>.
            </summary>
      <param name="t">The transition that has been traversed.</param>
    </member>
    <member name="T:yWorks.Support.TransitionHandler">
      <summary>
            Callback that is used by <see cref="E:yWorks.Support.StateMachine.TransitionCreated"></see>
            and <see cref="E:yWorks.Support.StateMachine.TransitionRemoved"></see></summary>
    </member>
    <member name="T:yWorks.Support.UndoEngine">
      <summary>
            A generic support class that can manage <see cref="T:yWorks.Support.IUndoUnit"></see> instances
            to support undoability.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.UndoEngine" /> class</summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.AddUnit(yWorks.Support.IUndoUnit)">
      <summary>
            Adds a new <see cref="T:yWorks.Support.IUndoUnit"></see> to the queue.
            </summary>
      <param name="unit">The unit of work to add.</param>
    </member>
    <member name="P:yWorks.Support.UndoEngine.AutoAddTimeSpan">
      <summary>
            Gets or sets the timespan during which two events will be <see cref="P:yWorks.Support.UndoEngine.MergeUnits">merged</see>.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.BeginCompoundEdit(System.String,System.String)">
      <summary>
            Begins a compound edit that will use the provided name
            </summary>
      <param name="undoName">The undo name to use for the edit.</param>
      <param name="redoName">The redo name to use for the edit.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.Support.UndoEngine.CanRedo">
      <summary>
            Determines whether a call to <see cref="M:yWorks.Support.UndoEngine.Redo"></see> can be made.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.CanUndo">
      <summary>
            Determines whether a call to <see cref="M:yWorks.Support.UndoEngine.Undo"></see> can be made.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.Clear">
      <summary>
            Clears the internal queue.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.Dispose">
      <summary>
            Disposes this unit and all of its contents.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.GetToken">
      <summary>
            Returns a token that can be used to store and compare the state of the 
            undo queue.
            </summary>
      <returns>An object that can be checked against other tokens via the <see cref="M:System.Object.Equals(System.Object)"></see> method.</returns>
    </member>
    <member name="P:yWorks.Support.UndoEngine.MergeUnits">
      <summary>
            Whether or not this instance should try to merge newly added units.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.OnPropertyChanged(System.String)">
      <summary>
            This will trigger the corresponding <see cref="E:yWorks.Support.UndoEngine.PropertyChanged"></see> event.
            </summary>
      <param name="name">The name of the property that changed.</param>
    </member>
    <member name="P:yWorks.Support.UndoEngine.PerformingRedo">
      <summary>
            Indicates whether this instance is currently performing a redo operation.
            </summary>
    </member>
    <member name="P:yWorks.Support.UndoEngine.PerformingUndo">
      <summary>
            Indicates whether this instance is currently performing an undo operation.
            </summary>
    </member>
    <member name="E:yWorks.Support.UndoEngine.PropertyChanged">
      <summary>
            Event that will be triggered if <see cref="M:yWorks.Support.UndoEngine.CanUndo"></see>, <see cref="M:yWorks.Support.UndoEngine.CanRedo"></see>,
            <see cref="P:yWorks.Support.UndoEngine.UndoName"></see>, or <see cref="P:yWorks.Support.UndoEngine.RedoName"></see> changed its value.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.Redo">
      <summary>
            Redoes the next <see cref="T:yWorks.Support.IUndoUnit"></see>.
            </summary>
      <exception cref="T:System.NotSupportedException">If an undo operation is already in progress.</exception>
      <exception cref="T:System.Exception">If <see cref="M:yWorks.Support.UndoEngine.CanRedo"></see> would yield <c>false</c>.</exception>
    </member>
    <member name="P:yWorks.Support.UndoEngine.RedoName">
      <summary>
            Returns the current redo name.
            </summary>
    </member>
    <member name="P:yWorks.Support.UndoEngine.RedoText">
      <summary>
            Returns the <see cref="P:yWorks.Support.IUndoUnit.RedoName"></see> of the next
            <see cref="M:yWorks.Support.UndoEngine.Redo"></see> operation.
            </summary>
    </member>
    <member name="P:yWorks.Support.UndoEngine.Size">
      <summary>
            Gets or sets the maximum size of the undo queue this instance is managing.
            </summary>
    </member>
    <member name="M:yWorks.Support.UndoEngine.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="M:yWorks.Support.UndoEngine.Undo">
      <summary>
            Undoes the next <see cref="T:yWorks.Support.IUndoUnit"></see>.
            </summary>
      <exception cref="T:System.NotSupportedException">If an undo operation is already in progress.</exception>
      <exception cref="T:System.Exception">If <see cref="M:yWorks.Support.UndoEngine.CanUndo"></see> would yield <c>false</c>.</exception>
    </member>
    <member name="P:yWorks.Support.UndoEngine.UndoName">
      <summary>
            Returns the current undo name.
            </summary>
    </member>
    <member name="P:yWorks.Support.UndoEngine.UndoText">
      <summary>
            Returns the <see cref="P:yWorks.Support.IUndoUnit.UndoName"></see> of the next
            <see cref="M:yWorks.Support.UndoEngine.Undo"></see> operation.
            </summary>
    </member>
    <member name="T:yWorks.Support.Annotations.CanBeNullAttribute">
      <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
    </member>
    <member name="M:yWorks.Support.Annotations.CanBeNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.Annotations.CanBeNullAttribute" /> class</summary>
    </member>
    <member name="T:yWorks.Support.Annotations.NotNullAttribute">
      <summary>
            Indicates that the value of marked element could never be <c>null</c></summary>
    </member>
    <member name="M:yWorks.Support.Annotations.NotNullAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.Support.Annotations.NotNullAttribute" /> class</summary>
    </member>
    <member name="T:yWorks.Support.Extensions.LookupExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.Support.ILookup"></see> and <see cref="T:yWorks.Support.ILookupDecorator"></see> types with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.Extensions.WrapperFactory{``0,``1})">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type using a <see cref="T:yWorks.Support.Extensions.WrapperFactory`2"></see>.
            </summary>
      <param name="decorator">The decorator instance to use, which may be <see langword="null"></see>. (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="wrapperFactory">The factory delegate that will be used to satisfy queries of type <typeparamref name="TResult"></typeparamref>.
            If the factory delegate yields <see langword="null"></see>, this implementation will yield that value. So in order to
            not modify the result, the <see cref="T:yWorks.Support.Extensions.WrapperFactory`2"></see>'s second parameter should be returned by the delegate.
            Note that the second parameter may be <see langword="null"></see>, if this method is used. If such values shall not be wrapped,
            use the <see cref="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.Extensions.WrapperFactory{``0,``1},System.Boolean)"></see> method with <see langword="false"></see>
            as the last argument.</param>
      <typeparam name="TContext">The type of the context subject.</typeparam>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance as returned by the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            call or <see langword="null"></see>, if either <paramref name="decorator"></paramref> was <see langword="null"></see>, or it
            <see cref="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">could not decorate</see> the <typeparamref name="TContext"></typeparamref> type.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.Extensions.WrapperFactory{``0,``1},System.Boolean)">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type using a <see cref="T:yWorks.Support.Extensions.WrapperFactory`2"></see>.
            </summary>
      <param name="decorator">The decorator instance to use, which may be <see langword="null"></see>. (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="wrapperFactory">The factory delegate that will be used to satisfy queries of type <typeparamref name="TResult"></typeparamref></param>
      <param name="decorateNull">Whether to treat actually decorate <see langword="null"></see>-results of remainder of the chain.
            If this is set to <see langword="false"></see>, the <paramref name="wrapperFactory"></paramref> will never be called with <see langword="null"></see>
            as the second argument but the result of the query for this chain link will be the <see langword="null"></see> value.</param>
      <typeparam name="TContext">The type of the context subject.</typeparam>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance as returned by the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            call or <see langword="null"></see>, if either <paramref name="decorator"></paramref> was <see langword="null"></see>, or it
            <see cref="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">could not decorate</see> the <typeparamref name="TContext"></typeparamref> type.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.FactoryDelegate{``1,``0})">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type using a <see cref="T:yWorks.Support.FactoryDelegate`2"></see>.
            </summary>
      <param name="decorator">The decorator instance to use, which may be <see langword="null"></see>. (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="factory">The factory delegate that will be used to satisfy queries of type <typeparamref name="TResult"></typeparamref>.
            If the factory delegate yields <see langword="null"></see>, this implementation will fallback to the lookup chain and return
            the result of the remainder of the chain. (See <see cref="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.FactoryDelegate{``1,``0},System.Boolean)"></see>).</param>
      <typeparam name="TContext">The type of the context subject.</typeparam>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance as returned by the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            call or <see langword="null"></see>, if either <paramref name="decorator"></paramref> was <see langword="null"></see>, or it
            <see cref="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">could not decorate</see> the <typeparamref name="TContext"></typeparamref> type.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.FactoryDelegate{``1,``0},System.Boolean)">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type using a <see cref="T:yWorks.Support.FactoryDelegate`2"></see>.
            </summary>
      <param name="decorator">The decorator instance to use, which may be <see langword="null"></see>. (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="factory">The factory delegate that will be used to satisfy queries of type <typeparamref name="TResult"></typeparamref>.</param>
      <param name="nullIsFallback">Whether to treat <see langword="null"></see>-results of the <paramref name="factory"></paramref>
            as hints to use the remainder of the chain link or to actually yield the value as the final result.</param>
      <typeparam name="TContext">The type of the context subject.</typeparam>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance as returned by the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            call or <see langword="null"></see>, if either <paramref name="decorator"></paramref> was <see langword="null"></see>, or it
            <see cref="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">could not decorate</see> the <typeparamref name="TContext"></typeparamref> type.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.Extensions.WrapperFactory{``0,``1})">
      <summary>
            This method is the same as calling <see cref="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.Extensions.WrapperFactory{``0,``1},System.Boolean)"></see>
            with a <see langword="false"></see> as the final argument.
            </summary>
      <param name="chain">The chain to add the link to.</param>
      <param name="wrapperFactory">The wrapper factory that will be called for queries to <typeparamref name="TResult"></typeparamref>.</param>
      <typeparam name="TContext">The type of the context.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The link that has been registered with the chain.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.Extensions.WrapperFactory{``0,``1},System.Boolean)">
      <summary>
            A convenience method that adds a <see cref="T:yWorks.Support.IContextLookupChainLink"></see> to the given chain
            that is based on a <see cref="T:yWorks.Support.Extensions.WrapperFactory`2"></see>.
            </summary>
      <param name="chain">The chain to add the link to.</param>
      <param name="wrapperFactory">The wrapper factory that will be called for queries to <typeparamref name="TResult"></typeparamref> to
            wrap the result of the query to the remainder of the chain.</param>
      <param name="decorateNull">if set to <c>true</c><see langword="null"></see> return values of the remainder of the chain
            will be passed to the wrapper factory so that it can decorate the null, otherwise null will be yielded as the final result.</param>
      <typeparam name="TContext">The type of the context.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The link that has been registered with the chain.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.FactoryDelegate{``1,``0})">
      <summary>
            This method is the same as calling <see cref="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.FactoryDelegate{``1,``0},System.Boolean)"></see>
            with a <see langword="true"></see> as the final argument.
            </summary>
      <param name="chain">The chain to add the link to.</param>
      <param name="factory">The factory that will be called for queries to <typeparamref name="TResult"></typeparamref>.</param>
      <typeparam name="TContext">The type of the context.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The link that has been registered with the chain.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.LookupChain,yWorks.Support.FactoryDelegate{``1,``0},System.Boolean)">
      <summary>
            A convenience method that adds a <see cref="T:yWorks.Support.IContextLookupChainLink"></see> to the given chain
            that is based on a <see cref="T:yWorks.Support.FactoryDelegate`2"></see>.
            </summary>
      <param name="chain">The chain to add the link to.</param>
      <param name="factory">The factory that will be called for queries to <typeparamref name="TResult"></typeparamref>.</param>
      <param name="nullIsFallback">if set to <c>true</c><see langword="null"></see> return values of the factory method will be 
            interpreted as the final result, otherwise the request will propagate down the chain.</param>
      <typeparam name="TContext">The type of the context.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <returns>The link that has been registered with the chain.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.AddConstant``2(yWorks.Support.ILookupDecorator,``1)">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type that always yields a constant result.
            </summary>
      <param name="decorator">The decorator instance to use, which may be <see langword="null"></see>. (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="result">The constant value to yield if the chain is queried for an implemetation of type <typeparamref name="TResult"></typeparamref>.</param>
      <typeparam name="TContext">The type of the context subject.</typeparam>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance as returned by the <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            call or <see langword="null"></see>, if either <paramref name="decorator"></paramref> was <see langword="null"></see>, or it
            <see cref="M:yWorks.Support.ILookupDecorator.CanDecorate(System.Type)">could not decorate</see> the <typeparamref name="TContext"></typeparamref> type.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.AddConstant``1(yWorks.Support.LookupChain,``0)">
      <summary>
            Convenience method that can be used instead of the <see cref="M:yWorks.Support.LookupChain.Add(yWorks.Support.IContextLookupChainLink)"></see>
            method to easily add a lookup implementation for a given type that always yields a constant result.
            </summary>
      <param name="chain">The chain instance to use (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="result">The constant value to yield if the chain is queried for an implemetation of type <typeparamref name="TResult"></typeparamref>.</param>
      <typeparam name="TResult">The type of the query, which is a base type or the type of the result.</typeparam>
      <returns>The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> instance that has been added to the chain.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.ContextGet``1(yWorks.Support.IContextLookup,System.Object)">
      <summary>
            Typesafe convenience method for the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> method.
            </summary>
      <param name="lookup">The context lookup to operate on (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="item">The item to pass to the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> method.</param>
      <typeparam name="T">The type to query, this is passed to the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see>
            method using <c>typeof</c>. The result of the query will be converted to this type.</typeparam>
      <returns>The result of the query, or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.Get``1(yWorks.Support.ILookup)">
      <summary>
            Typesafe convenience method for the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
      <param name="lookup">The lookup to operate on (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <typeparam name="T">The type to query, this is passed to the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>
            method using <c>typeof</c>. The result of the query will safely be converted to this type.</typeparam>
      <returns>The result of the query, or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.SafeContextGet``1(yWorks.Support.IContextLookup,System.Object)">
      <summary>
            Typesafe convenience method for the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> method.
            </summary>
      <param name="lookup">The context lookup to operate on (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="item">The item to pass to the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see> method.</param>
      <typeparam name="T">The type to query, this is passed to the <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see>
            method using <c>typeof</c>. The result of the query will be converted to this type.</typeparam>
      <returns>The result of the query, never <see langword="null"></see>.</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the context lookup did not yield a non-<c>null</c> result 
            for the type.</exception>
    </member>
    <member name="M:yWorks.Support.Extensions.LookupExtensions.SafeGet``1(yWorks.Support.ILookup)">
      <summary>
            Typesafe convenience method for the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
      <param name="lookup">The lookup to operate on (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <typeparam name="T">The type to query, this is passed to the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>
            method using <c>typeof</c>. The result of the query will be converted to this type.</typeparam>
      <returns>The result of the query, never <see langword="null"></see>.</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the lookup did not yield a non-<c>null</c> result 
            for the type.</exception>
    </member>
    <member name="T:yWorks.Support.Extensions.OrientedRectangleExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> and <see cref="T:yWorks.Canvas.Geometry.IMutableOrientedRectangle"></see> types with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.Contains(yWorks.Canvas.Geometry.IOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Determines whether the given oriented rectangle contains the provided point, using
            an epsilon value.
            </summary>
      <param name="orientedRectangle">The rectangle to test (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="point">The coordinates of the point to test.</param>
      <param name="eps">A positive value allows for fuzzy hit testing. If the point lies outside
            the given object but it's distance is less than or equal to that value, it will
            be considered a hit.</param>
      <returns>
        <c>true</c> iff the point lies inside the rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetAnchorLocation(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Gets the anchor location of the oriented rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
      <param name="orientedRectangle">The rectangle to get the anchor from (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <returns>The value of the anchor vector of the rectangle at the time of the invocation.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetBounds(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Determines the bounds of an oriented rectangle.
            </summary>
      <param name="rect">The rectangle to determine the bounds (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The bounds.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetCenter(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Gets the current center of the oriented rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
      <param name="rectangle">The rectangle that will be used for providing the center (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetDynamicCenter(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Create a dynamic <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> implementation
            that always points to the center of the given oriented rectangle.
            </summary>
      <param name="rectangle">The rectangle that will be used for providing the center (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>A live view of the rectangle's center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetSize(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Gets the size of the oriented rectangle.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to get the size properties from.</param>
      <returns>The width and height of the oriented rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetTransform(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Gets the transform that can be used to transform points that are in the local 
            coordinate system of the oriented rectangle if the top-left corner is the origin.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to use for defining the coordinate space.</param>
      <returns>A matrix that can be used to transform from oriented rectangle coordinates to world coordinates.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.GetUp(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Gets the up vector of the oriented rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
      <param name="orientedRectangle">The rectangle to get the up vector from (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <returns>The value of the up vector of the rectangle at the time of the invocation.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.Hits(yWorks.Canvas.Geometry.IOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Determines whether the oriented rectangle contains the provided point, using
            an epsilon value.
            </summary>
      <param name="rect">The oriented rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="location">The coordinates of the point to test.</param>
      <param name="eps">A positive value allows for fuzzy hit testing. If the point lies outside
            the given object but it's distance is less than or equal to that value, it will
            be considered a hit.</param>
      <returns>
        <c>true</c> iff the point lies inside the rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.SetAnchor(yWorks.Canvas.Geometry.IMutableOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the anchor vector of the oriented rectangle to the given value.
            </summary>
      <param name="orientedRectangle">The rectangle to set the anchor (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="newAnchorLocation">The coordinates of the new anchor location.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.SetCenter(yWorks.Canvas.Geometry.IMutableOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the center of the oriented rectangle to the given value.
            </summary>
      <param name="orientedRectangle">The rectangle to set the center of (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="center">The coordinates of the new center.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.SetSize(yWorks.Canvas.Geometry.IMutableOrientedRectangle,yWorks.Canvas.Geometry.ISize)">
      <summary>
            Sets the size of the rectangle to the provided value.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to set the size properties.</param>
      <param name="size">The size to set.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.SetSize(yWorks.Canvas.Geometry.IMutableOrientedRectangle,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the size of the rectangle to the provided value.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to set the size properties.</param>
      <param name="size">The size to set.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.OrientedRectangleExtensions.SetUpVector(yWorks.Canvas.Geometry.IMutableOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets up vector of the oriented rectangle to the given value.
            </summary>
      <param name="orientedRectangle">The rectangle to set the up vector to (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <param name="up">The coordinates of the new up vector.</param>
    </member>
    <member name="T:yWorks.Support.Extensions.PointExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.Canvas.Geometry.IPoint"></see>, <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see>, and <see cref="T:yWorks.Canvas.Geometry.IPointSetter"></see> types
            with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Support.Extensions.PointExtensions.DistanceTo(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Calculates the euclidian distance between two points.
            </summary>
      <param name="p">The first point (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="q">The second point.</param>
      <returns>The distance between the two points.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.PointExtensions.Set(yWorks.Canvas.Geometry.IPointSetter,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Sets the coordinates of the point to the given values.
            </summary>
      <param name="pointSetter">The point setter to use for setting the values 
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="newLocation">The new location.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.PointExtensions.Set(yWorks.Canvas.Geometry.IPointSetter,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the coordinates of the point to the given values.
            </summary>
      <param name="pointSetter">The point setter to use for setting the values 
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="newLocation">The new location.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.PointExtensions.ToPoint(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Copies the current values of the coordinates of the point to a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> struct.
            </summary>
      <param name="point">The point (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current values of the coordinates of the point.</returns>
    </member>
    <member name="T:yWorks.Support.Extensions.RectangleExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.Canvas.Geometry.IRectangle"></see>, <see cref="T:yWorks.Canvas.Geometry.IMutableRectangle"></see>, and <see cref="T:yWorks.Canvas.Geometry.IReshapeable"></see> 
            types with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Add(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Adds a point to a rectangle, possibly enlarging the rectangle.
            </summary>
      <param name="rect">The rectangle to add to
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="p">The coordinate to include in the bounds.</param>
      <returns>the resulting rectangle, which is <paramref name="rect"></paramref></returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Add(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Adds a rectangle to another one.
            </summary>
      <param name="rect1">The rectangle to modify
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="rect2">The rectangle to be added.</param>
      <returns>The first rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Contains(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Determines whether the given rectangle contains the provided point.
            </summary>
      <param name="rect">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="point">The point to test.</param>
      <returns>
        <c>true</c> iff the point lies inside the rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Contains(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether the given rectangle contains the provided point.
            </summary>
      <param name="rect">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="point">The point to test.</param>
      <returns>
        <c>true</c> iff the point lies inside the rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetBottomLeft(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the coordinates of the bottom left corner of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="rectangle">The rectangle to read the coordinates from
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the corner.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetBottomRight(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the coordinates of the bottom right corner of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="rectangle">The rectangle to read the coordinates from
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the corner.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetCenter(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the coordinates of the center of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="rectangle">The rectangle to read the coordinates from
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetDynamicCenter(yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Create a dynamic <see cref="T:yWorks.Canvas.Geometry.IMutablePoint"></see> implementation
            that always points to the center of the given rectangle.
            </summary>
      <param name="rectangle">The rectangle that will be used for providing the center
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>A live view of the rectangle's center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetDynamicCenter(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Create a dynamic <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> implementation
            that always points to the center of the given rectangle.
            </summary>
      <param name="rectangle">The rectangle that will be used for providing the center
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>A live view of the rectangle's center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetDynamicPoint(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Input.HandlePositions)">
      <summary>
            Create a dynamic <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> implementation
            that always points to the specified position at the given rectangle.
            </summary>
      <param name="rect">The rectangle that will be used for providing the center
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="position">The position to use.</param>
      <returns>A live view of the rectangle's center.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetMaxX(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the maximum X coordinate of the rectangle.
            </summary>
      <param name="rectangle">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The maximum x coordinate of the rectangle's corners.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetMaxY(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the maximum Y coordinate of the rectangle.
            </summary>
      <param name="rectangle">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The maximum y coordinate of the rectangle's corners.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetSize(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the current size of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct.
            </summary>
      <param name="rectangle">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current size of the rectangle.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetTopLeft(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the coordinates of the top left corner of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="rectangle">The rectangle to read the coordinates from
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the corner.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.GetTopRight(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Gets the coordinates of the top right corner of the rectangle as a <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see>.
            </summary>
      <param name="rectangle">The rectangle to read the coordinates from
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>The current coordinates of the corner.</returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.IsEmpty(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Determines whether the specified rectangle is empty.
            </summary>
      <param name="rectangle">The rectangle
            (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>
        <c>true</c> if the specified rectangle is empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Reshape(yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Reshapes the specified reshapeable to the given new bounds.
            </summary>
      <param name="reshapeable">The reshapeable (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="newBounds">The bounds to set to the <paramref name="reshapeable"></paramref>.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.Reshape(yWorks.Canvas.Geometry.IReshapeable,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Reshapes the specified reshapeable to the given new bounds.
            </summary>
      <param name="reshapeable">The reshapeable (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="newBounds">The bounds to set to the <paramref name="reshapeable"></paramref>.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.SetCenter(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the center of the rectangle to the provided value.
            </summary>
      <param name="rectangle">The oriented rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="center">The new center coordinates.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.SetSize(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the size of the rectangle to the values of a <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct.
            </summary>
      <param name="reshapeable">The rectangle (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <param name="newSize">The new size to set to the rectangle.</param>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.SetToUnion(yWorks.Canvas.Geometry.IMutableRectangle,yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Creates the union of two rectangles, placing the result in the this parameter.
            </summary>
      <param name="rect1">The first rectangle to create the union of.</param>
      <param name="rect2">The second rectangle to create the union of.</param>
      <param name="rect">The rectangle to hold the result (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
    </member>
    <member name="M:yWorks.Support.Extensions.RectangleExtensions.ToRectD(yWorks.Canvas.Geometry.IRectangle)">
      <summary>
            Copies the current values of the rectangle to <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> struct.
            </summary>
      <param name="rectangle">The rectangle to read the values from (a <code>this</code> parameter so that this method can be used as an extension method.).</param>
      <returns>A <see cref="T:yWorks.Canvas.Geometry.Structs.RectD"></see> that holds the values of the <paramref name="rectangle"></paramref>
            at the time of the invocation.</returns>
    </member>
    <member name="T:yWorks.Support.Extensions.SizeExtensions">
      <summary>
            Extension method holder class that extends the
             <see cref="T:yWorks.Canvas.Geometry.ISize"></see> type with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.Support.Extensions.SizeExtensions.ToSize(yWorks.Canvas.Geometry.ISize)">
      <summary>
            Converts the <see cref="T:yWorks.Canvas.Geometry.ISize"></see> to a <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct.
            </summary>
      <param name="size">The size to convert (a <code>this</code> parameter so that this method can be used as an extension method.)</param>
      <returns>A <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD"></see> struct that has been initialized with the current values of <paramref name="size"></paramref>.</returns>
    </member>
    <member name="T:yWorks.Support.Extensions.WrapperFactory`2">
      <summary>
            A delegate used by <see cref="M:yWorks.Support.Extensions.LookupExtensions.Add``2(yWorks.Support.ILookupDecorator,yWorks.Support.Extensions.WrapperFactory{``0,``1})"></see></summary>
      <param name="item">The item which has been used as the subject in the <see cref="T:yWorks.Support.IContextLookup"></see>.</param>
      <param name="baseImplementation">The implementation that has been returned by the chain, can be <see langword="null"></see>.</param>
      <typeparam name="TContext">The type of the context</typeparam>
      <typeparam name="TResult">The type of the query, which is not necessarily the type of the <paramref name="baseImplementation"></paramref>
            or the return value, but possibly a base type thereof.</typeparam>
      <returns>The implementation to yield, which may be <see langword="null"></see>, <paramref name="baseImplementation"></paramref>
            or a new implementation thereof.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.GraphMLIOHandler">
      <summary>Class for reading/writing graphs from/to GraphML format.</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.#ctor">
      <summary> Creates a new instance of GraphMLIOHandler.</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputHandlerFactory(System.Predicate{System.Xml.XmlElement},yWorks.yFiles.GraphML.IGenericInputHandlerFactory)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> that is dynamically created by <paramref name="factory"></paramref>.
            </summary>
      <param name="keyDefinitionPredicate">The predicate that matches the key definition.</param>
      <param name="factory">A factory to create <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instances.</param>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputHandlerFactory(System.String,yWorks.yFiles.GraphML.IGenericInputHandlerFactory)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> 
            that is dynamically created by <paramref name="factory"></paramref>.
            </summary>
      <param name="name">The name of the GraphML attribute.</param>
      <param name="factory">A factory to create <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instances.</param>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputHandlerFactory(System.String,yWorks.yFiles.GraphML.KeyScope,yWorks.yFiles.GraphML.IGenericInputHandlerFactory)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> 
            that is dynamically created by <paramref name="factory"></paramref>.
            </summary>
      <param name="name">The name of the GraphML attribute.</param>
      <param name="scope">The scope of the attribute.</param>
      <param name="factory">A factory to create <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instances.</param>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapper``2(System.Predicate{System.Xml.XmlElement},yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an input data target.
            </summary>
      <param name="keyDefinitionPredicate">The predicate function that will determine whether to create an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>
            for the given key definition.</param>
      <param name="mapper">the mapper that serves as data source</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapper``2(System.Predicate{System.Xml.XmlElement},yWorks.Canvas.Model.IMapper{``0,``1},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an input data target. This method uses a custom <see cref="T:System.EventHandler`1"></see>
            for the actual deserialization.
            </summary>
      <param name="keyDefinitionPredicate">The predicate function that will determine whether to create an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>
            for the given key definition.</param>
      <param name="mapper">the mapper that serves as data source</param>
      <param name="deserializationCallback">custom deserialization callback.</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapper``2(System.String,yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an input data target.
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="mapper">the mapper that serves as data source</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapper``2(System.String,yWorks.yFiles.GraphML.KeyType,yWorks.Canvas.Model.IMapper{``0,``1},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an input data target. This method uses a custom <see cref="T:System.EventHandler`1"></see>
            for the actual deserialization.
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="type">The GraphML key type.</param>
      <param name="mapper">the mapper that serves as data source</param>
      <param name="deserializationCallback">custom deserialization callback.</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapperFuture``2(System.Predicate{System.Xml.XmlElement})">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> for
            use as an input data target.
            </summary>
      <param name="keyDefinitionPredicate">The predicate function that will determine whether to create an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>
            for the given key definition.</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapperFuture``2(System.Predicate{System.Xml.XmlElement},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> for
            use as an input data target.
            </summary>
      <param name="deserializationCallback">custom deserialization callback.</param>
      <param name="keyDefinitionPredicate">The predicate function that will determine whether to create an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>
            for the given key definition.</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapperFuture``2(System.String)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> for
            use as an input data target.
            </summary>
      <param name="name">The name of the attribute</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddInputMapperFuture``2(System.String,yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> for
            use as an input data target.
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="type">The desired <see cref="T:yWorks.yFiles.GraphML.KeyType"></see> of the attribute.</param>
      <typeparam name="TKey">The type of the mapper keys</typeparam>
      <typeparam name="TData">The type of the mapper values</typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddNamespace(System.String,System.String)">
      <summary> Adds a namespace to the header of a GraphML file.</summary>
      <param name="namespaceURI">The namespace URI</param>
      <param name="shortName">The namespace prefix</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddOutputMapper``2(System.String,System.String,yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an output data source
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="uri">The URI to add to the key definition to disambiguate keys.</param>
      <param name="mapper">the mapper that serves as data source</param>
      <typeparam name="TModelItem">The type of the mapper keys</typeparam>
      <typeparam name="TValue">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddOutputMapper``2(System.String,System.String,yWorks.Canvas.Model.IMapper{``0,``1},System.EventHandler{yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs},yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an output data source. This method uses a custom <see cref="T:System.EventHandler`1"></see>
            for the actual serialization.
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="mapper">the mapper that serves as data source</param>
      <param name="uri">The URI to add to the key definition to disambiguate keys.</param>
      <param name="serializationCallback">custom serialization callback.</param>
      <param name="declaredKeyType">The key type to write in the declaration.</param>
      <typeparam name="TModelItem">The type of the mapper keys</typeparam>
      <typeparam name="TValue">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddOutputMapper``2(System.String,yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an output data source
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="mapper">the mapper that serves as data source</param>
      <typeparam name="TModelItem">The type of the mapper keys</typeparam>
      <typeparam name="TValue">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddOutputMapper``2(System.String,yWorks.Canvas.Model.IMapper{``0,``1},System.EventHandler{yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs},yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Register a <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance for
            use as an output data source. This method uses a custom <see cref="T:System.EventHandler`1"></see>
            for the actual serialization.
            </summary>
      <param name="name">The name of the attribute</param>
      <param name="mapper">the mapper that serves as data source</param>
      <param name="serializationCallback">custom serialization callback.</param>
      <param name="declaredKeyType">The key type to write in the declaration.</param>
      <typeparam name="TModelItem">The type of the mapper keys</typeparam>
      <typeparam name="TValue">The type of the mapper values</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.Object,System.Predicate{System.Xml.XmlElement},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> that stores the data in an 
            <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that will be <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateMapper``2(System.Object,yWorks.yFiles.GraphML.Parser.IParseContext)">created</see> in the graph's <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
      <param name="name">The name of the GraphML attribute and the key in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.</param>
      <param name="keyDefinitionPredicate">A predicate to determine whether the key definition is valid.</param>
      <param name="deserializationCallback">The custom deserialization callback, can be <see langword="null"></see> which will result in default deserialization.</param>
      <typeparam name="TKey">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TKey"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.Object,System.Predicate{System.Xml.XmlElement},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})"]</p>
      </typeparam>
      <typeparam name="TData">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TData"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.Object,System.Predicate{System.Xml.XmlElement},System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})"]</p>
      </typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String)">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> that stores the data in an 
            <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that will be <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateMapper``2(System.Object,yWorks.yFiles.GraphML.Parser.IParseContext)">created</see> in the graph's <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
      <param name="name">The name of the GraphML attribute and the key in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.</param>
      <typeparam name="TKey">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TKey"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String)"]</p>
      </typeparam>
      <typeparam name="TData">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TData"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String)"]</p>
      </typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String,yWorks.yFiles.GraphML.KeyType,System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Create a <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> that stores the data in an 
            <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that will be <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateMapper``2(System.Object,yWorks.yFiles.GraphML.Parser.IParseContext)">created</see> in the graph's <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
      <param name="name">The name of the GraphML attribute and the key in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.</param>
      <param name="type">The GraphML key type.</param>
      <param name="deserializationCallback">The custom deserialization callback, can be <see langword="null"></see> which will result in default deserialization.</param>
      <typeparam name="TKey">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TKey"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String,yWorks.yFiles.GraphML.KeyType,System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})"]</p>
      </typeparam>
      <typeparam name="TData">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TData"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String,yWorks.yFiles.GraphML.KeyType,System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})"]</p>
      </typeparam>
      <returns>A <see cref="T:yWorks.Support.Future`1"></see> instance that wraps an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> that actually holds the data.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String)">
      <summary>
            Use a registered <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance as source for the given GraphML attribute.
            </summary>
      <param name="name">The tag name of the mapper in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>. 
            This will also be used as the GraphML attribute name.</param>
      <typeparam name="TModelItem">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TModelItem"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String)"]</p>
      </typeparam>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper(System.String,System.Object)">
      <summary>
            Use a registered <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance as source for the given GraphML attribute.
            </summary>
      <param name="name">The GraphML name of the attribute</param>
      <param name="tag">The tag name of the mapper in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see></param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.Object)">
      <summary>
            Use a registered <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance as source for the given GraphML attribute.
            </summary>
      <param name="name">The GraphML name of the attribute</param>
      <param name="registryTag">The tag name of the mapper in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see></param>
      <typeparam name="TModelItem">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TModelItem"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.Object)"]</p>
      </typeparam>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.Object)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.String,System.Object)">
      <summary>
            Use a registered <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> instance as source for the given GraphML attribute.
            </summary>
      <param name="name">The GraphML name of the attribute</param>
      <param name="uri">The URI to add to the key definition to disambiguate keys.</param>
      <param name="registryTag">The tag name of the mapper in the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see></param>
      <typeparam name="TModelItem">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TModelItem"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.String,System.Object)"]</p>
      </typeparam>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryOutputMapper``2(System.String,System.String,System.Object)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddSchemaLocation(System.String,System.String)">
      <summary> Adds a schema location to the header of a GraphML file.</summary>
      <param name="schemaNamespace">The namespace URI for this schema location</param>
      <param name="schemaLocation">The schema location</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.GraphMLIOHandler.ClearGraphBeforeRead">
      <summary>
            Whether to clear an existing graph instance before reading
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureDeserializationHandlers(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Parser.GraphMLParser)">
      <summary>
            Configure the predefined handlers for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
      <param name="graph">The graph that will be parsed.</param>
      <param name="parser">The parser to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureInputHandlers(yWorks.yFiles.GraphML.Parser.GraphMLParser)">
      <summary>
            Configures default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers"></see> event.
            </summary>
      <param name="parser">The parser that should be configured.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureLookup(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configure the lookup map of <paramref name="writer"></paramref>.
            </summary>
      <param name="graph">The graph that will be written.</param>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureNamespaces(yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configures <paramref name="writer"></paramref> to use the namespace declarations set with <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddNamespace(System.String,System.String)"></see>.
            </summary>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureOutputHandlers(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configures default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers"></see> event.
            </summary>
      <param name="graph">The graph that will be written.</param>
      <param name="writer">The writer that should be configured.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureSchemaLocations(yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configures <paramref name="writer"></paramref> to use the schema locations set with <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddSchemaLocation(System.String,System.String)"></see>.
            </summary>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureSerializationHandlers(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configure the predefined handlers for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see> event.
            </summary>
      <param name="graph">The graph that will be written.</param>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureSerializationProperties(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configure important serialization properties from properties of <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler"></see>.
            </summary>
      <param name="graph">The graph to write.</param>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureXamlNamespaceMapper(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.GraphMLWriter)">
      <summary>
            Configure mappings from CLR to XML namespaces.
            </summary>
      <param name="graph">The graph to write.</param>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.ConfigureXMLWriter(yWorks.yFiles.GraphML.Writer.IXmlWriter)">
      <summary>
            Configure <paramref name="writer"></paramref>.
            </summary>
      <param name="writer">The writer to configure.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateGraphElementFactory(yWorks.yFiles.GraphML.Parser.GraphMLParser,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Create an <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see> instance that creates the graph elements for the <paramref name="graph"></paramref> instance.
            </summary>
      <param name="parser">The parser to use.</param>
      <param name="graph">The graph that is populated.</param>
      <returns>An <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see> instance that is configured for the given parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateGraphMLParser(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Create a suitable instance of <see cref="T:yWorks.yFiles.GraphML.Parser.GraphMLParser"></see> that can handle the given graph.
            </summary>
      <param name="graph">The graph that should be filled by this instance</param>
      <returns>a suitable instance of <see cref="T:yWorks.yFiles.GraphML.Parser.GraphMLParser"></see> that can handle the given graph</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateGraphMLWriter(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Create and configure a new <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter"></see> that is used for writing <paramref name="graph"></paramref>.
            </summary>
      <param name="graph">The graph that will be written.</param>
      <returns>A new <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter"></see> instance that is configured for <paramref name="graph"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateMapper``2(System.Object,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Callback used by <see cref="M:yWorks.yFiles.GraphML.GraphMLIOHandler.AddRegistryInputMapper``2(System.String)"></see> and its overloads to creates the mapper instance.
            </summary>
      <param name="registryTag">The tag for the mapper in the registry.</param>
      <param name="parseContext">The current parse context to obtain the graph from.</param>
      <typeparam name="TKey">The type of the keys.</typeparam>
      <typeparam name="TData">The type of the data.</typeparam>
      <returns>The mapper instance to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateXMLWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>
            Factory method that creates and configures a suitable <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> implementation that
            can write the graph to the given <see cref="T:System.IO.Stream"></see> with the given settings.
            </summary>
      <param name="os">The serialization destination</param>
      <param name="encoding">The encoding of the stream</param>
      <returns>A suitable <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> instance for the serialization</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.CreateXMLWriter(System.IO.TextWriter)">
      <summary>
            Factory method that creates and configures a suitable <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> implementation that
            can write the graph to the given <see cref="T:System.IO.TextWriter"></see> with the given settings
            </summary>
      <param name="os">The serialization destination</param>
      <returns>A suitable <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> instance for the serialization</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.GetKeyName(System.Xml.XmlElement)">
      <summary>
            Get the attribute name from an GraphML <paramref name="keyDefinition"></paramref> element.
            </summary>
      <param name="keyDefinition">The GraphML key definition to parse.</param>
      <returns>The attribute name from <paramref name="keyDefinition"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.GetKeyScope(System.Xml.XmlElement)">
      <summary>
            Get the <see cref="T:yWorks.yFiles.GraphML.KeyScope"></see> from an GraphML <paramref name="keyDefinition"></paramref> element.
            </summary>
      <param name="keyDefinition">The GraphML key definition to parse.</param>
      <returns>The <see cref="T:yWorks.yFiles.GraphML.KeyScope"></see> from <paramref name="keyDefinition"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.GetKeyType(System.Xml.XmlElement)">
      <summary>
            Get the <see cref="T:yWorks.yFiles.GraphML.KeyType"></see> from an GraphML <paramref name="keyDefinition"></paramref> element.
            </summary>
      <param name="keyDefinition">The GraphML key definition to parse.</param>
      <returns>The <see cref="T:yWorks.yFiles.GraphML.KeyType"></see> from <paramref name="keyDefinition"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.GetTypeConverter(yWorks.yFiles.GraphML.Writer.IWriteContext,System.ComponentModel.PropertyDescriptor,System.Object,System.Type,System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns a <see cref="T:System.ComponentModel.TypeConverter"></see> instance for the current parameters.
            </summary>
      <param name="context">The current write context</param>
      <param name="descriptor">The property whose value should be converted.</param>
      <param name="subject">The owner instance of <paramref name="descriptor"></paramref>.</param>
      <param name="destinationType">The target type of the conversion.</param>
      <param name="descriptorContext">The conversion context for <see cref="T:System.ComponentModel.TypeConverter"></see></param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> implementation that can convert the current value of <paramref name="descriptor"></paramref> to <paramref name="destinationType"></paramref>, or
            <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.GetValueSerializer(yWorks.yFiles.GraphML.Writer.IWriteContext,System.ComponentModel.PropertyDescriptor,System.Object,System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>
            Returns a <see cref="T:System.Windows.Markup.ValueSerializer"></see> instance for the current parameters.
            </summary>
      <param name="context">The current write context</param>
      <param name="descriptor">The property whose value should be converted.</param>
      <param name="subject">The owner instance of <paramref name="descriptor"></paramref>.</param>
      <param name="destinationType">The target type of the conversion.</param>
      <param name="serializerContext">The conversion context for <see cref="T:System.ComponentModel.TypeConverter"></see></param>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer"></see> implementation that can convert the current value of <paramref name="descriptor"></paramref> to <paramref name="destinationType"></paramref>, or
            <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleArraySerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of arrays.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleAttributeBasedSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of complex objects that are not handled by other callbacks.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleDeserialization">
      <summary>
            Subscribe to this event to provide custom deserialization handling for XML content.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleFrameworkTypeSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of .NET framework types.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleListSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see cref="T:System.Collections.IEnumerable"></see> instances.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleMarkupExtensionBasedSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see cref="T:System.Windows.Markup.MarkupExtension"></see> convertible instances.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleNullSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see langword="null"></see> references.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleReferenceHandleSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see cref="T:yWorks.yFiles.GraphML.References.IReferenceHandle"></see> instances.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleSerialization">
      <summary>
            Subscribe to this event to provide custom serialization handling for XML content.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleStringSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see cref="T:System.String"></see> instances.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleTypefaceSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Handle the serialization of <see cref="T:System.Windows.Media.Typeface"></see> instances.
            </summary>
      <param name="sender">The origin of the event.</param>
      <param name="e">The event handler arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnGraphMLParserHandleDeserialization(System.Object,yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs)">
      <summary>
            Event handler for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnGraphMLParserQueryInputHandlers(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Event handler for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers"></see> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnGraphMLWriterHandleSerialization(System.Object,yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Event handler for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnGraphMLWriterQueryOutputHandlers(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Event handler for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers"></see> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnHandleDeserialization(yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleDeserialization"></see> event.
            </summary>
      <param name="args">The arguments for the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleDeserialization"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnHandleSerialization(yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleSerialization"></see> event.
            </summary>
      <param name="args">The arguments for the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleSerialization"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnOverrideResolveReference(yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.OverrideResolveReference"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.OverrideResolveReference"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnQueryInputHandlers(yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryInputHandlers"></see> event.
            </summary>
      <param name="args">The arguments for the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryInputHandlers"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnQueryOutputHandlers(yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryOutputHandlers"></see> event.
            </summary>
      <param name="args">The arguments for the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryOutputHandlers"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnQueryReferenceId(yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryReferenceId"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryReferenceId"></see> event.</param>
      <exception cref="T:System.ArgumentNullException">
        <c>args</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.OnResolveReference(yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.ResolveReference"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.ResolveReference"></see> event.</param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.OverrideResolveReference">
      <summary>
            This event gets fired before inline references are evaluated.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryInputHandlers">
      <summary>
            Subscribe to this event to dynamically register one or more <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instance(s) for
            a given GraphML attribute key definition.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryOutputHandlers">
      <summary>
            Subscribe to this event to dynamically register one or more <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> instance(s) for
            a given graphml attribute key definition.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryReferenceId">
      <summary>
            This event can be used to provide names of external or internal references for objects.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Read(yWorks.yFiles.UI.Model.IGraph,System.IO.Stream)">
      <summary> Reads GraphML content from the given input stream and populates the Graph
            object.</summary>
      <param name="graph">
            The Graph object that is to be populated with nodes and edges as read from
            the stream.
            </param>
      <param name="stream">
            The input stream that holds the GraphML file to be read. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>stream</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Read(yWorks.yFiles.UI.Model.IGraph,System.IO.TextReader)">
      <summary> Reads GraphML content from the given reader and populates the Graph
            object.</summary>
      <param name="graph">
            The Graph object that is to be populated with nodes and edges as read from
            <paramref name="reader"></paramref>.
            </param>
      <param name="reader">
            The input stream that holds the GraphML file to be read.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>reader</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Read(yWorks.yFiles.UI.Model.IGraph,System.String)">
      <summary> Reads a GraphML file from the given GraphML file and populates the Graph
            object.</summary>
      <param name="graph">
            The Graph object that is to be populated with nodes and edges as read from
            the GraphML file.
            </param>
      <param name="filename">
            The name of the file to be read. 
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>filename</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Read(yWorks.yFiles.UI.Model.IGraph,System.Xml.XmlDocument)">
      <summary>
            Read GraphML from an existing XML document.
            </summary>
      <param name="graph">
            The Graph object that is to be populated with nodes and edges as read from
            the document.
            </param>
      <param name="doc">The XML document.</param>
      <exception cref="T:System.ArgumentNullException">
        <c>doc</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeBendsInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads edge bends. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeBendsOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes edge bends. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeLabelsInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads edge labels. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeLabelsOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes edge labels. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeStyleInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads edge styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterEdgeStyleOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes edge styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterGraphSettingsInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> graph default settings. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterGraphSettingsOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes the settings of a graph. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeLabelsInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads node labels. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeLabelsOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes node labels. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeLayoutInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads node layouts. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeLayoutOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes node layouts. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeStyleInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads node styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterNodeStyleOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes node styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterPortLocationInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads port locations. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterPortLocationOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes port locations. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterPortStyleInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads port styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterPortStyleOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes port styles. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterTagInputHandler(System.Object,yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Predefined input handler that reads <see cref="T:yWorks.Support.ITagOwner"></see> tags. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.RegisterTagOutputHandler(System.Object,yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Predefined output handler that writes <see cref="T:yWorks.Support.ITagOwner"></see> tags. 
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.GraphMLIOHandler.ResolveReference">
      <summary>
            This event gets fired after references are evaluated.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Write(yWorks.yFiles.UI.Model.IGraph,System.IO.Stream)">
      <summary> Writes the given graph object to the output stream creating a GraphML file.</summary>
      <param name="graph">
            The Graph object that is to be written to a GraphML file.
            </param>
      <param name="os">
            The output stream where the output is written.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>os</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Write(yWorks.yFiles.UI.Model.IGraph,System.IO.Stream,System.Text.Encoding)">
      <summary> Writes the given graph object to the output stream creating a GraphML file.</summary>
      <param name="graph">
            The Graph object that is to be written to a GraphML file.
            </param>
      <param name="os">
            The output stream where the output is written.
            </param>
      <param name="encoding">The encoding that should be used for writing</param>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>os</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Write(yWorks.yFiles.UI.Model.IGraph,System.IO.TextWriter)">
      <summary> Writes the given graph object to the output stream creating a GraphML file.</summary>
      <param name="graph">
            The Graph object that is to be written to a GraphML file.
            </param>
      <param name="os">
            The text writer where the output is written.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>os</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.GraphMLIOHandler.Write(yWorks.yFiles.UI.Model.IGraph,System.String)">
      <summary> Writes the given graph object to a GraphML file with a given filename.</summary>
      <param name="graph">
            The Graph object that is to be written to a GraphML file.
            </param>
      <param name="filename">
            The filename where the output is written.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <c>graph</c> is null.</exception>
      <exception cref="T:System.ArgumentException">Need a non-empty filename</exception>
    </member>
    <member name="P:yWorks.yFiles.GraphML.GraphMLIOHandler.WriteSharedReferences">
      <summary>
            Whether to support object sharing on output.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.GraphMLIOHandler.WriteXMLSchema">
      <summary>
        <see langword="true">
        </see> if schema descriptions should be written. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.GraphMLXmlConstants">
      <summary>
            Class that provides constants for core GraphML elements and attributes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.AttrNameAttributeName">
      <summary>
            Constant for the <c>"attr.name"</c> attribute.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.AttrTypeAttributeName">
      <summary>
            Constant for the <c>"attr.type"</c> attribute.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.AttrUriAttributeName">
      <summary>
            Constant for the <c>"yfiles:attr.uri"</c> attribute.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.DefaultElementName">
      <summary> Default element tag name.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.DescriptionElementName">
      <summary> Description element tag name.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.KeyScopeAttributeName">
      <summary> Scope attribute for key definitions.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.SourceAttributeName">
      <summary> Source attribute for edge.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.SourcePortAttributeName">
      <summary> Source port attribute.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.TargetAttributeName">
      <summary> Target attribute for edge.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.GraphMLXmlConstants.TargetPortAttributeName">
      <summary> Target port attribute.</summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.IGenericInputHandlerFactory">
      <summary>
            Interface for factory classes for <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> creation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.IGenericInputHandlerFactory.CreateInputHandler``2(yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Create an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instance base on the given <paramref name="parameter"></paramref>.
            </summary>
      <param name="parameter">
      </param>
      <typeparam name="TKey">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TKey"/&gt; documentation for "M:yWorks.yFiles.GraphML.IGenericInputHandlerFactory.CreateInputHandler``2(yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)"]</p>
      </typeparam>
      <typeparam name="TValue">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TValue"/&gt; documentation for "M:yWorks.yFiles.GraphML.IGenericInputHandlerFactory.CreateInputHandler``2(yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)"]</p>
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.KeyScope">
      <summary>
            Enumeration for the possible scopes of a graphml attribute.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.All">
      <summary>
            Unscoped for key definition
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.Node">
      <summary>
            Node-Scope for key definition.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.Edge">
      <summary>  Edge-Scope for key definition.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.Graph">
      <summary>  Graph-Scope for key definition.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.Port">
      <summary>  Port-Scope for key definition.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyScope.Graphml">
      <summary>  Graphml-Scope for key definition.</summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.KeyType">
      <summary>
            Enumeration for the allowed data types of a graphml attribute.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Int">
      <summary> Identifier for attribute of type <c>int</c>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Long">
      <summary> Identifier for attribute of type <c>long</c>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Float">
      <summary> Identifier for attribute of type <c>float</c>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Double">
      <summary> Identifier for attribute of type <c>double</c>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.String">
      <summary> Identifier for attribute of type <c>string</c> that denotes
            simple string content as opposed to <see cref="F:yWorks.yFiles.GraphML.KeyType.Complex"></see>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Boolean">
      <summary> Identifier for attribute of type <c>boolean</c>.</summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.KeyType.Complex">
      <summary> Identifier for arbitrary complex xml content</summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.NamespaceConstants">
      <summary>
            Class that provides constants for common namespace declarations and schema locations.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.GraphMLCoreNS">
      <summary>
            The default namespace URI for the graphml core namespace.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.GraphmlXPathPrefix">
      <summary>
            Canonical prefix for graphml elements when used in XPath queries.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.MsWpfPrefix">
      <summary>
            The default namespace prefix for MS XAML elements that are WPF specific.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.MsWpfXamlNS">
      <summary>
            The default namespace URI for MS XAML elements that are WPF specific.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.MsXamlNS">
      <summary>
            The default namespace URI for MS XAML elements that are not WPF specific.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.PresentationOptionsNS">
      <summary>
            The default namespace URI for WPF presentation option attributes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.PresentationOptionsPrefix">
      <summary>
            The default namespace prefix for <see cref="F:yWorks.yFiles.GraphML.NamespaceConstants.PresentationOptionsNS"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonMarkupNS">
      <summary>
            The namespace URI for common yFiles extensions to graphml.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonMarkupPrefix">
      <summary>
            The default namespace prefix for <see cref="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonMarkupNS"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonNS">
      <summary>
            The namespace URI for common yFiles extensions to graphml.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonPrefix">
      <summary>
            The default namespace prefix for <see cref="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonNS"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesCommonXPathPrefix">
      <summary>
            Canonical prefix for common specific elements when used in XPath queries inside
            custom code.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesSchemaLocation">
      <summary>
            The schema location for yFiles WPF enhanced GraphML
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesWpfXamlNS">
      <summary>
            The default namespace URI for the yFiles extensions to graphml that are specific to yFiles WPF.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesWpfXamlPrefix">
      <summary>
            The XML namespace prefix for yFiles elements specific to yFiles WPF.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.NamespaceConstants.YfilesWpfXPathPrefix">
      <summary>
            Canonical prefix for yfiles WPF elements when used in XPath queries inside
            custom code.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.StandardAttributeNames">
      <summary>
            Constant class that provides names for the standard yFiles WPF GraphML attributes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.EdgeGeometryKeyName">
      <summary>
            GraphML attribute for edge geometry.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.EdgeLabelsKeyName">
      <summary>
            GraphML attribute for edge labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.EdgeStyleKeyName">
      <summary>
            GraphML attribute for edge style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.GraphSettingsKeyName">
      <summary>
            GraphML attribute for graph settings (node, edge, defaults, etc.).
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.ItemTagKeyName">
      <summary>
            GraphML attribute for <see cref="P:yWorks.Support.ITagOwner.Tag"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.NodeGeometryKeyName">
      <summary>
            GraphML attribute for node geometry.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.NodeLabelsKeyName">
      <summary>
            GraphML attribute for node labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.NodeStyleKeyName">
      <summary>
            GraphML attribute for node style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.PortLocationKeyName">
      <summary>
            GraphML attribute for port location.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.StandardAttributeNames.PortStyleKeyName">
      <summary>
            GraphML attribute for port style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Folding.EdgeViewState">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.EdgeViewState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Folding.EdgeViewState" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.EdgeViewState.Bends">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.EdgeViewState.Labels">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.EdgeViewState.SourcePort">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.EdgeViewState.Style">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.EdgeViewState.TargetPort">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see>
            interface that decorates a given instance to add the <see cref="T:yWorks.yFiles.UI.Model.FoldingManager">folding capabilities</see>
            on top of it.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory.#ctor(yWorks.yFiles.GraphML.Parser.IGraphElementFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory"></see> class.
            </summary>
      <param name="coreFactory">The core factory to delegate the actual creation to.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory.AddPort(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates the port using the core factory that has been provided to the constructor.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory.CreateEdge(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates the edge using the core factory that has been provided to the constructor.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.FoldingManagerGraphElementFactory.CreateNode(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Creates the node using the core factory that has been provided to the constructor.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Folding.NodeViewState">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Folding.NodeViewState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Folding.NodeViewState" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.NodeViewState.Labels">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.NodeViewState.Layout">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Folding.NodeViewState.Style">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.ArrayExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ArrayExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.ArrayExtension.Items">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.ArrayExtension.Type">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.GenericListExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.#ctor(System.Collections.IEnumerable,System.Type)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.#ctor(System.Type)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.CopyItems(System.Collections.IList)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.GetCollectionType(System.Type)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.GenericListExtension.Items">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.GenericListExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.GenericListExtension.Type">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.ListExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ListExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ListExtension.#ctor(System.Collections.ICollection)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ListExtension.#ctor(System.Collections.IEnumerable)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.ListExtension.Items">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.ListExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.NullExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.NullExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Markup.NullExtension" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>
                    When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension. 
                </summary>
      <param name="serviceProvider">
                    Object that can provide services for the markup extension.
                </param>
      <returns>
                    The object value to set on the property where the extension is applied. 
                </returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.StaticExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.StaticExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.StaticExtension.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.StaticExtension.#ctor(System.Type,System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.StaticExtension.Member">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.StaticExtension.Type">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Markup.TypeExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.TypeExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.TypeExtension.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.TypeExtension.#ctor(System.Type,System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.TypeExtension.Type">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Markup.TypeExtension.TypeName">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2">
      <summary>
            An abstract convenience implementation of the <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>
            interface.
            </summary>
      <typeparam name="TKey">The type of the key, i.e. the items that are associated with the data in the GraphML.</typeparam>
      <typeparam name="TData">The type of the data that is associated with the keys.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.#ctor(yWorks.yFiles.GraphML.Parser.ParsePrecedence)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2"></see> class.
            </summary>
      <param name="precedence">The precedence to assign to the <see cref="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.Precedence"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ApplyDefault(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            This method is invoked when no data tag is defined, and the default value
            should be applied.
            </summary>
      <param name="context">the current parse context.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.DefaultExists">
      <summary>
            Gets or sets a value indicating whether the default value exists in the key definition.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.DefaultValue">
      <summary>
            Gets or sets the default value that will be applied to the keys where the data attribute is missing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.InitializeFromKeyDefinition(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlElement)">
      <summary>
            Initializes this instance from the GraphML key definition.
            </summary>
      <param name="context">The context.</param>
      <param name="definition">The definition.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ParseData(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            This method is invoked each time a data element with matching key
            is processed.
            </summary>
      <param name="context">the current parse context.</param>
      <param name="node">the DOM node representing the data element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ParseDataCore(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Abstract method callback that actually parses the data.
            </summary>
      <param name="context">The context.</param>
      <param name="node">The node that contains the data. This is either the GraphML 'data' element or the 'default' element.</param>
      <returns>The parsed data.</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ParseDefaultValue">
      <summary>
            Gets or sets a value indicating whether the default value in the key definition should be parsed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.Precedence">
      <summary>
            Gets or sets the parse precedence that is associated with this handler.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.SetValue(yWorks.yFiles.GraphML.Parser.IParseContext,`0,`1)">
      <summary>
            Abstract method callback that actually stores the value with the keys.
            </summary>
      <param name="context">The context.</param>
      <param name="key">The key.</param>
      <param name="data">The data.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ValidScopes">
      <summary>
            Allows to restrict the scopes where the handler is used.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2">
      <summary>
            An abstract <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>-based implementation of an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TData">The type of the data.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.#ctor(yWorks.yFiles.GraphML.Parser.ParsePrecedence)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2"></see> class.
            </summary>
      <param name="precedence">The precedence to assign to the <see cref="P:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.Precedence"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.ApplyDefault(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Overridden to take the <see cref="P:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.OverrideDefaultValue"></see> property
            into account.
            </summary>
      <param name="context">The context for the parse operation.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.Mapper">
      <summary>
            Gets or sets the mapper to use for storing the data.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.OverrideDefaultValue">
      <summary>
            Gets or sets a value indicating whether values that are applied via the <see cref="M:yWorks.yFiles.GraphML.Parser.AbstractInputHandler`2.ApplyDefault(yWorks.yFiles.GraphML.Parser.IParseContext)"></see>.
            mechanism and are equal to the value that is already present in the mapper will
            explicitly be overridden in the mapper.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.SetValue(yWorks.yFiles.GraphML.Parser.IParseContext,`0,`1)">
      <summary>
            This method uses the <see cref="P:yWorks.yFiles.GraphML.Parser.AbstractMapperInputHandler`2.Mapper"></see> to associate the data with the 
            key.
            </summary>
      <param name="context">The context.</param>
      <param name="key">The key.</param>
      <param name="data">The data.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.ChildParseContext">
      <summary>
             An implementation of <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see> that delegates most calls to
             a <see cref="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ParentContext"></see>, but adds the capablility to locally add
             <see cref="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.Lookup(System.Type)"></see> results and <see cref="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.GetDeserializationProperty``1(System.Object)">deserialization properties</see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ChildParseContext"></see> class
            that delegates to the provided context.
            </summary>
      <param name="parentContext">The parent context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ChildParseContext"></see> class
            that delegates to the provided context and adds the <paramref name="currentObject"></paramref>
            to the <see cref="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ObjectStack"></see>.
            </summary>
      <param name="parentContext">The parent context.</param>
      <param name="currentObject">The current object to add to the <see cref="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ObjectStack"></see> and assign
            to <see cref="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.CurrentObject"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.CurrentObject">
      <summary> Returns the most current (i.e. the last element) 
            within the container hierarchy as it is returned
            by <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Parser.ChildParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.GetDeserializationProperty``1(System.Object)">
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Parser.ChildParseContext.GetDeserializationProperty``1(System.Object)"]</p>
      </typeparam>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.Graph">
      <summary>
            Returns the currently active graph object
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ObjectStack">
      <summary> Returns the current nesting of created graphs and graph elements.</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ParentContext">
      <summary>
            Gets the parent context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ChildParseContext.ParseEvents">
      <summary>
            Returns an implementation of <see cref="T:yWorks.yFiles.GraphML.Parser.IParseEvents"></see> that allows to subscribe to various
            events in the parse process.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.RemoveDeserializationProperty(System.Object)">
      <summary>
            Removes a previously locally <see cref="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.SetDeserializationProperty(System.Object,System.Object)">set</see> deserialization property.
            </summary>
      <param name="key">The key for which the local property override should be removed.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.RemoveLookup``1">
      <summary>
            Removes a local lookup override that has been added using <see cref="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.SetLookup``1(``0)"></see></summary>
      <typeparam name="T">The type key to remove.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.SetDeserializationProperty(System.Object,System.Object)">
      <summary>
            Sets the local deserialization property for the given key to the value.
            </summary>
      <param name="key">The key to override.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ChildParseContext.SetLookup``1(``0)">
      <summary>
            Adds another lookup result to the local lookup override.
            </summary>
      <param name="value">The value to provide for queries to <typeparamref name="T"></typeparamref>.</param>
      <typeparam name="T">The type to use as a key for the lookup.</typeparam>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2">
      <summary>
            An <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> implementation that uses an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>
            instance to associate the values with the keys.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2"></see> class
            that uses the <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see> for deserialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.#ctor(System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2"></see> class
            that uses the event handler for deserialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.#ctor(System.EventHandler{yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs},System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2"></see> class
            that uses the event handler for deserialization and suggests the provided target type for the deserializer.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.Deserializer">
      <summary>
            Gets or sets the deserializer.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.DeserializerTargetType">
      <summary>
            Gets or sets the target deserialization type for the <see cref="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.TargetType"></see>
            property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.GetDeserializationXmlNode(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Gets the node to pass to <see cref="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.Deserializer"></see> or <see cref="M:yWorks.yFiles.GraphML.Parser.IParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)"></see>
             respectively, given the 'data' or 'default' element from the GraphML.
            </summary>
      <param name="context">The context within which the node is parsed.</param>
      <param name="node">The 'data' or 'default' node.</param>
      <returns>The node that should be deserialized.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.ParseDataCore(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Parses the data using either the <see cref="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.Deserializer"></see> or the <see cref="M:yWorks.yFiles.GraphML.Parser.IParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)"></see>
            call.
            </summary>
      <param name="context">The context.</param>
      <param name="node">The node that contains the data. This is either the GraphML <c>'data'</c> element or the 
            <c>'default'</c> element.</param>
      <returns>The parsed data.</returns>
      <exception cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException">
        <c>DeserializationNotSupportedException</c> if <see cref="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.Deserializer"></see>
            could not handle the node.</exception>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.UseParentElementForDeserialization">
      <summary>
            Controls the behavior of <see cref="M:yWorks.yFiles.GraphML.Parser.ComplexMapperInputHandler`2.GetDeserializationXmlNode(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)"></see> to return either the <c>'data'</c>/<c>'default'</c>
            element itself or its content.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.CreationProperties">
      <summary>
            Simple tagging subclass of <see cref="T:yWorks.Canvas.Model.DictionaryMapper`2"></see>
            that is typed for <see cref="T:System.Object"></see> keys and values.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.CreationProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties" /> class</summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys">
      <summary>
            Defines common key constants to identify important <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.Bends">
      <summary>
             Creation property key that tags bend information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.EdgeDirectedness">
      <summary>
             Creation property key that tags direction information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.IsGroupNode">
      <summary>
             Creation property key that tags group node information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.Labels">
      <summary>
             Creation property key that tags label information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.Layout">
      <summary>
             Creation property key that tags node layout information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.PortLocationModelParameter">
      <summary>
             Creation property key that tags port location information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.Style">
      <summary>
             Creation property key that tags style information.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.CreationPropertyKeys.Tag">
      <summary>
             Creation property key that tags tag object information.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException">
      <summary>
            Exception that will be thrown by the <see cref="M:yWorks.yFiles.GraphML.Parser.IParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)"></see> method
            and the like to indicate that the deserializtion failed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException"></see> class.
            </summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source and destination for the object.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException"></see> class with the given message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException"></see> class
            with the given message and inner exception.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.GraphElementFactory">
      <summary>
            The basic implementation of the <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see>
            interface for use with the default <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.GraphElementFactory" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementFactory.AddPort(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Adds a new port to the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <param name="portOwner">The owner of the port.</param>
      <returns>A newly created port.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementFactory.CreateEdge(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates an edge for the given context and the provided source and target nodes or ports.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <param name="sourceNode">The source node for the edge.</param>
      <param name="sourcePort">The source port for the edge, if specified, otherwise <see langword="null"></see>.</param>
      <param name="targetNode">The target node for the edge.</param>
      <param name="targetPort">The target port for the edge, if specified, otherwise <see langword="null"></see>.</param>
      <returns>A newly created edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementFactory.CreateNode(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Creates a node for the given context.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <returns>A newly created node</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor">
      <summary>
            Default implementation of <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor"></see> and <see cref="T:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.CreateIdProvider(yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider)">
      <summary>
            Factory method to create a default implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider"></see> that
            delegates to <paramref name="fallback"></paramref>.
            </summary>
      <param name="fallback">The fallback.</param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.EdgeIds">
      <summary>
            Return a mapping between all GraphML ids for <c>&lt;edge&gt;</c> elements and the corresponding <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instances
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.GraphIds">
      <summary>
            Return a mapping between all GraphML ids for <c>&lt;graph&gt;</c> elements and the corresponding <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instances
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.NodeIds">
      <summary>
            Return a mapping between all GraphML ids for <c>&lt;node&gt;</c> elements and the corresponding <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instances
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.PortIds">
      <summary>
            Return a mapping between all GraphML ids for <c>&lt;port&gt;</c> elements and the corresponding <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instances
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.ResolveEdge(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such edge exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.ResolveGraph(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such graph exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.ResolveNode(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.INode"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such node exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.ResolvePort(yWorks.yFiles.GraphML.Parser.IParseContext,System.String,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instance. The port owner is specified by the <paramref name="ownerId"></paramref>
            attribute.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="ownerId">The GraphML id of the port owner.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> that is defined by the GraphML ids, or <see langword="null"></see>
            if no such port exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IEdge,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given edge.
            </summary>
      <param name="edge">The current edge element</param>
      <param name="id">The id of the edge's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IGraph,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given graph.
            </summary>
      <param name="graph">The current graph element</param>
      <param name="id">The id of the graph's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.INode,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given node.
            </summary>
      <param name="node">The current node element</param>
      <param name="id">The id of the node's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IPort,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given port.
            </summary>
      <param name="port">The current port element</param>
      <param name="id">The id of the port's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.GraphMLParser">
      <summary>
            Core parser class for GraphML.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.GraphMLParser" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.CreateParseContext(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Create the initial <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see> instance.
            </summary>
      <param name="graph">The graph that is parsed.</param>
      <returns>An <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see> instance that is suitable for <paramref name="graph"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Deserialize the content of <paramref name="element"></paramref>.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="element">The XML content that should be deserialized.</param>
      <typeparam name="T">The desired type of the result.</typeparam>
      <returns>An instance of <typeparamref name="T"></typeparamref> that is represented by <paramref name="element"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.GetDeserializationProperty``1(System.Object)">
      <summary>
            Retrieve a deserialization property that has been set by <see cref="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.SetDeserializationProperty(System.Object,System.Object)"></see>.
            </summary>
      <param name="key">The key for the property.</param>
      <typeparam name="T">The target type of the property.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.GetInputHandlers(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlElement)">
      <summary>
            Dynamically retrieve all <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instances that process a GraphML attribute with
            key definition <paramref name="keyDefinition"></paramref>.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="keyDefinition">The key definition element of the GraphML attribute.</param>
      <returns>A list of <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler">IInputHandlers</see> that claim to be responsible for handling
            the given GraphML attribute.</returns>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization">
      <summary>
            Subscribe to this event to provide custom deserialization handling for XML content.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Lookup(System.Type)">
      <summary>
            Dynamically retrieve an instance of <paramref name="type"></paramref>.
            </summary>
      <param name="type">The type for which an implementation is needed.</param>
      <returns>An implementation of <paramref name="type"></paramref>, or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.OnHandleDeserialization(yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.OnQueryInputHandlers(yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Parse(System.IO.Stream,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Parser.IGraphElementFactory)">
      <summary>
            Parse the input <paramref name="stream"></paramref> into an <paramref name="graph"></paramref> instance, using <paramref name="elementFactory"></paramref>
            to create the elements.
            </summary>
      <param name="stream">The input stream to parse.</param>
      <param name="graph">The graph instance that is populated.</param>
      <param name="elementFactory">The <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see> instance that is used to create the elements.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Parse(System.IO.TextReader,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Parser.IGraphElementFactory)">
      <summary>
            Parse the input <paramref name="reader"></paramref> into an <paramref name="graph"></paramref> instance, using <paramref name="elementFactory"></paramref>
            to create the elements.
            </summary>
      <param name="reader">The input reader to parse.</param>
      <param name="graph">The graph instance that is populated.</param>
      <param name="elementFactory">The <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see> instance that is used to create the elements.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Parse(System.Xml.XmlDocument,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Parser.IGraphElementFactory)">
      <summary>
            Parse the XML document <paramref name="document"></paramref> into an <paramref name="graph"></paramref> instance, using <paramref name="elementFactory"></paramref>
            to create the elements.
            </summary>
      <param name="document">The XML document instance to parse.</param>
      <param name="graph">The graph instance that is populated.</param>
      <param name="elementFactory">The <see cref="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory"></see> instance that is used to create the elements.</param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers">
      <summary>
            Subscribe to this event to dynamically register one or more <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instance(s) for
            a given graphml attribute key definition.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.RegisterDefaultDeserializers">
      <summary>
            Register default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.RegisterDefaultInputHandlers">
      <summary>
            Register default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.QueryInputHandlers"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.RemoveDeserializationProperty(System.Object)">
      <summary>
            Remove a deserialization property that has been set by <see cref="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.SetDeserializationProperty(System.Object,System.Object)"></see>.
            </summary>
      <param name="key">The key for the property.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.RemoveLookup``1">
      <summary>
            Remove an implementation of <typeparamref name="T"></typeparamref> that has been set with <see cref="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.SetLookup``1(``0)"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Parser.GraphMLParser.RemoveLookup``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.SetDeserializationProperty(System.Object,System.Object)">
      <summary>
            Set a deserialization property that allows to fine tune the parsing process.
            </summary>
      <param name="key">The key for the property.</param>
      <param name="value">The property value.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.SetLookup``1(``0)">
      <summary>
            Register an implementation of <typeparamref name="T"></typeparamref> for use with <see cref="M:yWorks.yFiles.GraphML.Parser.GraphMLParser.Lookup(System.Type)"></see>.
            </summary>
      <param name="instance">The implementation of <typeparamref name="T"></typeparamref> for lookup retrieval.</param>
      <typeparam name="T">The type of <paramref name="instance"></paramref>.</typeparam>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs">
      <summary>
            The event arguments used by <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleDeserialization"></see> and <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see>
            to let registered deserialization code perform the deserialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs"></see> class.
            </summary>
      <param name="context">The context in which serialization should take place.</param>
      <param name="xmlNode">The XML element that contains the data to deserialize.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs"></see> class.
            </summary>
      <param name="context">The context in which serialization should take place.</param>
      <param name="xmlNode">The XML element that contains the data to deserialize.</param>
      <param name="targetType">The required <see cref="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.TargetType">target type</see> of the <see cref="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.Result"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.Context">
      <summary>
            Gets the context in which the <see cref="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.XmlNode"></see> shall be deserialized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs"></see> is handled.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.Result">
      <summary>
            Holds the result of the deserialization, which is <see langword="null"></see> initially.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value is not assignable to <see cref="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.TargetType"></see></exception>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.TargetType">
      <summary>
            Gets the type of the resulting instance that is required by the requesting deserializer or <see langword="null"></see>
            if the target type is not known in advance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs.XmlNode">
      <summary>
            Gets the XML node that contains the data to deserialize.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IDeserializer">
      <summary>
            The interface variant of the <see cref="T:yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs"></see> callback.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IDeserializer.Deserialize(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Deserializes the data that is associated with the given xml node in the given context.
            </summary>
      <param name="context">The context in which the deserialization needs to be performed.</param>
      <param name="node">The node that contains the data to deserialize.</param>
      <returns>The object that has been created for the xml data.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IGraphElementFactory">
      <summary>
            This is the interface for a factory that is used for creating the constituents of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            that are encountered during the parsing of <see cref="T:yWorks.yFiles.GraphML.Parser.GraphMLParser">GraphML</see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementFactory.AddPort(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Adds a new port to the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <param name="portOwner">The owner of the port.</param>
      <returns>A newly created port.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementFactory.CreateEdge(yWorks.yFiles.GraphML.Parser.IParseContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates an edge for the given context and the provided source and target nodes or ports.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <param name="sourceNode">The source node for the edge.</param>
      <param name="sourcePort">The source port for the edge, if specified, otherwise <see langword="null"></see>.</param>
      <param name="targetNode">The target node for the edge.</param>
      <param name="targetPort">The target port for the edge, if specified, otherwise <see langword="null"></see>.</param>
      <returns>A newly created edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementFactory.CreateNode(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Creates a node for the given context.
            </summary>
      <param name="context">The context from which the graph, the <see cref="T:yWorks.yFiles.GraphML.Parser.CreationProperties"></see>, and the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see>
            can be queried.</param>
      <returns>A newly created node</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor">
      <summary>
            Interface for classes that can store the GraphML id attribute of GraphML core elements
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IEdge,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given edge.
            </summary>
      <param name="edge">The current edge element</param>
      <param name="id">The id of the edge's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IGraph,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given graph.
            </summary>
      <param name="graph">The current graph element</param>
      <param name="id">The id of the graph's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.INode,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given node.
            </summary>
      <param name="node">The current node element</param>
      <param name="id">The id of the node's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementIdAcceptor.StoreId(yWorks.yFiles.UI.Model.IPort,System.String,yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Store the value of the id attribute for the given port.
            </summary>
      <param name="port">The current port element</param>
      <param name="id">The id of the port's XML representation</param>
      <param name="context">The current parse context.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IGraphElementResolver">
      <summary>
            Interface for classes can resolve graph elements based on their GraphML id attribute(s).
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementResolver.ResolveEdge(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such edge exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementResolver.ResolveGraph(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such graph exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementResolver.ResolveNode(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.INode"></see> that is defined by this GraphML <paramref name="id"></paramref>, or <see langword="null"></see>
            if no such node exists yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IGraphElementResolver.ResolvePort(yWorks.yFiles.GraphML.Parser.IParseContext,System.String,System.String)">
      <summary>
            Resolve the GraphML <paramref name="id"></paramref> to an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instance. The port owner is specified by the <paramref name="ownerId"></paramref>
            attribute.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="ownerId">The GraphML id of the port owner.</param>
      <param name="id">The id that should be resolved.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> that is defined by the GraphML ids, or <see langword="null"></see>
            if no such port exists yet.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IInputHandler">
      <summary> This class defines a handler for key/data elements.</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IInputHandler.ApplyDefault(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary> This method is invoked when no data tag is defined, and the default value
            should be applied. 
            </summary>
      <param name="context">the current parse context.
            </param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IInputHandler.ParseData(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary> This method is invoked each time a data element with matching key
            is processed.
            </summary>
      <param name="context">the current parse context.
            </param>
      <param name="node">the DOM node representing the data element.
            </param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.IInputHandler.Precedence">
      <summary>
            Gets the parse precedence that is associated with this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IParseContext">
      <summary>
            Interface that defines the context of a GraphML parsing context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.IParseContext.CurrentObject">
      <summary> Returns the most current (i.e. the last element) 
            within the container hierarchy as it is returned
            by <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IParseContext.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Deserialize the object representation in <paramref name="targetNode"></paramref></summary>
      <param name="context">The current parse context.</param>
      <param name="targetNode">The XML node that should be deserialized.</param>
      <typeparam name="T">The expected return type.</typeparam>
      <returns>The deserialized object from <paramref name="targetNode"></paramref> or an <see cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException"></see>
            if <paramref name="targetNode"></paramref> could not be deserialized.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.IParseContext.GetDeserializationProperty``1(System.Object)">
      <summary>
            Get a property value that specifies information about how to handle specific cases.
            </summary>
      <param name="key">The identifier for the property</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Parser.IParseContext.GetDeserializationProperty``1(System.Object)"]</p>
      </typeparam>
      <returns>The property value, or <see langword="null"></see> if no such property exists.</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.IParseContext.Graph">
      <summary>
            Returns the currently active graph object
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.IParseContext.ObjectStack">
      <summary> Returns the current nesting of created graphs and graph elements.</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.IParseContext.ParseEvents">
      <summary>
            Returns an implementation of <see cref="T:yWorks.yFiles.GraphML.Parser.IParseEvents"></see> that allows to subscribe to various
            events in the parse process.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.IParseEvents">
      <summary>
            The interface of the event trigger class that is used
            by the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ParseEvents"></see> property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.DataParsed">
      <summary>
            Occurs after a data element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.DataParsing">
      <summary>
            Occurs when a data element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.DocumentParsed">
      <summary>
            Occurs when the document has been parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.DocumentParsing">
      <summary>
            Occurs when the document is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.EdgeParsed">
      <summary>
            Occurs after a edge element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.EdgeParsing">
      <summary>
            Occurs when an edge element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.GraphMLParsed">
      <summary>
            Occurs after the graphml element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.GraphMLParsing">
      <summary>
            Occurs when the graphml element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.GraphParsed">
      <summary>
            Occurs after a graph element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.GraphParsing">
      <summary>
            Occurs when a graph element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.KeyParsed">
      <summary>
            Occurs after a key element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.KeyParsing">
      <summary>
            Occurs when a key element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.NodeParsed">
      <summary>
            Occurs after a node element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.NodeParsing">
      <summary>
            Occurs when a node element is about to be parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.PortParsed">
      <summary>
            Occurs after a port element has been fully parsed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Parser.IParseEvents.PortParsing">
      <summary>
            Occurs when a port element is about to be parsed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.ParseContextExtensions">
      <summary>
            Extension methods for <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ParseContextExtensions.Deserialize``1(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlNode)">
      <summary>
            Deserialize the object representation in <paramref name="targetNode"></paramref>.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="targetNode">The XML node that should be deserialized.</param>
      <typeparam name="T">The desired target type.</typeparam>
      <returns>an instance of <typeparamref name="T"></typeparamref> or <see langword="null"></see>.</returns>
      <exception cref="T:yWorks.yFiles.GraphML.Parser.DeserializationNotSupportedException">
      </exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ParseContextExtensions.GetCurrent``1(yWorks.yFiles.GraphML.Parser.IParseContext)">
      <summary>
            Typesafe alternative for <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.CurrentObject"></see>.
            </summary>
      <param name="context">The current parse context.</param>
      <typeparam name="T">The desired target type.</typeparam>
      <returns>
        <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.CurrentObject">
        </see> as an instance of <typeparamref name="T"></typeparamref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.ParseEventArgs">
      <summary>
            This is the event argument that is used by the <see cref="T:yWorks.yFiles.GraphML.Parser.ParseEvents"></see> interface
            that can be queried from the <see cref="P:yWorks.yFiles.GraphML.Parser.IParseContext.ParseEvents"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.ParseEventArgs.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlElement)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Parser.ParseEventArgs"></see> class.
            </summary>
      <param name="context">The context to assign to <see cref="P:yWorks.yFiles.GraphML.Parser.ParseEventArgs.Context"></see>.</param>
      <param name="element">The XML element to assign to <see cref="P:yWorks.yFiles.GraphML.Parser.ParseEventArgs.Element"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ParseEventArgs.Context">
      <summary>
            Gets the context that is being used for parsing.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.ParseEventArgs.Element">
      <summary>
            Gets the XML element that is currently parsed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.ParsePrecedence">
      <summary>
            This enumeration defines the valid priorities for <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> processing.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.First">
      <summary>
            The data is parsed as early as possible.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.BeforeOwner">
      <summary>
            The data is parsed before its owner GraphML element.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.BeforeChildren">
      <summary>
            The data is parsed after its owner GraphML element, but before any non-data child content.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.Default">
      <summary>
            Default parse priority.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.AfterChildren">
      <summary>
            The data is parsed after any non-data child content, but before parsing the owner GraphML element is finished.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.AfterOwner">
      <summary>
            The data is parsed directly after parsing the owner GraphML element is finished.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Parser.ParsePrecedence.Last">
      <summary>
            The data is parsed as late as possible.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs">
      <summary>
            Specialized <see cref="T:System.EventArgs"></see> that are used for dynamic <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> registration.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.Xml.XmlElement,System.Collections.Generic.IList{yWorks.yFiles.GraphML.Parser.IInputHandler})">
      <summary>Create a new instance.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="keyDefinition">The current key definition</param>
      <param name="handlers">Stores the registered  <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instances.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.AddInputHandler(yWorks.yFiles.GraphML.Parser.IInputHandler)">
      <summary>
            Register an <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see> instance for the current <see cref="P:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.KeyDefinition"></see>.
            </summary>
      <param name="handler">
      </param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.Context">
      <summary>
            The <see cref="T:yWorks.yFiles.GraphML.Parser.IParseContext"></see> instance that can queried for further information.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.Handled">
      <summary>
            Set or query whether the current GraphML attribute has been processed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Parser.QueryInputHandlersEventArgs.KeyDefinition">
      <summary>
            The key definition of the GraphML attribute.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.GraphMLReferenceExtension">
      <summary>
            A <see cref="T:System.Windows.Markup.MarkupExtension"></see> that can be used inside
            GraphML to reference elements declared at different locations
            in the GraphML file.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.GraphMLReferenceExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.GraphMLReferenceExtension.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.GraphMLReferenceExtension.ProvideValue(System.IServiceProvider)">
      <summary>
            Note that this method will only work as expected if used within the GraphML parser.
            </summary>
      <param name="serviceProvider">The service provider instance.</param>
      <returns>The instance or <c>null</c>.</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.GraphMLReferenceExtension.ResourceKey">
      <summary>
            The key to the resource that will be used to lookup the value.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.GraphMLReferenceType">
      <summary>
            Specifies the type of the shared resource.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.References.GraphMLReferenceType.Internal">
      <summary>
            Specifies an internal resource, i.e. the serialized form of the resource is stored
            in the GraphML document itself.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.References.GraphMLReferenceType.External">
      <summary>
            Specifies an external resource, i.e. the resource description is not stored
            in the GraphML document itself.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.IReferenceHandle">
      <summary>
            Interface that allows a generic access to shared resources.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.IReferenceHandle.Id">
      <summary>
            The id that identifies the resource in the GraphML document.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.IReferenceHandle.ReferenceType">
      <summary>
            The type of a resource (external or internal)
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.IReferenceHandle.Subject">
      <summary>
            The resource that is encapsulated by the handle.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.IReferenceHandler">
      <summary>
            This interface defines methods to write and configure shared sections in the
            resulting GraphML output
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.IReferenceHandler.GetHandle(System.Object)">
      <summary>
            Gets the reference handle for a given subject.
            </summary>
      <param name="subject">The subject.</param>
      <returns>A handle for the resource <paramref name="subject"></paramref>, or <see langword="null"></see> if the resource
            is not registered.</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.IReferenceHandler.InternalHandles">
      <summary>
            Return a collection of all registered reference handles that should be written to the GraphML shared data section.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.IReferenceHandler.IsNewInternalResource(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Query whether <paramref name="subject"></paramref> has already been registered as an <b>internal</b> resource before. The resource is <b>not</b>
            registered by this call.
            </summary>
      <param name="context">The current write context.</param>
      <param name="subject">The resource to register.</param>
      <returns>
        <see langword="true">
        </see> iff <paramref name="subject"></paramref> has not been registered as internal resource before.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.IReferenceHandler.MarkAsUnshared(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Unregister a shared resource.
            </summary>
      <param name="context">The current write context.</param>
      <param name="subject">The resource to register.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.IReferenceHandler.RegisterResource(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Register a shared resource.
            </summary>
      <param name="context">The current write context.</param>
      <param name="subject">The resource to register.</param>
      <returns>
        <see langword="true">
        </see> iff the resource needs to be serialized; otherwise the resource is either a duplicate resource
            or is declared externally and does not need any additional handling.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs">
      <summary>
            Event arguments for calls to the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryReferenceId"></see> or <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryReferenceId"></see> events.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="context">The current write context that can be used by the event handler for additional information.</param>
      <param name="value">The referenced object instance.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.Context">
      <summary>
            The current write context that can be used by the event handler for additional information.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.Handled">
      <summary>
            Returns whether the last event handler invocation has actually handled
            the event.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.ReferenceId">
      <summary>
            The reference id that should be evaluated by the event handler.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.ReferenceType">
      <summary>
            Determines the type of the reference being queried.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs.Value">
      <summary>
            The reference value that is encapsulated by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.ReferenceConstants">
      <summary>
            Constant class for reference handling related constants
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.References.ReferenceConstants.GraphMLReferenceTagName">
      <summary>
            Tag name for shared references that need an external enclosing tag
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.References.ReferenceConstants.SharedDataKeyName">
      <summary>
            The name of the GraphML attribute for a default section
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.References.ReferenceConstants.SharedDataTagName">
      <summary>
        <c>SharedData</c> tag
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs">
      <summary>
            Event arguments for calls to the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.ResolveReference"></see> and  
            <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.OverrideResolveReference"></see> events.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs.#ctor(yWorks.yFiles.GraphML.Parser.IParseContext,System.String)">
      <summary>
            Creates a new instance of <see cref="T:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs"></see>.
            </summary>
      <param name="context">The current parse context that can be used by the event handler for additional information.</param>
      <param name="referenceId">The reference id that should evaluated by the event handler.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs.Context">
      <summary>
            The current parse context that can be used by the event handler for additional information.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs.Handled">
      <summary>
            Returns whether the last event handler invocation has actually handled
            the event.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs.ReferenceId">
      <summary>
            The reference id that should evaluated by the event handler.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.References.ResolveReferenceEventArgs.Value">
      <summary>
            The reference value that is encapsulated by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2">
      <summary>
            An abstract implementation of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2"></see> class
            that uses an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> to retrieve the values to output for each item.
            </summary>
      <typeparam name="TKey">The type of the keys.</typeparam>
      <typeparam name="TData">The type of the data.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2"></see> class
            using the given name and inferring the scope and the type from the class parameters.
            </summary>
      <param name="name">The name to use for the key attributes.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.#ctor(yWorks.yFiles.GraphML.KeyScope,System.String,yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2"></see> class
            using the provided key scope, the name, and the key type.
            
            </summary>
      <param name="scope">The scope for the key definition attributes.</param>
      <param name="name">The name for the key definition attributes.</param>
      <param name="type">The type for the key definition attributes.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.GetValue(yWorks.yFiles.GraphML.Writer.IWriteContext,`0)">
      <summary>
            Callback method that obtains the data for the given key.
            </summary>
      <param name="context">The context.</param>
      <param name="key">The key.</param>
      <returns>
            The data that is associated with the key using the <see cref="P:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.Mapper"></see>.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.Mapper">
      <summary>
            Gets or sets the mapper to use for querying the data for each item.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.MapperMetadata">
      <summary>
            Gets or sets the mapper metadata to serialize to the key definition.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractMapperOutputHandler`2.WriteKeyDefinitionContent(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Writes the contents of the key definition.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2">
      <summary>
            Convenience abstract base implementation of the <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> interface.
            </summary>
      <typeparam name="TKey">The type of the keys.</typeparam>
      <typeparam name="TData">The type of the data.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.#ctor(yWorks.yFiles.GraphML.KeyScope,System.String,yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2"></see> class
            using the provided scope, name, and type for the key definition.
            </summary>
      <param name="scope">The scope, if this is <see cref="F:yWorks.yFiles.GraphML.KeyScope.Graphml"></see>, the <see cref="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.ValidScopes"></see>
            property is initialized to contain exactly that scope.</param>
      <param name="name">The name to use for the key definition.</param>
      <param name="type">The type to use for the key definition.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.AddNameToKeyDefinition(System.String)">
      <summary>
            Adds the name to the key definition.
            </summary>
      <param name="name">The name of the key element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.AddScopeToKeyDefinition(yWorks.yFiles.GraphML.KeyScope)">
      <summary>
            Adds the scope to the key definition.
            </summary>
      <param name="scope">The scope of the key element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.AddTypeToKeyDefinition(yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Adds the key type to the key definition.
            </summary>
      <param name="type">The type of the key element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.AddUriToKeyDefinition(System.String)">
      <summary>
            Adds an optional uri to the key definition.
            </summary>
      <param name="uri">The uri of the key element.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.DataTagAttributes">
      <summary>
            Gets the XML attributes that should be added to the data element.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.DefaultExists">
      <summary>
            Gets or sets a value indicating whether a default value has been assigned.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.DefaultValue">
      <summary>
            Gets or sets the default value.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.GetValue(yWorks.yFiles.GraphML.Writer.IWriteContext,`0)">
      <summary>
            Callback method that obtains the data for the given key.
            </summary>
      <param name="context">The context.</param>
      <param name="key">The key.</param>
      <returns>The data that is associated with the key.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.IsDefaultValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Determines whether in the current context, the value is the default value and therefore
            no data element needs to be written.
            </summary>
      <param name="ctx">The context.</param>
      <returns>
        <c>true</c> if for the current context the default value applies and therefore no data element needs to be written.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.KeyDefinitionAttributes">
      <summary>
            Gets the XML attributes that should be added to the key definition in the GraphML key element.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.Precedence">
      <summary>
            Gets or sets the write precedence for the handler.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.ValidScopes">
      <summary>
            Allows to restrict the scopes where the handler is used, if the handler is registered to <see cref="F:yWorks.yFiles.GraphML.KeyScope.All"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.WriteKeyDefault">
      <summary>
            Gets or sets a value indicating whether to write the key default.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.WriteKeyDefinitionContent(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Writes the contents of the key definition.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.WriteValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Actually writes the value for the current context.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2.WriteValueCore(yWorks.yFiles.GraphML.Writer.IWriteContext,`1)">
      <summary>
            Callback method that performs the actual writing of the data.
            </summary>
      <param name="context">The context.</param>
      <param name="data">The data.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AbstractSerializer">
      <summary>
            Abstract base class for implementations of the <see cref="T:yWorks.yFiles.GraphML.Writer.ISerializer"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractSerializer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractSerializer.Serialize(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Default implementation of <see cref="M:yWorks.yFiles.GraphML.Writer.ISerializer.Serialize(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)"></see></summary>
      <param name="context">The current write context.</param>
      <param name="item">The item to serialize.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractSerializer.SerializeCore(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            This method handles the actual writing of <paramref name="item"></paramref> itself.
            </summary>
      <param name="context">The current write context.</param>
      <param name="item">The item to serialize.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter">
      <summary>
            Stub implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> that provides common method for namespace and schema setup
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.#ctor">
      <summary>
            Create a new instance with no configured namespaces and schemas
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.CreateNamespaceManager">
      <summary>
            Factory method that creates the namespace manager for this instance.
            </summary>
      <returns>A new manager instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.FlushDocument">
      <summary>
            Close the document.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.NamespaceManager">
      <summary>
            Gets the namespace manager associated with this writer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>
            Write a XML attribute node.
            </summary>
      <param name="prefix">The namespace prefix of the attribute</param>
      <param name="localName">The local name of the attribute</param>
      <param name="ns">The namespace URI of this attribute</param>
      <param name="value">The value of this attribute</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteAttributeCore(System.String,System.String,System.String,System.String)">
      <summary>
            The core method that actually writes an attribute.
            </summary>
      <param name="prefix">The prefix or <see langword="null"></see>.</param>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteCData(System.String)">
      <summary>
            Write a CDATA section.
            </summary>
      <param name="content">The content of the CDATA section</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteComment(System.String)">
      <summary>
            Write a XML comment node
            </summary>
      <param name="comment">The content of the comment</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteDocumentFragment(System.Xml.XmlDocumentFragment)">
      <summary>
            Write a document fragment
            </summary>
      <param name="fragment">
      </param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteEndDocument">
      <summary>
            Close the output.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteEndElement">
      <summary>
            Close a XML element previously opened with <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String)"></see> or
            <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see>.
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteEndElementCore">
      <summary>
            The core method that actually writes the end element.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
            Write a xml processing instruction.
            </summary>
      <param name="target">The target of the PI</param>
      <param name="data">The data of the PI</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteStartDocument">
      <summary>
            Begin the output process
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
            Begin a new XML element with given parameters
            </summary>
      <param name="localName">The local name of this element</param>
      <param name="ns">The namespace of this element</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
            Begin a new XML element with given parameters
            </summary>
      <param name="prefix">The namespace prefix to use for this element</param>
      <param name="localName">The local name of this element</param>
      <param name="ns">The namespace of this element</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteStartElementCore(System.String,System.String)">
      <summary>
            The core method that actually writes the starting element.
            </summary>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteStartElementCore(System.String,System.String,System.String)">
      <summary>
            The core method that actually writes the starting element.
            </summary>
      <param name="prefix">The prefix or <see langword="null"></see>.</param>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AbstractXmlWriter.WriteString(System.String)">
      <summary>
            Write a text node.
            </summary>
      <param name="s">The string that gets written as XML text</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer">
      <summary>
        <see cref="T:yWorks.yFiles.GraphML.Writer.ISerializer">
        </see> implementation that produces XAML conforming output
            from the target object's reflection data.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.CreateMemberContentContext(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Creates a <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> for nested property writes.
            </summary>
      <param name="context">The current write context</param>
      <returns>A <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> for nested property writes</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetMemberAttributeName(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Gets the XML attribute name for a member property.
            </summary>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="info">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="context">The current write context</param>
      <returns>The XML attribute name for a member property <paramref name="info"></paramref></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetMemberTagName(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Gets the tag name for a member property.
            </summary>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="context">The current write context</param>
      <returns>The tag name for a member property <paramref name="desc"></paramref></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetProperties(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Returns a list of all properties that should be serialized.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The object that should be serialized.</param>
      <returns>A list of all properties that should be serialized</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetTagName(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Returns the name of the toplevel element.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The target object that should be serialized.</param>
      <returns>The name of the toplevel element</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetTypeConverter(yWorks.yFiles.GraphML.Writer.IWriteContext,yWorks.yFiles.GraphML.Writer.GraphMLAttribute,System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
            Gets a <see cref="T:System.ComponentModel.TypeConverter"></see> for the given parameters
            </summary>
      <param name="context">The current write context</param>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="descriptor">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="currentValue">The current value of the property.</param>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer"></see> for the given parameters</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.GetXmlNamespace(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Returns the target XML namespace of the toplevel element.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The target object that should be serialized.</param>
      <returns>The target namespace URI of the toplevel element</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.HasDefaultValue(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns true if a property has a default value and therefore should not be written at all.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="info">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <returns>
        <see langword="true">
        </see> if the property has a default value.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.IsCollectionProperty(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns true if a property is a collection property that needs to be handled specially according to the XAMl rules.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <returns>
        <see langword="true">
        </see> if the property is a collection property.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.Serialize(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Serialize the given object to a <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see></summary>
      <param name="context">The current write context</param>
      <param name="subject">The actual object</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.SerializeContent(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,yWorks.yFiles.GraphML.Writer.IXmlWriter)"></member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.SerializeMember(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>
            Write the property value in element syntax.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="currentValue">The current value of the property</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">Unable to create explicit Serializer instance</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.ShouldSerialize(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>
            Returns true if property <paramref name="desc"></paramref> should be serialized.
            </summary>
      <param name="context">The current write context</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <returns>
        <see langword="true">
        </see> if the property should be serialized.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.ShouldWriteEnclosingTag(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Determines whether an explicit enclosing tag should be written for a property.
            </summary>
      <param name="context">The current write context.</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <returns>
        <see langword="true">
        </see> iff the member should be written with an enclosing property tag.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.ShouldWriteMemberAsAttribute(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Determines whether property <paramref name="desc"></paramref> should be written as attribute value or as complete
            element.
            </summary>
      <param name="context">The current write context.</param>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="desc">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <returns>
        <see langword="true">
        </see> iff the member should be written as an XML attribute value.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.WriteMemberAttribute(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.IXmlWriter,System.String,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Writes property <paramref name="info"></paramref> as an attribute value.
            </summary>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="info">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="name">The local name of the attribute.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="context">The current write context</param>
      <param name="writer">The output writer.</param>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
        <c>SerializationNotSupportedException</c>.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.WriteMemberTag(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,System.String,yWorks.yFiles.GraphML.Writer.GraphMLAttribute,yWorks.yFiles.GraphML.Writer.IXmlWriter)">
      <summary>
            Writes an XML element for a property.
            </summary>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="descriptor">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="name">The local name of the enclosing tag.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="context">The current write context</param>
      <param name="writer">The output writer.</param>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
        <c>SerializationNotSupportedException</c>.</exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.WriteMemberTagContent(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.GraphMLAttribute)">
      <summary>
            Writes the XML element content for a property.
            </summary>
      <param name="attr">An optional attribute that overrides the implicit rules</param>
      <param name="propertyDescriptor">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property.</param>
      <param name="subject">The object that should be serialized.</param>
      <param name="context">The current write context</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.WriteNullAttributeValue(yWorks.yFiles.GraphML.Writer.IWriteContext,yWorks.yFiles.GraphML.Writer.IXmlWriter,System.String)">
      <summary>
            Write an attribute value of <see langword="null"></see>.
            </summary>
      <param name="context">The current write context</param>
      <param name="writer">The output writer.</param>
      <param name="name">The name of the attribute</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer.WriteNullElementValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Write an element that represents <see langword="null"></see>.
            </summary>
      <param name="context">The current write context</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializerAttribute">
      <summary>
            Convenience extension of <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLSerializerAttribute"></see> that is fixed to a <see cref="T:yWorks.yFiles.GraphML.Writer.ISerializer"></see> type
            of <see cref="T:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializer"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.AttributeBasedSerializerAttribute.#ctor">
      <summary>
            Create a new instance of this attribute.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.ChildWriteContext">
      <summary>
            An <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> implementation for use in the context of <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter"></see>
            that wraps a given instance and delegates most of the calls to it but allows for modifying
            <see cref="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetLookup``1(``0)">lookup</see> and <see cref="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetSerializationProperty(System.Object,System.Object)">serialization properties</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.ChildWriteContext"></see> class that delegates to the given parent context.
            </summary>
      <param name="parentContext">The parent context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.ChildWriteContext"></see> class that delegates to the provided context
            and has the <see cref="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.CurrentObject"></see> set to the given value.
            </summary>
      <param name="parentContext">The parent context to delegate calls to.</param>
      <param name="currentObject">The current object to assign to <see cref="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.CurrentObject"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.CurrentObject">
      <summary> Returns the most current (i.e. the last element) 
            within the container hierarchy as it is returned
            by <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.ObjectStack"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.GetSerializationProperty``1(System.Object)">
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.GetSerializationProperty``1(System.Object)"]</p>
      </typeparam>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.Graph">
      <summary>
            Returns the currently active graph object
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.ObjectStack">
      <summary> Returns the current nesting of graphs and graph elements.</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.ParentContext">
      <summary>
            Gets the parent context to which most calls are delegated.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.RemoveLookup``1">
      <summary>
            Removes a local lookup override that has been added using <see cref="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetLookup``1(``0)"></see></summary>
      <typeparam name="T">The type key to remove.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.RemoveSerializationProperty(System.Object)">
      <summary>
            Removes a previously locally <see cref="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetSerializationProperty(System.Object,System.Object)">set</see> serialization property.
            </summary>
      <param name="key">The key for which the local property override should be removed.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)">
      <summary>
            Serialize <paramref name="item"></paramref> to an XML representation.
            </summary>
      <param name="context">The current write context.</param>
      <param name="item">The object that should be serialized.</param>
      <typeparam name="T">The type of the object that is serialized.</typeparam>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
      </exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetLookup``1(``0)">
      <summary>
            Adds another lookup result to the local lookup override.
            </summary>
      <param name="value">The value to provide for queries to <typeparamref name="T"></typeparamref>.</param>
      <typeparam name="T">The type to use as a key for the lookup.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ChildWriteContext.SetSerializationProperty(System.Object,System.Object)">
      <summary>
            Sets the local serialization property for the given key to the value.
            </summary>
      <param name="key">The key to override.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.WriteEvents">
      <summary>
            Returns an implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteEvents"></see> that allows to subscribe to various
            events in the write process.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ChildWriteContext.Writer">
      <summary>
            Gets or sets the writer.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.GraphML.Writer.AbstractOutputHandler`2"></see> class,
            that can use a <see cref="P:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.Serializer"></see> callback for the serialization
            or delegate to the <see cref="M:yWorks.yFiles.GraphML.Writer.IWriteContext.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)"></see> callback.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2"></see> class
            using the provided name.
            </summary>
      <param name="name">The name to use for the key attributes.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.#ctor(yWorks.yFiles.GraphML.KeyScope,System.String,yWorks.yFiles.GraphML.KeyType)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2"></see> class
            using the provided key attributes.
            </summary>
      <param name="scope">The scope of the handler.</param>
      <param name="name">The name to use for the definition.</param>
      <param name="type">The type of the data.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.Serializer">
      <summary>
            Gets or sets the serialization callback to use for serializing the value in <see cref="M:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.WriteValueCore(yWorks.yFiles.GraphML.Writer.IWriteContext,`1)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.SourceType">
      <summary>
            Gets or sets the source type of the serialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.WriteValueCore(yWorks.yFiles.GraphML.Writer.IWriteContext,`1)">
      <summary>
            Callback method that performs the actual writing of the data using either the <see cref="P:yWorks.yFiles.GraphML.Writer.ComplexMapperOutputHandler`2.Serializer"></see>
            or the <see cref="M:yWorks.yFiles.GraphML.Writer.IWriteContext.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)"></see> method.
            </summary>
      <param name="context">The context to use for writing.</param>
      <param name="data">The data to write.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.DirectXmlWriter">
      <summary>
            Implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> that writes directly to an output stream, without
            internal buffering.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
            Create a new instance that writes on the given stream with a specified encoding
            </summary>
      <param name="os">The output stream</param>
      <param name="enc">The document encoding</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Create a new instance that writes on a <see cref="T:System.IO.TextWriter"></see></summary>
      <param name="os">The output stream</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.FlushDocument">
      <summary>
            Close the document.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteAttributeCore(System.String,System.String,System.String,System.String)">
      <summary>
            The core method that actually writes an attribute.
            </summary>
      <param name="prefix">The prefix or <see langword="null"></see>.</param>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteCData(System.String)">
      <summary>
            Write a CDATA section.
            </summary>
      <param name="content">The content of the CDATA section</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteComment(System.String)">
      <summary>
            Write a XML comment node
            </summary>
      <param name="comment">The content of the comment</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteDocumentFragment(System.Xml.XmlDocumentFragment)">
      <summary>
            Write a document fragment
            </summary>
      <param name="fragment">
      </param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteEndDocument">
      <summary>
            Close the output.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteEndElementCore">
      <summary>
            The core method that actually writes the end element.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
            Write a xml processing instruction.
            </summary>
      <param name="target">The target of the PI</param>
      <param name="data">The data of the PI</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteStartDocument">
      <summary>
            Begin the output process
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteStartElementCore(System.String,System.String)">
      <summary>
            The core method that actually writes the starting element.
            </summary>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteStartElementCore(System.String,System.String,System.String)">
      <summary>
            The core method that actually writes the starting element.
            </summary>
      <param name="prefix">The prefix or <see langword="null"></see>.</param>
      <param name="localName">The name of the element.</param>
      <param name="namespace">The namespace uri of the element.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.DirectXmlWriter.WriteString(System.String)">
      <summary>
            Write a text node.
            </summary>
      <param name="s">The string that gets written as XML text</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLAttribute">
      <summary>
            Custom attribute to control specific aspects of GraphML deserialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLAttribute" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.CustomTypeConverter">
      <summary>
            Gets or sets a custom <see cref="T:System.ComponentModel.TypeConverter"></see> for attribute serialization.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.Name">
      <summary>
            Gets or sets the name of the type or member where this attribute is used.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.Serializable">
      <summary>
            Gets or sets whether this type or property can be GraphML serialized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.Shareable">
      <summary>
            Gets or sets whether the object reference identity of the property values should be kept intact.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.WriteAsAttribute">
      <summary>
            Gets or sets whether the member should be written as an XML element or as an XML attribute.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.WriteEnclosingTag">
      <summary>
            Gets or sets whether an enclosing tag for the property itself is written.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLAttribute.XmlNamespace">
      <summary>
            Gets or sets the XML namespace URI for the type or member where this attribute is used.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLSerializerAttribute">
      <summary>
            Custom attributes that allows to specify <see cref="T:yWorks.yFiles.GraphML.Writer.ISerializer"></see> implementations for own
            data types.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLSerializerAttribute.#ctor(System.Type)">
      <summary>
            Create new attribute
            </summary>
      <param name="serializerType">The type of the serializer to use. The type must either
            provide a static <c>Instance</c> property to retrieve a shared instance at runtime or
            define a parameterless default constructor.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLSerializerAttribute.SerializerType">
      <summary>
            Get the type of the serialize that has been provided when creating the attribute
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext">
      <summary>
            Special implementation of <see cref="T:System.Windows.Markup.IValueSerializerContext"></see> that is suitable in a GraphML context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Creates a new instance that wraps <paramref name="writeContext"></paramref></summary>
      <param name="instance">The target object for which this context is built</param>
      <param name="propertyDescriptor">The descriptor that represents the property for which this context is built</param>
      <param name="writeContext">The current write context</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.Container">
      <summary>
            Returns <see langword="null"></see></summary>
      <returns>Returns <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.GetService(System.Type)">
      <summary>
            Returns the wrapped <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> for this serviceType, otherwise
            <see langword="null"></see></summary>
      <param name="serviceType">The serviceType</param>
      <returns>the wrapped <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> for this serviceType, otherwise
            <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>
                    Gets a <see cref="T:System.Windows.Markup.ValueSerializer" /> for the given property descriptor.
                </summary>
      <param name="descriptor">
                    The descriptor of the property being converted.
                </param>
      <returns>
                    A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified property.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>
                    Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> associated with the specified type.
                </summary>
      <param name="type">
                    The type of the value being converted.
                </param>
      <returns>
                    A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified type.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.Instance">
      <summary>
                    Gets the object that is connected with this type descriptor request.
                </summary>
      <returns>
                    The object that invokes the method on the <see cref="T:System.ComponentModel.TypeDescriptor" />; otherwise, null if there is no object responsible for the call.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.OnComponentChanged">
      <summary>
            Does nothing
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.OnComponentChanging">
      <summary>
            Does nothing
            </summary>
      <returns>Returns <see langword="true"></see></returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLValueSerializerContext.PropertyDescriptor">
      <summary>
                    Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is associated with the given context item.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.PropertyDescriptor" /> that describes the given context item; otherwise, null if there is no <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsible for the call.
                </returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter">
      <summary>
            Core writer class for GraphML.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.CreateWriteContext(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.IXmlWriter)">
      <summary>
            Create the initial <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> instance.
            </summary>
      <param name="graph">The graph that is written.</param>
      <param name="writer">The core <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> instance that does the actual writing of XML content.</param>
      <returns>An <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see> instance that is suitable for <paramref name="graph"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.GetOutputHandlers(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Dynamically retrieve all <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> that should be used for the current write process.
            </summary>
      <param name="context">The current write context.</param>
      <returns>A dictionary with <see cref="T:yWorks.yFiles.GraphML.KeyScope"></see>s as keys and a list of <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler">IOutputHandlers</see> 
            for each scope as values.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.GetSerializationProperty``1(System.Object)">
      <summary>
            Retrieve a serialization property that has been set by <see cref="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.SetSerializationProperty(System.Object,System.Object)"></see>.
            </summary>
      <param name="key">The key for the property.</param>
      <typeparam name="T">The target type of the property.</typeparam>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization">
      <summary>
            Subscribe to this event to provide custom serialization handling for XML content.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.Lookup(System.Type)">
      <summary>
            Dynamically retrieve an instance of <paramref name="type"></paramref>.
            </summary>
      <param name="type">The type for which an implementation is needed.</param>
      <returns>An implementation of <paramref name="type"></paramref>, or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.OnHandleSerialization(yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.OnQueryOutputHandlers(yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers"></see> event.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.OnQueryReferenceId(yWorks.yFiles.GraphML.References.QueryReferenceIdEventArgs)">
      <summary>
            Fires the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryReferenceId"></see> event.
            </summary>
      <param name="args">The arguments that get passed to the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryReferenceId"></see> event.</param>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers">
      <summary>
            Subscribe to this event to dynamically register one or more <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> instance(s) for
            a given graphml attribute key definition.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryReferenceId">
      <summary>
            This event can be used to provide names of external references for objects.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.RegisterDefaultOutputHandlers">
      <summary>
            Register default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.QueryOutputHandlers"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.RegisterDefaultSerializers">
      <summary>
            Register default event handlers for the <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.RemoveLookup``1">
      <summary>
            Remove an implementation of <typeparamref name="T"></typeparamref> that has been set with <see cref="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.SetLookup``1(``0)"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.RemoveLookup``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.RemoveSerializationProperty(System.Object)">
      <summary>
            Remove a serialization property that has been set by <see cref="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.SetSerializationProperty(System.Object,System.Object)"></see>.
            </summary>
      <param name="key">The key for the property.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)">
      <summary>
            Serialize <paramref name="item"></paramref>.
            </summary>
      <param name="context">The current parse context.</param>
      <param name="item">The object that should be serialized.</param>
      <typeparam name="T">The desired type of the result.</typeparam>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
        <c>SerializationNotSupportedException</c> if <paramref name="item"></paramref> cannot be serialized.
            </exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.SetLookup``1(``0)">
      <summary>
            Register an implementation of <typeparamref name="T"></typeparamref> for use with <see cref="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.Lookup(System.Type)"></see>.
            </summary>
      <param name="instance">The implementation of <typeparamref name="T"></typeparamref> for lookup retrieval.</param>
      <typeparam name="T">The type of <paramref name="instance"></paramref>.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.SetSerializationProperty(System.Object,System.Object)">
      <summary>
            Set a serialization property that allows to fine tune the write process.
            </summary>
      <param name="key">The key for the property.</param>
      <param name="value">The property value.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.Write(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.IXmlWriter)">
      <summary>
            Write the GraphML representation of <paramref name="graph"></paramref>, using <paramref name="writer"></paramref> for the actual XML generation.
            </summary>
      <param name="graph">The graph instance that is populated.</param>
      <param name="writer">The writer that actually writes the XML content.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler">
      <summary>
        <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler">
        </see> implementation that is responsible for writing shared resources
            to GraphML.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.#ctor">
      <summary>
            Create a new instance with no internal references initially.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.DataTagAttributes">
      <summary>
            Gets the XML attributes that should be added to the data element.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.InternalReferences">
      <summary>
            Get or set a list of <see cref="T:yWorks.yFiles.GraphML.References.IReferenceHandle"></see>s that should be written by this handler.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.IsDefaultValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Determines whether in the current context, the value is the default value and therefore 
            no data element needs to be written.
            </summary>
      <param name="ctx">The context.</param>
      <returns>
        <c>true</c> if for the current context the default value applies and therefore no data element needs to be written.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.KeyDefinitionAttributes">
      <summary>
            Gets the XML attributes that should be added to the key definition in the GraphML key element.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.Precedence">
      <summary>
            Fixed to <see cref="F:yWorks.yFiles.GraphML.Writer.WritePrecedence.BeforeChildren"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.WriteKeyDefinitionContent(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Writes the contents of the key definition.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLWriter.ReferencesOutputHandler.WriteValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Actually writes the value for the current context.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute">
      <summary>
            A struct for use in the <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> interface
            that encapsulates an XML attribute.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute"></see> struct.
            </summary>
      <param name="localName">The local name.</param>
      <param name="xmlNamespace">The namespace.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute.LocalName">
      <summary>
            Gets the local name of the attribute.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute.Namespace">
      <summary>
            Gets the namespace for the attribute to use or <see langword="null"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute.Value">
      <summary>
            Gets the value of the attribute.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs">
      <summary>
            The event arguments used by <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.HandleSerialization"></see> and <see cref="E:yWorks.yFiles.GraphML.Writer.GraphMLWriter.HandleSerialization"></see>
            to let registered serialization code perform the serialization of items.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs"></see> class using the provided context to write
            the <paramref name="item"></paramref>.
            </summary>
      <param name="context">The context to use for writing.</param>
      <param name="item">The item to to serialize.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs"></see> class using the provided context to write
            the <paramref name="item"></paramref> using the given type for serialization.
            </summary>
      <param name="context">The context to use for writing.</param>
      <param name="item">The item to to serialize.</param>
      <param name="serializationType">The type that should be used for serialization, which needs to be a super type or interface of the 
            <paramref name="item"></paramref> or <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Context">
      <summary>
            Gets the context to be used for writing.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs"></see> is handled.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Item">
      <summary>
            Gets the item that should be serialized.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.ReplaceItem(System.Object,System.Type)">
      <summary>
            Replaces the <see cref="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Item"></see> using a substitute for serialization.
            </summary>
      <param name="item">The substitute to assign to the <see cref="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Item"></see> property.</param>
      <param name="serializationType">The serialization type to assign to the <see cref="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.SourceType"></see> property.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.SourceType">
      <summary>
            Declares the type in the inheritance of the <see cref="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Item"></see> that should be used for serialization.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.HandleSerializationEventArgs.Writer">
      <summary>
            Gets the writer for writing the xml output.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider">
      <summary>
            Interface for classes that provide custom id's for core graphml elements
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider.GetEdgeId(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.GraphML.Writer.IWriteContext)"></member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider.GetGraphId(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.GraphML.Writer.IWriteContext)"></member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider.GetNodeId(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.GraphML.Writer.IWriteContext)"></member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IGraphElementIdProvider.GetPortId(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.GraphML.Writer.IWriteContext)"></member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IOutputHandler">
      <summary>
            The interface used by the <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler"></see>
            for writing data to the GraphML.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IOutputHandler.DataTagAttributes">
      <summary>
            Gets the XML attributes that should be added to the data element.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IOutputHandler.IsDefaultValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Determines whether in the current context, the value is the default value and therefore 
            no data element needs to be written.
            </summary>
      <param name="ctx">The context.</param>
      <returns>
        <c>true</c> if for the current context the default value applies and therefore no data element needs to be written.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IOutputHandler.KeyDefinitionAttributes">
      <summary>
            Gets the XML attributes that should be added to the key definition in the GraphML key element.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IOutputHandler.Precedence">
      <summary>
            Gets the write precedence that is associated with this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IOutputHandler.WriteKeyDefinitionContent(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Writes the contents of the key definition.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IOutputHandler.WriteValue(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Actually writes the value for the current context.
            </summary>
      <param name="ctx">The context.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.ISerializer">
      <summary>
            Common interface for all classes that can serialize an object
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ISerializer.Serialize(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Serialize the given style to a <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see></summary>
      <param name="context">The current write context</param>
      <param name="subject">The actual object</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.ITypeConverterProvider">
      <summary>
            Interface for classes that can provide custom <see cref="T:System.ComponentModel.TypeConverter"></see> implementations for GraphML serialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.ITypeConverterProvider.GetTypeConverter(yWorks.yFiles.GraphML.Writer.IWriteContext,System.ComponentModel.PropertyDescriptor,System.Object,System.Type,System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Get a <see cref="T:System.ComponentModel.TypeConverter"></see> implementation that can convert the current value of <paramref name="descriptor"></paramref> to
            <paramref name="destinationType"></paramref> for the target object <paramref name="subject"></paramref></summary>
      <param name="context">The current write context</param>
      <param name="descriptor">Describes the property</param>
      <param name="subject">The target object</param>
      <param name="destinationType">The destination type of the conversion.</param>
      <param name="descriptorContext">Context for the TypeConverter</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> instance that can convert the current value of <paramref name="descriptor"></paramref> to
            <paramref name="destinationType"></paramref> for the target object <paramref name="subject"></paramref>, or <see langword="null"></see>
            if no such converter exists.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IValueSerializerProvider">
      <summary>
            Interface for classes that can provide custom <see cref="T:System.Windows.Markup.ValueSerializer"></see> implementations for GraphML serialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IValueSerializerProvider.GetValueSerializer(yWorks.yFiles.GraphML.Writer.IWriteContext,System.ComponentModel.PropertyDescriptor,System.Object,System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>
            Get a <see cref="T:System.Windows.Markup.ValueSerializer"></see> implementation that can convert the current value of <paramref name="descriptor"></paramref> 
            for the target object <paramref name="subject"></paramref></summary>
      <param name="context">The current write context</param>
      <param name="descriptor">Describes the property</param>
      <param name="subject">The target object</param>
      <param name="destinationType">The destination type of the conversion.</param>
      <param name="serializerContext">Context for the ValueSerializer</param>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer"></see> instance that can convert the current value of <paramref name="descriptor"></paramref> 
            for the target object <paramref name="subject"></paramref>, or <see langword="null"></see>
            if no such converter exists.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IWriteContext">
      <summary>
            Interface that defines the context of a GraphML writing context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IWriteContext.CurrentObject">
      <summary> Returns the most current (i.e. the last element) 
            within the container hierarchy as it is returned
            by <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.ObjectStack"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IWriteContext.GetSerializationProperty``1(System.Object)">
      <summary>
            Get a property value that specifies information about how to handle specific cases
            </summary>
      <param name="key">The identifier for the property</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.GraphML.Writer.IWriteContext.GetSerializationProperty``1(System.Object)"]</p>
      </typeparam>
      <returns>The property value, or <see langword="null"></see> if no such property exists</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IWriteContext.Graph">
      <summary>
            Returns the currently active graph object
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IWriteContext.ObjectStack">
      <summary> Returns the current nesting of graphs and graph elements.</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IWriteContext.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)">
      <summary>
            Serialize <paramref name="item"></paramref> to an XML representation.
            </summary>
      <param name="context">The current write context.</param>
      <param name="item">The object that should be serialized.</param>
      <typeparam name="T">The type of the object that is serialized.</typeparam>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
      </exception>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IWriteContext.WriteEvents">
      <summary>
            Returns an implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteEvents"></see> that allows to subscribe to various
            events in the write process.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IWriteContext.Writer">
      <summary>
            Returns the current <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> implementation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IWriteEvents">
      <summary>
            The interface of the event trigger class that is used
            by the <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.WriteEvents"></see> property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.DataWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'data' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.DataWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'data' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.DocumentWriting">
      <summary>
            Occurs just after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartDocument"></see> has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.DocumentWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndDocument"></see> will be called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.EdgeWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'edge' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.EdgeWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'edge' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.GraphMLWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'graphml' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.GraphMLWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'graphml' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.GraphWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'graph' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.GraphWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'graph' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.KeyWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'key' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.KeyWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'key' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.NodeWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'node' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.NodeWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'node' element
            will be called. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.PortWriting">
      <summary>
            Occurs right after the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see> method
            for writing a GraphMl 'port' element has been called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.GraphML.Writer.IWriteEvents.PortWritten">
      <summary>
            Occurs just before the <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement"></see> for the GraphML 'port' element
            will be called. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager">
      <summary>
            Helper class to facilitate namespace handling together with <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.AddTemporaryMapping(System.String,System.String)">
      <summary>
            Register a temporary mapping without writing an explicit XMLNS declaration.
            </summary>
      <param name="nsUri">The XML namespace URI</param>
      <param name="prefix">The prefix for the URI</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.GetNamespaceOfPrefix(System.String)">
      <summary>
            Gets the registered XML namespace URI of <paramref name="prefix"></paramref>.
            </summary>
      <param name="prefix">The prefix for which a namespace URI  is searched.</param>
      <returns>The namespace URI  of <paramref name="prefix"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.GetOrCreateUniqueMapping(System.String)">
      <summary>
            Returns a unique namespace prefix, or creates and registeres one.
            </summary>
      <param name="ns">The namespace URI for which a prefix is searched.</param>
      <returns>a unique namespace prefix for <paramref name="ns"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.GetPrefixOfNamespace(System.String)">
      <summary>
            Gets the registered XML prefix of <paramref name="ns"></paramref>.
            </summary>
      <param name="ns">The namespace URI for which a prefix is searched.</param>
      <returns>The registered XML prefix of <paramref name="ns"></paramref>.</returns>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.GlobalNamespaces">
      <summary>
            Return a list of all namespace declarations that should be declared at the document's root element.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.PopScope">
      <summary>
            Pops a current declaration scope.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.PushScope">
      <summary>
            Pushes a current declaration scope.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlNamespaceManager.RegisterLocalMapping(System.String,System.String)">
      <summary>
            Register a local namespace/prefix mapping
            </summary>
      <param name="nsUri">The namespace URI</param>
      <param name="prefix">The namespace prefix.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.IXmlWriter">
      <summary>
            Abstraction of XML output classes that provide a consistent way to write
            XML elements to some output
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.FlushDocument">
      <summary>
            Close the document.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.IXmlWriter.NamespaceManager">
      <summary>
            Gets the namespace manager associated with this writer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>
            Write a XML attribute node.
            </summary>
      <param name="prefix">The namespace prefix of the attribute</param>
      <param name="localName">The local name of the attribute</param>
      <param name="ns">The namespace URI of this attribute</param>
      <param name="value">The value of this attribute</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteCData(System.String)">
      <summary>
            Write a CDATA section.
            </summary>
      <param name="content">The content of the CDATA section</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteComment(System.String)">
      <summary>
            Write a XML comment node
            </summary>
      <param name="comment">The content of the comment</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteDocumentFragment(System.Xml.XmlDocumentFragment)">
      <summary>
            Write a document fragment
            </summary>
      <param name="fragment">
      </param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndDocument">
      <summary>
            Close the output.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteEndElement">
      <summary>
            Close a XML element previously opened with <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String)"></see> or
            <see cref="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)"></see>.
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
            Write a xml processing instruction.
            </summary>
      <param name="target">The target of the PI</param>
      <param name="data">The data of the PI</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartDocument">
      <summary>
            Begin the output process
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
            Begin a new XML element with given parameters
            </summary>
      <param name="localName">The local name of this element</param>
      <param name="ns">The namespace of this element</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
            Begin a new XML element with given parameters
            </summary>
      <param name="prefix">The namespace prefix to use for this element</param>
      <param name="localName">The local name of this element</param>
      <param name="ns">The namespace of this element</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.IXmlWriter.WriteString(System.String)">
      <summary>
            Write a text node.
            </summary>
      <param name="s">The string that gets written as XML text</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.NullXmlWriter">
      <summary>
            Implementation of <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see> that does nothing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.NullXmlWriter" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.FlushDocument">
      <summary>
            Close the document.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteCData(System.String)">
      <summary>
            Write a CDATA section.
            </summary>
      <param name="content">The content of the CDATA section</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteComment(System.String)">
      <summary>
            Write a XML comment node
            </summary>
      <param name="comment">The content of the comment</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteDocumentFragment(System.Xml.XmlDocumentFragment)">
      <summary>
            Write a document fragment
            </summary>
      <param name="fragment">
      </param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteEndDocument">
      <summary>
            Close the output.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
            Write a xml processing instruction.
            </summary>
      <param name="target">The target of the PI</param>
      <param name="data">The data of the PI</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteStartDocument">
      <summary>
            Begin the output process
            </summary>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.NullXmlWriter.WriteString(System.String)">
      <summary>
            Write a text node.
            </summary>
      <param name="s">The string that gets written as XML text</param>
      <returns>The writer instance for further chaining</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs">
      <summary>
            Event argument implementation that is used by the <see cref="E:yWorks.yFiles.GraphML.GraphMLIOHandler.QueryOutputHandlers"></see>
            event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{yWorks.yFiles.GraphML.Writer.IOutputHandler,yWorks.yFiles.GraphML.KeyScope}})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs"></see> class.
            </summary>
      <param name="context">The context to assign to the <see cref="P:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs.Context"></see> property.</param>
      <param name="handlers">The list of handlers to which the <see cref="M:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs.AddOutputHandler(yWorks.yFiles.GraphML.Writer.IOutputHandler,yWorks.yFiles.GraphML.KeyScope)"></see> method will
            add the added instances.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs.AddOutputHandler(yWorks.yFiles.GraphML.Writer.IOutputHandler,yWorks.yFiles.GraphML.KeyScope)">
      <summary>
            Adds the given output handler to the set of registered output handlers for the given scope.
            </summary>
      <param name="handler">The handler to add.</param>
      <param name="scope">The scope to use for the handler.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.QueryOutputHandlersEventArgs.Context">
      <summary>
            Gets the context for which the handlers are queried.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
      <summary>
            Exception that will be thrown by the <see cref="M:yWorks.yFiles.GraphML.Writer.IWriteContext.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)"></see> method
            and the like to indicate that the deserializtion failed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException"></see> class.
            </summary>
      <param name="info">The data for serializing or deserializing the object.</param>
      <param name="context">The source and destination for the object.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException"></see> class with the given message.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException"></see> class
            using the given messsage and inner exception.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner exception.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.SerializationProperties">
      <summary>
            Constant class for common serialization properties.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.SerializationProperties.CurrentKeyScope">
      <summary>
            The current <see cref="T:yWorks.yFiles.GraphML.KeyScope"></see> in which an <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see>, <see cref="T:yWorks.yFiles.GraphML.Parser.IInputHandler"></see>,
            or custom serialization code is called.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.SerializationProperties.DisableGraphSettings">
      <summary>
            Property key to omit deserialization of the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s default settings.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.SerializationProperties.DisableUserTags">
      <summary>
            Property key to control user tag serialization
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.SerializationProperties.ForceEnclosingTag">
      <summary>
            Enforce writing of an enclosing tag for string (and possibly other primitive) values in list and toplevel context.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.SerializationProperties.WriteGraphSettings">
      <summary>
            Property key to control the serialization of the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s default settings.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.WriteContextExtensions">
      <summary>
            Extension methods for <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.WriteContextExtensions.GetCurrent``1(yWorks.yFiles.GraphML.Writer.IWriteContext)">
      <summary>
            Typesafe alternative for <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.CurrentObject"></see>.
            </summary>
      <param name="context">The current write context.</param>
      <typeparam name="T">The desired target type.</typeparam>
      <returns>
        <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.CurrentObject">
        </see> as an instance of <typeparamref name="T"></typeparamref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.WriteContextExtensions.Serialize``1(yWorks.yFiles.GraphML.Writer.IWriteContext,``0)">
      <summary>
            Serialize the <paramref name="item"></paramref>.
            </summary>
      <param name="context">The current write context.</param>
      <param name="item">The object that should be serialized.</param>
      <typeparam name="T">The type of the object that is serialized.</typeparam>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
      </exception>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.WriteContextExtensions.SerializeReplacement``1(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object,``0)">
      <summary>
            Serialize an replacement object <paramref name="replacement"></paramref> instead of the original <paramref name="originalItem"></paramref>.
            </summary>
      <param name="context">The current write context.</param>
      <param name="originalItem">The original object that should be serialized.</param>
      <param name="replacement">The replacement object that will actually be serialized instead.</param>
      <typeparam name="T">The type of the object that is serialized.</typeparam>
      <exception cref="T:yWorks.yFiles.GraphML.Writer.SerializationNotSupportedException">
      </exception>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.WriteEventArgs">
      <summary>
            This is the event argument that is used by the <see cref="T:yWorks.yFiles.GraphML.Writer.IWriteEvents"></see> interface
            that can be queried from the <see cref="P:yWorks.yFiles.GraphML.Writer.IWriteContext.WriteEvents"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.WriteEventArgs.#ctor(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Writer.WriteEventArgs"></see> class.
            </summary>
      <param name="context">The context to assign to <see cref="P:yWorks.yFiles.GraphML.Writer.WriteEventArgs.Context"></see>.</param>
      <param name="item">The item to assign to <see cref="P:yWorks.yFiles.GraphML.Writer.WriteEventArgs.Item"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.WriteEventArgs.Context">
      <summary>
            Gets the context that is being used for writing.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.GraphML.Writer.WriteEventArgs.Item">
      <summary>
            Gets the item that is currently being written or <see langword="null"></see> if nothing is applicable.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.WritePrecedence">
      <summary>
            Enumeration values to control the order in which <see cref="T:yWorks.yFiles.GraphML.Writer.IOutputHandler"></see> instances are
            used.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.WritePrecedence.BeforeChildren">
      <summary>
            The handler writes its content before the child nodes of the governing GraphML element.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.WritePrecedence.Default">
      <summary>
            Default precedence, the order in relation to child content is unspecified.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Writer.WritePrecedence.AfterChildren">
      <summary>
            The handler writes its content after the child nodes of the governing GraphML element.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Writer.XmlWriterExtensions">
      <summary>
            Defines extension methods for interface <see cref="T:yWorks.yFiles.GraphML.Writer.IXmlWriter"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.XmlWriterExtensions.WriteAttribute(yWorks.yFiles.GraphML.Writer.IXmlWriter,System.String,System.String)">
      <summary>
            Write an XML attribute with the given parameters. The attribute is not bound to a XML namespace.
            </summary>
      <param name="writer">The XML writer to use.</param>
      <param name="localName">The name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
      <returns>The writer instance <paramref name="writer"></paramref> for writer chaining.</returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Writer.XmlWriterExtensions.WriteAttribute(yWorks.yFiles.GraphML.Writer.IXmlWriter,yWorks.yFiles.GraphML.Writer.GraphMLXmlAttribute)">
      <summary>
            Write an XML attribute from the given <paramref name="attribute"></paramref> struct.
            </summary>
      <param name="writer">The XML writer to use.</param>
      <param name="attribute">Encapsulates the current attribute values.</param>
      <returns>The writer instance <paramref name="writer"></paramref> for writer chaining.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.FrameworkXamlSerializer">
      <summary>
            Specialized <see cref="T:yWorks.yFiles.GraphML.Writer.ISerializer"></see> that uses <see cref="T:System.Windows.Markup.XamlWriter"></see> to for serialization.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.FrameworkXamlSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Xaml.FrameworkXamlSerializer" /> class</summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.GraphMLSharingMode">
      <summary>
            Enumeration that controls whether resources should be shared or not.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.GraphMLSharingMode.Auto">
      <summary>
            Specifies that the share mode of a member should be determined automatically according
            to the current property value.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.GraphMLSharingMode.Never">
      <summary>
            Never share the object.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.GraphMLSharingMode.Always">
      <summary>
            Always share the object.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.IInlineMarkupWriter">
      <summary>
            Utility class that can write the inline (attribute) representation of a <see cref="T:System.Windows.Markup.MarkupExtension"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.IInlineMarkupWriter.CanHandle(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Windows.Markup.MarkupExtension)">
      <summary>
            Returns whether this implementation can write the markup extension <paramref name="extension"></paramref>.
            </summary>
      <param name="context">The current write context</param>
      <param name="extension">The markup extension that should be written.</param>
      <returns>
        <see langword="true">
        </see> iff this implementation can write <paramref name="extension"></paramref></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.IInlineMarkupWriter.GetExtensionAsString(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Windows.Markup.MarkupExtension)">
      <summary>
            Returns the inline (attribute) representation of <paramref name="extension"></paramref></summary>
      <param name="context">The current write context</param>
      <param name="extension">The markup extension that should be written.</param>
      <returns>The inline (attribute) representation of <paramref name="extension"></paramref></returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.IXamlNamespaceMapper">
      <summary>
            Utility class that facilitates writing of markup extensions as attributes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.IXamlNamespaceMapper.GetXamlNamespace(yWorks.yFiles.GraphML.Writer.IWriteContext,System.Type)">
      <summary>
            Returns the XAML namespace URI that belongs to type <paramref name="t"></paramref></summary>
      <param name="context">The current write context</param>
      <param name="t">The type for which an XML namespace mapping is searched.</param>
      <returns>the XAML namespace URI that belongs to type <paramref name="t"></paramref></returns>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.IXamlNamespaceMapper.GetXamlNamespacePrefix(yWorks.yFiles.GraphML.Writer.IWriteContext,System.String)">
      <summary>
            Returns the XAML namespace prefix that maps to type <paramref name="nsUri"></paramref></summary>
      <param name="context">The current write context</param>
      <param name="nsUri">The type for which an XML namespace mapping is searched.</param>
      <returns>the XAML namespace prefix that belongs to type <paramref name="nsUri"></paramref>, or <see langword="null"></see>
            if no such mapping exists.</returns>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.TextNodeDeserializer">
      <summary>
            This class handles the deserialization of pure text node content.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.TextNodeDeserializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Xaml.TextNodeDeserializer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.TextNodeDeserializer.HandleDeserialization(System.Object,yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs)">
      <summary>
            Callback for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.XamlAttributeWriteMode">
      <summary>
            Enumeration that controls whether properties should be written as elements or attributes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.XamlAttributeWriteMode.Auto">
      <summary>
            Specifies that the write mode of a member should be determined automatically according
            to the current property value and the presence of <see cref="T:System.ComponentModel.TypeConverter"></see>s, <see cref="T:System.Windows.Markup.ValueSerializer"></see>s and the like.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.XamlAttributeWriteMode.Never">
      <summary>
            Never write as a XML attribute, even if a possible conversion exists.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.GraphML.Xaml.XamlAttributeWriteMode.Always">
      <summary>
            Always write as XML attribute.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.GraphML.Xaml.XamlDeserializer">
      <summary>
            This class handles the deserialization of Xaml content in GraphML.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.XamlDeserializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.GraphML.Xaml.XamlDeserializer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.GraphML.Xaml.XamlDeserializer.HandleDeserialization(System.Object,yWorks.yFiles.GraphML.Parser.HandleDeserializationEventArgs)">
      <summary>
            Callback for the <see cref="E:yWorks.yFiles.GraphML.Parser.GraphMLParser.HandleDeserialization"></see> event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.GraphControl">
      <summary>
            A control for displaying and editing an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.#ctor">
      <summary>
            Creates a new instance of the Graph Control.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.BackgroundGroup">
      <summary>
            Gets or sets the BackgroundGroup property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.BackgroundGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.BackgroundGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.BeginInit">
      <summary>
            Starts the initialization process for this element.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CanRedo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.CanRedo"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CanUndo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.CanUndo"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.Clipboard">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.GraphClipboard"></see> associated with this control.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.ClipboardEnabled">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.GraphControl.Clipboard"></see> functionality is enabled.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.ClipboardEnabledProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.ClipboardEnabled"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.ClipboardProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.Clipboard"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.ContentGroup">
      <summary>
            Gets or sets the ContentGroup property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.ContentGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.ContentGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.Copy">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Clipboard"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})"></see> method using
            <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateSelectionFilter(yWorks.yFiles.UI.Model.IGraphSelection)"></see> as the subset to copy.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateBackgroundGroup">
      <summary>
            Factory method for the BackgroundGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.BackgroundGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateContentGroup">
      <summary>
            Factory method for the ContentGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.ContentGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateFocusGroup">
      <summary>
            Factory method for the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusGroup"></see> property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateFocusPaintManager">
      <summary>
            Factory method for the FocusPaintManager property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusPaintManager"></see> property.
            </summary>
      <returns>a new instance of FocusPaintManager</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateGraph">
      <summary>
            Factory method for the Graph property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateGraphClipboard">
      <summary>
            Creates the default instance to use if no custom instance has been set.
            </summary>
      <returns>A default <see cref="T:yWorks.yFiles.UI.Model.GraphClipboard"></see> instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateGraphModelManager">
      <summary>
            Factory method for the GraphModelManager property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.GraphModelManager"></see> property.
            </summary>
      <returns>a new instance of GraphModelManager</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateHighlightGroup">
      <summary>
            Factory method for the HighlightGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateHighlightPaintManager">
      <summary>
            Factory method for the HighlightPaintManager property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightPaintManager"></see> property.
            </summary>
      <returns>a new instance of HighlightPaintManager</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateInputModeGroup">
      <summary>
            Factory method for the InputModeGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.InputModeGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateOpenFileDialog">
      <summary>
            Helper callback method that creates the <see cref="T:Microsoft.Win32.OpenFileDialog"></see>
            for use in the handling of the <see cref="P:System.Windows.Input.ApplicationCommands.Open"></see>
            command.
            </summary>
      <returns>The preconfigured dialog to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateSaveFileDialog">
      <summary>
            Helper callback method that creates the <see cref="T:Microsoft.Win32.SaveFileDialog"></see>
            for use in the handling of the <see cref="P:System.Windows.Input.ApplicationCommands.Save"></see>
            and <see cref="P:System.Windows.Input.ApplicationCommands.SaveAs"></see>
            commands.
            </summary>
      <returns>The preconfigured dialog to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateSelection">
      <summary>
            Factory method for the Selection property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.Selection"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Model.GraphSelection"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateSelectionGroup">
      <summary>
            Factory method for the SelectionGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.CreateSelectionPaintManager">
      <summary>
            Factory method for the SelectionPaintManager property. 
            </summary>
      <returns>a new instance of <c>SelectionPaintManager&lt;IModelItem&gt;</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.CurrentItem">
      <summary>
            Gets or sets the 'current' item.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.CurrentItemChanged">
      <summary>
            Occurs when the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see> property has changed its value.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.CurrentItemChangedEvent">
      <summary>
            The <see cref="T:System.Windows.RoutedEvent"></see> that accurs whenever the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see>
            property changes its value.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.CurrentItemProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.Cut">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Clipboard"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Cut(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})"></see> method using
            <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateSelectionFilter(yWorks.yFiles.UI.Model.IGraphSelection)"></see> as the subset to cut.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ExportToGraphML(System.IO.Stream)">
      <summary>
            Convenience method that exports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            to a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="stream">The stream to export the graph to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ExportToGraphML(System.IO.TextWriter)">
      <summary>
            Convenience method that exports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            to a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="writer">The writer to export the graph to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ExportToGraphML(System.String)">
      <summary>
            Convenience method that exports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            to a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="fileName">The file name to export the graph to.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.FileOperationsEnabled">
      <summary>
            Gets or sets a value indicating whether commands for Open/Save/Save As are enabled.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.FileOperationsEnabledProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.FileOperationsEnabled"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.FitGraphBounds">
      <summary>
        <see cref="M:yWorks.Canvas.CanvasControl.UpdateContentRect">Updates the content rectangle</see> and
            <see cref="M:yWorks.Canvas.CanvasControl.FitContent">adjusts the viewport to encompass the contents</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.FitGraphBounds(yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
        <see cref="M:yWorks.Canvas.CanvasControl.UpdateContentRect(yWorks.Canvas.Geometry.Structs.InsetsD)">Updates the content rectangle</see> and
            <see cref="M:yWorks.Canvas.CanvasControl.FitContent">adjusts the viewport to encompass the contents</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.FitGraphBoundsCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand"></see> that invokes <see cref="M:yWorks.yFiles.UI.GraphControl.FitGraphBounds"></see> if executed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.FocusGroup">
      <summary>
            Gets or sets the HighlightGroup property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.GraphControl.CreateHighlightGroup"></see> will be called.
            Upon change the <see cref="M:yWorks.yFiles.UI.GraphControl.OnHighlightGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)"></see> method will be called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.FocusGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.FocusPaintManager">
      <summary>
            Gets or sets the FocusPaintManager property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.GraphControl.CreateFocusPaintManager"></see> will be called.
            Upon change the <see cref="M:yWorks.yFiles.UI.GraphControl.OnFocusPaintManagerChanged(yWorks.Canvas.Model.FocusPaintManager{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.FocusPaintManager{yWorks.Canvas.Model.IModelItem})"></see> method will be called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.FocusPaintManagerChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusPaintManager"></see> property has been changed.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.FocusPaintManagerProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusPaintManager"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetBackgroundGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.BackgroundGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetBackgroundGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetContentGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.ContentGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetContentGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetFocusGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetFocusGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetGraphMLIOHandler">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler"></see> to use for the various I/O methods
            in this instance.
            </summary>
      <returns>The instance to use for IO.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetHighlightGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetHighlightGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetInputModeGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.InputModeGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetInputModeGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetSelectionGroupProvider``1">
      <summary>
            Returns a canvas group provider instance that yields <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionGroup"></see>.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.GraphControl.GetSelectionGroupProvider``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.GetUndoEngine">
      <summary>
            Retrieves the <see cref="T:yWorks.Support.UndoEngine"></see> associated with
            the current <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see> instance.
            </summary>
      <returns>The instance or <c>null</c>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.Graph">
      <summary>
            Gets or sets the Graph that is displayed in this control.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.GraphChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see> property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.GraphModelManager">
      <summary>
            Gets or sets the GraphModelManager property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.GraphModelManagerChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.GraphModelManager"></see> property has been changed.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.GraphModelManagerProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.GraphModelManager"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.GraphProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.HighlightGroup">
      <summary>
            Gets or sets the HighlightGroup property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.GraphControl.CreateHighlightGroup"></see> will be called.
            Upon change the <see cref="M:yWorks.yFiles.UI.GraphControl.OnHighlightGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)"></see> method will be called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.HighlightGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.HighlightPaintManager">
      <summary>
            Gets or sets the HighlightPaintManager property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.GraphControl.CreateHighlightPaintManager"></see> will be called.
            Upon change the <see cref="M:yWorks.yFiles.UI.GraphControl.OnHighlightPaintManagerChanged(yWorks.Canvas.Model.HighlightPaintManager{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.HighlightPaintManager{yWorks.Canvas.Model.IModelItem})"></see> method will be called.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.HighlightPaintManagerChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightPaintManager"></see> property has been changed.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.HighlightPaintManagerProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightPaintManager"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ImportFromGraphML(System.IO.Stream)">
      <summary>
            Convenience method that imports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            from a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="stream">The stream to read the graph from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ImportFromGraphML(System.IO.TextReader)">
      <summary>
            Convenience method that imports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            from a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="reader">The reader to read the graph from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.ImportFromGraphML(System.String)">
      <summary>
            Convenience method that imports the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>
            from a <see cref="T:yWorks.yFiles.GraphML.GraphMLIOHandler">GraphML</see> file.
            </summary>
      <param name="filename">The file name of the GraphML file to read the graph from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.InputModeGroup">
      <summary>
            Gets or sets the InputModeGroup property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.InputModeGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.InputModeGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnApplyTemplate">
      <summary>
            Called after the template has been applied.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnBackgroundGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.BackgroundGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.BackgroundGroupChanged"></see> event.
            </summary>
      <param name="oldBackgroundGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newBackgroundGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnContentGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.ContentGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.ContentGroupChanged"></see> event.
            </summary>
      <param name="oldContentGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newContentGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnCurrentItemChanged(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Called when the <see cref="F:yWorks.yFiles.UI.GraphControl.CurrentItemProperty"></see> changed.
            </summary>
      <param name="oldItem">The old item.</param>
      <param name="newItem">The new item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnFocusGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.FocusGroupChanged"></see> event.
            </summary>
      <param name="oldFocusGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newFocusGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnFocusPaintManagerChanged(yWorks.Canvas.Model.FocusPaintManager{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.FocusPaintManager{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.FocusPaintManager"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.FocusPaintManagerChanged"></see> event.
            </summary>
      <param name="oldFocusPaintManager">the old value, which may be <c>null</c> the first time</param>
      <param name="newFocusPaintManager">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnGraphChanged(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.GraphChanged"></see> event.
            </summary>
      <param name="oldGraph">the old value, which may be <c>null</c> the first time</param>
      <param name="newGraph">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnGraphModelManagerChanged(yWorks.yFiles.UI.Drawing.GraphModelManager,yWorks.yFiles.UI.Drawing.GraphModelManager)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.GraphModelManager"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.GraphModelManagerChanged"></see> event.
            </summary>
      <param name="oldGraphModelManager">the old value, which may be <c>null</c> the first time</param>
      <param name="newGraphModelManager">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnHighlightGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.HighlightGroupChanged"></see> event.
            </summary>
      <param name="oldHighlightGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newHighlightGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnHighlightPaintManagerChanged(yWorks.Canvas.Model.HighlightPaintManager{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.HighlightPaintManager{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.HighlightPaintManager"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.HighlightPaintManagerChanged"></see> event.
            </summary>
      <param name="oldHighlightPaintManager">the old value, which may be <c>null</c> the first time</param>
      <param name="newHighlightPaintManager">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnInputModeGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.InputModeGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.InputModeGroupChanged"></see> event.
            </summary>
      <param name="oldInputModeGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newInputModeGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnSelectionChanged(yWorks.yFiles.UI.Model.IGraphSelection,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.Selection"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.SelectionChanged"></see> event.
            </summary>
      <param name="oldGraphSelection">the old value, which may be <c>null</c> the first time</param>
      <param name="newGraphSelection">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnSelectionGroupChanged(yWorks.Canvas.ICanvasObjectGroup,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionGroup"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.SelectionGroupChanged"></see> event.
            </summary>
      <param name="oldSelectionGroup">the old value, which may be <c>null</c> the first time</param>
      <param name="newSelectionGroup">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.OnSelectionPaintManagerChanged(yWorks.Canvas.Model.SelectionPaintManager{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Model.SelectionPaintManager{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionPaintManager"></see> property value changes 
            and after initialization of the field.
            Triggers the <see cref="E:yWorks.yFiles.UI.GraphControl.SelectionPaintManagerChanged"></see> event.
            </summary>
      <param name="oldSelectionPaintManager">the old value, which may be <c>null</c> the first time</param>
      <param name="newSelectionPaintManager">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.Paste">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Clipboard"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraphSelection)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.Redo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.Redo"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.Selection">
      <summary>
            Gets or sets the selection model that is used for this control.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.SelectionChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.Selection"></see> property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.SelectionGroup">
      <summary>
            Gets or sets the SelectionGroup property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.SelectionGroupChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionGroup"></see> property has been changed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.SelectionPaintManager">
      <summary>
            Gets or sets the SelectionPaintManager property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.GraphControl.SelectionPaintManagerChanged">
      <summary>
            Event that will be triggered if the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionPaintManager"></see> property has been changed.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.SelectionPaintManagerProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.SelectionPaintManager"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.SelectionProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.Selection"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.SetCurrentItemCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand"></see> that invokes <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see> if executed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphControl.Undo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.GraphControl.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.Undo"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphControl.UndoabilityEnabled">
      <summary>
            Gets or sets a value indicating whether the <see cref="M:yWorks.yFiles.UI.GraphControl.GetUndoEngine">undoability</see> functionality is enabled.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.UndoabilityEnabledProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphControl.UndoabilityEnabled"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphControl.ZoomToCurrentItemCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand"></see> that changes the <see cref="P:yWorks.Canvas.CanvasControl.Zoom"></see> and the
            <see cref="P:yWorks.Canvas.CanvasControl.ViewPoint"></see> in an animated fashion such that the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see>
            becomes fully visible.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.GraphOverviewControl">
      <summary>
            Convenience control implementation that shows an overview of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> contained in another
            <see cref="P:yWorks.yFiles.UI.GraphOverviewControl.GraphControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphOverviewControl.#ctor">
      <summary>
             Creates a new instance that is not bound to a control
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphOverviewControl.#ctor(yWorks.yFiles.UI.GraphControl)">
      <summary>
             Creates a new instance that is initially bound to the given control.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphOverviewControl.CreateGraphPaintable(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Factory method that creates the paintable that renders the preview of the graph.
            </summary>
      <param name="graph">The graph to draw.</param>
      <returns>A paintable.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphOverviewControl.Graph">
      <summary>
            Gets or sets the graph that is rendered in the overview.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphOverviewControl.GraphControl">
      <summary>
            Gets or sets the client control, that will be used to retrieve the graph from
            and that will be used for navigating.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.GraphOverviewControl.GraphControlProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.GraphOverviewControl.GraphControl"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphOverviewControl.GraphPaintable">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable"></see> that is used to render the
            over view graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.GraphOverviewControl.Open(System.Windows.Window,yWorks.yFiles.UI.GraphControl)">
      <summary>
            Convenience method that 
            creates, opens, and returns a <see cref="T:System.Windows.Window"></see> that hosts a <see cref="T:yWorks.yFiles.UI.GraphOverviewControl"></see></summary>
      <param name="owner">The owner of the form, may be <see langword="null"></see>.</param>
      <param name="control">The control to display the overview for.</param>
      <returns>The newly created and open form.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.GraphOverviewControl.OverviewInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that is used to navigate the client control.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.HierarchyView`1">
      <summary>
            A custom <see cref="T:System.Windows.Controls.Control"></see> that displays a <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>.
            </summary>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.HierarchyView`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.HierarchyView`1"></see> class.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.GroupTemplate">
      <summary>
            Gets or sets the template for group items in the hierarchy.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.GroupTemplateProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.GroupTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.GroupTemplateSelector">
      <summary>
            Gets or sets the template selector for groups in the hierarchy.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.GroupTemplateSelectorProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.GroupTemplateSelector"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.Hierarchy">
      <summary>
            Gets or sets the hierarchy to display.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.HierarchyProperty">
      <summary>
            The Dependency Property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.Hierarchy"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.ItemsConverter">
      <summary>
            Gets the items converter that will convert from an item to its child items
            for the current <see cref="P:yWorks.yFiles.UI.HierarchyView`1.Hierarchy"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.ItemsSource">
      <summary>
            Gets or sets the items source.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.ItemsSourceProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.ItemsSource"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.ItemTemplateSelector">
      <summary>
            Gets or sets the item template selector.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.ItemTemplateSelectorProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.ItemTemplateSelector"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.LeafTemplate">
      <summary>
            Gets or sets the template for leaves in the hierarchy.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.LeafTemplateProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.LeafTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.HierarchyView`1.LeafTemplateSelector">
      <summary>
            Gets or sets the template selector for leaves in the hierarchy.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.HierarchyView`1.LeafTemplateSelectorProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.LeafTemplateSelector"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.HierarchyView`1.OnApplyTemplate">
      <summary>
                    When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
                </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.HierarchyView`1.OnHierarchyChanged(yWorks.yFiles.UI.Model.IHierarchy{`0},yWorks.yFiles.UI.Model.IHierarchy{`0})">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.HierarchyView`1.Hierarchy"></see> changed.
            </summary>
      <param name="newHierarchy">The new hierarchy.</param>
      <param name="oldHierarchy">The old hierarchy.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.NodeHierarchyView">
      <summary>
            A concrete subclass of <see cref="T:yWorks.yFiles.UI.HierarchyView`1"></see>
            for <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.NodeHierarchyView.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.NodeHierarchyView" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.NodeHierarchyView.Graph">
      <summary>
            Gets or sets the graph whose nodes are visualized in this view.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.NodeHierarchyView.GraphProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.NodeHierarchyView.Graph"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.NodeHierarchyView.ShowMasterHierarchy">
      <summary>
            Gets or sets whether to use the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>
            of a graph instead, if the <see cref="P:yWorks.yFiles.UI.NodeHierarchyView.Graph"></see> property is in fact a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph">folded graph view</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.NodeHierarchyView.ShowMasterHierarchyProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.NodeHierarchyView.ShowMasterHierarchy"></see> property.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Animation.EdgeAnimation">
      <summary>
            Animates the layout of an edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.EdgeAnimation.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.IPoint[],yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.TimeSpan)">
      <summary>
            Creates a new EdgeAnimation instance.
            </summary>
      <param name="g">The graph the animated edge belongs to.</param>
      <param name="edge">The edge layout to animate.</param>
      <param name="endBends">The bend positions after the animation.</param>
      <param name="endSourceLocation">The absolute position of the source port after the animation.</param>
      <param name="endTargetLocation">The absolute position of the target port after the animation.</param>
      <param name="preferredDuration">The preferred duration of the animation in milliseconds.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.EdgeAnimation.Animate(System.Double)">
      <summary>
            changes the edge layout according to the given time value.
            </summary>
      <param name="time">the relative time for the animation [0, 1]</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.EdgeAnimation.Cleanup">
      <summary>
            does a clean up after the animation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.EdgeAnimation.Initialize">
      <summary>
            initializes the animation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Animation.LabelAnimation">
      <summary>
            This animation linearly interpolates the <see cref="M:yWorks.yFiles.UI.Model.ILabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">geometry</see>
            of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>'s <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> from the current to a
            given <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LabelAnimation.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Animation.LabelAnimation"></see> class.
            </summary>
      <param name="graph">The graph that contains the labels.</param>
      <param name="label">The label to animate the parameter of.</param>
      <param name="parameter">The target parameter of the label.</param>
      <param name="preferredDuration">The preferred duration of the animation.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LabelAnimation.Animate(System.Double)">
      <summary>
            Does the animation according to the relative animation time.
            </summary>
      <param name="time">the animation time [0,1]</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LabelAnimation.Cleanup">
      <summary>
            Cleans up after an animation has finished.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LabelAnimation.Initialize">
      <summary>
            Initializes the animation. Call this method once before subsequent
            calls to <see cref="M:yWorks.Canvas.Animation.IAnimation.Animate(System.Double)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Animation.LabelAnimation.PreferredDuration">
      <summary>
            Gets the preferred duration of the animation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Animation.LayoutMorpher">
      <summary>
            Animates the layout of a graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LayoutMorpher.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Model.IMapper{yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.IRectangle},yWorks.Canvas.Model.IMapper{yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.IPoint[]},yWorks.Canvas.Model.IMapper{yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter},yWorks.Canvas.Model.IMapper{yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter},yWorks.Canvas.Model.IMapper{yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter},System.TimeSpan)">
      <summary>
            Creates a new LayoutMorpher instance.
            </summary>
      <param name="graph">The graph for which the layout should be animated.</param>
      <param name="nodeLayout">The node layouts after the animation.</param>
      <param name="bendLocations">The bend locations after the animation, for each edge the points are
            interpreted as the position of the bends along the
            edge in the given order.</param>
      <param name="edgeLabelParameters">The edge label model parameters for each edge label after
            the animation.</param>
      <param name="portLocations">The <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see>s for each <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            in the graph that will be morphed.</param>
      <param name="nodeLabelParameters">The node label model parameters for each node label after
            the animation.</param>
      <param name="preferredDuration">The preferred duration of the animation in milliseconds.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LayoutMorpher.Animate(System.Double)">
      <summary>
            Changes the graph layout according to the given time value.
            </summary>
      <param name="time">The relative time for the animation [0, 1].</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LayoutMorpher.Cleanup">
      <summary>
            Does a clean up after the animation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.LayoutMorpher.Initialize">
      <summary>
            Initializes the animation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Animation.LayoutMorpher.PreferredDuration">
      <summary>
            Gets the preferred duration in milliseconds.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Animation.NodeAnimation">
      <summary>
            Animates the layout of a node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.NodeAnimation.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.IRectangle,System.TimeSpan)">
      <summary>
            Creates a new NodeAnimation instance.
            </summary>
      <param name="g">The graph the animated node belongs to.</param>
      <param name="node">The node layout to animate.</param>
      <param name="targetLayout">The expected node layout after the animation.</param>
      <param name="preferredDuration">The preferred duration of the animation in milliseconds.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.NodeAnimation.Animate(System.Double)">
      <summary>
            Changes the node layout according to the given time value.
            </summary>
      <param name="time">The relative time for the animation [0, 1].</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.NodeAnimation.Cleanup">
      <summary>
            Cleans up after an animation has finished.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.NodeAnimation.Initialize">
      <summary>
            Initializes the animation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Animation.NodeAnimation.PreferredDuration">
      <summary>
            Gets the preferred duration of the animation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Animation.PortAnimation">
      <summary>
            Animates the location of a <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> by interpolating
            linearly between the current <see cref="M:yWorks.yFiles.UI.Model.IPortLocationModel.GetLocation(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">location</see>
            and the target location that is provided by the target <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.PortAnimation.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Animation.PortAnimation"></see> class.
            </summary>
      <param name="graph">The graph that contains the port.</param>
      <param name="port">The port to animate.</param>
      <param name="endParameter">The parameter to linearly interpolate to.</param>
      <param name="preferredDuration">The <see cref="P:yWorks.yFiles.UI.Animation.PortAnimation.PreferredDuration">preferred duration</see> of this animation.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.PortAnimation.Animate(System.Double)">
      <summary>
            Does the animation according to the relative animation time.
            </summary>
      <param name="time">the animation time [0,1]</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.PortAnimation.Cleanup">
      <summary>
            Cleans up after an animation has finished.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Animation.PortAnimation.Initialize">
      <summary>
            Initializes the animation. Call this method once before subsequent
            calls to <see cref="M:yWorks.Canvas.Animation.IAnimation.Animate(System.Double)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Animation.PortAnimation.PreferredDuration">
      <summary>
            Gets the preferred duration of the animation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.DataBinding.GraphSource">
      <summary>
            This class is an adapter which creates a <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> from arbitrary business data.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.DataBinding.GraphSource"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.BeginInit">
      <summary>
                    Signals the object that initialization is starting.
                </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.DynamicUpdates">
      <summary>
            Gets or sets a value indicating whether this instance dynamically updates the 
            <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> when the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see>, <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see> or
            <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource"></see> contents changes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeLabelBinding">
      <summary>
            Gets or sets the edge label binding.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeLabelTemplate">
      <summary>
            Gets or sets the edge label template. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeLabelTemplateProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeLabelTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.Edges">
      <summary>
            Gets the edges of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource">
      <summary>
            Get or set the <see cref="T:System.Collections.IEnumerable">collection</see> of business objects to be represented
            as edges of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSourceProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeStyle">
      <summary>
            Gets or sets the edge style. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeStyleProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgeStyle"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.EndInit">
      <summary>
                    Signals the object that initialization is complete.
                </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.GetBusinessObject(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Retrieves the associated business object from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see>,
            <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see> or <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource"></see> for a given
            <see cref="T:yWorks.Canvas.Model.IModelItem">element</see> (node, group, edge) from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>.
            </summary>
      <param name="graphElement">The element of the graph to yield the business object for.</param>
      <returns>The business object associated with the graph element.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.GetEdge(System.Object)">
      <summary>
            Retrieves the associated edge in the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> for the item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see>.
            </summary>
      <param name="businessObject">An item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see> to yield the edge for.</param>
      <returns>The edge associated with the business object or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.GetGroup(System.Object)">
      <summary>
            Retrieves the associated group in the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> for the item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource"></see>.
            </summary>
      <param name="businessObject">An item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource"></see> to yield the group for.</param>
      <returns>The group associated with the business object or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.GraphSource.GetNode(System.Object)">
      <summary>
            Retrieves the associated node in the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> for the item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see>.
            </summary>
      <param name="businessObject">An item from the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see> to yield the node for.</param>
      <returns>The node associated with the business object or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph">
      <summary>
            Gets the graph. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.GraphProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupBinding">
      <summary>
            Gets or sets the group binding.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.Groups">
      <summary>
            Gets the groups of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource">
      <summary>
            Get or set the <see cref="T:System.Collections.IEnumerable">collection</see> of business objects to be represented
            as groups of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSourceProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupsSource"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupTemplate">
      <summary>
            Gets or sets the group template. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.GroupTemplateProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.GroupTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.Nodes">
      <summary>
            Gets the nodes of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource">
      <summary>
            Get or set the <see cref="T:System.Collections.IEnumerable">collection</see> of business objects to be represented
            as nodes of the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see>. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSourceProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodeTemplate">
      <summary>
            Gets or sets the node template. This is a dependency property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.GraphSource.NodeTemplateProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodeTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.ParentGroupBinding">
      <summary>
            Gets or sets the parent group binding.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.SourceNodeBinding">
      <summary>
            Gets or sets the source node binding.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.TargetNodeBinding">
      <summary>
            Gets or sets the target node binding.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.ToBusinessObjectConverter">
      <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter"></see> that can be used to convert from the elements of
            the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.Graph"></see> to the originating business objects.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.ToEdgeConverter">
      <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter"></see> that can be used to convert from the business objects
            that are contained in the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.EdgesSource"></see> to the corresponding <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.GraphSource.ToNodeConverter">
      <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter"></see> that can be used to convert from the business objects
            that are contained in the <see cref="P:yWorks.yFiles.UI.DataBinding.GraphSource.NodesSource"></see> to the corresponding <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.DataBinding.TreeSource">
      <summary>
             This class is an adapter which creates a <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> from hierarchical business data.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.#ctor">
      <summary>
             Creates a new empty instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.BeginInit">
      <summary>
                    Signals the object that initialization is starting.
                </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding">
      <summary>
             Get or set the binding for getting the child business objects of a business object.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.DynamicUpdates">
      <summary>
            Gets or sets a value indicating whether this instance dynamically updates the 
            <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> when the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> contents or the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding"></see>
            changes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelBinding">
      <summary>
             Get or set the binding for getting the business objects that can be used as a label for the edge to the parent node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelModelParameter">
      <summary>
             Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle">style</see> used for displaying the edges of
             the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelModelParameterProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeStyle"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelTemplate">
      <summary>
             Gets or sets the <see cref="T:System.Windows.DataTemplate">template</see> used for displaying the edge labels of
             the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelTemplateProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeLabelTemplate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeStyle">
      <summary>
             Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle">style</see> used for displaying the edges of
             the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeStyleProperty">
      <summary>
            Dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.EdgeStyle"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.EndInit">
      <summary>
                    Signals the object that initialization is complete.
                </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.GetBusinessObject(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Retrieves the associated business object from the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> or <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding"></see>
            for a given <see cref="T:yWorks.yFiles.UI.Model.INode"></see> from the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
      <param name="node">The node to yield the business object for.</param>
      <returns>The business object associated with the node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.GetNode(System.Object)">
      <summary>
            Retrieves the associated node in the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> for the item from the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> or <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding"></see></summary>
      <param name="businessObject">An item from the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> or the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding"></see> to yield the node for.</param>
      <returns>The node associated with the business object or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph">
      <summary>
            Get the Graph representing the business data. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.GraphProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> property.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.DataBinding.TreeSource.GraphRebuilt">
      <summary>
            This event is raised whenever the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> is rebuilt.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.Nodes">
      <summary>
            Gets the <see cref="T:System.Windows.Data.CollectionView"></see> over the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> that will be used
            to create the nodes in the tree.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodeSourceComparer">
      <summary>
            Gets or sets a comparer for the business objects which are sources for the nodes in the
            <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource">
      <summary>
             Get or set the <see cref="T:System.Collections.IEnumerable">collection</see> of business objects to be represented
             as nodes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSourceProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodeTemplate">
      <summary>
             Get or set the <see cref="T:System.Windows.DataTemplate"></see> used for the nodes of the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.DataBinding.TreeSource.NodeTemplateProperty">
      <summary>
            The dependency property for the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodeTemplate"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.DataBinding.TreeSource.OnGraphRebuilt">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> has been rebuilt in response to a change 
            in one of the properties of this instance that make up the graph's structure.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.ToBusinessObjectConverter">
      <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter"></see> that can be used to convert from the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s
            that are contained in the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.Graph"></see> to the mapped business objects from the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see>
            and <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.ChildBinding"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.DataBinding.TreeSource.ToModelItemConverter">
      <summary>
            Provides an <see cref="T:System.Windows.Data.IValueConverter"></see> that can be used to convert from the business objects
            that are contained in the <see cref="P:yWorks.yFiles.UI.DataBinding.TreeSource.NodesSource"></see> to the corresponding <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle">
      <summary>
            Simple abstract base class for <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.#ctor(yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer)">
      <summary>
            Creates an instance using the provided renderer instance.
            </summary>
      <param name="styleRenderer">
      </param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.Clone">
      <summary>
            Performs a <see cref="M:System.Object.MemberwiseClone"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Installs the edge in the canvas using the given context as a hint.
            </summary>
      <param name="context">The context that yields the <see cref="P:yWorks.Canvas.Model.IInstallerContext.Canvas"></see> and <see cref="P:yWorks.Canvas.Model.IInstallerContext.CanvasObjectGroup"></see>.</param>
      <param name="edge">The edge to install this style for in the canvas.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.Renderer">
      <summary>
            Gets the renderer implementation that has been supplied to this instance in the constructor.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.SourceArrow">
      <summary>
            Gets or sets the visual arrow at the source end of edges that use this style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractEdgeStyle.TargetArrow">
      <summary>
            Gets or sets the visual arrow at the target end of edges that use this style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1">
      <summary>
            Abstract base class for <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer"></see>.
            </summary>
      <typeparam name="TStyle">The type of <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> this class operates on.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property which creates a plain <see cref="T:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor"></see>. 
            </summary>
      <returns>
            An ICanvasObjectDescriptor instance that will delegate to this instance's methods
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetPath">
      <summary>
            Returns a representation of the visible path of the edge in form of a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see></summary>
      <returns>
            An instance that describes the visible path or <c>null</c> if this is not applicable for the current geometry.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPathGeometry"></see> interface that can
            handle the provided edge and its associated style.
            </summary>
      <param name="edge">The edge to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetSegmentCount">
      <summary>
            Returns the number of "segments" this edge's path consists of.
            </summary>
      <returns>
            the number of segments or <c>-1</c> if there is no such thing as a segment for this edge.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetSourceArrowAnchor(yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculate and update the anchor and the source arrow's direction vector.
            </summary>
      <param name="arrow">The arrow to calculate the anchor for.</param>
      <param name="anchorPoint">The tip of the arrow.</param>
      <param name="arrowDirection">The direction vector of the arrow.</param>
      <returns>Whether an anchor has been successfully determined.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetTangent(System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point.
            </summary>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the visible edge path</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetTangent(System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point for the given segment.
            </summary>
      <param name="segmentIndex">the segment to use for the calculation</param>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the segment</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.GetTargetArrowAnchor(yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculate and update the anchor and the target arrow's direction vector.
            </summary>
      <param name="arrow">The arrow to calculate the anchor for.</param>
      <param name="anchorPoint">The tip of the arrow.</param>
      <param name="arrowDirection">The direction vector of the arrow.</param>
      <returns>Whether an anchor has been successfully determined.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractEdgeStyleRenderer`1.PaintArrows(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.DrawingContext,yWorks.yFiles.UI.Drawing.IArrow,yWorks.yFiles.UI.Drawing.IArrow)">
      <summary>
            Paints the provided arrows using the graphics context.
            </summary>
      <param name="ctx">the painting context</param>
      <param name="g">the graphics context</param>
      <param name="sourceArrow">The arrow to paint at the source side</param>
      <param name="targetArrow">The arrow to paint at the target side</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1">
      <summary>
            Simple abstract base class of an <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see> that
            can be used to conveniently create custom label style implementations.
            </summary>
      <typeparam name="TStyle">The exact type of the style to use for the label style.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Configure">
      <summary>
            Stores the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> into <see cref="F:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates a tag object that encapsulated the state of the rendering
            if <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> is called on the current state of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <returns>
            The tag object that will later be passed to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see> and
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>. This can be any kind of object or <see langword="null"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Calculates the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize">preferred size</see>
            of a given label using the associated style.
            </summary>
      <param name="label">The label to determine the preferred size for</param>
      <param name="style">The style instance that uses this instance as its 
            <see cref="P:yWorks.yFiles.UI.Drawing.ILabelStyle.Renderer"></see></param>
      <returns>A size that can be used as the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>
            if this renderer paints the label using the associated style. 
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsAutoFlip">
      <summary>
            Determines whether the label's style should automatically flip the painting contents if the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Layout"></see> is upside down.
            </summary>
      <returns>This default implementation returns <see langword="true"></see>, always.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Determines whether the given render state tag is still valid given the provided context.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag created during the last call to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            or <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
        <c>true</c> if the render state is still valid for the specified context; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Uses the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> to determine whether the clip intersects.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.layout">
      <summary>
            Holds the layout of the current label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Layout">
      <summary>
            Retrieves the current <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Performs the default painting logic and delegates to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.PaintContent(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext,System.Double,System.Double)"></see>.
            </summary>
      <param name="g">The graphics context to paint to.</param>
      <param name="ctx">The render context.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.PaintContent(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext,System.Double,System.Double)">
      <summary>
            Performs the core painting logic.
            </summary>
      <param name="g">The graphics context to paint to.</param>
      <param name="ctx">The painting context.</param>
      <param name="width">The width of the area to paint into.</param>
      <param name="height">The height of the area to paint into.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Updates the render state tag for the given context using the current configuration of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag that has earlier been created by calls to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            and <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
            The new tag to store with the visual. This may be the same instance as <paramref name="renderStateTag"></paramref>
            or a new instance or <see langword="null"></see>.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1">
      <summary>
            An abstract implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer"></see> which must be parameterized
            using the concrete <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> interface used by subclasses.
            </summary>
      <typeparam name="TStyle">the style interface this renderer deals with</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.CreateStyleDescriptor">
      <summary>
            Factory method for the NodeStyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the layout bounds as an upper bound for the painting bound.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.GetShapeGeometry(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Configures the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see> and 
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="node">The node to retrieve the shape geometry for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> 
            field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the node. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> 
            field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see> for an intersection with the
            given box.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the node is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines visibility by checking for an intersection with the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <param name="clip">The current clip</param>
      <param name="ctx">The context.</param>
      <returns>Whether the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see> is visible in the clip.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout">
      <summary>
            Returns the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> of the node this renderer is currently
            configured for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1">
      <summary>
            An abstract implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3"></see>
            that is based on the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface and can be used to install an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> with 
            a corresponding <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> and a concrete
            style implementation.
            </summary>
      <typeparam name="TStyle">the specific style interface used by style instances that return this renderer</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this to store special state with this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates a tag object that encapsulated the state of the rendering
            if <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> is called on the current state of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <returns>
            The tag object that will later be passed to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see> and
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>. This can be any kind of object or <see langword="null"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.CreateStyleDescriptor">
      <summary>
            Factory method for the NodeStyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the layout bounds as an upper bound for the painting bound.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.GetShapeGeometry(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Configures the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see> and 
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="node">The node to retrieve the shape geometry for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> 
            field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the node. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> 
            field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see> for an intersection with the
            given box.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the node is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Determines whether the given render state tag is still valid given the provided context.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag created during the last call to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            or <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
        <c>true</c> if the render state is still valid for the specified context; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and test the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for a visible intersection with the clip bounds.
            </summary>
      <param name="clip">the clip bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item may be painted within the clip bounds.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.Layout">
      <summary>
            Returns the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> of the node this renderer is currently
            configured for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Updates the render state tag for the given context using the current configuration of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag that has earlier been created by calls to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            and <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableNodeStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
            The new tag to store with the visual. This may be the same instance as <paramref name="renderStateTag"></paramref>
            or a new instance or <see langword="null"></see>.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3">
      <summary>
            An abstract generic implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3"></see>
            that is based on the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface and can be used to install an <see cref="T:yWorks.Canvas.Model.IModelItem"></see> with 
            a corresponding <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see> and a concrete
            style implementation.
            </summary>
      <typeparam name="TModelItem">the type of item this renderer works on</typeparam>
      <typeparam name="TModelStyle">the basic class of the style that is associated with this kind of item</typeparam>
      <typeparam name="TStyle">the specific style interface used by style instances that return this renderer</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates a tag object that encapsulated the state of the rendering
            if <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> is called on the current state of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <returns>The tag object that will later be passed to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see> and
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>. This can be any kind of object or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            An implementation that creates a <see cref="T:System.Windows.Media.DrawingVisual"></see>
            and calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> on the context of the visual.
            </summary>
      <param name="ctx">The context to use for the rendering, this instance will be passed to the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> method.</param>
      <returns>A <see cref="T:System.Windows.Media.DrawingVisual"></see> that contains the drawing.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.GetPaintable(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to retrieve the paintable for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see>
             field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> 
            field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Determines whether the given render state tag is still valid given the provided context.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag created during the last call to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            or <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
        <c>true</c> if the render state is still valid for the specified context; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Paints the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see>.
            </summary>
      <param name="d">the drawing context to paint on</param>
      <param name="ctx">the graphics context to consider</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Updates the render state tag for the given context using the current configuration of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag that has earlier been created by calls to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            and <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>The new tag to store with the visual. This may be the same instance as <paramref name="renderStateTag"></paramref>
            or a new instance or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            An implementation that will update the <paramref name="oldVisual"></paramref> if
            it was an <see cref="T:System.Windows.Media.DrawingVisual"></see> and call the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> method.
            </summary>
      <param name="ctx">The context to use for the rendering, this instance will be passed to the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> method.</param>
      <param name="oldVisual">The visual to update.</param>
      <returns>A <see cref="T:System.Windows.Media.DrawingVisual"></see> that contains the drawing.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3">
      <summary>
            An abstract generic implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see>
            that can be used to install an <see cref="T:yWorks.Canvas.Model.IModelItem"></see> with 
            a corresponding <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see> and a concrete
            style implementation.
            </summary>
      <typeparam name="TModelItem">the type of item this renderer works on (e.g. INode)</typeparam>
      <typeparam name="TModelStyle">the basic class of the style that is associated with this kind of item (e.g. INodeStyle)</typeparam>
      <typeparam name="TStyle">the specific style interface used by style instances that return this renderer (e.g. MyCustomNodeStyle)</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure">
      <summary>
            Prepares this instance for subsequent calls after the
            style and item have been initialized. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an ICanvasObjectDescriptor instance that will delegate to this instance's methods</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetBoundsProvider(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to retrieve the bounds provider for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetContext(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            does <b>not</b> call <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to query the context for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetHitTestable(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to query hit test with. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetMarqueeTestable(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to query marquee intersection tests. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetVisibilityTest(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            does <b>not</b> call <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to query visibility tests. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetVisualCreator(`0,`1)">
      <summary>
            Configures the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> and <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> parameters,
            calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and returns <c>this</c>.
            </summary>
      <param name="item">The item to retrieve the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> for. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)"></see>.</param>
      <param name="style">The style to associate with the item. The value will
            be stored in the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> field by <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)"></see>.</param>
      <returns>
        <c>this</c>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            Installs the model in the canvas at the given group using the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and test the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for a visible intersection with the clip bounds.
            </summary>
      <param name="clip">the clip bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item may be painted within the clip bounds.
            </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">
      <summary>
            The item that is currently assigned to this renderer instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">
      <summary>
            Gets the currently configured item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetItem(`0)">
      <summary>
            Called by the various descriptor getters to initialize the item.
            </summary>
      <param name="item">the item to use for the subsequent calls</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.SetStyle(`2)">
      <summary>
            Called by the various descriptor getters to initialize the style.
            </summary>
      <param name="style">the style to use for the subsequent calls</param>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style">
      <summary>
            The style that it currently assigned to this renderer instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style">
      <summary>
            Gets the currently configured style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor">
      <summary>
            Gets the ICanvasObjectDescriptor to use for new installations.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateStyleDescriptor"></see> will be called.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ArcEdgeStyle">
      <summary>
            Simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IArcEdgeStyle"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.#ctor">
      <summary>
            Create a new style instance with default settings.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.#ctor(System.Windows.Media.Pen,System.Double)">
      <summary>
            Create a new style instance with a default renderer implementation and given pen and height parameters.
            </summary>
      <param name="pen">The pen that is used to draw the arc</param>
      <param name="height">The initial height of the arc</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.#ctor(yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer)">
      <summary>
            Create a new style instance with a custom renderer implementation and default pen and height parameters.
            </summary>
      <param name="styleRenderer">The custom renderer for this style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.#ctor(yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer,System.Windows.Media.Pen,System.Double)">
      <summary>
            Create a new style instance with a custom renderer implementation and given pen and height parameters.
            </summary>
      <param name="styleRenderer">The custom renderer for this style instance</param>
      <param name="pen">The pen that is used to draw the arc</param>
      <param name="height">The initial height of the arc</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Clone">
      <summary>
            Overridden to clone the <see cref="P:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Pen"></see>.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Height">
      <summary>
            Gets or sets the "height" of the arc.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Installs the edge in the canvas using the given context as a hint.
            </summary>
      <param name="context">The context that yields the <see cref="P:yWorks.Canvas.Model.IInstallerContext.Canvas"></see> and <see cref="P:yWorks.Canvas.Model.IInstallerContext.CanvasObjectGroup"></see>.</param>
      <param name="edge">The edge to install this style for in the canvas.</param>
      <param name="item">The item to install.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Pen"></see> that is used to draw the arc
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArcEdgeStyle.Ratio">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.yFiles.UI.Drawing.IArcEdgeStyle"></see> interprets
            the <see cref="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Height"></see> value as an absolute or relative value.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer">
      <summary>
            Default renderer implementation for <see cref="T:yWorks.yFiles.UI.Drawing.IArcEdgeStyle"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.AddBridges">
      <summary>
            Overridden to return <see langword="false"></see> since the flattening interferes
            with its own obstacles.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.Configure">
      <summary>
            Prepares this instance for subsequent calls after the
            style and item have been initialized. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.CreatePath">
      <summary>
            This method should create the basic uncropped path given the control points.
            </summary>
      <returns>A path that has to be cropped, yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.CropPath(yWorks.Canvas.Drawing.GeneralPath@)">
      <summary>
            Crops the edge's path at the nodes.
            </summary>
      <param name="pathToCrop">The path that should be cropped.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetHeight">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Height"></see> of the style.
            </summary>
      <returns>the height.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetPen">
      <summary>
            Gets the pen to use for painting the path.
            </summary>
      <returns>The pen or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetSegmentCount">
      <summary>
            Returns the number of "segments" this edge's path consists of.
            </summary>
      <returns>
            the number of segments or <c>-1</c> if there is no such thing as a segment for this edge.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetSourceArrow">
      <summary>
            Gets the source arrow from the style via <see cref="P:yWorks.yFiles.UI.Drawing.IArrowOwner.SourceArrow"></see>.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetTangent(System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point.
            </summary>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the visible edge path</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetTangent(System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point for the given segment.
            </summary>
      <param name="segmentIndex">the segment to use for the calculation</param>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the segment</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.GetTargetArrow">
      <summary>
            Gets the target arrow from the style via <see cref="P:yWorks.yFiles.UI.Drawing.IArrowOwner.TargetArrow"></see>.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.IsRatio"></member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Overridden for performance reasons.
            </summary>
      <param name="clip">
      </param>
      <param name="ctx">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ArrowPaintable">
      <summary>
            An <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementation that paints arrowheads and provides bounds for the drawing engine.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.#ctor(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint,System.Double)">
      <summary>
            Subclass constructor that sets the values by reference.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowPaintable.anchor">
      <summary>
            The anchor, or tip of the arrow.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Anchor">
      <summary>
            Gets the anchor where the arrow is pinned.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Brush">
      <summary>
            Gets or sets the Brush to use for the fill of the interior of the arrow.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.Create(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint,System.Double,yWorks.Canvas.Drawing.IPaintable,yWorks.Canvas.Drawing.IBoundsProvider)">
      <summary>
            Factory method that creates an arrow from a custom <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>.
            </summary>
      <param name="anchor">The point instance to use for the anchor as defined in <see cref="M:yWorks.yFiles.UI.Drawing.IArrow.GetPaintable(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see>.</param>
      <param name="direction">The direction point instance to use for the direction as defined in <see cref="M:yWorks.yFiles.UI.Drawing.IArrow.GetPaintable(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see>.</param>
      <param name="length">The length to yield in <see cref="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Length"></see>.</param>
      <param name="arrow">The arrow paintable that will be called to actually render the arrow head in the normalized coordinate system.</param>
      <param name="bounds">The bounds provider that yields the bounds of the rendering in normalized coordinate system.</param>
      <returns>An instance of <see cref="T:yWorks.yFiles.UI.Drawing.ArrowPaintable"></see> that uses the given <paramref name="arrow">paintable</paramref>
            and bounds provider for rendering.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.Create(yWorks.yFiles.UI.Drawing.ArrowType,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint,System.Windows.Media.Pen,System.Windows.Media.Brush)">
      <summary>
            Creates a predefined arrow instance of the specified type using the provided values.
            </summary>
      <param name="type">The type of the arrow.</param>
      <param name="anchor">The anchor to use by reference.</param>
      <param name="direction">The direction to use by reference.</param>
      <param name="pen">The pen to use.</param>
      <param name="brush">The brush the brush to use.</param>
      <returns>
      </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowPaintable.direction">
      <summary>
            The direction vector of the arrow;
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Direction">
      <summary>
            Gets the direction vector the arrow is painted.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns a tight rectangular area where the whole rendering
            would fit into.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>the bounds or <see cref="P:yWorks.Canvas.Geometry.Structs.RectD.Empty"></see> to indicate an unbound area</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Length">
      <summary>
            Gets the length of the arrow, i.e., the amount by which the path should be shortened.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowPaintable.NoArrow">
      <summary>
            Singleton instance for a non-existing arrowhead.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Performs the actual painting into the given graphics context.
            </summary>
      <param name="g">the graphics context to paint into</param>
      <param name="ctx">the render context, that can be used to 
            obtain information about the coordinate systems</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Pen">
      <summary>
            Gets or sets the Pen to use for the drawing of the lines of the arrow.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ArrowPaintable.Scale">
      <summary>
            Sets the scale for the arrow.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ArrowType">
      <summary>
            Predefines some arrow types that can be used together with <see cref="M:yWorks.yFiles.UI.Drawing.ArrowPaintable.Create(yWorks.yFiles.UI.Drawing.ArrowType,yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPoint,System.Windows.Media.Pen,System.Windows.Media.Brush)"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Default">
      <summary>
            Default arrow 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Simple">
      <summary>
            Simple arrow 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Short">
      <summary>
            Short arrow 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Diamond">
      <summary>
            Diamond shaped arrow
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.None">
      <summary>
            No arrow
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Circle">
      <summary>
            Circular shaped arrow
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ArrowType.Cross">
      <summary>
            Cross shaped arrow
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.BevelNodeStyle">
      <summary>
            Simple basic implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IBevelNodeStyle"></see>
            that is used by the <see cref="T:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer"></see>
            node style renderer implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.#ctor">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background color.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.#ctor(System.Windows.Media.Color)">
      <summary>
            Creates a new instance using the given color as the background color.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer)">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background color
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer,System.Windows.Media.Color)">
      <summary>
            Creates a new instance using the given color as the background color
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Color">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Inset">
      <summary>
            The insets to use for the bevel.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Radius">
      <summary>
            The radius of the corner of the rounded rectangle.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer">
      <summary>
            A <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see><see cref="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer">renderer</see>
            implementation that draws a rounded rectangle with a bevel border in a 'shiny plate' fashion.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.Color">
      <summary>
            Retrieves the color from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.Inset">
      <summary>
            Retrieves the inset from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <param name="point">The point to test.</param>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.ProvideRadiusHandle">
      <summary>
            Gets or sets a property that determines whether this instance should provide an <see cref="T:yWorks.Canvas.Input.IHandle"></see>
            for editing the radius of the shape.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.Radius">
      <summary>
            Retrieves the radius to use from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator">
      <summary>
            Simple default implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.#ctor(yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator"></see> class.
            using the provided style for the <see cref="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Wrapped"></see> property.
            </summary>
      <param name="decoratedStyle">The decorated style.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.ButtonLocationParameter">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> that determines the placement of the button for toggling the
            expanded state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.ButtonStyle">
      <summary>
            Gets or sets the style to use for the button.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Insets">
      <summary>
            Yields the insets to use for the <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"></see> that will be reported
            by the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"></see>'s <see cref="T:yWorks.Support.ILookup"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Wrapped">
      <summary>
            The wrapped node style that will be used to perform the actual rendering of the node.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer">
        </see> implementation that can be used in conjunction with
            <see cref="T:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"></see> class.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.CollapseButtonStyleKey">
      <summary>
            The resource key that will be used by this instance to look up the <see cref="T:System.Windows.Style"></see>
            of the <see cref="T:System.Windows.Controls.Button"></see> if <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetButtonStyle"></see> method yields <see langword="null"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.CreateButton(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Factory method that creates the button instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates the visual for the given context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see> and takes the button into account.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetButtonLocationParameter">
      <summary>
            Yields the <see cref="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.ButtonLocationParameter"></see>
            for the current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetButtonStyle">
      <summary>
            Yields the <see cref="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.ButtonStyle"></see>
            for the current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetOutline">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle">
      <summary>
            Yields the <see cref="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.Wrapped"></see> property
            for the current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see> and checks the button.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Delegates to the <see cref="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.GetWrappedStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.DefaultArrow">
      <summary>
            An abstract base class for an <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see>
            that provides a number of convenience factory methods
            and singleton instances for default arrow types.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.DefaultArrow"></see> class
            using the given length, cropping length, and scale values.
            </summary>
      <param name="length">The length.</param>
      <param name="cropLength">The length by which an edge's path needs to be cropped.</param>
      <param name="scale">The scale factor.</param>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Circle">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a simple circle-shaped black arrow.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.Create(yWorks.yFiles.UI.Drawing.ArrowType)">
      <summary>
            Factory method that creates an arrow of the given type in black.
            </summary>
      <param name="arrowType">The type of the arrow.</param>
      <returns>An arrow.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.Create(yWorks.yFiles.UI.Drawing.ArrowType,System.Windows.Media.Color)">
      <summary>
            Factory method that creates an arrow of the given type and color.
            </summary>
      <param name="arrowType">The type of the arrow.</param>
      <param name="color">The color to use for pen and brush.</param>
      <returns>An arrow.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.Create(yWorks.yFiles.UI.Drawing.ArrowType,System.Windows.Media.Color,System.Double)">
      <summary>
            Factory method that creates an arrow of the given type, color, and scale.
            </summary>
      <param name="arrowType">The type of the arrow.</param>
      <param name="color">The color to use for pen and brush.</param>
      <param name="scale">The scale factor to apply.</param>
      <returns>An arrow.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.Create(yWorks.yFiles.UI.Drawing.ArrowType,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Double)">
      <summary>
            Factory method that creates an arrow of the given type using the
            provided Pen and Brush for outline and fill respectively.
            </summary>
      <param name="arrowType">The type of the arrow.</param>
      <param name="pen">The pen to draw the outline with or <see langword="null"></see>.</param>
      <param name="brush">The brush to fill the interior with or <see langword="null"></see>.</param>
      <param name="cropLength">Length of the crop.</param>
      <returns>An arrow.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.Create(yWorks.yFiles.UI.Drawing.ArrowType,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Double,System.Double)">
      <summary>
            Factory method that creates an arrow of the given type using the
            provided Pen and Brush for outline and fill respectively.
            </summary>
      <param name="arrowType">The type of the arrow.</param>
      <param name="pen">The pen to draw the outline with or <see langword="null"></see>.</param>
      <param name="brush">The brush to fill the interior with or <see langword="null"></see>.</param>
      <param name="scale">The scale factor to apply.</param>
      <param name="cropLength">Length of the crop.</param>
      <returns>An arrow.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.cropLength">
      <summary>
            The cropping length.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.DefaultArrow.CropLength">
      <summary>
            Gets the cropping length associated with this instance.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Cross">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a simple cross-shaped black arrow.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Default">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a default shaped black arrow.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Diamond">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a simple diamond-shaped black arrow.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.GetBoundsProvider(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Gets an <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> implementation that can yield
            this arrow's bounds if painted at the given location using the 
            given direction for the given edge.
            </summary>
      <param name="edge">the edge this arrow belongs to</param>
      <param name="atSource">whether this will be the source arrow</param>
      <param name="anchor">the anchor point for the tip of the arrow</param>
      <param name="direction">the direction the arrow is pointing in</param>
      <returns>an implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that can
            subsequently be used to query the bounds. Clients will always call
            this method before using the implementation and may not cache the instance returned.
            This allows for applying the flyweight design pattern to implementations.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultArrow.GetPaintable(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Gets an <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementation that will paint this arrow
            at the given location using the given direction for the given edge.
            </summary>
      <param name="edge">the edge this arrow belongs to</param>
      <param name="atSource">whether this will be the source arrow</param>
      <param name="anchor">the anchor point for the tip of the arrow</param>
      <param name="direction">the direction the arrow is pointing in</param>
      <returns>an implementation of the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface that can
            subsequently be used to perform the actual painting. Clients will always call
            this method before using the implementation and may not cache the instance returned.
            This allows for applying the flyweight design pattern to implementations.
            </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.length">
      <summary>
            The length of the arrow.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.DefaultArrow.Length">
      <summary>
            Returns the length of the arrow, i.e. the distance from the arrow's tip to
            the position where the visual representation of the edge's path should begin.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.None">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints no arrow at all.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.scale">
      <summary>
            The scale of the arrow.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Short">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a short black arrow.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.DefaultArrow.Simple">
      <summary>
            A singleton <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see> instance that paints a simple black arrow.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.DefaultPositionHandler">
      <summary>
            Generic default implementation of an <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.#ctor(yWorks.Canvas.Geometry.IMutablePoint)">
      <summary>
            Creates a position handler that delegates to a mutable point.
            </summary>
      <param name="point">The point to read and write the position to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.#ctor(yWorks.Canvas.Geometry.IMutableRectangle)">
      <summary>
            Creates a position handler that delegates to a mutable rectangle.
            </summary>
      <param name="rectangle">The rectangle to read and write its location to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.#ctor(yWorks.Canvas.Geometry.IPoint,yWorks.Canvas.Geometry.IPointSetter)">
      <summary>
            Creates a position handler that delegates to two point implementations.
            </summary>
      <param name="pointGetter">The point read the position from.</param>
      <param name="pointSetter">The point write the new position to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.#ctor(yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Geometry.IReshapeable)">
      <summary>
            Creates a position handler that delegates to two rectangle implementations.
            </summary>
      <param name="rectangle">The rectangle to read the location from.</param>
      <param name="reshapeable">The reshapeable to write the new location to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.ApplyPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Applies the new position to the delegates.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to set the position to the given coordinates.
            </summary>
      <param name="location">The new location.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.X"></member>
    <member name="P:yWorks.yFiles.UI.Drawing.DefaultPositionHandler.Y"></member>
    <member name="T:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer">
      <summary>
            An specialized subclass of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer"></see>
            that can install the focus indicator of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer" /> class</summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer.BendDrawingKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer.GetBendDrawing(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the drawing of the bend for the context.
            </summary>
      <param name="context">The context for which the drawing shall be returned.</param>
      <param name="edge">The edge for which the rendering will be used.</param>
      <returns>The drawing instance to use for the rendering of the bends in the given context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer.GetPen(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the pen for the context.
            </summary>
      <param name="edge">The edge for which the rendering will be used.</param>
      <param name="context">The context for which the pen shall be returned.</param>
      <returns>The pen instance to use for the rendering of the edge in the given context.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeFocusIndicatorRenderer.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer">
      <summary>
            An specialized subclass of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer"></see>
            that can install the highlight rendering of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer" /> class</summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer.BendDrawingKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer.GetBendDrawing(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the drawing of the bend for the context.
            </summary>
      <param name="context">The context for which the drawing shall be returned.</param>
      <param name="edge">The edge for which the rendering will be used.</param>
      <returns>The drawing instance to use for the rendering of the bends in the given context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer.GetPen(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the pen for the context.
            </summary>
      <param name="edge">The edge for which the rendering will be used.</param>
      <param name="context">The context for which the pen shall be returned.</param>
      <returns>The pen instance to use for the rendering of the edge in the given context.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeHighlightRenderer.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer">
      <summary>
            An implementation of the <see cref="T:yWorks.Canvas.Model.IModelItemInstaller`1"></see>
            interface that can install the selection outline of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer" /> class</summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.BendDrawingKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.GetBendDrawing(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the drawing of the bend for the context.
            </summary>
      <param name="context">The context for which the drawing shall be returned.</param>
      <param name="edge">The edge for which the rendering will be used.</param>
      <returns>The drawing instance to use for the rendering of the bends in the given context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.GetPen(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback method that retrieves the pen for the context.
            </summary>
      <param name="edge">The edge for which the rendering will be used.</param>
      <param name="context">The context for which the pen shall be returned.</param>
      <returns>The pen instance to use for the rendering of the edge in the given context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.Install(yWorks.Canvas.Model.IInstallerContext,System.Object)">
      <summary>
            Installs a rendering for the <paramref name="item"></paramref> if it is an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>
            that will use the <see cref="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.GetBendDrawing(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.GetPen(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)"></see> to render
            the path and bends.
            </summary>
      <param name="context">The context to use for the installation.</param>
      <param name="item">The item to install.</param>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeSelectionRenderer.PenKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that will be used to find the <see cref="T:System.Windows.Media.Pen"></see>
            that will be used to draw the path of the edge.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor">
      <summary>
            An <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> implementation
            that casts the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see>
            to <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> and uses it's <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see>
            to get implementations for the various interfaces.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Casts the <paramref name="forUserObject"></paramref> to <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>
            and retrieves its <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see> to obtain the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            from it via the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see>
            method.
            </summary>
      <param name="forUserObject">The user object that should be of type <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see></param>
      <returns>The <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> as returned from 
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see> or <see langword="null"></see></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.Instance">
      <summary>
            An instance that can be shared.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.EdgeStyleDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Always returns <see langword="true"></see>.
            </summary>
      <param name="canvasObject">The object to check</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle">
      <summary>
            Generic mutable implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.#ctor">
      <summary>
            Create a new instance that uses a simple rectangular path
            a default renderer implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.#ctor(yWorks.Canvas.Drawing.GeneralPath)">
      <summary>
            Create a new instance that uses the specified <paramref name="path"></paramref> and
            a default renderer implementation.
            </summary>
      <param name="path">The path that defines the boundary of this style.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.#ctor(yWorks.Canvas.Drawing.GeneralPath,yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer)">
      <summary>
            Create a new instance that uses the specified <paramref name="path"></paramref> and
            a custom renderer instance.
            </summary>
      <param name="path">The path that defines the boundary of this style.</param>
      <param name="renderer">Custom renderer instance for this style</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Brush">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Brush"></see> that is used to draw the shape.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Clone">
      <summary>
            Overridden to clone the <see cref="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Brush"></see>, <see cref="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Pen"></see>, 
            and <see cref="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Path"></see>
            members.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Path">
      <summary>
            Get the path that defines the boundary of the shape.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Pen">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Pen"></see> that is used to draw the shape.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> implementation that can handle <see cref="T:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle"></see>
            instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the layout bounds as an upper bound for the painting bound.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see> for an intersection with the
            given box.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the node is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <param name="point">The point to test.</param>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GeneralPathNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.GraphModelManager">
      <summary>
            Manages the visual appearance of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance
            in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.#ctor(yWorks.Canvas.CanvasControl)">
      <summary>
            Creates a manager instance for the given control. The contents
            of the graph will be added to a newly created group that is
            added to the root of the scene graph.
            </summary>
      <param name="canvas">the canvas to manage the visual appearance of a graph for.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.#ctor(yWorks.Canvas.CanvasControl,yWorks.Canvas.ICanvasObjectGroup)">
      <summary>
            Creates a manager instance for the given control. The contents
            of the graph will be added to given group that is
            must be part of the canvas.
            </summary>
      <param name="canvas">the canvas to manage the visual appearance of a graph for.</param>
      <param name="contentGroup">the group to add the graph's visual content to</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.Compare(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Compares two items with respect to their visibility order.
            </summary>
      <param name="item1">the first item to compare</param>
      <param name="item2">the second item to compare</param>
      <returns>an integer value indicating the relative painting order of
            the two items</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.Comparer">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IComparer`1"></see> instance that can be 
            used to compare two model items with respect to their
            visual display order.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.ContentGroup">
      <summary>
            Gets the content group this manager instance uses to add
            visual representation of the graph to.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeCanvasGroupProvider">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see> instance that
            returns for each edge queried an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            that will be provided to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeStyleInstaller"></see>
            for each edge to be installed.
            </summary>
      <returns>a constant provider that returns the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeGroup"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeGroup">
      <summary>
            Factory method for the EdgeGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeLabelCanvasGroupProvider">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see> instance that
            returns for each edge label queried an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            that will be provided to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelInstaller"></see>
            for each edge label to be installed.
            </summary>
      <returns>a constant provider that returns the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelGroup"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeLabelGroup">
      <summary>
            Factory method for the EdgeLabelGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeLabelInstaller">
      <summary>
            Factory method for the EdgeLabelinstaller property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelInstaller"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.StyleInstaller`2"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateEdgeStyleInstaller">
      <summary>
            Factory method for the EdgeStyleInstaller property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeStyleInstaller"></see> property.
            </summary>
      <returns>a new instance of EdgeStyleInstaller</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateHitTestEnumerator``1">
      <summary>
            Gets a <see cref="T:yWorks.Canvas.Drawing.IHitTestEnumerator`1"></see> that
            can be used to enumerate hits on the canvas
            at a given world coordinate position.
            </summary>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateHitTestEnumerator``1"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeCanvasGroupProvider">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see> instance that
            returns for each node queried an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            that will be provided to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeStyleInstaller"></see>
            for each node to be installed.
            </summary>
      <returns>a constant provider that returns the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeGroup"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeGroup">
      <summary>
            Factory method for the NodeGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeLabelCanvasGroupProvider">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see> instance that
            returns for each node label queried an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            that will be provided to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelInstaller"></see>
            for each node label to be installed.
            </summary>
      <returns>a constant provider that returns the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelGroup"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeLabelGroup">
      <summary>
            Factory method for the NodeLabelGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeLabelInstaller">
      <summary>
            Factory method for the NodeLabelinstaller property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelInstaller"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.StyleInstaller`2"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreateNodeStyleInstaller">
      <summary>
            Factory method for the NodeStyleInstaller property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeStyleInstaller"></see> property.
            </summary>
      <returns>a new instance of <c>StyleInstaller&lt;INode, INodeStyle&gt;</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreatePortCanvasGroupProvider">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Model.ICanvasGroupProvider`1"></see> instance that
            returns for each port queried an <see cref="T:yWorks.Canvas.ICanvasObjectGroup"></see>
            that will be provided to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortStyleInstaller"></see>
            for each port to be installed.
            </summary>
      <returns>a constant provider that returns the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortGroup"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreatePortGroup">
      <summary>
            Factory method for the PortGroup property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortGroup"></see> property.
            </summary>
      <returns>a new instance of ICanvasObjectGroup</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.CreatePortStyleInstaller">
      <summary>
            Factory method for the PortStyleInstaller property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortStyleInstaller"></see> property.
            </summary>
      <returns>a new instance of StyleInstaller</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.DrawEdgesBehindGroupedNodes">
      <summary>
            Gets or sets a property that determines whether
            edges should be drawn behind nodes, if a <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph">grouped graph</see>
            is displayed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeGroup">
      <summary>
            Gets the ICanvasObjectGroup instance that will be used 
            for installing edge styles.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelGroup">
      <summary>
            Gets the ICanvasObjectGroup instance that will be used 
            for installing edge label styles.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeLabelInstaller">
      <summary>
            Gets the StyleInstaller instance used for installing
            an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> into the canvas.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.EdgeStyleInstaller">
      <summary>
            Gets the StyleInstaller instance used for installing
            an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> into the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.EnumerateHits(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Enumerates hits on the canvas
            at a given world coordinate position.
            </summary>
      <param name="location">the world coordinates to perform the hit test</param>
      <returns>an enumerator that will enumerate the hits at the given coordinates</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.EnumerateTypedHits``1(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Enumerates hits on the canvas
            at a given world coordinate position.
            </summary>
      <param name="location">the world coordinates to perform the hit test</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Drawing.GraphModelManager.EnumerateTypedHits``1(yWorks.Canvas.Geometry.Structs.PointD)"]</p>
      </typeparam>
      <returns>an enumerator that will enumerate the hits at the given coordinates</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObject(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Retrieves the "main" ICanvasObject for a given model item
            managed by this instance.
            </summary>
      <param name="item">the item</param>
      <returns>an instance that is deemed the main canvas object for the given item
            or <c>null</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObjectGroup(yWorks.Canvas.CanvasControl,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Retrieves the Canvas Object group to use for the given edge.
            </summary>
      <param name="canvas">The canvas to return the a group for.</param>
      <param name="edge">The edge that will be installed in the canvas.</param>
      <returns>The group to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObjectGroup(yWorks.Canvas.CanvasControl,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Retrieves the Canvas Object group to use for the given label.
            </summary>
      <param name="canvas">The canvas to return the a group for.</param>
      <param name="label">The label that will be installed in the canvas.</param>
      <returns>The group to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObjectGroup(yWorks.Canvas.CanvasControl,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Retrieves the Canvas Object group to use for the given node.
            </summary>
      <param name="canvas">The canvas to return a group for.</param>
      <param name="node">The node that will be installed in the canvas.</param>
      <returns>The group to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObjectGroup(yWorks.Canvas.CanvasControl,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Retrieves the Canvas Object group to use for the given port.
            </summary>
      <param name="canvas">The canvas to return the a group for.</param>
      <param name="port">The port that will be installed in the canvas.</param>
      <returns>The group to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetCanvasObjects(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Retrieves all <see cref="T:yWorks.Canvas.ICanvasObject"></see> registered for a given model item
            managed by this instance.
            </summary>
      <param name="item">the item</param>
      <returns>all currently registered canvas objects.
            or <c>null</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.GetModelItem(yWorks.Canvas.ICanvasObject)">
      <summary>
            Retrieves the corresponding <see cref="T:yWorks.Canvas.Model.IModelItem"></see> for
            the given canvas object.
            </summary>
      <param name="canvasObject">the canvas </param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.Graph">
      <summary>
            Gets or sets the graph this manager manages.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.HitTestEnumerator">
      <summary>
            Gets a <see cref="T:yWorks.Canvas.Drawing.IHitTestEnumerator`1"></see> that
            can be used to enumerate hits on the canvas
            at a given world coordinate position.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.Invalidate(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Invalidates the <see cref="T:yWorks.Canvas.ICanvasObject"></see>s for a given model item
            managed by this instance.
            </summary>
      <param name="item">the item</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeGroup">
      <summary>
            Gets the ICanvasObjectGroup instance that will be used 
            for installing node styles.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelGroup">
      <summary>
            Gets the ICanvasObjectGroup instance that will be used 
            for installing node label styles.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeLabelInstaller">
      <summary>
            Gets the StyleInstaller instance used for installing
            an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> of an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> into the canvas.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.NodeStyleInstaller">
      <summary>
            Gets the StyleInstaller instance used for installing
            an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> into the canvas.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortGroup">
      <summary>
            Gets the ICanvasObjectGroup instance that will be used 
            for installing port styles.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.GraphModelManager.PortStyleInstaller">
      <summary>
            Gets the StyleInstaller instance used for installing
            an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> into the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.GraphModelManager.Update(yWorks.Canvas.Model.IModelItem)">
      <summary>
        <see cref="M:yWorks.Canvas.Model.CollectionModelManager`1.Update(`0)">Updates</see> the visual representation
            of the given item.
            </summary>
      <param name="modelItem">The item to update the visual representation</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IArcEdgeStyle">
      <summary>
            Interface for styles that can be used together with <see cref="T:yWorks.yFiles.UI.Drawing.ArcEdgeStyleRenderer"></see> instances.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Height">
      <summary>
            Gets or sets the "height" of the arc.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Pen"></see> that is used to draw the arc
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Ratio">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:yWorks.yFiles.UI.Drawing.IArcEdgeStyle"></see> interprets
            the <see cref="P:yWorks.yFiles.UI.Drawing.IArcEdgeStyle.Height"></see> value as an absolute or relative value.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IArrow">
      <summary>
            The interface for the visual representation of an arrow that is normally
            used to decorate the visual representation of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArrow.CropLength">
      <summary>
            Gets the cropping length associated with this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IArrow.GetBoundsProvider(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Gets an <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> implementation that can yield
            this arrow's bounds if painted at the given location using the 
            given direction for the given edge.
            </summary>
      <param name="edge">the edge this arrow belongs to</param>
      <param name="atSource">whether this will be the source arrow</param>
      <param name="anchor">the anchor point for the tip of the arrow</param>
      <param name="direction">the direction the arrow is pointing in</param>
      <returns>an implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that can
            subsequently be used to query the bounds. Clients will always call
            this method before using the implementation and may not cache the instance returned.
            This allows for applying the flyweight design pattern to implementations.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IArrow.GetPaintable(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Gets an <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> implementation that will paint this arrow
            at the given location using the given direction for the given edge.
            </summary>
      <param name="edge">the edge this arrow belongs to</param>
      <param name="atSource">whether this will be the source arrow</param>
      <param name="anchor">the anchor point for the tip of the arrow</param>
      <param name="direction">the direction the arrow is pointing in</param>
      <returns>an implementation of the <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> interface that can
            subsequently be used to perform the actual painting. Clients will always call
            this method before using the implementation and may not cache the instance returned.
            This allows for applying the flyweight design pattern to implementations.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArrow.Length">
      <summary>
            Returns the length of the arrow, i.e. the distance from the arrow's tip to
            the position where the visual representation of the edge's path should begin.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IArrowOwner">
      <summary>
            Helper interface implemented by <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>s that use
            <see cref="T:yWorks.yFiles.UI.Drawing.IArrow"></see>s for displaying arrows.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArrowOwner.SourceArrow">
      <summary>
            Gets the visual arrow at the source end of edges that use this style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IArrowOwner.TargetArrow">
      <summary>
            Gets the visual arrow at the target end of edges that use this style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IBevelNodeStyle">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.BevelNodeStyleRenderer"></see>
            to query the properties from.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IBevelNodeStyle.Color">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IBevelNodeStyle.Inset">
      <summary>
            The insets to use for the bevel.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IBevelNodeStyle.Radius">
      <summary>
            The radius of the corner of the rounded rectangle.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator">
      <summary>
            Interface that is used by <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"></see>
            to describe the way a node should be styled to support a collapse/expand button.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.ButtonLocationParameter">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> that determines the placement of the button for toggling the
            expanded state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.ButtonStyle">
      <summary>
            The <see cref="T:System.Windows.Style"></see> to use for the <see cref="T:System.Windows.Controls.Button"></see> instance that <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"></see>
            will instantiate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.Insets">
      <summary>
            Yields the insets to use for the <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"></see> that will be reported
            by the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"></see>'s <see cref="T:yWorks.Support.ILookup"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ICollapsibleNodeStyleDecorator.Wrapped">
      <summary>
            The wrapped node style that will be used to perform the actual rendering of the node.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IconLabelStyle">
      <summary>
            The default mutable implementation of the  <see cref="T:yWorks.yFiles.UI.Drawing.IIconLabelStyle"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.IconLabelStyle"></see> class
            using <see cref="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.West"></see> for the label model parameter.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.#ctor(System.Windows.Media.ImageSource,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Creates a new instance using the provided icon and placement.
            </summary>
      <param name="icon">The icon to draw.</param>
      <param name="iconPlacement">The placement of the icon.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.#ctor(System.Windows.Media.ImageSource,yWorks.yFiles.UI.Model.ILabelModelParameter,System.Windows.Media.Typeface)">
      <summary>
            Creates a new instance using the provided icon placement and typeface.
            </summary>
      <param name="icon">The icon to draw.</param>
      <param name="iconPlacement">The placement of the icon.</param>
      <param name="font">The typeface to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.#ctor(System.Windows.Media.ImageSource,yWorks.yFiles.UI.Model.ILabelModelParameter,System.Windows.Media.Typeface,System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the provided parameters.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.#ctor(yWorks.yFiles.UI.Drawing.ILabelStyleRenderer,System.Windows.Media.ImageSource,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Creates a new instance using the provided parameters.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <c>renderer</c>, <c>iconPlacement</c> or <c>innerStyle</c> is null.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.AutoFlip">
      <summary>
            Gets a value indicating whether to automatically flip the rendering should the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see>'s
            <see cref="P:yWorks.Canvas.Geometry.IOrientedRectangle.UpY">up vector</see> point downwards.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.Clone">
      <summary>
            Returns a <see cref="M:System.Object.MemberwiseClone"></see> of this instance.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.Icon">
      <summary>
            Gets the icon to paint for the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.IconPlacement">
      <summary>
            Gets the icon placement model parameter.
            </summary>
      <exception cref="T:System.ArgumentNullException">
    <c>value</c> is null.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.InnerStyle">
      <summary>
            Gets or sets the inner style to decorate.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <c>value</c> is null.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.InnerStyleInsets">
      <summary>
            Gets or sets the insets that should be applied for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> of the <see cref="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.InnerStyle">inner style</see>
            rendering.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IconLabelStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given label and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> that can handle <see cref="T:yWorks.yFiles.UI.Drawing.IIconLabelStyle"></see>
            instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.#ctor">
      <summary>
            Creates a new instance of this renderer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.Configure">
      <summary>
            Prepares this instance for subsequent calls after the
            style and item have been initialized. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an ICanvasObjectDescriptor instance that will delegate to this instance's methods</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetIcon">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.Icon"></see> from the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <returns>The icon.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetIconPlacement">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.IconPlacement"></see> from the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <returns>The placement parameter.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetInnerStyle">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.InnerStyle"></see> from the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetInnerStyleInsets">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.InnerStyleInsets"></see> from the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <returns>The insets.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Calculates the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize">preferred size</see>
            of a given label using the associated style.
            </summary>
      <param name="label">The label to determine the preferred size for</param>
      <param name="style">The style instance that uses this instance as its 
            <see cref="P:yWorks.yFiles.UI.Drawing.ILabelStyle.Renderer"></see></param>
      <returns>A size that can be used as the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>
            if this renderer paints the label using the associated style. 
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.IsAutoFlip">
      <summary>
            Retrieves the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.AutoFlip"></see> property from the
            <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <returns>The autoflip property value.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.PaintIcon(System.Windows.Media.DrawingContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Paints the icon at the given location.
            </summary>
      <param name="g">The preconfigured graphics context</param>
      <param name="location">The location where to paint the icon in the graphics context.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IconLabelStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IEdgeIntersectionCalculator">
      <summary>
            Interface used by the framework mainly for calculating the visble path of an edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IEdgeIntersectionCalculator.CropEdgePath(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Drawing.GeneralPath@)">
      <summary>
            Crops the provided <paramref name="edgePath"></paramref> at one end of an edge.
            </summary>
      <param name="edge">The edge whose path is to be cropped.</param>
      <param name="atSource">Whether to crop the source or target side of the path.</param>
      <param name="arrow">The arrow that is used at the end of the edge.</param>
      <param name="edgePath">The path to crop.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IEdgeStyle">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1">
        </see> implementation for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>
            instances in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IEdgeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given edge and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> implementations
            that can be used to query the actual <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>,
            <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>, <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see>, and
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementations for an item
            and an associated style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPathGeometry"></see> interface that can
            handle the provided edge and its associated style.
            </summary>
      <param name="edge">The edge to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>An implementation that may be used to subsequently query geometry information from.
            Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle">
      <summary>
            Interface for node styles that can display node shapes with a boundary
            that is defined by a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see> instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Brush">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Brush"></see> that is used to draw the shape.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Path">
      <summary>
            Get the path that defines the boundary of the shape.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Pen">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.IGeneralPathNodeStyle.Pen"></see> that is used to draw the shape.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IGroupBoundsCalculator">
      <summary>
            Interface for implementations that can calculate the bounds of a group
            node in a <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IGroupBoundsCalculator.CalculateBounds(yWorks.yFiles.UI.Model.IHierarchy{yWorks.yFiles.UI.Model.INode},yWorks.yFiles.UI.Model.INode)">
      <summary>
            Calculates the bounds of the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>
            for the given <paramref name="groupNode"></paramref> that is a group node
            in the <paramref name="hierarchy"></paramref>.
            </summary>
      <param name="hierarchy">The hierarchy to use for the calculation. This is the hierarchy of the nodes that describe the nesting of the group nodes.</param>
      <param name="groupNode">The node to calculate the bounds for.</param>
      <returns>The minimum bounds to use for the given group node.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IIconLabelStyle">
      <summary>
            A label style that also holds an icon.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.AutoFlip">
      <summary>
            Gets a value indicating whether to automatically flip the rendering should the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see>'s
            <see cref="P:yWorks.Canvas.Geometry.IOrientedRectangle.UpY">up vector</see> point downwards.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.Icon">
      <summary>
            Gets the icon to paint for the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.IconPlacement">
      <summary>
            Gets the icon placement model parameter.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.InnerStyle">
      <summary>
            Gets the inner style to decorate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.InnerStyleInsets">
      <summary>
            Gets the insets that should be applied for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> of the <see cref="P:yWorks.yFiles.UI.Drawing.IIconLabelStyle.InnerStyle">inner style</see>
            rendering.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IImageNodeStyle">
      <summary>
            Interface for node styles that can use an image for the visual representation of a node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IImageNodeStyle.Image">
      <summary>
            Get or set the image that is used for the style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IImageNodeStyle.OutlineShape">
      <summary>
            Yields the shape of the outline of the node style which can then
            be used to calculate <see cref="T:yWorks.Canvas.Drawing.IHitTestable">hit tests</see>,
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable">marquee intersections</see>, etc.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1">
      <summary>
            Interface for implementations that yield insets for a given item.
            </summary>
      <typeparam name="T">The type of the items this class yields insets instances for.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IInsetsProvider`1.GetInsets(`0)">
      <summary>
            Returns the insets for the given item.
            </summary>
      <param name="item">The item to yield insets for.</param>
      <returns>A rectangle that describes the insets. <see cref="P:yWorks.Canvas.Geometry.IPoint.X"></see> is the left inset, 
            <see cref="P:yWorks.Canvas.Geometry.IPoint.Y"></see> is the top inset, <see cref="P:yWorks.Canvas.Geometry.ISize.Width"></see> is the right inset, and 
            <see cref="P:yWorks.Canvas.Geometry.ISize.Height"></see> is the bottom inset.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ILabelStyle">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1">
        </see> implementation for <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>
            instances in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ILabelStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given label and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> implementations to
            query the actual <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>,
            <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>, <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see>, and
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementations for a label
            and an associated style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Calculates the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize">preferred size</see>
            of a given label using the associated style.
            </summary>
      <param name="label">The label to determine the preferred size for</param>
      <param name="style">The style instance that uses this instance as its 
            <see cref="P:yWorks.yFiles.UI.Drawing.ILabelStyle.Renderer"></see></param>
      <returns>A size that can be used as the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>
            if this renderer paints the label using the associated style. 
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ImageNodeStyle">
      <summary>
            Default implementation of <see cref="T:yWorks.yFiles.UI.Drawing.IImageNodeStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.#ctor">
      <summary>
            Create a new instance of this style with a default renderer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.#ctor(System.Windows.Media.ImageSource)">
      <summary>
            Create a new instance of this style with a default renderer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.#ctor(System.Windows.Media.ImageSource,yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer)">
      <summary>
            Create a new instance of this style with a custom renderer instance
            </summary>
      <param name="imageSource">The image to use.</param>
      <param name="styleRenderer">The custom renderer for this instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer)">
      <summary>
            Create a new instance of this style with a custom renderer instance
            </summary>
      <param name="styleRenderer">The custom renderer for this instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.Clone">
      <summary>
            This implementation performs a shallow copy with respect to the <see cref="P:yWorks.yFiles.UI.Drawing.ImageNodeStyle.Image"></see> property.
            </summary>
      <returns>A shallow copy of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ImageNodeStyle.Image">
      <summary>
            Get or set the image that is used for the style instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ImageNodeStyle.OutlineShape">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Shapes.Shape"></see> of the outline of the image that will be displayed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ImageNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer">
      <summary>
            A style renderer implementation
            that can be used together with <see cref="T:yWorks.yFiles.UI.Drawing.IImageNodeStyle"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.GetImage">
      <summary>
            Get the image that is currently used to render the style.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the intersection calculation, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.GetOutline">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to create
            the outline shape path, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the hit test analysis, otherwise reverts to default (rectangular) behavior.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the marquee intersection analysis, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the contains test, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.INodeStyle">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1">
        </see> implementation for <see cref="T:yWorks.yFiles.UI.Model.INode"></see>
            instances in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.INodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> implementations
            that can be used to query the actual <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>,
            <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>, <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see>, and
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementations for a node
            and an associated style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.INodeStyleRenderer.GetShapeGeometry(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IShapeGeometry"></see> interface that can
            handle the provided node and its associated style.
            </summary>
      <param name="node">The node to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>An implementation that may be used to subsequently query geometry information from.
            Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IPanelNodeStyle">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer"></see>
            to query the properties from.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPanelNodeStyle.Color">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPanelNodeStyle.Insets">
      <summary>
            Provides the insets for the given item.
            </summary>
      <returns>A Thickness that describes the insets.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPanelNodeStyle.LabelInsetsColor">
      <summary>
            The base color to use for drawing the label insets background.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IPathGeometry">
      <summary>
            Interface that is used mainly by <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer"></see> implementations
            to reveal geometric details about the visualization of an edge's path.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IPathGeometry.GetPath">
      <summary>
            Returns a representation of the visible path of the edge in form of a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see></summary>
      <returns>An instance that describes the visible path or <c>null</c> if this is not applicable for the current geometry.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IPathGeometry.GetSegmentCount">
      <summary>
            Returns the number of "segments" this edge's path consists of.
            </summary>
      <returns>the number of segments or <c>-1</c> if there is no such thing as a segment for this edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IPathGeometry.GetTangent(System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point.
            </summary>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the visible edge path</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by <paramref name="p"></paramref>. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IPathGeometry.GetTangent(System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point for the given segment.
            </summary>
      <param name="segmentIndex">the segment to use for the calculation</param>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the segment</param>
      <param name="p">The coordinates in world-coordinate space that denote the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by <paramref name="p"></paramref>. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle">
      <summary>
            Interface for a polygonal <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle.Pen"></see> for the line.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle.Smoothing">
      <summary>
            Gets the smoothing length used for creating smooth bends.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IPortStyle">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1">
        </see> implementation for <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            instances in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IPortStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given port and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IPortStyleRenderer">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> implementations
            that can be used to query the actual <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>,
            <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>, <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see>, and
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementations for a port
            and an associated style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IShapeGeometry">
      <summary>
            Interface that describes the geometry of a shape which has an interior and an exterior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IShapeGeometry.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Returns the intersection for the given line with this shape's geometry.
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>The coordinates of the intersection point, if an intersection was found.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IShapeGeometry.GetOutline">
      <summary>
            Returns the outline of the shape or <c>null</c>.
            </summary>
      <returns>The outline or <c>null</c> if no outline can be provided.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IShapeGeometry.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate is deemed to lie within the shape's geometric bounds.
            </summary>
      <param name="point">The point to test.</param>
      <returns>True if the point lies within the shape.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IShapeNodeStyle">
      <summary>
            Interface for node styles that can show predefined shapes of type 
            <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeShape"></see></summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Brush">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Brush"></see> for this style
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Pen"></see> for this style
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Shape">
      <summary>
            Gets or sets the shape for this style
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer"></see>
            to query the properties from.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle.Brush">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle.Insets">
      <summary>
            Provides the insets for the given item.
            </summary>
      <returns>A Thickness that describes the insets.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle.Pen">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle.Radius">
      <summary>
            The base color to use for drawing the label insets background.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle">
      <summary>
            The interface used by <see cref="T:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer"></see>
            to describe a basic label style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.AutoFlip">
      <summary>
            Gets a value indicating whether the label should be flipped 180 degrees
            automatically, if it would be oriented downwards, otherwise.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.BackgroundBrush">
      <summary>
            Gets the brush to use for the background box of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.BackgroundPen">
      <summary>
            Gets the pen to use for the background box of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.ClipText">
      <summary>
            Gets a value that determines whether text should be clipped.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.TextBrush">
      <summary>
            Gets the brush to use for the label's text.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.Typeface">
      <summary>
            Gets the typeface to use for the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.TypefaceFormat">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.TypefaceFormat"></see> to use for rendering the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.VerticalTextAlignment">
      <summary>
            Gets the vertical text alignment to use if the label is assigned more space than needed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ISimplePortStyle">
      <summary>
            A simple interface for use with the <see cref="T:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ISimplePortStyle.Brush">
      <summary>
            Gets the brush to paint the port representation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2">
      <summary>
            Generic interface used by <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see> implementations
            that can be used to query the actual <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see>,
            <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see>, <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see>, and
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> implementations for an <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            instance and its associated style instance.
            </summary>
      <typeparam name="TModelItem">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TModelItem"/&gt; documentation for "T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"]</p>
      </typeparam>
      <typeparam name="TStyle">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="TStyle"/&gt; documentation for "T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetBoundsProvider(`0,`1)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the calculating the painting bounds</param>
      <returns>An implementation that may be used to subsequently query
            the item's painting bounds. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)">
      <summary>
            Gets a temporary context instance that can be used to query additional information
            for the item's style.
            </summary>
      <param name="item">The item to provide a context instance for.</param>
      <param name="style">The style to use for the context.</param>
      <returns>An non-<c>null</c> lookup implementation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetHitTestable(`0,`1)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the querying hit tests</param>
      <returns>An implementation that may be used to subsequently perform
            hit tests. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations. This method may return <c>null</c>
            to indicate that the item cannot be hit tested.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetMarqueeTestable(`0,`1)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the querying marquee intersection test.</param>
      <returns>An implementation that may be used to subsequently query
            the marquee intersections. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisibilityTest(`0,`1)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the testing the visibility</param>
      <returns>An implementation that may be used to subsequently query
            the item's visibility. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the creation of the visual</param>
      <returns>An implementation that may be used to subsequently create or update the visual for
            the item. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations. This method may not return <c>null</c> 
            but should yield a <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.NullVisualCreator">void</see> implementation instead.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle">
      <summary>
            Interface for <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>s that use <see cref="T:System.Windows.DataTemplate">WPF's templating</see>
            technique for creating the visual representation of <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle">
      <summary>
            Gets the path style instance that is used to yield the underlying
            <see cref="M:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">geometry of the path</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.SegmentWidth">
      <summary>
            Retrieves the width of a segment rendering that will be used to <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)"></see>
            the segments.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUIElementLabelStyle">
      <summary>
            Interface for <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see>s that use <see cref="T:System.Windows.DataTemplate">WPF's templating</see>
            technique for creating the visual representation of <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementLabelStyle.AutoFlip">
      <summary>
            Gets a value indicating whether the rendering should automatically be 
            flipped (rotated by 180 degrees)
            if otherwise it would be rendered upside-down.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementLabelStyle.OutlineShape">
      <summary>
            Yields the shape of the outline of the label style which can then
            be used to calculate <see cref="T:yWorks.Canvas.Drawing.IHitTestable">hit tests</see>,
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable">marquee intersections</see>, etc.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle">
      <summary>
            Interface for <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see>s that use <see cref="T:System.Windows.DataTemplate">WPF's templating</see>
            technique for creating the visual representation of <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.Insets">
      <summary>
            Yields the insets an <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"></see> implementation for
            <see cref="T:yWorks.yFiles.UI.Model.INode"></see> should yield.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape">
      <summary>
            Yields the shape of the outline of the node style which can then
            be used to calculate <see cref="T:yWorks.Canvas.Drawing.IHitTestable">hit tests</see>,
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable">marquee intersections</see>, etc.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUIElementPortStyle">
      <summary>
            Interface for <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see>s that use <see cref="T:System.Windows.DataTemplate">WPF's templating</see>
            technique for creating the visual representation of <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementPortStyle.RenderSize">
      <summary>
            Gets the size of the rendering.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1">
      <summary>
            Common interface for all <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see>s that use
            WPF <see cref="T:System.Windows.DataTemplate">templating</see> techniques to skin the appearance of
            the items.
            </summary>
      <typeparam name="TModelItem">The exact type of model item. Derived interfaces specify concrete item types.</typeparam>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.ContextLookup">
      <summary>
            Provides an implementation of <see cref="T:yWorks.Support.IContextLookup"></see> that can be used to satisfy queries
            that are made to the implementation which is returned by calls to
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see> that are made on the <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see>
            that is associated with this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.StyleTag">
      <summary>
            Gets the tag that is associated with this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template">
      <summary>
            Provides the <see cref="T:System.Windows.DataTemplate"></see> that will be used to create the visual
            representation for the item that is assigned this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.TemplateSelector">
      <summary>
            Provides the <see cref="T:System.Windows.Controls.DataTemplateSelector"></see> that will be used to create the visual
            representation for the item that is assigned this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.UserTagProvider">
      <summary>
            Provides an implementation of a <see cref="T:yWorks.yFiles.UI.Drawing.IUserTagProvider"></see> that can yield
            a user specified tag object for each item that will be assigned this style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IUserTagProvider">
      <summary>
            Interface that is mainly used by <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see>
            to provide read and optional write access to a user defined tag that
            is associated with a given model item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IUserTagProvider.GetUserTag(yWorks.Canvas.Model.IModelItem,yWorks.Support.ILookup)">
      <summary>
            Gets the user tag that is associated with the given item.
            </summary>
      <param name="forItem">The item to get the user associated data from.</param>
      <param name="context">The context that can optional be queried for additional service implementations.</param>
      <returns>The tag that is associated with the item or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.IUserTagProvider.SetUserTag(yWorks.Canvas.Model.IModelItem,System.Object,yWorks.Support.ILookup)">
      <summary>
            Sets the new user tag for the specified item.
            </summary>
      <param name="forItem">The item to store the new tag with.</param>
      <param name="newTag">The new tag.</param>
      <param name="context">The context that can optional be queried for additional service implementations.</param>
      <returns>Whether the tag was successfully stored with the item.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1">
      <summary>
            The generic base interface used by visual styles implementations.
            </summary>
      <typeparam name="TModelItem">the type of item this style is meant for</typeparam>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor">
      <summary>
            An <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> implementation
            that casts the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see>
            to <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> and uses it's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see>
            to get implementations for the various interfaces.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Casts the <paramref name="forUserObject"></paramref> to <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>
            and retrieves its <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see> to obtain the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            from it via the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see>
            method.
            </summary>
      <param name="forUserObject">The user object that should be of type <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see></param>
      <returns>The <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> as returned from 
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see> or <see langword="null"></see></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.Instance">
      <summary>
            An instance that can be shared.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Always returns <see langword="true"></see>.
            </summary>
      <param name="canvasObject">The object to check</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider">
      <summary>
             An implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IUserTagProvider"></see> interface 
             that can be used to satisfy requests for obtaining or setting the user tag
             by delegating to an <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider.GetUserTag(yWorks.Canvas.Model.IModelItem,yWorks.Support.ILookup)">
      <summary>
            Gets the user tag that is associated with the given item.
            </summary>
      <param name="forItem">The item to get the user associated data from.</param>
      <param name="context">The context that will be queried for an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.</param>
      <returns>
            The tag that is associated with the item or <see langword="null"></see>.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider.MapperRegistryTag">
      <summary>
            The tag object that is used to get the mapper from the <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.GetMapper``2(System.Object)"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MapperBasedUserTagProvider.SetUserTag(yWorks.Canvas.Model.IModelItem,System.Object,yWorks.Support.ILookup)">
      <summary>
            Tries to set the user tag that is associated with the given item.
            </summary>
      <param name="forItem">The item to store the user associated data with.</param>
      <param name="newTag">The new value to store with the mapper.</param>
      <param name="context">The context that will be queried for an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.</param>
      <returns>
            Whether the mapper has been found and the value could be stored.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IImageNodeStyle"></see> interface
            that uses <see cref="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.BitmapSource"></see> that are built from memory as the 
            <see cref="P:yWorks.yFiles.UI.Drawing.IImageNodeStyle.Image"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.#ctor">
      <summary>
            Create a new instance of this style with a default renderer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
            Create a new instance of this style with a default renderer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.#ctor(System.Windows.Media.Imaging.BitmapSource,yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer)">
      <summary>
            Create a new instance of this style with a custom renderer instance
            </summary>
      <param name="imageSource">The image to use.</param>
      <param name="styleRenderer">The custom renderer for this instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ImageNodeStyleRenderer)">
      <summary>
            Create a new instance of this style with a custom renderer instance
            </summary>
      <param name="styleRenderer">The custom renderer for this instance</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.BitmapSource">
      <summary>
            Gets or sets the bitmap source.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.Clone">
      <summary>
            This implementation performs a shallow copy with respect to the <see cref="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.Image"></see> property.
            </summary>
      <returns>A shallow copy of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.Image">
      <summary>
            Get or set the image that is used for the style instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.OutlineShape">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Shapes.Shape"></see> of the outline of the image that will be displayed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.MemoryImageNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor">
      <summary>
            An <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> implementation
            that casts the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see>
            to <see cref="T:yWorks.yFiles.UI.Model.INode"></see> and uses its <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see>
            to get implementations for the various interfaces.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Casts the <paramref name="forUserObject"></paramref> to <see cref="T:yWorks.yFiles.UI.Model.INode"></see>
            and retrieves its <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see> to obtain the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            from it via the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see>
            method.
            </summary>
      <param name="forUserObject">The user object that should be of type <see cref="T:yWorks.yFiles.UI.Model.INode"></see></param>
      <returns>The <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> as returned from 
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see> or <see langword="null"></see></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.Instance">
      <summary>
            An instance that can be shared.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Always returns <see langword="true"></see>.
            </summary>
      <param name="canvasObject">The object to check</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter">
      <summary>
            A label style decorator that uses a node style instance to render the background
            and a label style instance to render the foreground of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.#ctor(yWorks.yFiles.UI.Drawing.INodeStyle,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Creates a label style that uses the provided node style to render the background
            and the label style to render the foreground of this style.
            </summary>
      <param name="nodeStyle">The style to use for rendering the background of the label.</param>
      <param name="labelStyle">The style to use for rendering the foreground of the label.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.AutoFlip">
      <summary>
            Gets a value indicating whether the label should be flipped 180 degrees
            automatically, if it would be oriented downwards, otherwise.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.LabelStyle">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> that is used for rendering the foreground of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.NodeStyle">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> that is used for rendering the background of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.NodeStyleLabelStyleAdapter.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given label and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable">
      <summary>
            An <see cref="T:yWorks.Canvas.Drawing.IPaintable"></see> for use in a <see cref="T:yWorks.Canvas.CanvasControl"></see>
            that renders a <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance in a sloppy overview style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a new instance for the given graph.
            </summary>
      <param name="graph">
      </param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.CreateEdgeStyle">
      <summary>
            Factory method that creates the <see cref="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewEdgeStyle"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.CreateGroupNodeStyle">
      <summary>
            Factory method that creates the <see cref="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewGroupNodeStyle"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.CreateNodeStyle">
      <summary>
            Factory method that creates the <see cref="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewNodeStyle"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetEdgeVisualCreator(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Obtains the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> for the given edge.
            </summary>
      <param name="ctx">The context.</param>
      <param name="edge">The edge.</param>
      <returns>The visual creator that is obtained from the <see cref="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewEdgeStyle(yWorks.yFiles.UI.Model.IEdge)"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetVisualCreator(`0,`1)"></see> method.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetGroupNodeVisualCreator(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Obtains the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> for the given group node.
            </summary>
      <param name="ctx">The context.</param>
      <param name="node">The group node.</param>
      <returns>The visual creator that is obtained from the <see cref="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewGroupNodeStyle(yWorks.yFiles.UI.Model.INode)"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetVisualCreator(`0,`1)"></see> method.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetNodeVisualCreator(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Obtains the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> for the given node.
            </summary>
      <param name="ctx">The context.</param>
      <param name="node">The node.</param>
      <returns>The visual creator that is obtained from the <see cref="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewNodeStyle(yWorks.yFiles.UI.Model.INode)"></see>'s 
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.GetVisualCreator(`0,`1)"></see> method.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewEdgeStyle(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback that returns and/or configures a edge style for the given node to render.
            </summary>
      <param name="edge">The edge to render.</param>
      <returns>The style or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewGroupNodeStyle(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that returns and/or configures a group node style for the given node to render.
            </summary>
      <param name="node">The group node to render.</param>
      <returns>The style or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.GetOverviewNodeStyle(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that returns and/or configures a node style for the given node to render.
            </summary>
      <param name="node">The node to render.</param>
      <returns>The style or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewEdgeStyle">
      <summary>
            Gets or sets the overview edge style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewGroupNodeStyle">
      <summary>
            Gets or sets the overview group node style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.OverviewGraphPaintable.OverviewNodeStyle">
      <summary>
            Gets or sets the overview node style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PanelNodeStyle">
      <summary>
            Simple basic implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPanelNodeStyle"></see>
            that is used by the <see cref="T:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer"></see>
            node style renderer implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.#ctor">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background color.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.#ctor(System.Windows.Media.Color)">
      <summary>
            Creates a new instance using the given color as the background color.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.#ctor(System.Windows.Media.Color,System.Windows.Media.Color)">
      <summary>
            Creates a new instance using the given color as the background color.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer)">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background color
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer,System.Windows.Media.Color,System.Windows.Media.Color,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Creates a new instance using the given color as the background color
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PanelNodeStyle.Color">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PanelNodeStyle.Insets">
      <summary>
            Gets or sets the instance to use that provides the insets for this style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PanelNodeStyle.LabelInsetsColor">
      <summary>
            The base color to use for drawing the label insets background.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PanelNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer">
      <summary>
            A <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see><see cref="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer">renderer</see>
            implementation that draws a simple floating panel with a slight gradient, a thin border and a simple drop shadow.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.#ctor">
      <summary>
            Creates a new instance of this style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.Color">
      <summary>
            Retrieves the color from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.DrawShadow">
      <summary>
            Determines whether to draw the drop shadow.
            </summary>
      <returns>
        <see langword="true">
        </see>, always.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the layout bounds as an upper bound for the painting bound.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines visibility by checking for an intersection with the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <param name="clip">The current clip</param>
      <param name="ctx">The context.</param>
      <returns>Whether the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see> is visible in the clip.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PanelNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1">
      <summary>
            An abstract base class for <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer"></see> implementations that are based on 
            the calculation of a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see>.
            </summary>
      <typeparam name="TStyle">The exact type of style to use for this instance.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.AddBridges">
      <summary>
            Determines whether the rendered path should use
            the <see cref="T:yWorks.Canvas.Model.BridgeManager"></see> to <see cref="M:yWorks.Canvas.Model.BridgeManager.AddBridges(yWorks.Canvas.Drawing.IRenderContext,yWorks.Canvas.Drawing.GeneralPath,yWorks.Canvas.Model.IAddBridgesCallback)">add bridges to it.</see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.Configure">
      <summary>
            Prepares this instance for subsequent calls after the
            style and item have been initialized. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreatePath">
      <summary>
            This method should create the basic uncropped path given the control points.
            </summary>
      <returns>A path that has to be cropped, yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreateRectangleSelfLoop(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Static utility method that creates a rectangular self loop path.
            </summary>
      <param name="sx">The x coordinate of the source port.</param>
      <param name="sy">The y coordinate of the source port.</param>
      <param name="oppositeX">The x coordinate of the single control point.</param>
      <param name="oppositeY">The y coordinate of the single control point.</param>
      <param name="tx">The x coordinate of the target port.</param>
      <param name="ty">The y coordinate of the target port.</param>
      <returns>A path that describes a rectangular self loop.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates a tag object that encapsulated the state of the rendering
            if <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> is called on the current state of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <returns>The tag object that will later be passed to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see> and
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>. This can be any kind of object or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreateRoundSelfLoop(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Static utility method that creates a round self loop path.
            </summary>
      <param name="sx">The x coordinate of the source port.</param>
      <param name="sy">The y coordinate of the source port.</param>
      <param name="oppositeX">The x coordinate of the single control point.</param>
      <param name="oppositeY">The y coordinate of the single control point.</param>
      <param name="tx">The x coordinate of the target port.</param>
      <param name="ty">The y coordinate of the target port.</param>
      <returns>A path that describes a round self loop.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreateSelfLoopPath(System.Boolean)">
      <summary>
            Special implementation that will create a self loop path.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CropPath(yWorks.Canvas.Drawing.GeneralPath@)">
      <summary>
            Crops the edge's path at the nodes.
            </summary>
      <param name="pathToCrop">The path that should be cropped.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetAddBridgesCallback">
      <summary>
            Yields the <see cref="T:yWorks.Canvas.Model.IAddBridgesCallback"></see> to use for
            <see cref="P:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.AddBridges">adding bridges</see> to the 
            <see cref="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreatePath">created path</see>.
            </summary>
      <returns>This implementation returns <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetHitTestable(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            This method is overridden for performance reasons.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetObstacles(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Returns <see cref="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreatePath"></see> unless
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)"></see>
            yields <see langword="false"></see> for the provided context and <see cref="P:yWorks.Canvas.Drawing.IRenderContext.Clip"></see>.
            </summary>
      <param name="ctx">The context to yield the obstacles for.</param>
      <returns>Either <see langword="null"></see> or the result of <see cref="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.CreatePath"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetPath">
      <summary>
            Returns a representation of the visible path of the edge in form of a <see cref="T:yWorks.Canvas.Drawing.GeneralPath"></see></summary>
      <returns>
            An instance that describes the visible path or <c>null</c> if this is not applicable for the current geometry.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetPen">
      <summary>
            Gets the pen to use for painting the path.
            </summary>
      <returns>The pen or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetSmoothing">
      <summary>
            Gets the value that determines the radius of the smoothing arcs that can be 
            added to the path at the bends.
            </summary>
      <returns>The radius of the arcs to use at the bends of the path.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetSourceArrow">
      <summary>
            Gets the source arrow from the style.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetSourceArrowAnchor(yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculate and update the anchor and the source arrow's direction vector.
            </summary>
      <param name="arrow">The arrow to calculate the anchor for.</param>
      <param name="anchorPoint">The tip of the arrow.</param>
      <param name="arrowDirection">The direction vector of the arrow.</param>
      <returns>Whether an anchor has been successfully determined.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetTargetArrow">
      <summary>
            Gets the target arrow from the style.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.GetTargetArrowAnchor(yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculate and update the anchor and the target arrow's direction vector.
            </summary>
      <param name="arrow">The arrow to calculate the anchor for.</param>
      <param name="anchorPoint">The tip of the arrow.</param>
      <param name="arrowDirection">The direction vector of the arrow.</param>
      <returns>Whether an anchor has been successfully determined.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            This method is overridden for performance reasons.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Determines whether the given render state tag is still valid given the provided context.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag created during the last call to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            or <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
        <c>true</c> if the render state is still valid for the specified context; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Paints the <see cref="F:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.path"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.path">
      <summary>
            The path instance that this instance is working with.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.SelfLoopDistance">
      <summary>
            Gets or sets the distance between the node's layout and its self loop control points.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PathBasedEdgeStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Updates the render state tag for the given context using the current configuration of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag that has earlier been created by calls to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            and <see cref="M:yWorks.yFiles.UI.Drawing.AbstractPaintableStyleRenderer`3.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>The new tag to store with the visual. This may be the same instance as <paramref name="renderStateTag"></paramref>
            or a new instance or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle">
      <summary>
            Simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.#ctor">
      <summary>
            Creates a new instance with a black pen.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.#ctor(System.Windows.Media.Pen)">
      <summary>
            Creates a new instance using the provided pen.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.#ctor(yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer)">
      <summary>
            Creates a new instance using the provided renderer and black pen.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.#ctor(yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer,System.Windows.Media.Pen)">
      <summary>
            Creates a new instance using the provided renderer and pen.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.Clone">
      <summary>
            Overridden to clone the <see cref="P:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.Pen"></see>.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Installs the edge in the canvas using the given context as a hint.
            </summary>
      <param name="context">The context that yields the <see cref="P:yWorks.Canvas.Model.IInstallerContext.Canvas"></see> and <see cref="P:yWorks.Canvas.Model.IInstallerContext.CanvasObjectGroup"></see>.</param>
      <param name="edge">The edge to install this style for in the canvas.</param>
      <param name="item">The item to install.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle.Pen"></see> for the line.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle.Smoothing">
      <summary>
            Gets the smoothing length used for creating smooth bends.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> that will
            render <see cref="T:yWorks.yFiles.UI.Drawing.IPolylineEdgeStyle"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.CreatePath">
      <summary>
            This method should create the basic uncropped path given the control points.
            </summary>
      <returns>A path that has to be cropped, yet.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetPen">
      <summary>
            Gets the pen to use for painting the path.
            </summary>
      <returns>The pen or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetSegmentCount">
      <summary>
            Returns the number of "segments" this edge's path consists of.
            </summary>
      <returns>
            the number of segments or <c>-1</c> if there is no such thing as a segment for this edge.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetSmoothing">
      <summary>
            Gets the value that determines the radius of the smoothing arcs that can be
            added to the path at the bends.
            </summary>
      <returns>
            The radius of the arcs to use at the bends of the path.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetSourceArrow">
      <summary>
            Gets the source arrow from the style via <see cref="P:yWorks.yFiles.UI.Drawing.IArrowOwner.SourceArrow"></see>.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetTangent(System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point.
            </summary>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the visible edge path</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetTangent(System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Calculates the tangent on the edge's path at the given ratio point for the given segment.
            </summary>
      <param name="segmentIndex">the segment to use for the calculation</param>
      <param name="ratio">a value in [0,1] where 0 is the source's end and 1 is at the target's end of the segment</param>
      <param name="p">The coordinates in world-coordinate space that denotes the tangent point.</param>
      <param name="tangent">The vector which is tangent to the edge's path at the point denoted by p. The tangent vector
            needs not necessarily be normalized.</param>
      <returns>
        <c>true</c> iff the values in the out parameters are valid.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.GetTargetArrow">
      <summary>
            Gets the target arrow from the style via <see cref="P:yWorks.yFiles.UI.Drawing.IArrowOwner.TargetArrow"></see>.
            </summary>
      <returns>The arrow to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PolylineEdgeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Calls <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see> and test the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for a visible intersection with the clip bounds.
            </summary>
      <param name="clip">the clip bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item may be painted within the clip bounds.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.PortStyleDescriptor">
      <summary>
            An <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> implementation
            that casts the <see cref="P:yWorks.Canvas.ICanvasObject.UserObject"></see>
            to <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> and uses it's <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see>
            to get implementations for the various interfaces.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.PortStyleDescriptor" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Casts the <paramref name="forUserObject"></paramref> to <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            and retrieves its <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see> to obtain the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            from it via the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see>
            method.
            </summary>
      <param name="forUserObject">The user object that should be of type <see cref="T:yWorks.yFiles.UI.Model.IPort"></see></param>
      <returns>The <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> as returned from 
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisualCreator(`0,`1)"></see> or <see langword="null"></see></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.Instance">
      <summary>
            An instance that can be shared.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.PortStyleDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Always returns <see langword="true"></see>.
            </summary>
      <param name="canvasObject">The object to check</param>
      <param name="context">The context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator">
      <summary>
            A decorator implementation of <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> that can
            wrap most style implementations and draw a smooth drop shadow
            underneath the rendering of the wrapped style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.#ctor">
      <summary>
            Creates a new instance wrapping a simple <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.#ctor(yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Creates a new instance wrapping the provided style.
            </summary>
      <param name="wrapped">The style to wrap.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShadowNodeStyleDecorator.Wrapped">
      <summary>
            Provides access to the wrapped node style instance by reference.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShapeNodeShape">
      <summary>
            This enumeration predefines some often used shapes that can be used together with <see cref="T:yWorks.yFiles.UI.Drawing.IShapeNodeStyle"></see>
            instances
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Rectangle">
      <summary>
            A rectangular shape
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.RoundRectangle">
      <summary>
            A rectangular shape with rounded edges
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Ellipse">
      <summary>
            An elliptical shape
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Triangle">
      <summary>
            A triangular shape that points to the top
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Triangle2">
      <summary>
            A triangular shape that points to the bottom
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.ShearedRectangle">
      <summary>
            A rectangle that is sheared in the horizontal direction to the right
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.ShearedRectangle2">
      <summary>
            A rectangle that is sheared in the horizontal direction to the left
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Trapez">
      <summary>
            A trapezoid shape that is smaller at the bottom
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Trapez2">
      <summary>
            A trapezoid shape that is smaller at the top
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Star5">
      <summary>
            A 5-star shape
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Star6">
      <summary>
            A 6-star shape
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Star8">
      <summary>
            An 8-star shape
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.FatArrow">
      <summary>
            An arrow like shape that points to the right
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.FatArrow2">
      <summary>
            An arrow like shape that points to the left
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Diamond">
      <summary>
            A symmetric parallelogram shape that has sloped edges
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Octagon">
      <summary>
            A regular eight-sided shape,
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.ShapeNodeShape.Hexagon">
      <summary>
            A regular six-sided shape,
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle">
      <summary>
            Default implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IShapeNodeStyle"></see> interface
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.#ctor">
      <summary>
            Create a new style instance with a default renderer implementation and 
            default values for all parameters 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShapeNodeShape,System.Windows.Media.Pen,System.Windows.Media.Brush)">
      <summary>
            Create a new style instance with a default renderer implementation and 
            the given values for all other parameters
            </summary>
      <param name="brush">The initial brush for this style</param>
      <param name="pen">The initial pen for this style</param>
      <param name="shape">The initial shape for this style</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer)">
      <summary>
            Create a new style instance with a custom renderer implementation and 
            default values for all parameters 
            </summary>
      <param name="styleRenderer">Custom renderer instance for this style.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer,yWorks.yFiles.UI.Drawing.ShapeNodeShape,System.Windows.Media.Pen,System.Windows.Media.Brush)">
      <summary>
            Create a new style instance with a custom renderer implementation and 
            the given values for all other parameters
            </summary>
      <param name="brush">The initial brush for this style</param>
      <param name="pen">The initial pen for this style</param>
      <param name="shape">The initial shape for this style</param>
      <param name="styleRenderer">Custom renderer instance for this style.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Brush">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Brush"></see> for this style
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Pen">
      <summary>
            Gets or sets the <see cref="P:yWorks.yFiles.UI.Drawing.IShapeNodeStyle.Pen"></see> for this style
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShapeNodeStyle.Shape">
      <summary>
            Gets or sets the shape for this style
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer">
      <summary>
            Default renderer implementation that can be used for <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle"></see>
            instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.GetBrush">
      <summary>
            Get the brush that is currently used by this renderer.
            </summary>
      <returns>The brush that is currently used by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.GetPen">
      <summary>
            Get the pen that is currently used by this renderer.
            </summary>
      <returns>The pen that is currently used by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.GetShape">
      <summary>
            Get the shape that is currently used by this renderer.
            </summary>
      <returns>The shape that is currently used by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <param name="point">The point to test.</param>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines visibility by checking for an intersection with the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <param name="clip">The current clip</param>
      <param name="ctx">The context.</param>
      <returns>Whether the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see> is visible in the clip.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.RoundRectArcRadius">
      <summary>
            Gets or sets the radius that is used to draw rounded edges.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShapeNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle">
      <summary>
            Simple basic implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IShinyPlateNodeStyle"></see>
            that is used by the <see cref="T:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer"></see>
            node style renderer implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the given brush as the background brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(System.Windows.Media.Brush,System.Windows.Media.Pen)">
      <summary>
            Creates a new instance using the given brush as the background brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(System.Windows.Media.Color)">
      <summary>
            Creates a new instance using the given brush as the background brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer)">
      <summary>
            Creates a new instance using <see cref="P:System.Windows.Media.Colors.Black"></see> as the background brush
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer,System.Windows.Media.Brush,System.Double,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Creates a new instance using the given brush as the background brush
            and the provided renderer to share.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.#ctor(yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer,System.Windows.Media.Color,System.Double,yWorks.Canvas.Geometry.Structs.InsetsD)">
      <summary>
            Creates a new instance using the given brush as the background brush
            and the provided renderer to share.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Brush">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Insets">
      <summary>
            Gets or sets the instance to use that provides the insets for this style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Pen">
      <summary>
            The base color to use.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Radius">
      <summary>
            The base color to use for drawing the label insets background.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given node and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer">
      <summary>
            A <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see><see cref="T:yWorks.yFiles.UI.Drawing.INodeStyleRenderer">renderer</see>
            implementation that draws a simple floating shinyPlate with a slight gradient, a thin border and a simple drop shadow.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.#ctor">
      <summary>
            Creates a new instance of this style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.Brush">
      <summary>
            Retrieves the brush from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.Configure">
      <summary>
            This is an empty implementation of the <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Configure"></see>
            method. Subclasses should override this.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.DrawShadow">
      <summary>
            Determines whether to draw the drop shadow.
            </summary>
      <returns>
        <see langword="true">
        </see>, always.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the layout bounds as an upper bound for the painting bound.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds an intersection for the current 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item">node</see> using the 
            <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>True if an intersection was actually found</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.GetOutline">
      <summary>
            Returns the outline of the shape using the node's <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <returns>
            The outline of the bounds of the node.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Item">node</see> using the
            current <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.Style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Checks whether the given coordinate lies within the shape's geometric bounds.
            </summary>
      <param name="point">The point to test.</param>
      <returns>
            True if the point lies within the geometry of the rendering.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines visibility by checking for an intersection with the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see>.
            </summary>
      <param name="clip">The current clip</param>
      <param name="ctx">The context.</param>
      <returns>Whether the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractNodeStyleRenderer`1.Layout"></see> is visible in the clip.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.Lookup(System.Type)">
      <summary>
            Implements the <see cref="T:yWorks.Support.ILookup"></see> interface.
            </summary>
      <param name="type">The type to query for.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.Pen">
      <summary>
            Retrieves the pen from the style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.Radius">
      <summary>
            Retrieves the radius from the style.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.ShinyPlateNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1">
      <summary>
            An abstract base class that makes it possible to easily implement a custom
            <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>.
            </summary>
      <typeparam name="TVisual">The type of the visual this instance will create. Subclasses will probably declare a fixed type to
            make the implementation of <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext)"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext,`0)"></see> more convenient.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance using <see cref="M:System.Object.MemberwiseClone"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Callback that creates the visual.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.GetBounds(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.ICanvasContext)">
      <summary>
            Gets the bounds of the visual for the edge in the given context.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>The visual bounds of the visual representation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.GetPath(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Gets the path of the edge.
            </summary>
      <param name="edge">The edge.</param>
      <returns>The path.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.GetSegmentCount(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Gets the number of segments of the edge.
            </summary>
      <param name="edge">The edge.</param>
      <returns>The segment count.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.GetTangent(yWorks.yFiles.UI.Model.IEdge,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Gets the tangent to the edge at the specified ratio and the corresponding touch point.
            </summary>
      <param name="edge">The edge.</param>
      <param name="ratio">A value between 0 and 1 inclusively that indicates a ratio from
            the beginning to the end of the path of the edge.</param>
      <param name="p">The out parameter for the touch point of the tangent.</param>
      <param name="tangent">The out parameter for the tangent vector.</param>
      <returns>True, if a tangent was obtained with the specified parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.GetTangent(yWorks.yFiles.UI.Model.IEdge,System.Int32,System.Double,yWorks.Canvas.Geometry.Structs.PointD@,yWorks.Canvas.Geometry.Structs.PointD@)">
      <summary>
            Gets the tangent to the edge at the specified ratio of a segment of the edge and
            the corresponding touch point.
            </summary>
      <param name="edge">The edge.</param>
      <param name="segmentIndex">Index of the segment of the edge.</param>
      <param name="ratio">A value between 0 and 1 inclusively that indicates a ratio from
            the beginning to the end of the segment of the edge.</param>
      <param name="p">The out parameter for the touch point of the tangent.</param>
      <param name="tangent">The out parameter for the tangent vector.</param>
      <returns>True, if a tangent was obtained with the specified parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.IsHit(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visual representation of the edge has been hit at the given location.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="p">The point to test.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified edge representation is hit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.IsInBox(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified edge is included in the marquee selection.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="box">The marquee selection box.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified edge is visible is selected by the marquee rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.IsVisible(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified edge is visible in the context.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="clip">The clipping rectangle.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified edge is visible in the clipping rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.Lookup(yWorks.yFiles.UI.Model.IEdge,System.Type)">
      <summary>
            Performs the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> operation for 
            the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see>
            that has been queried from the <see cref="P:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.Renderer"></see>.
            </summary>
      <param name="edge">The edge to use for the context lookup.</param>
      <param name="type">The type to query.</param>
      <returns>An implementation of the <paramref name="type"></paramref> or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.Renderer">
      <summary>
            Gets the renderer implementation for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext,`0)">
      <summary>
            Callback that updates the visual previously created by <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext)"></see>.
            </summary>
      <param name="edge">The edge to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <param name="oldVisual">The visual that has been created in the call to <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractEdgeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Drawing.IRenderContext)"></see>.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1">
      <summary>
            An abstract base class that makes it possible to easily implement a custom
            <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see>.
            </summary>
      <typeparam name="TVisual">The type of the visual this instance will create. Subclasses will probably declare a fixed type to
            make the implementation of <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.CreateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext)"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext,`0)"></see> more convenient.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance using <see cref="M:System.Object.MemberwiseClone"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.CreateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Callback that creates the visual.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.GetBounds(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.ICanvasContext)">
      <summary>
            Gets the bounds of the visual for the label in the given context.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>The visual bounds of the visual representation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback that returns the preferred <see cref="T:yWorks.Canvas.Geometry.Structs.SizeD">size</see> of the label.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <returns>The preferred size.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.IsHit(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visual representation of the label has been hit at the given location.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="p">The point to test.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified label representation is hit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.IsInBox(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified label is included in the marquee selection.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="box">The marquee selection box.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified label is visible is selected by the marquee rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.IsVisible(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified label is visible in the context.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="clip">The clipping rectangle.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified label is visible in the clipping rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.Lookup(yWorks.yFiles.UI.Model.ILabel,System.Type)">
      <summary>
            Performs the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> operation for 
            the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see>
            that has been queried from the <see cref="P:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.Renderer"></see>.
            </summary>
      <param name="label">The label to use for the context lookup.</param>
      <param name="type">The type to query.</param>
      <returns>An implementation of the <paramref name="type"></paramref> or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.Renderer">
      <summary>
            Gets the renderer implementation for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext,`0)">
      <summary>
            Callback that updates the visual previously created by <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.CreateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext)"></see>.
            </summary>
      <param name="label">The label to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <param name="oldVisual">The visual that has been created in the call to <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractLabelStyle`1.CreateVisual(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Drawing.IRenderContext)"></see>.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1">
      <summary>
            An abstract base class that makes it possible to easily implement a custom
            <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see>.
            </summary>
      <typeparam name="TVisual">The type of the visual this instance will create. Subclasses will probably declare a fixed type to
            make the implementation of <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext)"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext,`0)"></see> more convenient.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance using <see cref="M:System.Object.MemberwiseClone"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Callback that creates the visual.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.GetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.ICanvasContext)">
      <summary>
            Gets the bounds of the visual for the node in the given context.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>The visual bounds of the visual representation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.GetIntersection(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Gets the intersection of a line with the visual representation of the node.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="inner">The coordinates of a point lying <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.IsInside(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">inside</see> the shape.</param>
      <param name="outer">The coordinates of a point lying outside the shape.</param>
      <returns>The intersection point if one has been found or <see langword="null"></see>, otherwise.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.GetOutline(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Gets the outline of the visual style.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <returns>The outline of the visual representation or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.IsHit(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visual representation of the node has been hit at the given location.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="p">The point to test.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified node representation is hit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.IsInBox(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified node is included in the marquee selection.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="box">The marquee selection box.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified node is visible is selected by the marquee rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.IsInside(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Determines whether the provided point is geometrically inside the visual bounds of the node.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="point">The point to test.</param>
      <returns>Whether the point is considered to lie inside the shape.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.IsVisible(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified node is visible in the context.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="clip">The clipping rectangle.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified node is visible in the clipping rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.Lookup(yWorks.yFiles.UI.Model.INode,System.Type)">
      <summary>
            Performs the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> operation for 
            the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see>
            that has been queried from the <see cref="P:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.Renderer"></see>.
            </summary>
      <param name="node">The node to use for the context lookup.</param>
      <param name="type">The type to query.</param>
      <returns>An implementation of the <paramref name="type"></paramref> or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.Renderer">
      <summary>
            Gets the renderer implementation for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext,`0)">
      <summary>
            Callback that updates the visual previously created by <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext)"></see>.
            </summary>
      <param name="node">The node to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <param name="oldVisual">The visual that has been created in the call to <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractNodeStyle`1.CreateVisual(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Drawing.IRenderContext)"></see>.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1">
      <summary>
            An abstract base class that makes it possible to easily implement a custom
            <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see>.
            </summary>
      <typeparam name="TVisual">The type of the visual this instance will create. Subclasses will probably declare a fixed type to
            make the implementation of <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext)"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext,`0)"></see> more convenient.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance using <see cref="M:System.Object.MemberwiseClone"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Callback that creates the visual.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.GetBounds(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.ICanvasContext)">
      <summary>
            Callback that returns the bounds of the visual for the port in the given context.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>The visual bounds of the visual representation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.IsHit(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visual representation of the port has been hit at the given location.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="p">The point to test.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified port representation is hit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.IsInBox(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified port is included in the marquee selection.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="box">The marquee selection box.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified port is visible is selected by the marquee rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.IsVisible(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the visualization for the specified port is visible in the context.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="clip">The clipping rectangle.</param>
      <param name="canvasContext">The canvas context.</param>
      <returns>
        <c>true</c> if the specified port is visible in the clipping rectangle; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.Lookup(yWorks.yFiles.UI.Model.IPort,System.Type)">
      <summary>
            Performs the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> operation for 
            the <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see>
            that has been queried from the <see cref="P:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.Renderer"></see>.
            </summary>
      <param name="port">The port to use for the context lookup.</param>
      <param name="type">The type to query.</param>
      <returns>An implementation of the <paramref name="type"></paramref> or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.Renderer">
      <summary>
            Gets the renderer implementation for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.UpdateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext,`0)">
      <summary>
            Callback that updates the visual previously created by <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext)"></see>.
            </summary>
      <param name="port">The port to which this style instance is assigned.</param>
      <param name="renderContext">The render context.</param>
      <param name="oldVisual">The visual that has been created in the call to <see cref="M:yWorks.yFiles.UI.Drawing.SimpleAbstractPortStyle`1.CreateVisual(yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Drawing.IRenderContext)"></see>.</param>
      <returns>The visual as required by the <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> interface.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleLabelStyle">
      <summary>
            The default mutable implementation of the  <see cref="T:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor">
      <summary>
            Creates a new instance using the default system typeface and a black brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(System.Windows.Media.Typeface)">
      <summary>
            Creates a new instance using a black brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(System.Windows.Media.Typeface,System.Double)">
      <summary>
            Creates a new instance using a black brush and the given typeface and size.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the given brush, typeface, and size.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(System.Windows.Media.Typeface,System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the provided typeface and brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(yWorks.yFiles.UI.Drawing.ILabelStyleRenderer,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the given renderer, brush, typeface, and size.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.#ctor(yWorks.yFiles.UI.Drawing.ILabelStyleRenderer,System.Windows.Media.Typeface,System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the provided typeface and brush.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.AutoFlip">
      <summary>
            Gets a value indicating whether the label should be flipped 180 degrees
            automatically, if it would be oriented downwards, otherwise.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.BackgroundBrush">
      <summary>
            Gets the brush to use for the background box of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.BackgroundPen">
      <summary>
            Gets the pen to use for the background box of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.ClipText">
      <summary>
            Gets a value that determines whether text should be clipped.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given label and this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.TextBrush">
      <summary>
            Gets the brush to use for the label's text.
            </summary>
      <exception cref="T:System.ArgumentException">value cannot be null!</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.Typeface">
      <summary>
            Gets the typeface to use for the label.
            </summary>
      <exception cref="T:System.ArgumentException">value cannot be null!</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.TypefaceFormat">
      <summary>
            Gets the <see cref="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.TypefaceFormat"></see> to use for rendering the label.
            </summary>
      <exception cref="T:System.ArgumentNullException">
    <c>value</c> is null.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimpleLabelStyle.VerticalTextAlignment">
      <summary>
            Gets or sets the vertical text alignment to use if the label is assigned more space than needed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer">
      <summary>
            A simple <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see> implementation that can handle <see cref="T:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle"></see>
            instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.#ctor">
      <summary>
            Creates a new default instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates a tag object that encapsulated the state of the rendering
            if <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.Paint(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext)"></see> is called on the current state of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <returns>
            The tag object that will later be passed to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see> and
            <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>. This can be any kind of object or <see langword="null"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.GetVerticalAlignment">
      <summary>
            Determines how the text should be aligned vertically within the assigned label bounds.
            </summary>
      <returns>This value as obtained from the style.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.IsAutoFlip">
      <summary>
            Delegates to <see cref="P:yWorks.yFiles.UI.Drawing.ISimpleLabelStyle.AutoFlip"></see></summary>
      <returns>Whether to flip the drawing if it is upside down.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.IsClippingText">
      <summary>
            Determines whether text should be forced to be clipped inside the rectangle.
            </summary>
      <returns>This value as obtained from the style.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.IsRenderStateValid(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Determines whether the given render state tag is still valid given the provided context.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag created during the last call to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            or <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
        <c>true</c> if the render state is still valid for the specified context; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.IsTextMirrored(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.DrawingContext)">
      <summary>
            Determines whether the text should be horizontally mirrored.
            </summary>
      <param name="ctx">The context for which the rendering is performed.</param>
      <param name="drawingContext">The drawing context that will be used for the rendering.</param>
      <returns>Whether to apply a mirroring transformation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.PaintContent(System.Windows.Media.DrawingContext,yWorks.Canvas.Drawing.IRenderContext,System.Double,System.Double)">
      <summary>
            Actually paints the content into &lt;0,0&gt; - &lt;width, height&gt;.
            </summary>
      <param name="g">The preconfigured graphics context</param>
      <param name="ctx">The render context to use.</param>
      <param name="width">The width of the painting area.</param>
      <param name="height">The height of the painting area.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimpleLabelStyleRenderer.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)">
      <summary>
            Updates the render state tag for the given context using the current configuration of this instance.
            </summary>
      <param name="renderContext">The render context.</param>
      <param name="renderStateTag">The render state tag that has earlier been created by calls to <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.CreateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext)"></see>
            and <see cref="M:yWorks.yFiles.UI.Drawing.AbstractLabelStyleRenderer`1.UpdateRenderStateTag(yWorks.Canvas.Drawing.IRenderContext,System.Object)"></see>.</param>
      <returns>
            The new tag to store with the visual. This may be the same instance as <paramref name="renderStateTag"></paramref>
            or a new instance or <see langword="null"></see>.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimplePortStyle">
      <summary>
            A canonic implementation of <see cref="T:yWorks.yFiles.UI.Drawing.ISimplePortStyle"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyle.#ctor">
      <summary>
            Creates a new instance using a dark gray brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyle.#ctor(System.Windows.Media.Brush)">
      <summary>
            Creates a new instance using the given brush.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyle.#ctor(System.Windows.Media.Brush,yWorks.yFiles.UI.Drawing.IPortStyleRenderer)">
      <summary>
            Creates a new instance using the given brush and renderer.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimplePortStyle.Brush">
      <summary>
            Gets the brush to paint the port representation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyle.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.SimplePortStyle.Renderer">
      <summary>
            Gets the renderer implementation that can be queried for implementations
            that provide details about the visual appearance and visual behavior
            for a given port and this style instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer">
      <summary>
            A trivial implementation of a <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyleRenderer"></see>
            that draws <see cref="T:yWorks.yFiles.UI.Drawing.ISimplePortStyle"></see> instances using a small colored circle.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.Configure">
      <summary>
            Prepares this instance for subsequent calls after the
            style and item have been initialized. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.PortStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Abstract method that creates the <see cref="T:System.Windows.Media.Visual"></see> as part of the 
            <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface.
            </summary>
      <param name="ctx">The context for the creation of the visual.</param>
      <returns>The visual to use in the scene graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.SimplePortStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Simple implementation of an update strategy as part of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see>
            interface.
            </summary>
      <param name="ctx">The context to use for the rendering.</param>
      <param name="oldVisual">The visual that has been created by this instance
            the last time <see cref="M:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see> was called.</param>
      <returns>The updated visual, this can either be <paramref name="oldVisual"></paramref> or a newly
            created <see cref="T:System.Windows.Media.Visual"></see> instance.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.StyleInstaller`2">
      <summary>
            A generic <see cref="T:yWorks.Canvas.Model.IModelItemInstaller`1"></see> for <see cref="T:yWorks.Canvas.Model.IModelItem"></see>s that have
            a specific <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see> in their <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <typeparam name="TItem">The item type this installer will install.</typeparam>
      <typeparam name="TVisualStyle">The type of <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see> that will be 
            looked up by this instance to install.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.StyleInstaller`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.StyleInstaller`2" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.StyleInstaller`2.CanvasGroupProvider">
      <summary>
            Gets or sets the canvas group provider that will be used for installing the item.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.StyleInstaller`2.Comparer">
      <summary>
            Gets or sets a comparer that compares the items so that they are put into the correct order
            in the canvas tree.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.StyleInstaller`2.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            Central method that performs the installation of an item's
            visual representation in the canvas using the <typeparamref name="TVisualStyle"></typeparamref> in the item's
            lookup.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The canvas to <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> 
            canvas objects for the item to.</param>
      <returns>
            All canvas objects this method has added to the canvas control.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider">
      <summary>
            An implementation of <see cref="T:yWorks.yFiles.UI.Drawing.IUserTagProvider"></see> that delegates to the
            <see cref="T:yWorks.Support.ITagOwner"></see>'s <see cref="P:yWorks.Support.ITagOwner.Tag"></see> property that is retrieved
            from the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> of the <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            that is passed in for the queries.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider.GetUserTag(yWorks.Canvas.Model.IModelItem,yWorks.Support.ILookup)">
      <summary>
            Gets the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> from the <see cref="T:yWorks.Support.ITagOwner"></see>
            that is found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> of the model item.
            </summary>
      <param name="item">The item from which <see cref="T:yWorks.Support.ITagOwner"></see> will be queried.</param>
      <param name="context">The context, which is ignored by this implementation.</param>
      <returns>The value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> property or <see langword="null"></see>
            if no <see cref="T:yWorks.Support.ITagOwner"></see> was returned by the lookup mechanism implemented by the model item.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider.Instance">
      <summary>
            A static singleton instance of this class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TagOwnerUserTagProvider.SetUserTag(yWorks.Canvas.Model.IModelItem,System.Object,yWorks.Support.ILookup)">
      <summary>
            Gets the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> from the <see cref="T:yWorks.Support.ITagOwner"></see>
            that is found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> of the model item.
            </summary>
      <param name="forItem">The item from which <see cref="T:yWorks.Support.ITagOwner"></see> will be queried.</param>
      <param name="newTag">The tag object to set the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> property to.</param>
      <param name="context">The context, which is ignored by this implementation.</param>
      <returns>Whether the value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> property could be set to the new value.
            <see langword="false"></see>, if no <see cref="T:yWorks.Support.ITagOwner"></see> was returned by the lookup mechanism implemented by the model item.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.TypefaceFormat">
      <summary>
            A helper class that holds values for creating
            <see cref="T:System.Windows.Media.FormattedText"></see> instances from <see cref="T:System.Windows.Media.Typeface"></see>s 
            and strings.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.TypefaceFormat" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.CreateFormattedText(System.Windows.Media.Typeface,System.String,System.Windows.Media.Brush)">
      <summary>
            Factory method that actually creates the <see cref="T:System.Windows.Media.FormattedText"></see>
            instance that will be used to render the label's text.
            </summary>
      <param name="typeface">The typeface to use.</param>
      <param name="text">The text to apply.</param>
      <param name="foreground">The foreground brush.</param>
      <returns>A readily configured <see cref="T:System.Windows.Media.FormattedText"></see> instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.Culture">
      <summary>
            Gets or sets the culture.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.Equals(yWorks.yFiles.UI.Drawing.TypefaceFormat)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <param name="other">
                    An object to compare with this object.
                </param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.FlowDirection">
      <summary>
            Gets or sets the flow direction.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.TypefaceFormat.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.NumberSubstitution">
      <summary>
            Gets or sets the number substitution.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.Size">
      <summary>
            Gets or sets the size of the text.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.TextAlignment">
      <summary>
            Gets or sets the text alignment.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.TextDecorations">
      <summary>
            Gets or sets the text decorations.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.TypefaceFormat.TextTrimming">
      <summary>
            Gets or sets the text trimming.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle">
      <summary>
            A basic mutable implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see>, that is based on <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.#ctor(System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle"></see> class using the given template selector.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.#ctor(System.Windows.Controls.DataTemplateSelector,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle"></see> class using the given template selector
            and user tag provider.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.#ctor(System.Windows.DataTemplate)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle"></see> class using the given template.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.#ctor(System.Windows.DataTemplate,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle"></see> class using the given template
            and user tag provider.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.PathStyle">
      <summary>
            Gets or sets the path style instance that is used to yield the underlying
            <see cref="M:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">geometry of the path</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.Renderer">
      <summary>
            Retrieves the renderer instances, which is an instance 
            of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer"></see> in this case.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyle.SegmentWidth">
      <summary>
            Retrieves the width of a segment rendering that will be used to <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)"></see>
            the segments.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext">
      <summary>
            Specializes the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1"></see>
            and provides a convenience property for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext.Edge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext.#ctor(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext"></see> class
            for use in the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context for which the visual has been <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.</param>
      <param name="edge">The edge to which the context is bound.</param>
      <param name="style">The style instance which has been used to create the visual.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext.Edge">
      <summary>
            Yields the edge that is being visualized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext.EdgeStyle">
      <summary>
            Gets the edge style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext.SegmentCount">
      <summary>
            Gets the total segment count that is used to visualize this edge.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> implementation for <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle"></see>
            instances that creates visual representations for edge segments based on <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template"></see>s
            and <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.TemplateSelector"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.CreateContext(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates an instance of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleDataContext"></see> for the given context
            for use in data binding.
            </summary>
      <param name="ctx">The context to create the data binding instance for.</param>
      <returns>The newly created context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.StyleDescriptor"></see> property.
            </summary>
      <returns>an ICanvasObjectDescriptor instance that will delegate to this instance's methods</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Actually creates the visual for the given context.
            </summary>
      <param name="ctx">The context to create the visual for.</param>
      <returns>The visual, which is a result of the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template">templating mechanism</see>.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.edge">
      <summary>
            The edge this renderer is currently configured for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetBoundsProvider(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the calculating the painting bounds</param>
      <returns>
            This method delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle"></see>'s
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetBoundsProvider(`0,`1)"></see> implementation.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetContext(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets a temporary context instance that can be used to query additional information
            for the item's style.
            </summary>
      <param name="item">The item to provide a context instance for.</param>
      <param name="style">The style to use for the context.</param>
      <returns>An non-<c>null</c> lookup implementation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetHitTestable(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the querying hit tests</param>
      <returns>
            This method delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle"></see>'s
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetHitTestable(`0,`1)"></see> implementation.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetMarqueeTestable(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the querying marquee intersection test.</param>
      <returns>
            This method delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle"></see>'s
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetMarqueeTestable(`0,`1)"></see> implementation.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPathGeometry"></see> interface that can
            handle the provided edge and its associated style.
            </summary>
      <param name="edge">The edge to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>
            This method delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle"></see>'s
            <see cref="M:yWorks.yFiles.UI.Drawing.IEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)"></see> implementation.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetVisibilityTest(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the testing the visibility</param>
      <returns>
            This method delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementEdgeStyle.PathStyle"></see>'s
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetVisibilityTest(`0,`1)"></see> implementation.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.GetVisualCreator(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Gets an implementation of the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> interface that can
            handle the provided item and its associated style.
            </summary>
      <param name="item">The item to provide an instance for</param>
      <param name="style">The style to use for the creation of the visual</param>
      <returns>An implementation that may be used to subsequently create or update the visual for
            the item. Clients should not cache this instance and must always call
            this method immediately before using the value returned. This enables the
            use of the flyweight design pattern for implementations. This method may not return <c>null</c> 
            but should yield a <see cref="F:yWorks.Canvas.CanvasObjectDescriptor.NullVisualCreator">void</see> implementation instead.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Installs the model in the canvas at the group provided through the context using the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.StyleDescriptor"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>
            an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.style">
      <summary>
            The style this renderer is currently configured for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.StyleDescriptor">
      <summary>
            Gets the ICanvasObjectDescriptor to use for new installations.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.CreateStyleDescriptor"></see> will be called.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Updates the visual according to the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>'s <see cref="T:yWorks.yFiles.UI.Drawing.IPathGeometry">path geometry.</see>.
            </summary>
      <param name="ctx">The context to use for updating.</param>
      <param name="oldVisual">The old visual that has been created in <see cref="M:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see></param>
      <returns>The updated visual, which is <paramref name="oldVisual"></paramref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext">
      <summary>
            A data context object for use with the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleRenderer"></see>
            that will be created for each segment in the polygonal representation of
            an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> rendering.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext.EdgeContext">
      <summary>
            Gets the edge context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext.IsFirstSegment">
      <summary>
            Gets a value indicating whether this instance is the first segment in the edge path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext.IsLastSegment">
      <summary>
            Gets a value indicating whether this instance is the last segment
            in the edge path.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementEdgeStyleSegmentDataContext.SegmentIndex">
      <summary>
            Gets the index of this segment.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle">
      <summary>
            A basic mutable implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see>, that is based on <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.#ctor(System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle"></see> class using the given template selector.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.#ctor(System.Windows.Controls.DataTemplateSelector,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle"></see> class using the given template selector
            and user tag provider.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.#ctor(System.Windows.DataTemplate)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle"></see> class using the given template.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.#ctor(System.Windows.DataTemplate,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyle"></see> class using the given template
            and user tag provider.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.AutoFlip">
      <summary>
            Gets or sets a value indicating whether the rendering should automatically be 
            flipped (rotated by 180 degrees)
            if otherwise it would be rendered upside-down.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.OutlineShape">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Shapes.Shape"></see> of the outline of a label that will be displayed using the
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyle.Renderer">
      <summary>
            Retrieves the renderer instances, which is an instance 
            of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer"></see> in this case.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext">
      <summary>
            Specializes the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1"></see>
            and provides a convenience property for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext.Label"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext.#ctor(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.IUIElementLabelStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext"></see> class
            for use in the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context for which the visual has been <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.</param>
      <param name="label">The label to which the context is bound.</param>
      <param name="style">The style instance which has been used to create the visual.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext.Label">
      <summary>
            Yields the label that is being visualized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext.LabelStyle">
      <summary>
            Gets the label style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> implementation for <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementLabelStyle"></see>
            instances that creates visual representations for labels based on <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template"></see>s
            and <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.TemplateSelector"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.Configure">
      <summary>
            Stores the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> into <see cref="F:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.CreateContext(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates an instance of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementLabelStyleDataContext"></see> for the given context
            for use in data binding.
            </summary>
      <param name="ctx">The context to create the data binding instance for.</param>
      <returns>The newly created context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.LabelStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Actually creates the visual for the given context.
            </summary>
      <param name="ctx">The context to create the visual for.</param>
      <returns>The visual, which is a result of the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template">templating mechanism</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
             Calculates the preferred size for the given label and style.
            </summary>
      <param name="label">The label instance.</param>
      <param name="style">The style instance to apply.</param>
      <returns>The size that is calculated using a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)"></see> call
             and a request to <see cref="P:System.Windows.UIElement.DesiredSize"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.IsAutoFlip">
      <summary>
            Determines whether the label's style should automatically flip the painting contents if the
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.Layout"></see> is upside down.
            </summary>
      <returns>This default implementation returns <see langword="true"></see>, always.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Uses the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see> to determine whether the clip intersects.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.layout">
      <summary>
            Holds the layout of the current label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.Layout">
      <summary>
            Retrieves the current <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.Lookup(System.Type)">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.ContextLookup"></see> of the <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementLabelStyle"></see>.
            </summary>
      <param name="type">The type to query an instance for.</param>
      <returns>The implementation or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Updates the visual according to the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>'s <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout">layout.</see>.
            </summary>
      <param name="ctx">The context to use for updating.</param>
      <param name="oldVisual">The old visual that has been created in <see cref="M:yWorks.yFiles.UI.Drawing.UIElementLabelStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see></param>
      <returns>The updated visual, which is <paramref name="oldVisual"></paramref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle">
      <summary>
            A basic mutable implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see>, that is based on <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.#ctor(System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle"></see> class using the given template selector.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.#ctor(System.Windows.Controls.DataTemplateSelector,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle"></see> class using the given template selector
            and user tag provider.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.#ctor(System.Windows.DataTemplate)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle"></see> class using the given template.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.#ctor(System.Windows.DataTemplate,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyle"></see> class using the given template
            and user tag provider.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.CreateRenderer">
      <summary>
            Factory method that creates the renderer.
            </summary>
      <returns>A newly created <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.Insets">
      <summary>
            Gets or sets the insets the <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"></see> implementation for
            <see cref="T:yWorks.yFiles.UI.Model.INode"></see> should yield for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.OutlineShape">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Shapes.Shape"></see> of the outline of a node that will be displayed using the
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyle.Renderer">
      <summary>
            Retrieves the renderer instances, which is an instance 
            of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer"></see> in this case.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext">
      <summary>
            Specializes the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1"></see>
            and provides a convenience property for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext.Node"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext.#ctor(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IUIElementNodeStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext"></see> class
            for use in the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context for which the visual has been <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.</param>
      <param name="modelItem">The node to which the context is bound.</param>
      <param name="style">The style instance which has been used to create the visual.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext.Node">
      <summary>
            Yields the node that is being visualized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext.NodeStyle">
      <summary>
            Gets the node style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> implementation for <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle"></see>
            instances that creates visual representations for nodes based on <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template"></see>s
            and <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.TemplateSelector"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.CreateContext(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates an instance of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementNodeStyleDataContext"></see> for the given context
            for use in data binding.
            </summary>
      <param name="ctx">The context to create the data binding instance for.</param>
      <returns>The newly created context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Actually creates the visual for the given context.
            </summary>
      <param name="ctx">The context to create the visual for.</param>
      <returns>The visual, which is a result of the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template">templating mechanism</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetBoundsProvider(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Provides a <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider">bounds calculation</see> implementation for
            the given style and node.
            </summary>
      <param name="node">The node to query the provider for.</param>
      <param name="style">The style whose provider is queried.</param>
      <returns>An implementation that can calculate visual bounds.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetHitTestable(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Provides a <see cref="T:yWorks.Canvas.Drawing.IHitTestable">hit testing</see> implementation for
            the given style and node.
            </summary>
      <param name="node">The node to query the tester for.</param>
      <param name="style">The style whose tester is queried.</param>
      <returns>An implementation that can perform the hit testing.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the intersection calculation, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetMarqueeTestable(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Provides a <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable">marquee testing</see> implementation for
            the given style and node.
            </summary>
      <param name="node">The node to query the tester for.</param>
      <param name="style">The style whose tester is queried.</param>
      <returns>An implementation that can test for marquee intersections.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetOutline">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to create
            the outline shape path, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
             Calculates the preferred size for the given node and style.
            </summary>
      <param name="node">The node instance.</param>
      <param name="style">The style instance to apply.</param>
      <returns>The size that is calculated using a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)"></see> call
             and a request to <see cref="P:System.Windows.UIElement.DesiredSize"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetShapeGeometry(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Provides the geometry for the visual representation.
            </summary>
      <param name="node">The node to query the geometry for.</param>
      <param name="style">The style for which the geometry is queried.</param>
      <returns>An implementation that describes the outline geometry of the shape.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.GetVisibilityTest(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Provides a <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest">visibility testing</see> implementation for
            the given style and node.
            </summary>
      <returns>
            An instance that can be used to determine rendering visibility.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the hit test analysis, otherwise reverts to default (rectangular) behavior.
            </summary>
      <param name="p">the hit point in world coordinates</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the marquee intersection analysis, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Tries to use the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle.OutlineShape"></see> to perform
            the contains test, otherwise reverts to default (rectangular) behavior.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the rendering is visible for the specified clip.
            </summary>
      <param name="clip">The clip.</param>
      <param name="ctx">The context.</param>
      <returns>
        <c>true</c> if the rendering is visible for the specified clip; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.Lookup(System.Type)">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.ContextLookup"></see> of the <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementNodeStyle"></see>.
            </summary>
      <param name="type">The type to query an instance for.</param>
      <returns>The implementation or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Updates the visual according to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>'s <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">bounds.</see>.
            </summary>
      <param name="ctx">The context to use for updating.</param>
      <param name="oldVisual">The old visual that has been created in <see cref="M:yWorks.yFiles.UI.Drawing.UIElementNodeStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see></param>
      <returns>The updated visual, which is <paramref name="oldVisual"></paramref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle">
      <summary>
            A basic mutable implementation of an <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see>, that is based on <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.#ctor(System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle"></see> class using the given template selector.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.#ctor(System.Windows.Controls.DataTemplateSelector,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle"></see> class using the given template selector
            and user tag provider.
            </summary>
      <param name="templateSelector">The template selector instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.#ctor(System.Windows.DataTemplate)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle"></see> class using the given template.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.#ctor(System.Windows.DataTemplate,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyle"></see> class using the given template
            and user tag provider.
            </summary>
      <param name="template">The template instance to assign to the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>
            property.</param>
      <param name="userTagProvider">The instance that will be used to satisfy requests to the 
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyle.Install(yWorks.Canvas.Model.IInstallerContext,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            This the main method of the interface that performs the installation of an item's
            visual representation in the <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> by adding <see cref="T:yWorks.Canvas.ICanvasObject"></see>s.
            </summary>
      <param name="item">The item to install.</param>
      <param name="context">The context to install the item into and 
            <see cref="M:yWorks.Canvas.Model.IInstallerContext.AddInstalled(yWorks.Canvas.ICanvasObject)">add installed</see> items to.</param>
      <returns>All canvas objects this method has added to the canvas control.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementPortStyle.Renderer">
      <summary>
            Retrieves the renderer instances, which is an instance 
            of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer"></see> in this case.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementPortStyle.RenderSize">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Size"></see> of the of a port that will be displayed using the
            <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext">
      <summary>
            Specializes the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1"></see>
            and provides a convenience property for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext.Port"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext.#ctor(yWorks.Canvas.Drawing.IRenderContext,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IUIElementPortStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext"></see> class
            for use in the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context for which the visual has been <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.</param>
      <param name="modelItem">The port to which the context is bound.</param>
      <param name="style">The style instance which has been used to create the visual.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext.Port">
      <summary>
            Yields the port that is being visualized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext.PortStyle">
      <summary>
            Gets the port style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer">
      <summary>
            An <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see> implementation for <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementPortStyle"></see>
            instances that creates visual representations for ports based on <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template"></see>s
            and <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.TemplateSelector"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.Configure">
      <summary>
            Stores the <see cref="P:yWorks.yFiles.UI.Model.IPort.Location"></see> into <see cref="F:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.location"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.CreateContext(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Creates an instance of <see cref="T:yWorks.yFiles.UI.Drawing.UIElementPortStyleDataContext"></see> for the given context
            for use in data binding.
            </summary>
      <param name="ctx">The context to create the data binding instance for.</param>
      <returns>The newly created context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.CreateStyleDescriptor">
      <summary>
            Factory method for the StyleDescriptor property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.StyleDescriptor"></see> property.
            </summary>
      <returns>an instance of <see cref="T:yWorks.yFiles.UI.Drawing.PortStyleDescriptor"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Actually creates the visual for the given context.
            </summary>
      <param name="ctx">The context to create the visual for.</param>
      <returns>The visual, which is a result of the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.Template">templating mechanism</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.GetBounds(yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bounds for the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> during painting.
            </summary>
      <param name="ctx">the context to calculate the bounds for</param>
      <returns>
            the bounds or <c>null</c> to indicate an unbound area
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.GetPreferredSize">
      <summary>
            Calculates the preferred size given the current state of the renderer.
            </summary>
      <returns>The size as suggested by this renderer.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
             Calculates the preferred size for the given port and style.
            </summary>
      <param name="port">The port instance.</param>
      <param name="style">The style instance to apply.</param>
      <returns>The size that is calculated using a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)"></see> call
             and a request to <see cref="P:System.Windows.UIElement.DesiredSize"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.GetRenderSize">
      <summary>
            Gets the size of the rendering.
            </summary>
      <returns>
        <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementPortStyle.RenderSize">
        </see>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.IsHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Hit tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see>.
            </summary>
      <param name="p">the coordinates in world coordinate system</param>
      <param name="ctx">the context the hit test is performed in</param>
      <returns>whether something has been hit</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.IsInBox(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Tests the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.item"></see> using the <see cref="F:yWorks.yFiles.UI.Drawing.AbstractStyleRenderer`3.style"></see> for an intersection.
            </summary>
      <param name="box">the box describing the marquee's bounds</param>
      <param name="ctx">the current canvas context</param>
      <returns>
        <c>true</c> if the item is considered to be captured by the marquee
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.IsVisible(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Uses the <see cref="P:yWorks.yFiles.UI.Model.IPort.Location"></see> and <see cref="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.GetRenderSize"></see>to determine whether the clip intersects.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.location">
      <summary>
            Holds the location of the current port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.Location">
      <summary>
            Retrieves the current <see cref="P:yWorks.yFiles.UI.Model.IPort.Location"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.UpdateVisual(yWorks.Canvas.Drawing.IRenderContext,System.Windows.Media.Visual)">
      <summary>
            Updates the visual according to the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>'s <see cref="P:yWorks.yFiles.UI.Model.IPort.Location">location.</see>.
            </summary>
      <param name="ctx">The context to use for updating.</param>
      <param name="oldVisual">The old visual that has been created in <see cref="M:yWorks.yFiles.UI.Drawing.UIElementPortStyleRenderer.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)"></see></param>
      <returns>The updated visual, which is <paramref name="oldVisual"></paramref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementStyle`1">
      <summary>
            Abstract common mutable implementation of <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see> that provides a number
            of default constructors and default behavior.
            </summary>
      <typeparam name="TModelItem">The type of the model item.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor">
      <summary>
            Empty constructor that does not assign a template or template selector.
            An unconfigured instance will remain pretty useless.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor(System.Windows.Controls.DataTemplateSelector)">
      <summary>
            Constructs a new instance of this style with default values and the given <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector"></see>.
            </summary>
      <param name="templateSelector">The template selector to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor(System.Windows.Controls.DataTemplateSelector,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Constructs a new instance of this style with default values and the given <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see>
            and <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see> instances.
            </summary>
      <param name="userTagProvider">The implementation to use for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see> property.</param>
      <param name="templateSelector">The template selector to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor(System.Windows.DataTemplate)">
      <summary>
            Constructs a new instance of this style with default values and the given <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see>.
            </summary>
      <param name="template">The template to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor(System.Windows.DataTemplate,yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Constructs a new instance of this style with default values and the given <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see>
            and <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template"></see> instances.
            </summary>
      <param name="userTagProvider">The implementation to use for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see> property.</param>
      <param name="template">The template to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.#ctor(yWorks.yFiles.UI.Drawing.IUserTagProvider)">
      <summary>
            Constructs a new instance of this style with default values and the given <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see>.
            </summary>
      <param name="userTagProvider">The implementation to use for the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Clone">
      <summary>
            Performs a shallow clone of this instance, except for the value of <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.StyleTag"></see>
            which is cloned, too, if it can be cloned.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.ContextLookup">
      <summary>
            Gets or sets an implementation of <see cref="T:yWorks.Support.IContextLookup"></see> that can be used to satisfy queries
            that are made to the implementation which is returned by calls to
            <see cref="M:yWorks.yFiles.UI.Drawing.IStyleRenderer`2.GetContext(`0,`1)"></see> that are made on the <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see>
            that is associated with this style instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.GetTag(`0,yWorks.Support.ILookup)">
      <summary>
            Gets the tag for the specified item and context.
            </summary>
      <param name="forItem">The item to query the tag for.</param>
      <param name="context">The context, which can be used to query additional services from.</param>
      <returns>The tag associated with the item or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Drawing.UIElementStyle`1.PropertyChanged"></see> event.
            </summary>
      <param name="ea">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Drawing.UIElementStyle`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyle`1.SetTag(`0,System.Object,yWorks.Support.ILookup)">
      <summary>
            Sets the new tag on the specified item in the given context.
            </summary>
      <param name="forItem">The item to set the new tag for.</param>
      <param name="newTag">The new value.</param>
      <param name="context">The context, which can be used to query additional services from.</param>
      <returns>Whether the tag was stored successfully with the item.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.StyleTag">
      <summary>
            Gets or sets the tag that is associated with this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.Template">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"></see> that will be used to create the visual
            representation for the item that is assigned this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.TemplateSelector">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.DataTemplateSelector"></see> that will be used to create the visual
            representation for the item that is assigned this style instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyle`1.UserTagProvider">
      <summary>
            Gets or sets the implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IUserTagProvider"></see> 
            interface that can yield
            a user specified tag object for each item that will be assigned this style.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1">
      <summary>
            An implementation of a context object that can be used to accomplish data binding
            in the scenario of <see cref="T:yWorks.yFiles.UI.Drawing.IUIElementStyle`1"></see>s.
            </summary>
      <typeparam name="TModelItem">The type for which this context has been created.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.#ctor(yWorks.Canvas.Drawing.IRenderContext,`0,yWorks.yFiles.UI.Drawing.IUIElementStyle{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1"></see> class
            for use in the given <paramref name="context"></paramref>.
            </summary>
      <param name="context">The context for which the visual has been <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.</param>
      <param name="modelItem">The model item to which the context is bound.</param>
      <param name="style">The style instance which has been used to create the visual.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Canvas">
      <summary>
            Yields the <see cref="T:yWorks.Canvas.CanvasControl"></see> the visual has been 
            <see cref="M:yWorks.Canvas.Drawing.IVisualCreator.CreateVisual(yWorks.Canvas.Drawing.IRenderContext)">created</see> for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Focused">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Model.FocusPaintManager`1">focused state</see> of the given item 
            in the current context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Highlighted">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Model.HighlightPaintManager`1">highlight state</see> of the given item 
            in the current context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.ModelItem">
      <summary>
            Gets the model item for which this context object has been created for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.PropertyChanged"></see> event.
            </summary>
      <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.OnStylePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Called when a property on the <see cref="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Style"></see> has changed.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Selected">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Model.ISelectionModel`1">selection state</see> of the given item 
            in the current context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.Style">
      <summary>
            Yields the style that is associated with this context instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.StyleTag">
      <summary>
            Yields the <see cref="P:yWorks.yFiles.UI.Drawing.IUIElementStyle`1.StyleTag">tag of the style</see> that is associated
            with this context instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.UIElementStyleDataContext`1.UserTag">
      <summary>
            Gets or sets the user tag associated with this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyle">
      <summary>
            A void implementation of an edge style that does nothing and behaves like
            an invisible style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyle.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyle"></see> singleton.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyle.Renderer">
      <summary>
            Yields the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyleRenderer.Instance">
            VoidEdgeStyleRenderer instance</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyleRenderer">
      <summary>
            A void implementation of an edge style renderer that does nothing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyleRenderer.GetPathGeometry(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            This method always returns the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPathGeometry.Instance">VoidPathGeometry instance</see>.
            </summary>
      <param name="edge">The edge to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>
            The <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPathGeometry.Instance">VoidPathGeometry instance</see>.
            </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyleRenderer.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidEdgeStyleRenderer"></see> singleton.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyle">
      <summary>
            A void implementation of a label style that does nothing and behaves like
            an invisible style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyle.Instance">
      <summary>
            The singleton instance of this style.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyle.Renderer">
      <summary>
            Yields the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyleRenderer.Instance">VoidLabelStyleRenderer instance</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyleRenderer">
      <summary>
            A void implementation of a label style renderer that does nothing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Yields <see cref="P:yWorks.Canvas.Geometry.Structs.SizeD.Empty"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidLabelStyleRenderer.Instance">
      <summary>
            The singleton instance of this renderer.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyle">
      <summary>
            A void implementation of a node style that does nothing and behaves like
            an invisible style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyle.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyle"></see> singleton.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyle.Renderer">
      <summary>
            Yields the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyleRenderer.Instance">
            VoidNodeStyleRenderer instance</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyleRenderer">
      <summary>
            A void implementation of a node style renderer that does nothing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyleRenderer.GetShapeGeometry(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            This implementation always returns the
            <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.Instance">VoidShapeGeometry instance</see>.
            </summary>
      <param name="node">The node to provide an instance for</param>
      <param name="style">The style to use for the painting</param>
      <returns>
            The <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.Instance">VoidShapeGeometry instance</see>.
            </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyleRenderer.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidNodeStyleRenderer"></see> singleton.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidPathGeometry">
      <summary>
            A void implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IPathGeometry"></see>
            interface that does nothing and behaves like an empty path.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidPathGeometry.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidPathGeometry"></see> singleton.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle">
      <summary>
            A void implementation of a port style that does nothing and behaves like
            an invisible style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle"></see> singleton.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Renderer">
      <summary>
            Yields the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyleRenderer.Instance">VoidPortStyleRenderer instance</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidPortStyleRenderer">
      <summary>
            A void implementation of a port style renderer that does nothing.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyleRenderer.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidPortStyleRenderer"></see> singleton.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry">
      <summary>
            A void implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IShapeGeometry"></see>
            interface that does nothing and behaves like an empty geometry.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.GetIntersection(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation always returns <see langword="null"></see> (a <see cref="T:System.Nullable`1"></see>
            with no value).
            </summary>
      <param name="inner">The first point of the line that is inside the shape.</param>
      <param name="outer">The second point of the line that is outside the shape.</param>
      <returns>
            A <see cref="T:System.Nullable`1"></see> with no value.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.GetOutline">
      <summary>
            This implementation returns <see langword="null"></see>.
            </summary>
      <returns>
        <see langword="null">
        </see>
      </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.Instance">
      <summary>
            The <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry"></see> singleton.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidShapeGeometry.IsInside(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            This implementation always returns <see langword="false"></see>.
            </summary>
      <param name="point">The point to test.</param>
      <returns>
        <see langword="false">
        </see>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2">
      <summary>
            A void implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IStyleRenderer`2"></see>
            interface that does nothing and behaves like an invisible style.
            </summary>
      <typeparam name="TModelItem">The type of the model item.</typeparam>
      <typeparam name="TStyle">The type of the style.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetBoundsProvider(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Canvas.Drawing.BoundsProvider.Empty"></see> that will return empty bounds.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetContext(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Support.Lookups.Empty"></see> that will not yield anything.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetHitTestable(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Canvas.Drawing.HitTestable.Never"></see> that will always report misses.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetMarqueeTestable(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Canvas.Drawing.MarqueeTestable.Never"></see> that will always report misses.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetVisibilityTest(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Canvas.Drawing.VisibilityTest.Never"></see> that will always claim invisibility.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidStyleRenderer`2.GetVisualCreator(`0,`1)">
      <summary>
            Yields the <see cref="F:yWorks.Canvas.Drawing.VoidVisualCreator.Instance"></see> that will do nothing.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider">
      <summary>
            Void implementation of a <see cref="T:yWorks.yFiles.UI.Drawing.IUserTagProvider"></see> that
            always yields <see langword="null"></see> and can not <see cref="M:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider.SetUserTag(yWorks.Canvas.Model.IModelItem,System.Object,yWorks.Support.ILookup)">set</see>
            a new tag on the items.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider.GetUserTag(yWorks.Canvas.Model.IModelItem,yWorks.Support.ILookup)">
      <summary>
            Always returns <see langword="null"></see>.
            </summary>
      <param name="forItem">The item to get the user associated data from.</param>
      <param name="context">The context that can optional be queried for additional service implementations.</param>
      <returns>
        <see langword="null">
        </see>
      </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider.Instance">
      <summary>
            A singleton instance of this class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidUserTagProvider.SetUserTag(yWorks.Canvas.Model.IModelItem,System.Object,yWorks.Support.ILookup)">
      <summary>
            Does not do anything.
            </summary>
      <param name="forItem">The item to store the new tag with.</param>
      <param name="newTag">The new tag.</param>
      <param name="context">The context that can optional be queried for additional service implementations.</param>
      <returns>
            Always <see langword="false"></see>.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1">
      <summary>
            A void implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IVisualStyle`1"></see>
            interface that does nothing, i.e. <see cref="M:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)"></see> returns silently.
            </summary>
      <typeparam name="TModelItem">The type of the model item.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1.Clone">
      <summary>
            Returns <see langword="this"></see>.
            </summary>
      <returns>
        <see langword="this">
        </see>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1.Install(yWorks.Canvas.Model.IInstallerContext,`0)">
      <summary>
            Returns silently.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Drawing.Common.VoidVisualStyle`1.Instance">
      <summary>
            A static shareable singleton instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider">
      <summary>
            An abstract convenience implementation of the <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.AddExistingPorts(System.Collections.Generic.IList{yWorks.yFiles.UI.Input.IPortCandidate})">
      <summary>
            Convenience method for subclasses that adds all existing <see cref="P:yWorks.yFiles.UI.Model.IPortOwner.Ports"></see>
            of the <see cref="P:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.PortOwner"></see> to the provided list.
            </summary>
      <param name="list">The list to add candidates for existing ports to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="graph">The graph where the candidate belongs to</param>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="graph">The graph where the candidate belongs to</param>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <param name="owner">The owner to use for the candidate.</param>
      <param name="graph">The graph where the candidate belongs to</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModel,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="model">The model to dynamically create the parameter from.</param>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <param name="owner">The owner to use for the candidate.</param>
      <param name="graph">The graph where the candidate belongs to</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModel,yWorks.Canvas.Geometry.IPoint,System.Boolean)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="model">The model to dynamically create the parameter from, can be <see langword="null"></see>, in which case the
            default for the owner type will be used.</param>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <param name="owner">The owner to use for the candidate.</param>
      <param name="graph">The graph where the candidate belongs to</param>
      <param name="valid">Whether the port should be <see cref="P:yWorks.yFiles.UI.Input.IPortCandidate.Valid"></see>.</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Factory method that creates a simple candidate that will use the <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>
            method of this instance to delegate <see cref="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance"></see> 
            queries to.
            </summary>
      <param name="location">The location of the candidate. This instance is assigned by reference to the candidate.</param>
      <param name="owner">The owner to use for the candidate.</param>
      <param name="graph">The graph where the candidate belongs to</param>
      <returns>A candidate whose <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see> method
            delegates to this instance's <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Callback method used by the ports created using the factory methods <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateCallbackPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortLocationModelParameter)"></see>.
            </summary>
      <param name="graph">The graph where the candidate belongs to</param>
      <param name="candidate">The candidate to create a port for.</param>
      <returns>The new candidate or <c>null</c> if the <paramref name="graph"></paramref> is <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates an enumeration of possibly port candidates.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which to provide the candidates, or <see langword="null"></see>.</param>
      <returns>An enumerable collection of port candidates.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Convenience implementation that simply delegates to <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.portOwner">
      <summary>
            The owner of the port candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.PortOwner">
      <summary>
            Returns the owner to use for the candidates.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.Style">
      <summary>
            Gets or sets the style to use for the creation of the port in <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.Tag">
      <summary>
            The tag to assign to the port in <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.CreateInstance(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)"></see></summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.AdjustContentRectPolicy">
      <summary>
            Enumeration for the different possible policies that 
            can be assigned to the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustContentRectPolicy"></see>
            property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.AdjustContentRectPolicy.Never">
      <summary>
            The content rect should never be adjusted automatically in response to user input.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.AdjustContentRectPolicy.Union">
      <summary>
            The content rect should be recalculated as the union of the former content rect and the 
            new <see cref="M:yWorks.yFiles.UI.GraphControl.FitGraphBounds"></see> in response to user input.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.AdjustContentRectPolicy.Always">
      <summary>
            The content rect should be recalculated using the
            <see cref="M:yWorks.yFiles.UI.GraphControl.FitGraphBounds"></see> method in response to user input.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.AllCandidatesEdgePortCandidateProvider">
      <summary>
            Simple implementation of the <see cref="T:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider"></see>
            interface that returns a union of all <see cref="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>
            or <see cref="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see> respectively of the entities in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AllCandidatesEdgePortCandidateProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.AllCandidatesEdgePortCandidateProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AllCandidatesEdgePortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns the union of all <see cref="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>
            of the graph's <see cref="P:yWorks.yFiles.UI.Model.IGraph.Nodes"></see>.
            </summary>
      <param name="context">The context.</param>
      <param name="graph">The graph to get the nodes from.</param>
      <returns>A collection of all source port candidates in the graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.AllCandidatesEdgePortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns the union of all <see cref="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)"></see>
            of the graph's <see cref="P:yWorks.yFiles.UI.Model.IGraph.Nodes"></see>.
            </summary>
      <param name="context">The context.</param>
      <param name="graph">The graph to get the nodes from.</param>
      <returns>A collection of all source port candidates in the graph.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.CompositePortCandidateProvider">
      <summary>
            A generic composite implementation for the <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.#ctor(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Input.IPortCandidateProvider})">
      <summary>
            Creates a composite out of the given providers.
            </summary>
      <param name="providers">The providers to create the composite from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.#ctor(yWorks.yFiles.UI.Input.IPortCandidateProvider[])">
      <summary>
            Creates a composite out of the given providers.
            </summary>
      <param name="providers">The providers to create the composite from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="target">The opposite port candidate.</param>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for source port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which source port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all target port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="source">The opposite port candidate.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CompositePortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for target port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which target port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.CreateBendInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> used for recognizing the gesture of creating
            <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>s in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.#ctor">
      <summary>
            Creates a new instance that will use the IGraph from the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext"></see>
            to create bends in.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a new instance using the given graph to create the bends in.
            </summary>
      <param name="graph">The graph to create the bends in and query the edges from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.ArmedCursor">
      <summary>
            Gets or sets the cursor to use when this mode is in "armed" state.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.ArmValidBegin(yWorks.Support.Transition)">
      <summary>
            Called when the state machine has determined that at the current position it is valid to
            start a bend creation gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.BeginHitTestable">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines where bends may be created.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.CreateBendInputMode.BendCreated">
      <summary>
            The event that will be triggered once a bend creation gesture has been recognized.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.CancelRecognizer">
      <summary>
            Gets or sets the "cancel" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.CreateBend(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates the bend.
            </summary>
      <param name="hitEdge">The hit edge.</param>
      <param name="location">The coordinates of the hit.</param>
      <returns>The created bend or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.CreateInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the upcoming <see cref="M:yWorks.yFiles.UI.Input.IBendCreator.CreateBend(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)"></see> call 
            in <see cref="M:yWorks.yFiles.UI.Input.CreateBendInputMode.CreateBend(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)"></see>.
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.DisarmValidBegin(yWorks.Support.Transition)">
      <summary>
            Called when the state machine has determined that at the current position it is no
            more valid to start a bend creation gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.DraggedRecognizer">
      <summary>
            Gets or sets the "dragged" recognizer.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.GetEdge(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the edge at the given coordinate.
            </summary>
      <param name="location">The coordinates.</param>
      <returns>The edge that has been hit.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.Graph">
      <summary>
            Gets the Graph this mode is acting upon.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="cancelledState">The cancelled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.IsValidBegin(System.Object,System.EventArgs)">
      <summary>
            Determines whether the current location is valid to begin a bend creation gesture.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.Location">
      <summary>
            Gets the location where the bend creation gesture was initialized.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.OnBendCreated(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Triggers the <see cref="E:yWorks.yFiles.UI.Input.CreateBendInputMode.BendCreated"></see> event.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.OnGraphChanged(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.CreateBendInputMode.Graph"></see> property changes.
            </summary>
      <param name="oldGraph">The old graph instance.</param>
      <param name="newGraph">The new graph instance.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.PressedRecognizer">
      <summary>
            Gets or sets the "pressed" state recognizer.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.ReleasedRecognizer">
      <summary>
            Gets or sets the "released" recognizer.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateBendInputMode.ReturnExistingBend">
      <summary>
            Gets or sets a property that determines whether this mode should
            return and existing bend in <see cref="M:yWorks.yFiles.UI.Input.CreateBendInputMode.CreateBend(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)"></see>
            if there is one found at the given location.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateBendInputMode.SetGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Set a new Graph for this mode.
            </summary>
      <param name="newGraph">The new graph.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.CreateEdgeInputMode">
      <summary>
            A specialized <see cref="T:yWorks.Canvas.Input.IInputMode"></see> used for creating edges between nodes
            in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> displayed in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.#ctor">
      <summary>
            Creates a new instance that will use the IGraph from the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext"></see>
            to create edges in.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a new instance using the given graph to create the edges in.
            </summary>
      <param name="graph">The graph to create the edge in and query the nodes from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AddDummyEdgeBend(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a bend to the dummy edge.
            </summary>
      <param name="location">The location of the bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AssignBends(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})">
      <summary>
            Assigns the given bend points to the newly created edge.
            </summary>
      <param name="graph">The graph that contains the edge.</param>
      <param name="edge">The edge.</param>
      <param name="pointList">The list of points including the source and target point.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AssignEdgeStyle(yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Assigns the style to the <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DummyEdge"></see> to use during the gesture.
            </summary>
      <param name="style">The style to assign.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AssignSourcePortPosition(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Assigns the port position and owner to the <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DummyEdge"></see>.
            </summary>
      <param name="portOwner">The owner to use for the source side.</param>
      <param name="locationModelParameter">The location of the port to use.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.BeginHitTestable">
      <summary>
            Gets or sets a <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines, whether it is valid to start
            an edge creation gesture here.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.BendCreationAllowed">
      <summary>
            Determines whether or not to allow the creation of bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Cancel(yWorks.Support.Transition)">
      <summary>
            Transition that cleans up everything that has been built until now.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CancelRecognizer">
      <summary>
            Gets or sets the property that determines cancel events.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ClearDummyEdgeBends">
      <summary>
            Callback that clears the dummy edge's bends.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ConnectToCandidatesOnly">
      <summary>
            Gets or sets a property that determines whether this mode allows
            connecting to <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s only.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateBend(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Actually creates the bend at the given location.
            </summary>
      <param name="location">The coordinates to create the bend at.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateBend(yWorks.Support.Transition)">
      <summary>
            Adds another bend to the edge's path.
            </summary>
      <param name="t">
      </param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateBendRecognizer">
      <summary>
            The event recognizer that recognizes the creation
            of a bend.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateDragPoint">
      <summary>
            Factory method for the DragPoint property. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateDummyEdge">
      <summary>
            Creates the dummy edge that will be displayed by the input mode during the creation.
            </summary>
      <returns>An <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> implementation that can be used as a dummy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateDummyTargetNode">
      <summary>
            Factory method that initially creates the dummy node that will be used to drag around the dummy edge's end.
            </summary>
      <returns>A </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdge(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})">
      <summary>
            Callback at the end of the edge creation process.
            </summary>
      <returns>The edge created or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Callback used by <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdge(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})"></see> if both <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SourcePortCandidate"></see>
            and <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.TargetPortCandidate"></see> have been set.
            </summary>
      <param name="graph">The graph to create the edge for.</param>
      <param name="sourcePortCandidate">The candidate to use for the source.</param>
      <param name="targetPortCandidate">The candidate to use for the target.</param>
      <returns>The edge created or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that creates the edge if no <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.TargetPortCandidate"></see> and <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SourcePortCandidate"></see>
            have been determined but a <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetSourceNode(yWorks.Canvas.Geometry.Structs.PointD)">source node</see> and a <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetNode(yWorks.Canvas.Geometry.Structs.PointD)">target node.</see></summary>
      <param name="graph">The graph instance to create the edge for.</param>
      <param name="sourceNode">The source node of the edge.</param>
      <param name="targetNode">The target node of the edge.</param>
      <returns>The edge created or <c>null</c> if the edge could not be created.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdgeCreationInputModeContext">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> for use
            with the port candidates queries for the upcoming
            edge creation operation and the actual edge creation
            </summary>
      <returns>An instance of <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>
            that is configured for this mode.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateStartPoint">
      <summary>
            Factory method for the StartPoint property. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateVisuals">
      <summary>
            Creates a <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> that creates Visuals for the <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DummyEdge"></see>
            and the port candidates.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DetermineEdgeStyle">
      <summary>
            Determines the edge style to <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AssignEdgeStyle(yWorks.yFiles.UI.Drawing.IEdgeStyle)">assign to the dummy edge</see>.
            </summary>
      <returns>The edge style to <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.AssignEdgeStyle(yWorks.yFiles.UI.Drawing.IEdgeStyle)">assign</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DoStartEdgeCreation(yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Synthetically starts the interactive edge creation process using the provided
            <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see> as the source port.
            </summary>
      <param name="sourcePortCandidate">The source port candidate to use for the edge creation.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DraggedRecognizer">
      <summary>
            The event recognizer that recognizes the initial dragging gesture that
            is used to initiate the creation after the preparation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DragPoint">
      <summary>
            Gets the dragging point for the edge creation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DummyEdge">
      <summary>
            Gets or sets the dummy edge instance that will be used to render a preview of the edge
            to be created.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EdgeCreated">
      <summary>
            Event that is triggered after an edge has been created by this mode.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EdgeCreationStarted">
      <summary>
            Occurs when the edge creation started has started.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EdgeStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> to use for newly created edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EndHitTestable">
      <summary>
            Gets or sets a <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines, whether it is valid to finish
            an edge creation gesture here.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EnforceBendCreationRecognizer">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            instance that will be queried to decide if bend creation is enforced.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.FinishRecognizer">
      <summary>
            The event recognizer that recognizes the finishing gesture that
            is used to end the edge creation on the target node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ForceSnapToCandidate">
      <summary>
            Gets or sets a property that determines whether the mouse should
            be forced to snap to the nearest valid port candidate if the mouse hovers
            over a target node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetChildInputModeContext">
      <summary>
            Returns the 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetClosestCandidate(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Input.IPortCandidate},yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the closest <see cref="P:yWorks.yFiles.UI.Input.IPortCandidate.Valid"></see> candidate given a number of <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s and 
            a location in world coordinates.
            </summary>
      <param name="candidates">The candidates to find the closest from.</param>
      <param name="dragPoint">The location of the mouse in world coordinates.</param>
      <returns>The candidate to use or <c>null</c> if no candidate satisfies the needs</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetClosestSourceCandidate(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Input.IPortCandidate},yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the closest candidate given a number of <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s and 
            a location in world coordinates.
            </summary>
      <param name="candidates">The candidates to find the closest from.</param>
      <param name="location">The location of the mouse in world coordinates.</param>
      <returns>The candidate to use or <c>null</c> if no candidate satisfies the needs</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetClosestTargetCandidate(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Input.IPortCandidate},yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the closest target candidate given a number of <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s and 
            a location in world coordinates.
            </summary>
      <param name="candidates">The candidates to find the closest from.</param>
      <param name="dragPoint">The location of the mouse in world coordinates.</param>
      <returns>The candidate to use or <c>null</c> if no candidate satisfies the needs or 
            <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsBendCreationEnforced"></see> yields <see langword="true"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetNode(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Retrieves the node at a given position in world coordinates.
            </summary>
      <param name="location">The position in world coordinates.</param>
      <returns>The node or <c>null</c> if no suitable node was found.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetNodes">
      <summary>
            Retrieves the nodes from the graph in the order of their importance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetSourceNode(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the source node for a given point in world coordinates.
            </summary>
      <param name="sourcePoint">The location of the mouse at the beginning of the gesture.</param>
      <returns>The node to use for the source node or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetSourcePortCandidate(yWorks.yFiles.UI.Input.IPortCandidateProvider,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the best matching source port <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see> given a provider
            and the current location.
            </summary>
      <param name="provider">The provider for the candidates.</param>
      <param name="location">The location where the gesture was initiated.</param>
      <returns>The candidate to use or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetSourcePortCandidateProvider(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Retrieves the port candidate provider instance given a source node.
            </summary>
      <param name="node">The node to find the candidates for.</param>
      <returns>A provider instance or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetNode(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the target node for a given point in world coordinates.
            </summary>
      <param name="targetPoint">The location of the mouse at the end of the gesture.</param>
      <returns>The node to use for the target node or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetPortCandidateProvider(yWorks.yFiles.UI.Input.IPortCandidate,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Retrieves the <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> instance that provides
            the possible candidates for the target of the edge given the current source candidate.
            </summary>
      <param name="sourceCandidate">The source candidate that has been chosen for the edge creation.</param>
      <param name="dragPoint">The location of the mouse.</param>
      <returns>The provider to get the port candidates from.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetPortCandidateProvider(yWorks.yFiles.UI.Input.IPortCandidate,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Retrieves the port candidate provider instance given a source port candidate and a possible target node.
            </summary>
      <param name="sourceCandidate">The current source port candidate.</param>
      <param name="targetNode">The node to find the candidates for.</param>
      <param name="dragPoint">The location of the mouse.</param>
      <returns>A provider instance or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetPortCandidates(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Retrieves the target port candidates for a given location in world coordinates.
            </summary>
      <param name="dragPoint">The location of the mouse in world coordinates.</param>
      <returns>A possibly emtpy enumeration over all target port candidates.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Graph">
      <summary>
            Gets the Graph this mode is acting upon.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.InitializeStateMachine(yWorks.Support.StateMachine,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State,yWorks.Support.State)">
      <summary>
            Called to initialize the state machine.
            </summary>
      <param name="machine">The machine to initialize and configure</param>
      <param name="startState">The start state to use.</param>
      <param name="canceledState">The canceled state to use.</param>
      <param name="stoppedState">The stopped state to use.</param>
      <param name="finishedState">The finished state to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into the given canvas.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsBendCreationEnforced">
      <summary>
            Callback that decides whether at the current state of the gesture
            the user wants to enforce the creation of a bend rather than finish
            the edge creation.
            </summary>
      <returns>Whether to enforce the creation of a bend.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsCancelGesture(System.Object,System.EventArgs)">
      <summary>
            Determines whether the current event cancels the gesture.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsRemoveBendEvent(System.Object,System.EventArgs)">
      <summary>
            Determines whether the current event removes the last bend.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsSourceNodeDraggingFinished(System.Object,System.EventArgs)">
      <summary>
            Determines whether the current event indicates the dragging inside the source node
            is finished.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsValidBegin(System.Object,System.EventArgs)">
      <summary>
            Determines whether the current mouse state is valid for 
            beginning the edge creation gesture.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsValidBend(System.Object,System.EventArgs)">
      <summary>
            Determines whether it is allowed to currently create a bend.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.IsValidEnd(System.Object,System.EventArgs)">
      <summary>
            Determines whether the edge gesture may end at this state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.MovedOrDraggedRecognizer">
      <summary>
            The event recognizer that recognizes the movement of
            the end point of the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.NodeBasedEdgeCreator">
      <summary>
            Gets or sets the node based edge creation callback.
            </summary>
      <exception cref="T:System.ArgumentNullException">If the argument is <see langword="null"></see></exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.NodeComparer">
      <summary>
            Gets or sets the <c>IComparer&lt;INode&gt;</c> instance that is used in <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetNode(yWorks.Canvas.Geometry.Structs.PointD)"></see>
            to determine the hit order and which node is hit first.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.OnEdgeCreated(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Called by <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.CreateEdge(yWorks.Canvas.Model.IListEnumerable{yWorks.Canvas.Geometry.IPoint})"></see>
            after the edge has been finalized.
            </summary>
      <param name="args">The event argument holding the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.OnEdgeCreationStarted(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.CreateEdgeInputMode.EdgeCreationStarted"></see> event when the gesture for creating an edge has been initialized.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance containing the dummy edge that will be used during edge creation.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.OnGraphChanged(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Graph"></see> property changes.
            </summary>
      <param name="oldGraph">The old graph instance.</param>
      <param name="newGraph">The new graph instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.OnPortAdded(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.CreateEdgeInputMode.PortAdded"></see> event if the mode has <see cref="M:yWorks.yFiles.UI.Model.IGraph.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle,System.Object)">added a port</see>
            for the source or target node to complete the edge creation.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance containing the port that has been added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.OnTargetLocationChanged(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Updates the visual representation and port candidates.
            </summary>
      <param name="dragPoint">
      </param>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.CreateEdgeInputMode.PortAdded">
      <summary>
            Occurs when this instance <see cref="M:yWorks.yFiles.UI.Model.IGraph.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle,System.Object)">adds a port</see> to the source or target node during completion of the edge
            creation gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.PortBasedEdgeCreator">
      <summary>
            Gets or sets the ports based edge creation callback.
            </summary>
      <exception cref="T:System.ArgumentNullException">If the argument is <see langword="null"></see></exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.PrepareRecognizer">
      <summary>
            The event recognizer that recognizes the starting gesture that
            is used to prepare the edge creation on the source node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.RemoveBendRecognizer">
      <summary>
            Gets or sets the property that determines bend removal events.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.RemoveLastBend">
      <summary>
            Actually removes the last bend.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SelfloopCreationAllowed">
      <summary>
            Determines whether or not to allow the creation of self loops.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SetDragPoint(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Updates the drag point.
            </summary>
      <param name="location">The new coordinates.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SetGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Set a new Graph for this mode.
            </summary>
      <param name="newGraph">The new graph.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ShowPortCandidates">
      <summary>
            Determines whether or not to display possible port candidates during the creation of the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SnapDistance">
      <summary>
            Gets or sets the distance in the view coordinate system that
            determines how far the mouse should be snapped to 
            a port candidate if <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SnapToTargetCandidate"></see> is enabled.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SnapToTargetCandidate">
      <summary>
            Determines whether or not the edge's end point should snap to the current target port candidate
            during the creation of the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SnapToTargetCandidateOwner">
      <summary>
            Determines whether or not the edge's port should snap to the current target port candidate owner
            during the creation of the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.SourcePortCandidate">
      <summary>
            Gets or sets the candidate for the <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see>
            of the edge to be created.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.StartCreateEdge">
      <summary>
            Called at the beginning of the edge creation gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.StartPoint">
      <summary>
            Gets the starting point for the edge creation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.TargetPortCandidate">
      <summary>
            Gets or sets the current candidate for the <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>
            of the edge to be created.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">the context</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.UpdateTargetPortOwner(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Updates the <see cref="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.DummyEdge"></see> to reflect the current target port candidate.
            </summary>
      <param name="oldOwner">The old owner instance.</param>
      <param name="newOwner">The new owner instance.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.UseHitNodeTargetCandidatesOnly">
      <summary>
            Gets or sets a property that determines whether this mode should
            use only the <see cref="M:yWorks.yFiles.UI.Input.CreateEdgeInputMode.GetTargetPortCandidates(yWorks.Canvas.Geometry.Structs.PointD)">target port candidates</see>
            of the node the mouse currently hovers over.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ValidBeginCursor">
      <summary>
            Sets the cursor that indicates a valid place to begin an edge creation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ValidBendCursor">
      <summary>
            Sets the cursor that indicates a valid place to create a bend.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ValidBendHitTestable">
      <summary>
            Gets or sets a <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that determines, whether it is valid to create a
            bend here.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.ValidEndCursor">
      <summary>
            Sets the cursor that indicates a valid place to finish creation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.CreateEdgeInputMode.Visuals">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> that renders the edge and port candidates.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider"></see>
            interface that returns the current source and target ports
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider"></see> class
            given the provided edge.
            </summary>
      <param name="edge">The edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider.CreateCandidate(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates a candidate from the given existing port instance.
            </summary>
      <param name="graph">The graph.</param>
      <param name="port">The port</param>
      <returns>A candidate.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider.edge">
      <summary>
            The edge to return candidates for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.CurrentEdgePortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.DefaultBendCreator">
      <summary>
            Simple default implementations of the <see cref="T:yWorks.yFiles.UI.Input.IBendCreator"></see>
            interface used during the creation of bends
            in the UI.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultBendCreator.#ctor(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.DefaultBendCreator"></see> class for the given edge.
            </summary>
      <param name="edge">The edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultBendCreator.CreateBend(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a bend at the given graph for the given edge at the position supplied.
            </summary>
      <param name="context">The context for which the bend should be created.</param>
      <param name="graph">The graph, the edge belongs to.</param>
      <param name="edge">The edge.</param>
      <param name="location">The preferred coordinates of the bend.</param>
      <returns>The index of the bend in the edges' <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> or <c>-1</c> if no bend has been created.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.DefaultBendCreator.NoBends">
      <summary>
            A static instance that does not create any bends.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.DefaultEdgePortsCandidateProvider">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider"></see>
            interface that returns the candidates provided by the 
            source and target node's <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> implementations
            or the existing edge's port, if no such provider is registered.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultEdgePortsCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.DefaultEdgePortsCandidateProvider"></see> class
            given the provided edge.
            </summary>
      <param name="edge">The edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultEdgePortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultEdgePortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.DefaultPortCandidate">
      <summary>
            A simple default implementation of an <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.#ctor(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates a candidate using the given port as the template.
            </summary>
      <param name="port">The port to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.#ctor(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates a candidate using the first port of the owner as a template.
            </summary>
      <param name="owner">The owner to use the first port.</param>
      <exception cref="T:System.IndexOutOfRangeException">If the owner has no ports.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.#ctor(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Constructor for instance-less implementations.
            </summary>
      <param name="owner">The owner.</param>
      <param name="location">The location.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance">
      <summary>
            Returns the instance provided to the constructor or to the <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.SetInstance(yWorks.yFiles.UI.Model.IPort)">setter</see>.
            </summary>
      <returns>
            The port instance to use if this candidate has been chosen. This method may return <c>null</c> to
            indicate that the client should create an appropriate port itself.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.GetInstance">
      <summary>
            Returns the instance provided to the constructor or to the <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.SetInstance(yWorks.yFiles.UI.Model.IPort)">setter</see>.
            </summary>
      <returns>
            The instance to use or <c>null</c> otherwise.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.DefaultPortCandidate.LocationModelParameter">
      <summary>
            Gets or set the absolute location in the world coordinate system
            that shall be used for the port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.DefaultPortCandidate.Owner">
      <summary>
            Gets or sets the owner of the port to be created.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.SetInstance(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the instance that will be returned by <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.GetInstance"></see> and <see cref="M:yWorks.yFiles.UI.Input.DefaultPortCandidate.CreateInstance"></see>.
            </summary>
      <param name="port">A port that already exists in the graph or <c>null</c>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.DefaultPortCandidate.Type">
      <summary>
            Gets or set the type of this candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.DefaultPortCandidate.Valid">
      <summary>
            Determines whether this candidate is a valid depending on the context it has
            been obtained from.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.EditLabelHelper">
      <summary>
            Simple default implementation of the <see cref="T:yWorks.yFiles.UI.Input.IEditLabelHelper"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.EditLabelHelper"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.#ctor(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.EditLabelHelper"></see> for a given 
            label owner instance.
            </summary>
      <param name="owner">The owner, probably an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> or an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.AddLabel(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel@)">
      <summary>
            Helper method that will be called for <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>s.
            </summary>
      <param name="inputModeContext">The context in which the label is being created or edited.</param>
      <param name="label">A label instance whose style, label model parameter and preferred size will be used for creating new labels.</param>
      <returns>
            Always <see langword="true"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.ConfigureTextEditorInputMode(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.TextEditorInputMode,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            This implementation does nothing.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.CreateNewLabel(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Factory method that creates a new label and associates with it
            a <see cref="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetLabelParameter(yWorks.Canvas.Input.IInputModeContext)">label model parameter</see>, a <see cref="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetPreferredSize(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel)">preferred size</see>,
            and a <see cref="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetLabelStyle(yWorks.Canvas.Input.IInputModeContext)">style</see>.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <returns>A dummy label that holds the style, parameter, and preferred size.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.EditLabel(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel@)">
      <summary>
            Helper method that will be called for <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>s.
            </summary>
      <param name="inputModeContext">The context in which the label is being created or edited.</param>
      <param name="label">A label instance whose style, label model parameter and preferred size will be used for creating new labels.</param>
      <returns>
            Always <see langword="true"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetLabelParameter(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Determines the label model parameter to use for the label, depending on the <see cref="P:yWorks.yFiles.UI.Input.EditLabelHelper.Owner"></see>.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <returns>The style to use or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetLabelStyle(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Determines the style to use for the label, depending on the <see cref="P:yWorks.yFiles.UI.Input.EditLabelHelper.Owner"></see>.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <returns>The style to use or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EditLabelHelper.GetPreferredSize(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Gets the preferred size for the label.
            </summary>
      <param name="inputModeContext">The input mode context.</param>
      <param name="label">The label to get the preferred size from.</param>
      <returns>The size to use or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.EditLabelHelper.Graph">
      <summary>
            Gets or sets the graph instance to retrieve the default values from.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.EditLabelHelper.Owner">
      <summary>
            Gets or sets to use for the callbacks.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider">
      <summary>
            A generic implementation of the <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> interface that provides
            no candidates.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="target">The opposite port candidate.</param>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for source port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which source port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all target port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="source">The opposite port candidate.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for target port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which target port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.EmptyPortsCandidateProvider.Instance">
      <summary>
            A static instance of this class.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            interface that returns the ports that exist in the
            given <see cref="P:yWorks.yFiles.UI.Model.IPortOwner.Ports"></see>'s <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            collection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider"></see> class
            provided the given owner.
            </summary>
      <param name="portOwner">The owner of the port collection.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.CreateCandidate(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Factory method that creates a candidate for the given port.
            </summary>
      <param name="port">The port to create a candidate for.</param>
      <returns>A new instance of <see cref="T:yWorks.yFiles.UI.Input.DefaultPortCandidate"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.CreateList(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates the list by adding a candidate for each existing port.
            </summary>
      <param name="graph">The graph to use for creating a new port.</param>
      <returns>A list of port candidates, each wrapping an existing port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="target">The opposite port candidate.</param>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for source port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which source port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all target port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="source">The opposite port candidate.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for target port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which target port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.ExistingPortsCandidateProvider.portOwner">
      <summary>
            The owner of the ports.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.GraphCommands">
      <summary>
            The <c>GraphCommands</c> class exposes a standard set of <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>-related editing and navigation 
            <see cref="T:System.Windows.Input.RoutedUICommand">commands</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.AddLabelCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem)">add another label</see> to the <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>that is specified by the <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.AdjustGroupNodeSizeCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustGroupNodeSize(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})">adjust the size of the selected group nodes</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.BeginEdgeCreationCommand">
      <summary>
            This is an <see cref="T:System.Windows.Input.RoutedUICommand"></see> that instances <see cref="T:yWorks.yFiles.UI.Input.CreateEdgeInputMode"></see> instances
            can satisfy requests for if they have been <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">installed</see>
            in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.CollapseGroupCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseGroup(yWorks.yFiles.UI.Model.INode)">collapse</see> the currently selected group nodes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.DeselectAllCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.Canvas.Model.ISelectionModel`1.Clear">clear the selection</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.DeselectItemCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            deselect the item that is specified by the <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.EditLabelCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.EditLabel(yWorks.yFiles.UI.Model.ILabel)">edit the label</see> that is specified by the <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.EnterGroupCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot">switch the local root</see> of the current <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>
            view to the given group node.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.ExitGroupCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot">exit the current local root</see> of the current <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>
            view to the given parent view.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.ExpandGroupCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandGroup(yWorks.yFiles.UI.Model.INode)">expand the currently selected group nodes</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.GroupSelectionCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.GroupSelection">group the currently selected items</see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.SelectItemCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            select the item that is specified by the <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.ToggleGroupStateCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ToggleGroupNodeState(yWorks.yFiles.UI.Model.INode)">toggle</see> the collapsed/expanded state of currently selected group nodes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.ToggleItemSelectionCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            toggle the selection state of the item that is specified by the <see cref="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.GraphCommands.UngroupSelectionCommand">
      <summary>
            A <see cref="T:System.Windows.Input.RoutedUICommand">routed UICommand</see> that can be 
            <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">executed</see> from within the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> to
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.UngroupSelection">ungroup the currently selected items</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.GraphEditorInputMode">
      <summary>
            A complex <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that can be used in a <see cref="T:yWorks.Canvas.CanvasControl"></see>
            or <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphControl"></see> to edit an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.#ctor">
      <summary>
            Creates a new instance that is not bound to an existing graph or selection, initially.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Creates a new instance of the <see cref="T:yWorks.yFiles.UI.Input.GraphEditorInputMode"></see> class.
            </summary>
      <param name="graph">The graph to operate on.</param>
      <param name="selectionModel">The selection model used for the graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Adds a new label to the given item interactively.
            </summary>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustContentRect">
      <summary>
            Updates the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> using
            <see cref="M:yWorks.Canvas.CanvasControl.UpdateContentRect"></see> and
            <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ContentRectMargins"></see></summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustContentRectPolicy">
      <summary>
            Gets or sets a property that determines whether this instance should 
            automatically adjust the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see>
            if the graph changes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustGroupNodeSize(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})">
      <summary>
        <see cref="M:yWorks.yFiles.UI.Model.IGroupedGraph.AdjustGroupNodeBounds(yWorks.yFiles.UI.Model.INode)">Adjusts the size</see> of the group nodes in the enumerable.
            </summary>
      <param name="nodes">The nodes to adjust their sizes.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustGroupNodeSizeAllowed">
      <summary>
            Determines whether Ctrl-Shift-G-presses should result in calls to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustGroupNodeSize(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustGroupNodeSizes">
      <summary>
        <see cref="M:yWorks.yFiles.UI.Model.IGroupedGraph.AdjustGroupNodeBounds(yWorks.yFiles.UI.Model.INode)">Adjusts the size</see> of the selected group nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustToSizeConstraints(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Adjusts the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>
            to adhere to possible <see cref="T:yWorks.Canvas.Input.ISizeConstraintProvider`1">size constraints</see>.
            </summary>
      <param name="node">The node to possible adjust the size.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.AutoRemoveEmptyLabels">
      <summary>
            Gets or sets a value indicating whether this mode should automatically 
            <see cref="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.ILabel)">remove labels</see> from the graph
            when a label text has been edited and the label text is empty.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.AutoSelectSelfloopBends">
      <summary>
            Gets or sets a property that determines whether clicking on a node
            should automatically select all bends of self loops adjacent to that node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.BendCreationAllowed">
      <summary>
            Gets or sets a property that determines whether <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateBendInputMode">bend creation</see>operation 
            should be <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ChildInputModeContextLookup(System.Type)">
      <summary>
            Callback method that will be used by the <see cref="M:yWorks.Canvas.Input.MultiplexingInputMode.CreateChildInputModeContext">child IInputModeContext</see></summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ClearSelectionAllowed">
      <summary>
            Gets or sets a property that determines whether pressing Ctrl-D
            triggers a call to <see cref="M:yWorks.Canvas.Input.MainInputMode.ClearSelection"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Click(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Actually performs the click operation on the given item for the current context.
            </summary>
      <param name="context">The context where the click appeared</param>
      <param name="item">The item that has been clicked.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ClickHitTestOrder">
      <summary>
            Gets or sets the order of the types of items that should be used to determine what 
            item has been clicked during <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ClickSelectableItems">
      <summary>
            Gets or set a property that determines which types of 
            items should be selectable through <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)">mouse clicks.</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ClipboardOperationsAllowed">
      <summary>
            Gets or sets a property that determines whether clipboard operations with the usual shortcuts are enabled on the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CloseLabelEditor(System.Boolean)">
      <summary>
            Closes the label editor if it is currently open.
            </summary>
      <param name="cancel">Whether to cancel the editor and discard changes.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ContentRectMargins">
      <summary>
            Gets or sets the margins to use for <see cref="M:yWorks.Canvas.CanvasControl.UpdateContentRect(yWorks.Canvas.Geometry.Structs.InsetsD)"></see>
            in <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.AdjustContentRect"></see> calls.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ContextMenuItems">
      <summary>
            Gets the types of the items that should be queried a context menu for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Copy">
      <summary>
            Copies the currently selected elements to the clipboard.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateBendInputMode">
      <summary>
            Gets or sets the CreateBendInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateBendModePriority">
      <summary>
            Gets or sets the CreateBendInputModePriority property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateCreateBendInputMode">
      <summary>
            Factory method for the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateBendInputMode"></see> property.
            </summary>
      <returns>a new instance of <c>CreateBendInputMode</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateCreateEdgeInputMode">
      <summary>
            Factory method for the CreateEdgeInputMode property.
            </summary>
      <returns>a new instance of CreateEdgeInputMode</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateDefaultLabelConfiguration(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter@,yWorks.yFiles.UI.Drawing.ILabelStyle@,System.Nullable{yWorks.Canvas.Geometry.Structs.SizeD}@)">
      <summary>
            Callback method to create a custom label configuration when a new label should be created.
            </summary>
      <param name="labeledItem">The item to create a label for.</param>
      <param name="param">The model parameter to use for the creation.</param>
      <param name="style">The style to use for the created label.</param>
      <param name="preferredSize">The preferred size to use. May be <see langword="null"></see> to indicate that the size
            should be determined automatically after the creation of the label.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateEdgeInputMode">
      <summary>
            Gets or sets the CreateEdgeInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateEdgeModePriority">
      <summary>
            Gets or sets the CreateEdgeInputModePriority property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateInputModeController">
      <summary>
            Creates the <see cref="T:yWorks.Canvas.Model.InputModeController`1"></see> that will
            be used to coordinate the selection and the handles, etc.
            </summary>
      <returns>
            An instance of <see cref="T:yWorks.yFiles.UI.Input.GraphInputModeController"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateLabel(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Interactively creates a new label for the provided labeled item.
            </summary>
      <param name="labeledItem">The item to create a new label for.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateMoveLabelInputMode">
      <summary>
            Factory method for the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MoveLabelInputMode"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Input.MoveLabelInputMode"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateMoveUnselectedInputMode(yWorks.Canvas.Input.IEventRecognizer)">
      <summary>
            Helper method that can be used to create a <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see>
            instance that can be used to move unselected model items.
            </summary>
      <param name="modifierRecognizer">Use this instance to make this mode work under certain conditions only. <see langword="null"></see>
            for default behavior, one of the <see cref="T:yWorks.Canvas.Input.KeyEvents"></see> constants, e.g. for alternate behavior.</param>
      <returns>A <see cref="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode"></see> instance that uses the <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see> instances of 
            the items that are hit at the position of the cursor, regardless of their selection state.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateNavigationInputMode">
      <summary>
            Factory method for the NavigationInputMode property.
            </summary>
      <returns>a new instance of NavigationInputMode</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateNode(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a node given a certain click point.
            </summary>
      <param name="clickPoint">The point where the mouse had been clicked.</param>
      <returns>The newly created node or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateReparentNodeHandler">
      <summary>
            Factory method for the ReparentNodeHandler property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ReparentNodeHandler"></see> property.
            </summary>
      <returns>a new instance of <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ReparentNodeHandler"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateTextEditorInputMode">
      <summary>
            Factory method for the TextEditorInputMode property.
            </summary>
      <returns>a new instance of TextEditorInputMode</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Cut">
      <summary>
            Cuts and inserts the currently selected elements to the clipboard.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.DeletableItems">
      <summary>
            Gets or set a property that determines which types of 
            items may be deleted using the <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.DeleteSelection"></see> action.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.DeleteSelection">
      <summary>
            This method deletes the currently selected elements.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.DetailSelectionRecognizer">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            instance that will be queried to decide if a click should select the item that
            is currently visible under the mouse cursor, without giving more important items
            higher priority.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.DragBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Initiates the <see cref="P:yWorks.Canvas.Input.MainInputMode.HandleInputMode"></see> to drag the given bend.
            </summary>
      <param name="bend">The bend to drag.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.EdgeCreationAllowed">
      <summary>
            Gets or sets a property that determines whether <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateEdgeInputMode">edge creation</see>operation 
            should be <see cref="P:yWorks.Canvas.Input.IConcurrentInputMode.Enabled">enabled</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.EditLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Triggers the editing of the given label.
            </summary>
      <param name="label">The label to edit.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.FindItem(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.GraphItemTypes[])">
      <summary>
            Used as a callback to find the hit item underneath a certain point.
            </summary>
      <param name="location">The location to test.</param>
      <param name="tests">An array of <see cref="T:yWorks.yFiles.UI.Model.GraphItemTypes"></see> values that
            encode for which model items the hit test should be performed.</param>
      <returns>The item that has been found for the location or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.FindItem(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.GraphItemTypes[],System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Used as a callback to find the hit item underneath a certain point.
            </summary>
      <param name="location">The location to test.</param>
      <param name="tests">An array of <see cref="T:yWorks.yFiles.UI.Model.GraphItemTypes"></see> values that
            encode for which model items the hit test should be performed.</param>
      <param name="predicate">The predicate that can be used to filter the results. May be <see langword="null"></see>.</param>
      <returns>The item that has been found for the location or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.FindItems(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.GraphItemTypes[],System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Used as a callback to find the items hit underneath a certain point.
            </summary>
      <param name="location">The location to test.</param>
      <param name="tests">An array of <see cref="T:yWorks.yFiles.UI.Model.GraphItemTypes"></see> values that
            encode for which model items the hit test should be performed for prioritizing.</param>
      <param name="predicate">The predicate that can be used to filter the results. May be <see langword="null"></see>.</param>
      <returns>An enumerable over the items that have been found for the location.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.FocusableItems">
      <summary>
            Gets or sets the items that can be given focus via the <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.Graph">
      <summary>
            Gets the Graph this mode is acting upon.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphControl">
      <summary>
            Gets the GraphControl this mode is working on or <see langword="null"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphInputModeController">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Input.GraphInputModeController"></see>
            that is used by this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphSelection">
      <summary>
            Returns the <see cref="P:yWorks.Canvas.Input.MainInputMode.SelectionModel"></see>
            as an <see cref="T:yWorks.yFiles.UI.Model.IGraphSelection"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.GroupSelection">
      <summary>
            Creates a new group for all of the currently selected elements.
            </summary>
      <returns>The newly created group node or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GroupSelectionAllowed">
      <summary>
            Determines whether Ctrl-G-presses should result in calls to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.GroupSelection"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.HitTestEnumerator">
      <summary>
            Gets or sets the HitTestEnumerator property. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Initialize">
      <summary>
            Performs one-time initialization of this instance. This method should not
            be invoked by subclasses. This will be done automatically upon first
            <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">installation</see> of this mode.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
             Installs this mode into the provided context.
            </summary>
      <param name="context">The context to install this mode in and retrieve the graph and selection instance from.</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.ItemClicked">
      <summary>
            Occurs when an item has been clicked.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelAdded">
      <summary>
            Occurs when this mode has triggered the addition of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>, e.g. in response to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateLabel(yWorks.yFiles.UI.Model.ILabeledItem)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelAddingAllowed">
      <summary>
            Gets or sets the LabelAddingAllowed property that determines whether the label editor
            will be automatically invoked if the Shift+F2 key is pressed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelEditableItems">
      <summary>
            Gets or set a property that determines which types of 
            items may have their <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnEditLabel">labels edited</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelEditingAllowed">
      <summary>
            Gets or sets the LabelEditingAllowed property that determines whether the label editor
            will be automatically invoked if the F2 key is pressed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelTextChanged">
      <summary>
            Occurs when this mode has triggered the edit of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>, e.g. in response to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.EditLabel(yWorks.yFiles.UI.Model.ILabel)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MarqueeSelectableItems">
      <summary>
            Gets or set a property that determines which types of 
            items should be selected during <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.MarqueeSelectElements(yWorks.Canvas.Geometry.Structs.RectD)">marquee selections</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.MarqueeSelectElements(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            This method will marquee select the items in the graph.
            </summary>
      <param name="marqueeRectangle">The selection rectangle</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MovableItems">
      <summary>
            Gets or set a property that determines which types of 
            items should be movable using the <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see>
            or <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MoveLabelInputMode"></see> respectively in case of labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MoveLabelInputMode">
      <summary>
            Gets or sets the MoveLabelInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MultiSelectionRecognizer">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            instance that will be queried to decide if a click is deemed a multi selection gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.NavigationInputMode">
      <summary>
            Gets or sets the NavigationInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.NavigationModePriority">
      <summary>
            Gets or sets the keyboard navigation mode priority.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeCreated">
      <summary>
            Occurs when this mode has created a node in response to user interaction.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeCreationAllowed">
      <summary>
            Gets or sets a property that determines whether <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateNode(yWorks.Canvas.Geometry.Structs.PointD)">node creation</see>operations 
            using the click gesture is allowed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeCreator">
      <summary>
            Gets or sets the callback that is responsible for creating a new node, e.g.
            in response to a mouse click.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeReparented">
      <summary>
            Occurs when a node has been reparented interactively.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnAddLabel">
      <summary>
            Callback that is invoked if the shift+F2 key is pressed and <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelAddingAllowed"></see> is
            set to <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)">
      <summary>
            Called when the mouse has been clicked at a given location.
            </summary>
      <param name="sender">The sender of the event, which is the <see cref="P:yWorks.Canvas.Input.MainInputMode.ClickInputMode"></see>.</param>
      <param name="e">The <see cref="T:yWorks.Canvas.Input.ClickEventArgs"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnContextMenuInputModePopulateContextMenu(System.Object,yWorks.Canvas.Input.PopulateContextMenuEventArgs)">
      <summary>
            Overridden to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.FindItems(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.GraphItemTypes[],System.Predicate{yWorks.Canvas.Model.IModelItem})">find the items</see>, that are <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ContextMenuItems"></see>,
            so that the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.PopulateItemContextMenu"></see> event can be triggered to serve the request.
            </summary>
      <param name="src">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnCreateBendInputModeBendCreated(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Callback that is called as soon as <see cref="T:yWorks.yFiles.UI.Input.CreateBendInputMode"></see>
            created a new bend.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnCreateBendInputModeChanged(yWorks.yFiles.UI.Input.CreateBendInputMode,yWorks.yFiles.UI.Input.CreateBendInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateBendInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldCreateBendInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newCreateBendInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnCreateEdgeInputModeChanged(yWorks.yFiles.UI.Input.CreateEdgeInputMode,yWorks.yFiles.UI.Input.CreateEdgeInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.CreateEdgeInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldCreateEdgeInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newCreateEdgeInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnDisabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>false</c>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnEditLabel">
      <summary>
            Callback that is invoked if the F2 key is pressed and <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelEditingAllowed"></see> is
            set to <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnEnabled">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.AbstractConcurrentInputMode.Enabled"></see> property changes to <c>true</c>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnGraphChanged(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.Graph"></see> property changes.
            </summary>
      <param name="oldGraph">The old graph instance.</param>
      <param name="newGraph">The new graph instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnGraphControlChanged(yWorks.yFiles.UI.GraphControl,yWorks.yFiles.UI.GraphControl)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphControl"></see> property changes.
            </summary>
      <param name="oldControl">The old control.</param>
      <param name="newControl">The new control.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnGraphSelectionChanged(yWorks.yFiles.UI.Model.IGraphSelection,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphSelection"></see> property changes.
            </summary>
      <param name="oldSelection">The old selection instance.</param>
      <param name="newSelection">The new selection instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnHandleInputModeChanged(yWorks.Canvas.Input.HandleInputMode,yWorks.Canvas.Input.HandleInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.HandleInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldHandleInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newHandleInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnItemClicked(yWorks.Support.ItemInputEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.ItemClicked"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Support.ItemInputEventArgs`1"></see> instance that contains the item that has been clicked.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnKeyboardInputModeChanged(yWorks.Canvas.Input.KeyboardInputMode,yWorks.Canvas.Input.KeyboardInputMode)">
      <summary>
            Called when the keyboard input mode changed.
            </summary>
      <param name="oldKeyboardInputMode">The old keyboard input mode.</param>
      <param name="newKeyboardInputMode">The new keyboard input mode.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnLabelAdded(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelAdded"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance that contains the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> that 
            has been added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnLabelTextChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.LabelTextChanged"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance that contains the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> that 
            has changed the text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnMarqueeSelectionInputModeMarqueeSelected(System.Object,System.EventArgs)">
      <summary>
            Callback used by <see cref="T:yWorks.Canvas.Input.MarqueeSelectionInputMode"></see> if the user
            has finished creating the marquee selection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnMouseHoverInputModeQueryToolTip(System.Object,yWorks.Canvas.Input.ToolTipQueryEventArgs)">
      <summary>
            Overridden to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.FindItems(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.GraphItemTypes[],System.Predicate{yWorks.Canvas.Model.IModelItem})">find the items</see>, that are <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ToolTipItems"></see>,
            so that the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.QueryItemToolTip"></see> event can be triggered to serve the request.
            </summary>
      <param name="src">The source of the event.</param>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnMoveInputModeChanged(yWorks.Canvas.Input.MoveInputMode,yWorks.Canvas.Input.MoveInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.Canvas.Input.MainInputMode.MoveInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldMoveInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newMoveInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnMoveLabelInputModeChanged(yWorks.yFiles.UI.Input.MoveLabelInputMode,yWorks.yFiles.UI.Input.MoveLabelInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MoveLabelInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldMoveLabelInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newMoveLabelInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnNavigationInputModeChanged(yWorks.yFiles.UI.Input.NavigationInputMode,yWorks.yFiles.UI.Input.NavigationInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.NavigationInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldNavigationInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newNavigationInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnNodeCreated(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeCreated"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance containing the created node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnNodeReparented(yWorks.yFiles.UI.Model.HierarchyEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.NodeReparented"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.yFiles.UI.Model.HierarchyEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnPopulateItemContextMenu(yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.PopulateItemContextMenu"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnQueryItemToolTip(yWorks.Canvas.Input.QueryItemToolTipEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.QueryItemToolTip"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnReparentNodeHandlerChanged(yWorks.yFiles.UI.Input.IReparentNodeHandler,yWorks.yFiles.UI.Input.IReparentNodeHandler)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ReparentNodeHandler"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldReparentNodeHandler">the old value, which may be <c>null</c> the first time</param>
      <param name="newReparentNodeHandler">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnTextEditorInputModeChanged(yWorks.Canvas.Input.TextEditorInputMode,yWorks.Canvas.Input.TextEditorInputMode)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.TextEditorInputMode"></see> property value changes 
            and after initialization of the field.
            </summary>
      <param name="oldTextEditorInputMode">the old value, which may be <c>null</c> the first time</param>
      <param name="newTextEditorInputMode">the new value</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Paste">
      <summary>
            Pastes the current clipboard contents.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.PasteDelta">
      <summary>
            The offset for paste operation if clipboard operations are enabled.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.PopulateItemContextMenu">
      <summary>
            Occurs when the <see cref="T:yWorks.Canvas.Input.ContextMenuInputMode">context menu</see> over an item is about to be opened to determine the
            contents of the <see cref="P:yWorks.Canvas.Input.ContextMenuInputMode.Menu"></see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.QueryItemToolTip">
      <summary>
            Occurs when the mouse is <see cref="T:yWorks.Canvas.Input.MouseHoverInputMode">hovering</see> over an item to determine the
            tool tip to display.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Redo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.Redo"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ReparentNodeHandler">
      <summary>
            Gets or sets the ReparentNodeHandler property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ReparentNodesAllowed">
      <summary>
            Gets or sets a property that determines whether the user
            may reparent nodes using a move gesture.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.SelectableItems">
      <summary>
            Gets or set a property that determines which types of 
            items should be selectable at all.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SelectAll">
      <summary>
            Clears the current selection and selects all nodes and bends in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SelectNodeAndSelfloopBends(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Selects the node and possible bends of selfloop edges.
            </summary>
      <param name="node">The node to select.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback that is used by this instance to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">set the current item</see>
            on the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see></summary>
      <param name="currentItem">The item to set as the new "current" item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Set a new Graph for this mode.
            </summary>
      <param name="newGraph">The new selection.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetGraphControl(yWorks.yFiles.UI.GraphControl)">
      <summary>
            Sets the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.GraphControl"></see> that is associated
            with this instance.
            </summary>
      <param name="graphControl">The control to set.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetGraphSelection(yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Set a new <see cref="T:yWorks.yFiles.UI.Model.IGraphSelection"></see> for this mode.
            </summary>
      <param name="newSelection">The new selection.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label's text after it has been <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.EditLabel(yWorks.yFiles.UI.Model.ILabel)">edited</see>.
            </summary>
      <param name="label">The label to set the text or remove.</param>
      <param name="text">The new text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldBeClickSelected(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback predicate method that is used by <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)"></see>
            to determine whether the given <paramref name="item"></paramref> can be <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Click(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Model.IModelItem)">clicked</see>.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item should be <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Click(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Model.IModelItem)">clicked</see> in response to
            a <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnClickInputModeClicked(System.Object,yWorks.Canvas.Input.ClickEventArgs)">detected mouse click</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldBeDeleted(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method that determines whether the given item should be
            deleted during <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.DeleteSelection"></see>.
            </summary>
      <param name="item">The item.</param>
      <returns>Whether to delete that item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldBeMarqueeSelectable(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Overridden to take <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MarqueeSelectableItems"></see> into account.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to possibly marquee select the item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldBeMovable(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether to make the item movable using <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see>.
            </summary>
      <param name="item">The item to check</param>
      <returns>Whether to allow the item being moved by <see cref="T:yWorks.Canvas.Input.MoveInputMode"></see> based on the setting of 
            the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.MovableItems"></see> property. 
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldInstallCommand(System.Windows.Input.ICommand)">
      <summary>
            Callback method that is used by <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnKeyboardInputModeChanged(yWorks.Canvas.Input.KeyboardInputMode,yWorks.Canvas.Input.KeyboardInputMode)"></see>
            to determine which of the built-in <see cref="T:System.Windows.Input.ICommand"></see>s to install.
            </summary>
      <param name="command">The command to install.</param>
      <returns>Whether to install this command.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldLabelBeEdited(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method that determines whether the label or the labels of the
            provided item should be edited in response to 
            <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnEditLabel"></see> or <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.OnAddLabel"></see>.
            </summary>
      <param name="item">The item.</param>
      <returns>Whether to edit the label or the labels for that item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldPopulateContextMenu(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether for the given item a context menu should be queried.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to raise a <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.PopulateItemContextMenu"></see> event for the given item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldQueryToolTip(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether for the given item a tool tip should be queried.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to raise a <see cref="E:yWorks.yFiles.UI.Input.GraphEditorInputMode.QueryItemToolTip"></see> event for the given item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldSetToCurrentItem(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback that determines whether the provided <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            should be <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">set to the current item</see>.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to set the item as the current item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShouldShowHandles(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether to show the <see cref="T:yWorks.Canvas.Input.HandleInputMode">handles</see> for the given item.
            </summary>
      <param name="item">The item to check</param>
      <returns>Whether to show the item based on the setting of the corresponding <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShowHandleItems"></see>, 
            property.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ShowHandleItems">
      <summary>
            Gets or set a property that determines which types of 
            items should have their <see cref="T:yWorks.Canvas.Input.IHandle"></see>s 
            shown.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.SnapToGrid(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Snaps the node to the grid using the <see cref="T:yWorks.Canvas.Input.IGridConstraintProvider`1"></see> for
            <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s queried from the given context.
            </summary>
      <param name="context">
      </param>
      <param name="node">
      </param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.TextEditorInputMode">
      <summary>
            Gets or sets the TextEditorInputMode property.
            </summary>
      <exception cref="T:System.NotSupportedException">If an attempt is made to change the instance while this mode
            is <see cref="P:yWorks.Canvas.Input.AbstractInputMode.Installed"></see>. To exchange a mode, first <see cref="M:yWorks.Canvas.Input.IInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)"></see>,
            then <see cref="M:yWorks.Canvas.Input.IInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">reinstall</see> to ensure that all data is initialized correctly.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.TextEditorInputModePriority">
      <summary>
            Gets or sets the TextEditorInputModePriority property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.ToolTipItems">
      <summary>
            Gets the types of the items that should be queried a tool tip for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Undo">
      <summary>
            Delegates to the <see cref="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.Graph"></see>'s <see cref="T:yWorks.Support.UndoEngine"></see>'s 
            <see cref="M:yWorks.Support.UndoEngine.Undo"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.UndoOperationsAllowed">
      <summary>
            Gets or sets a property that determines whether undo/redo operations with the usual shortcuts are enabled on the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.UngroupSelection">
      <summary>
            Makes each of the currently selected nodes a direct child of the root group (if not already).
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphEditorInputMode.UngroupSelectionAllowed">
      <summary>
            Determines whether Ctrl-U-presses should result in calls to <see cref="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.UngroupSelection"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphEditorInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.GraphInputModeController">
      <summary>
            Provides convenience implementations for <see cref="T:yWorks.Canvas.Input.IInputMode"></see>s
            that deal with <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphInputModeController.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Model.ISelectionModel{yWorks.Canvas.Model.IModelItem},yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Creates an instance using the provided graph and selection.
            </summary>
      <param name="graph">The graph.</param>
      <param name="selectionModel">The selection.</param>
      <param name="inputModeContext">The input mode context to use for queries that need the context.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateEdgesHitTestable">
      <summary>
            Factory method for the EdgesHitTestable property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Input.GraphInputModeController.EdgesHitTestable"></see> property.
            </summary>
      <returns>a new instance of IHitTestable</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateNodesHitTestable">
      <summary>
            Factory method for the NodesHitTestable property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Input.GraphInputModeController.NodesHitTestable"></see> property.
            </summary>
      <returns>a new instance of IHitTestable</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateUnselectedEdgesHitTestable">
      <summary>
            Factory method for the UnselectedEdgesHitTestable property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Input.GraphInputModeController.UnselectedEdgesHitTestable"></see> property.
            </summary>
      <returns>a new instance of IHitTestable</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateUnselectedNodesHitTestable">
      <summary>
            Factory method for the UnselectedNodesHitTestable property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Input.GraphInputModeController.UnselectedNodesHitTestable"></see> property.
            </summary>
      <returns>a new instance of IHitTestable</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphInputModeController.EdgesHitTestable">
      <summary>
            Gets the EdgesHitTestable property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateEdgesHitTestable"></see> will be called.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphInputModeController.Graph">
      <summary>
            Gets or sets the graph this instance works on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphInputModeController.NodesHitTestable">
      <summary>
            Gets the NodesHitTestable property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateNodesHitTestable"></see> will be called.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphInputModeController.UnselectedEdgesHitTestable">
      <summary>
            Gets the UnselectedEdgesHitTestable property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateUnselectedEdgesHitTestable"></see> will be called.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphInputModeController.UnselectedNodesHitTestable">
      <summary>
            Gets the UnselectedNodesHitTestable property.
            If the field has not yet been initialized upon first access, the
            factory method <see cref="M:yWorks.yFiles.UI.Input.GraphInputModeController.CreateUnselectedNodesHitTestable"></see> will be called.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.GraphViewerInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> implementation for use in a <see cref="T:yWorks.yFiles.UI.GraphControl"></see>
            to assign to the <see cref="P:yWorks.Canvas.CanvasControl.InputMode"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.GraphViewerInputMode" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ClickableItems">
      <summary>
            Gets the types of the items that should be clickable by this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ClickInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.ClickInputMode"></see> that is used by this instance
            to determine clicks.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ContextMenuInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.ContextMenuInputMode"></see> that is used by this instance
            to determine the contents of a <see cref="T:System.Windows.Controls.ContextMenu"></see> when the user tries to open one.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ContextMenuItems">
      <summary>
            Gets the types of the items that should be queried a context menu for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.FocusableItems">
      <summary>
            Gets or sets the items that can be given focus via the <see cref="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.Graph">
      <summary>
            Gets the graph instance from the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.GraphSelection">
      <summary>
            Gets the graph selection from the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.Initialize">
      <summary>
            Initializes this mode by <see cref="M:yWorks.Canvas.Input.MultiplexingInputMode.AddConcurrent(yWorks.Canvas.Input.IConcurrentInputMode)">adding</see>
            all of the minor modes that are used by this mode concurrently to this instance.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.ItemClicked">
      <summary>
            Occurs when an item that matches the <see cref="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ClickableItems"></see> type has been clicked with the mouse.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.ItemSelected">
      <summary>
            This event is triggered whenever an item has been successfully selected via the <see cref="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.GraphSelection"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.MarqueeSelect(System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Callback method that selects all items in the <paramref name="items"></paramref> enumeration
            using the <see cref="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.GraphSelection"></see>.
            </summary>
      <param name="items">The items to select.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.MarqueeSelectableItems">
      <summary>
            Gets the types of the items that should be marquee selectable by this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.MarqueeSelectionInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.MarqueeSelectionInputMode"></see> that is used by this instance
            to recognize marquee selections.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.MouseHoverInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.MouseHoverInputMode"></see> that is used by this instance
            to determine whenever the mouse hovers over an item to display a tool tip.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.MoveViewportInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.MoveViewportInputMode"></see> that is used by this instance
            to handle interactive movements of the view port using the mouse.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.NavigationInputMode">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Input.NavigationInputMode"></see> that is used by this instance
            to delegate the navigational actions to.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnItemClicked(yWorks.Support.ItemInputEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.ItemClicked"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Support.ItemInputEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnItemSelected(yWorks.Canvas.Model.ItemEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.ItemSelected"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnPopulateItemContextMenu(yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.PopulateItemContextMenu"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnQueryItemToolTip(yWorks.Canvas.Input.QueryItemToolTipEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.QueryItemToolTip"></see> event.
            </summary>
      <param name="args">The <see cref="T:yWorks.Canvas.Input.QueryItemToolTipEventArgs`1"></see> instance containing the event data.</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.PopulateItemContextMenu">
      <summary>
            Occurs when the <see cref="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ContextMenuInputMode">context menu</see> over an item is about to be opened to determine the
            contents of the <see cref="T:System.Windows.Controls.ContextMenu"></see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.QueryItemToolTip">
      <summary>
            Occurs when the mouse is <see cref="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.MouseHoverInputMode">hovering</see> over an item to determine the
            tool tip to display.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.SelectableItems">
      <summary>
            Gets the types of the items that should be selectable by this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Sets the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see> using
            the <see cref="F:yWorks.yFiles.UI.GraphControl.SetCurrentItemCommand"></see>.
            </summary>
      <param name="item">The item to set as the new current item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldBeClicked(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Predicate method that determines whether an <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            should be clickable by this mode.
            </summary>
      <param name="item">The item to decide.</param>
      <returns>Whether to <see cref="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnItemClicked(yWorks.Support.ItemInputEventArgs{yWorks.Canvas.Model.IModelItem})">click</see> the item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldBeFocused(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback method that determines upon a click on an item whether
            the item should become the new <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see>.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to <see cref="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">set the item</see> as the new current item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldMarqueeSelect(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Predicate method that determines whether an <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            should be marquee selected by this mode.
            </summary>
      <param name="item">The item to decide.</param>
      <returns>Whether to <see cref="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.OnItemSelected(yWorks.Canvas.Model.ItemEventArgs{yWorks.Canvas.Model.IModelItem})">select</see> the item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldPopulateContextMenu(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether for the given item a context menu should be queried.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to raise a <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.PopulateItemContextMenu"></see> event for the given item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldQueryToolTip(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether for the given item a tool tip should be queried.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether to raise a <see cref="E:yWorks.yFiles.UI.Input.GraphViewerInputMode.QueryItemToolTip"></see> event for the given item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.GraphViewerInputMode.ShouldSelect(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Predicate method that determines whether an <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            should be selected by this mode.
            </summary>
      <param name="item">The item to decide.</param>
      <returns>Whether to select the item.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.ToolTipItems">
      <summary>
            Gets the types of the items that should be queried a tool tip for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.GraphViewerInputMode.WaitInputMode">
      <summary>
            Gets the <see cref="T:yWorks.Canvas.Input.WaitInputMode"></see> that is provided by this instance
            for those who need to make use of it.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IBendCreator">
      <summary>
            Callback interface for instances that can create bends for a given edge and graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IBendCreator.CreateBend(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a bend at the given graph for the given edge at the position supplied.
            </summary>
      <param name="context">The context for which the bend should be created.</param>
      <param name="graph">The graph, the edge belongs to.</param>
      <param name="edge">The edge.</param>
      <param name="location">The preferred coordinates of the bend.</param>
      <returns>The index of the bend in the edges' <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> or <c>-1</c> if no bend has been created.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IBendSelectionTester">
      <summary>
            Interface that can be used to find bends at specific locations in the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IBendSelectionTester.GetBend(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bend at the given world coordinate position or <c>null</c> if there
            is no such bend.
            </summary>
      <param name="location">The coordinates of the position in the world coordinate system.</param>
      <param name="ctx">The canvas context to use for querying the position.</param>
      <returns>The bend at the position or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IBendSelectionTester.GetBends(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the bends for the given marquee rectangle.
            </summary>
      <param name="box">The marquee selection box in the world coordinate system.</param>
      <param name="ctx">The canvas context to use for querying the position.</param>
      <returns>An enumerable over the bends inside the marquee selection box.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider">
      <summary>
            This interface can be used to query <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s
            for a specific existing <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that may be used for the edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context edge.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IEditLabelHelper">
      <summary>
            Helper interface used by <see cref="T:yWorks.yFiles.UI.Input.GraphEditorInputMode"></see> and the like that
            can be used to customize the label editing experience.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IEditLabelHelper.AddLabel(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel@)">
      <summary>
            Helper method that will be called for <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>s to add another label.
            </summary>
      <param name="inputModeContext">The context in which the label is being added.</param>
      <param name="label">A label instance whose style, label model parameter, and preferred size will be used for creating new labels.</param>
      <returns>Whether adding of labels is allowed.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IEditLabelHelper.ConfigureTextEditorInputMode(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Input.TextEditorInputMode,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Configures the text editor input mode for the editing of the provided label instance.
            </summary>
      <param name="context">The context in which the label is being edited or created.</param>
      <param name="mode">The mode that will be used for editing the label's text.</param>
      <param name="label">The label that will be edited or created.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IEditLabelHelper.EditLabel(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.ILabel@)">
      <summary>
            Helper method that will be called for <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>s to edit a label.
            </summary>
      <param name="inputModeContext">The context in which the label is being created or edited.</param>
      <param name="label">A label instance whose style, label model parameter, and preferred size will be used for creating new labels.</param>
      <returns>Whether label editing or creation is allowed.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IPortCandidate">
      <summary>
            An interface for possible <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> candidates used by 
            <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> and the like.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidate.CreateInstance">
      <summary>
            If the client decides to use this port candidate, this method will serve as a factory to create
            the instance.
            </summary>
      <returns>The port instance to use if this candidate has been chosen. This method may return <c>null</c> to 
            indicate that the client should create an appropriate port itself.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidate.GetInstance">
      <summary>
            Returns the instance that is already live in the graph if this candidate wraps an 
            existing port or <c>null</c> otherwise.
            </summary>
      <returns>The instance to use or <c>null</c> otherwise.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.IPortCandidate.LocationModelParameter">
      <summary>
            Returns the absolute location of the port in the world coordinate system for this candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.IPortCandidate.Owner">
      <summary>
            Returns the possible owner of the port to be created for this candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.IPortCandidate.Type">
      <summary>
            Returns the type of this candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.IPortCandidate.Valid">
      <summary>
            Whether this instance is a valid port candidate. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IPortCandidateProvider">
      <summary>
            This interface can be used to query <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s
            for a specific <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> with respect to a given
            opposite <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see> or <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all source port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all source port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="target">The opposite port candidate.</param>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetSourcePortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for source port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which source port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns all target port candidates that belong to the context of this provider.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all target port candidates that are associated with the current context.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Returns all port candidates that apply for the provided opposite port candidate.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="source">The opposite port candidate.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given opposite port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IPortCandidateProvider.GetTargetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Returns all port candidates that apply for target port candidates for the provided edge.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="edge">The edge for which target port candidates are sought.</param>
      <param name="graph">The graph for which the candidates should be queried.</param>
      <returns>An enumerable over all port candidates that are associated with the given edge.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.IReparentNodeHandler">
      <summary>
            Interface used for implementations that recognize, approve and disapprove node 
            reparenting gestures, as well as actually performs the reparenting.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IReparentNodeHandler.CanReparent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the user may detach the given node from its current parent in 
            order to reparent it.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that is about to be detached from its current parent.</param>
      <returns>Whether the node may be detached and reparented.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IReparentNodeHandler.IsReparentGesture(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the current gesture that can be determined through the
            context is a reparent gesture.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will possibly be reparented.</param>
      <returns>Whether this is a reparenting gesture.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IReparentNodeHandler.IsValidParent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the provided node may be reparented to a <paramref name="newParent">new parent</paramref>.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will be reparented.</param>
      <param name="newParent">The potential new parent or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
      <returns>Whether <paramref name="newParent"></paramref> is a valid new parent for <paramref name="node"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.IReparentNodeHandler.Reparent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Performs the actual reparenting after the reparent gesture has been finalized.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will be reparented.</param>
      <param name="newParent">The potential new parent or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.LabelPositionHandler">
      <summary>
            An implementation of <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see>
            that shows the various label position candidates
            and lets the user move a label to one of those candidate positions.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.LabelPositionHandler"></see> class.
            </summary>
      <param name="graph">The graph that contains the label.</param>
      <param name="label">The label that shall be moved.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.CreateCandidateVisualCreator(yWorks.Canvas.Geometry.IOrientedRectangle,System.Boolean)">
      <summary>
            Creates an <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> to display the given candidate position.
            </summary>
      <param name="candidateGeometry">The geometry to use for the painting.</param>
      <param name="highlight">Whether to highlight the paintable. This will be <see langword="true"></see> for
            the current position and false for the others.</param>
      <returns>An implementation that will render the given candidate.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.GetDistance(yWorks.Canvas.Geometry.IOrientedRectangle,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Calculates a distance value between a candidate rectangle and the mouse location.
            </summary>
      <param name="rectangle">The rectangle candidate.</param>
      <param name="location">The mouse location.</param>
      <returns>A value indicating the closeness of the mouse to the rectangle.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.GetParameterCandidates(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that gets the candidates for the given graph and label.
            </summary>
      <param name="graph">The graph.</param>
      <param name="label">The label.</param>
      <returns>A possibly empty enumerator over possible label parameter candidates.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.LabelPositionHandler.Graph">
      <summary>
            Gets the graph instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.LabelPositionHandler.InputModeCanvasGroup">
      <summary>
            Gets or sets the input mode canvas group.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.LabelPositionHandler.Label">
      <summary>
            Gets the label instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.LabelPositionHandler.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Actually applies the given parameter at the end of the gesture.
            </summary>
      <param name="label">The label to set the parameter for.</param>
      <param name="parameter">The new parameter.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to set the position to the given coordinates.
            </summary>
      <param name="location">The new location.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.LabelPositionHandler.UseFinder">
      <summary>
            Gets or sets a property that determines whether the handler may use a
            <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder"></see> to assign arbitrary positions.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.LabelPositionHandler.UseParameterFinder(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Determines whether to use a <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder"></see> to
            find the best candidate.
            </summary>
      <param name="ctx">The context that is currently being used - may be <see langword="null"></see> if 
            the method is called without context.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.MoveFocusDirection">
      <summary>
            Enumeration used by <see cref="T:yWorks.yFiles.UI.Input.NavigationInputMode"></see> to determine the direction
            of the search for items to navigate to.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.None">
      <summary>
            No direction.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Left">
      <summary>
            In the direction of the negative x Axis.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Right">
      <summary>
            In the direction of the positive x Axis.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Up">
      <summary>
            In the direction of the negative y Axis.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Down">
      <summary>
            In the direction of the positive y Axis.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Parent">
      <summary>
            In the direction of the <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parent</see> in the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.MoveFocusDirection.Child">
      <summary>
            In the direction of the <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetChildren(`0)">children</see> in the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.MoveLabelInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that can be used 
            to drag a <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> in a <see cref="T:yWorks.yFiles.UI.GraphControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.#ctor">
      <summary>
            Creates a new instance that will use the IGraph from the <see cref="P:yWorks.Canvas.Input.AbstractInputMode.InputModeContext"></see>
            to move labels in.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Creates a new instance using the given graph to move the labels in.
            </summary>
      <param name="graph">The graph to create the edge in and query the labels from.</param>
      <param name="selection">The selection to use for determining which label is selected.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.CreateLabelHitTestable">
      <summary>
            Creates the hit testable that will be used to determine whether 
            this mode may be activated.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.CreateLabelPositionHandler(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Creates the label position handler for the given graph and label.
            </summary>
      <param name="graph">The graph.</param>
      <param name="label">The label to create a positionhandler for.</param>
      <returns>An instance of <see cref="T:yWorks.yFiles.UI.Input.LabelPositionHandler"></see></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.MoveLabelInputMode.Graph">
      <summary>
            Gets the Graph this mode is acting upon.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.MoveLabelInputMode.GraphSelection">
      <summary>
            Gets the Graph this mode is acting upon.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.Initialize">
      <summary>
            Performs one-time initialization of this instance. This method should not
            be invoked by subclasses. This will be done automatically upon first
            installment of this mode.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.IsValidLabelHit(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether a valid label has been hit at the specified position.
            </summary>
      <param name="location">The coordinates for the hit test.</param>
      <param name="context">The context for hit testing purposes.</param>
      <returns>
        <see langword="true"></see> if a valid label is hit and the label moving should be started here; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.OnDragCanceled">
      <summary>
            Clears the <see cref="P:yWorks.Canvas.Input.MoveInputMode.PositionHandler"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.OnDragFinished">
      <summary>
            Clears the <see cref="P:yWorks.Canvas.Input.MoveInputMode.PositionHandler"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.OnDragStarting">
      <summary>
            Registers the <see cref="P:yWorks.Canvas.Input.MoveInputMode.PositionHandler"></see>
            created during the last <see cref="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.CreateLabelPositionHandler(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)"></see>
            call.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.OnGraphChanged(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.MoveLabelInputMode.Graph"></see> property changes.
            </summary>
      <param name="oldGraph">The old graph instance.</param>
      <param name="newGraph">The new graph instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.OnGraphSelectionChanged(yWorks.yFiles.UI.Model.IGraphSelection,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Called when the <see cref="P:yWorks.yFiles.UI.Input.MoveLabelInputMode.GraphSelection"></see> property changes.
            </summary>
      <param name="oldGraphSelection">The old instance.</param>
      <param name="newGraphSelection">The new instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.SetGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Set a new Graph for this mode.
            </summary>
      <param name="newGraph">The new graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.MoveLabelInputMode.SetGraphSelection(yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Set a new Graph Selection for this mode.
            </summary>
      <param name="newGraphSelection">The new graph selection.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.MoveLabelInputMode.UseLabelModelParameterFinder">
      <summary>
            Gets or sets a property that determines whether to allow
            the use of the <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder"></see>
            to assign new label model parameters.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.NavigationInputMode">
      <summary>
            An <see cref="T:yWorks.Canvas.Input.IInputMode"></see> that can <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.MoveTo(yWorks.yFiles.UI.Input.MoveFocusDirection)">navigate</see>
            an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> displayed in a <see cref="P:yWorks.yFiles.UI.Input.NavigationInputMode.GraphControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.NavigationInputMode"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.AdjustContentRect">
      <summary>
            Callback that adjusts the <see cref="P:yWorks.Canvas.CanvasControl.ContentRect"></see> to encompass
            the all elements.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ClearSelection">
      <summary>
            Clears the selection in the graph control.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
        <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">Collapses</see> the given group node
            to hide the contents of the group node from this <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
      <param name="groupNode">The group node to collapse.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseSelection">
      <summary>
            Performs <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseGroup(yWorks.yFiles.UI.Model.INode)"></see> for all <see cref="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedNodes"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.CollapsingGroupsAllowed">
      <summary>
            Gets or sets a value that determines whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseGroup(yWorks.yFiles.UI.Model.INode)">collapse group nodes</see>
            via the <see cref="F:yWorks.yFiles.UI.Input.GraphCommands.CollapseGroupCommand"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.EnterGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
            This method allows for entering a group node so that the currently
            displayed <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>'s <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot"></see>
            will be reset to the provided node.
            </summary>
      <param name="node">The node that needs to be either part of the current graph, or part of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.EnteringGroupsAllowed">
      <summary>
            Gets or sets a value that determines whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.EnterGroup(yWorks.yFiles.UI.Model.INode)">enter group nodes</see>
            via the <see cref="F:yWorks.yFiles.UI.Input.GraphCommands.EnterGroupCommand"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.EnterSelectedGroup">
      <summary>
            Performs <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.EnterGroup(yWorks.yFiles.UI.Model.INode)"></see> for the first valid <see cref="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedNodes"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExitGroup">
      <summary>
            Exits the current <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot"></see> of the currently displayed
            <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view and shows the contents of the parent container.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.ExitingGroupAllowed">
      <summary>
            Gets or sets a value that determines whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExitGroup">exit the current group node</see>
            via the <see cref="F:yWorks.yFiles.UI.Input.GraphCommands.ExitGroupCommand"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
        <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">Expands</see> the given group node
            to show the contents of the collapsed group node in this <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
      <param name="groupNode">The group node to expand</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandingGroupsAllowed">
      <summary>
            Gets or sets a value that determines whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandGroup(yWorks.yFiles.UI.Model.INode)">expand group nodes</see>
            via the <see cref="F:yWorks.yFiles.UI.Input.GraphCommands.ExpandGroupCommand"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandSelection">
      <summary>
            Performs <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandGroup(yWorks.yFiles.UI.Model.INode)"></see> for all <see cref="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedNodes"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExtendSelectionTo(yWorks.yFiles.UI.Input.MoveFocusDirection)">
      <summary>
            Moves the focus into the given direction, extending the selection
            to the new element.
            </summary>
      <param name="direction">The direction to move the focus and extend the selection.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.Graph">
      <summary>
            Gets or sets the graph this mode operates on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.GraphControl">
      <summary>
            Gets or sets the graph control this mode acts on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.GraphSelection">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.IGraphSelection"></see> this mode operates on.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.Install(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Installs this mode into a <see cref="T:yWorks.Canvas.CanvasControl"></see> using the provided <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">the context to install this mode into</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.MoveFocusTo(yWorks.yFiles.UI.Input.MoveFocusDirection)">
      <summary>
            Moves the focus into the given direction, not changing the current selection.
            </summary>
      <param name="direction">The direction to move the focus.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.MoveTo(yWorks.yFiles.UI.Input.MoveFocusDirection)">
      <summary>
            Moves the focus into the given direction, setting the selection
            to the new element.
            </summary>
      <param name="direction">The direction to move the focus and selection.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.NavigationInputMode.NavigableItems">
      <summary>
            Gets or sets the item types that can be navigated to by this mode.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.SelectCurrentItem">
      <summary>
            Selects the <see cref="P:yWorks.yFiles.UI.GraphControl.CurrentItem"></see> current item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.SelectItem(yWorks.yFiles.UI.GraphControl,yWorks.Canvas.Model.IModelItem,System.Boolean)">
      <summary>
            Callback that selects the given item.
            </summary>
      <param name="graphControl">The graph control.</param>
      <param name="item">The item to select.</param>
      <param name="extendSelection">if set to <c>true</c> the current selection is extended otherwise it is cleared beforehand.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.SetCurrentItem(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Sets the "current" item to the given one.
            </summary>
      <param name="item">The item to set as the current item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.SetCurrentItem(yWorks.yFiles.UI.GraphControl,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback that actually sets the current item property.
            </summary>
      <param name="graphControl">The graph control to set the current item of.</param>
      <param name="item">The item to set.</param>
      <returns>Whether the operation was actually performed.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.SetGraphControl(yWorks.yFiles.UI.GraphControl)">
      <summary>
            Sets the graph control to use for the various actions.
            </summary>
      <param name="newControl">The control to use or <see langword="null"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldBeNavigatedTo(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Callback predicate method that determines whether a given model item should be navigated to.
            </summary>
      <param name="modelItem">The model item.</param>
      <returns>Whether the item should be considered for navigational commands.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldCollapseGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Predicate method that decides whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.CollapseGroup(yWorks.yFiles.UI.Model.INode)">collapse</see> the given 
            group node.
            </summary>
      <returns>Whether to collapse the given group or not.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldEnterGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Predicate method that decides whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.EnterGroup(yWorks.yFiles.UI.Model.INode)">enter</see> the specific
            group node.
            </summary>
      <param name="node">The group node to enter.</param>
      <returns>Whether to enter the group or not.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldExitGroup">
      <summary>
            Predicate method that decides whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExitGroup">exit</see> the current 
            group node.
            </summary>
      <returns>Whether to exit the current group or not.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldExpandGroup(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Predicate method that decides whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ExpandGroup(yWorks.yFiles.UI.Model.INode)">expand</see> the given
            group node.
            </summary>
      <returns>Whether to expand the given group or not.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ShouldToggleGroupState(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Predicate method that decides whether it is allowed to <see cref="M:yWorks.yFiles.UI.Input.NavigationInputMode.ToggleGroupNodeState(yWorks.yFiles.UI.Model.INode)">toggle</see> the collapsed
            state of the given group node.
            </summary>
      <returns>Whether to expand the given group or not.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.ToggleGroupNodeState(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Toggles the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">expanded/collapsed</see> state
            for the given group node in the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
      <param name="groupNode">The group node to toggle the state for.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NavigationInputMode.Uninstall(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Uninstalls this mode from the canvas.
            </summary>
      <param name="context">The context to remove this mode from. This is the same instance that has been
            passed to <see cref="M:yWorks.Canvas.Input.AbstractInputMode.Install(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.NodeBasedEdgeCreationCallback">
      <summary>
            The delegate method that is used by <see cref="T:yWorks.yFiles.UI.Input.CreateEdgeInputMode"></see>
            to create edges between instances of <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.
            </summary>
      <param name="ctx">The context of the input mode this action is used in.</param>
      <param name="graph">The graph to create the edge in.</param>
      <param name="sourceNode">The source node.</param>
      <param name="targetNode">The target node.</param>
      <param name="style">The style of the edge.</param>
      <returns>The newly created edge or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.NodeCenterPortCandidateProvider">
      <summary>
            Trivial implementation of an <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see>
            that always returns exactly one candidate that is centered at the node's
            <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NodeCenterPortCandidateProvider.#ctor(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates a new instance for the given node.
            </summary>
      <param name="node">The node to get the layout's center from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.NodeCenterPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates an enumeration of possibly port candidates.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which to provide the candidates, or <see langword="null"></see>.</param>
      <returns>An enumerable collection of port candidates.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.NodeCreationCallback">
      <summary>
            A callback that is used by <see cref="T:yWorks.yFiles.UI.Input.GraphEditorInputMode"></see>
            for the creation of nodes.
            </summary>
      <param name="context">The context for which the node should be created.</param>
      <param name="graph">The graph to create the node for.</param>
      <param name="location">The location where the node shall be created.</param>
      <returns>The created node or <c>null</c>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1">
      <summary>
            A specialized subclass of <see cref="T:yWorks.Canvas.Input.PopulateContextMenuEventArgs"></see> that carries the 
            <see cref="P:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1.Item"></see> for which the context menu should be populated.
            </summary>
      <typeparam name="TModelItem">The type of the <see cref="P:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1.Item">model item</see>.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1.#ctor(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,System.Windows.Controls.ContextMenu,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1"></see> class.
            </summary>
      <param name="context">The context to populate the menu for.</param>
      <param name="queryLocation">The query location.</param>
      <param name="contextMenu">The context menu.</param>
      <param name="item">The item for which the context menu should be populated, may be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.PopulateItemContextMenuEventArgs`1.Item">
      <summary>
            Gets the item for which the tool tip is queried.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.PortBasedEdgeCreationCallback">
      <summary>
            The delegate method that is used by <see cref="T:yWorks.yFiles.UI.Input.CreateEdgeInputMode"></see>
            to create edges between instances of <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>.
            </summary>
      <param name="ctx">The context of the input mode this action is used in.</param>
      <param name="graph">The graph to create the edge in.</param>
      <param name="sourcePort">The source port.</param>
      <param name="targetPort">The target port.</param>
      <param name="style">The style of the edge.</param>
      <returns>The newly created edge or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.PortCandidateProvider">
      <summary>
            A simple mutable <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> implementation
            that allows for adding <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortCandidateProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.PortCandidateProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortCandidateProvider.Add(yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Adds a single candidate to this instance's list of candidates.
            </summary>
      <param name="candidate">The candidate to add.</param>
      <returns>The candidate added.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortCandidateProvider.Add(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Add another instance to this provider's list of candidates.
            </summary>
      <param name="graph">The graph where the candidate belongs to</param>
      <param name="owner">The owner to use for the candidate.</param>
      <param name="location">The location of the candidate.</param>
      <returns>The candidate created.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortCandidateProvider.AddExistingPorts(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Adds existing ports of the given instance to this instance's list.
            </summary>
      <param name="owner">The owner whose ports should be added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Returns the internally held list of the candidates.
            </summary>
      <returns>The <see cref="P:yWorks.yFiles.UI.Input.PortCandidateProvider.PortCandidates"></see> of this instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.PortCandidateProvider.PortCandidates">
      <summary>
            Returns the list of candidates used by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.PortCandidateType">
      <summary>
            Represents a type of an <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.PortCandidateType.Default">
      <summary>
            Describes a default port candidate.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Input.PortCandidateType.Optional">
      <summary>
            Describes an optional port candidate.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle">
      <summary>
             An implementation of the <see cref="T:yWorks.Canvas.Input.IHandle"></see>
             that can be used to move an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
             interactively by assigning new <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see>s
             to the <see cref="P:yWorks.yFiles.UI.Model.IPort.LocationModelParameter"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.#ctor(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle"></see> class
            to change the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> of the given <paramref name="port"></paramref></summary>
      <param name="port">The port to adjust the location parameter of.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.Cursor">
      <summary>
            Gets or sets the cursor to display when the mouse hovers over or drags this
            handle.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.GetGraph(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Gets the graph to use for <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">setting the parameter</see>
            from the context.
            </summary>
      <param name="inputModeContext">The input mode context to use.</param>
      <returns>The graph or <see langword="null"></see> if the graph could not be obtained.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.GetNewParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModel,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Callback method that obtains the new parameter for the given location and port.
            </summary>
      <param name="port">The port to obtain a parameter for.</param>
      <param name="model">The model to use.</param>
      <param name="newLocation">The new location.</param>
      <returns>The new parameter to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.SetParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Callback method that applies the parameter.
            </summary>
      <param name="graph">The graph to use for applying.</param>
      <param name="port">The port to apply the parameter to.</param>
      <param name="newParameter">The new parameter to apply.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.PortLocationModelParameterHandle.Type">
      <summary>
            Gets or sets the type of the handle that can be used by the rendering engine
            to render types differently.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.ReparentNodeHandler">
      <summary>
            Simple default implementation of <see cref="T:yWorks.yFiles.UI.Input.IReparentNodeHandler"></see>
            that treats shift key presses as reparent gestures and allows
            for reparenting all nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ReparentNodeHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Input.ReparentNodeHandler" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ReparentNodeHandler.CanReparent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the user may detach the given node from its current parent in 
            order to reparent it.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that is about to be detached from its current parent.</param>
      <returns>Whether the node may be detached and reparented.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ReparentNodeHandler.IsReparentGesture(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the current gesture that can be determined through the
            context is a reparent gesture.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will possibly be reparented.</param>
      <returns>Whether this is a reparenting gesture.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ReparentNodeHandler.IsValidParent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the provided node may be reparented to a <paramref name="newParent">new parent</paramref>.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will be reparented.</param>
      <param name="newParent">The potential new parent or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
      <returns>Whether <paramref name="newParent"></paramref> is a valid new parent for <paramref name="node"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ReparentNodeHandler.Reparent(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Performs the actual reparenting after the reparent gesture has been finalized.
            </summary>
      <param name="context">The context that provides information about the user input.</param>
      <param name="node">The node that will be reparented.</param>
      <param name="newParent">The potential new parent or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.ReparentNodeHandler.ReparentRecognizer">
      <summary>
            Gets or sets the <see cref="T:yWorks.Canvas.Input.IEventRecognizer"></see>
            that will be queried to determine whether the gesture is a reparent gesture.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider">
      <summary>
            An implementation of <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> that
            works for <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> implementations that
            have <see cref="T:yWorks.yFiles.UI.Drawing.IShapeGeometry"></see> instances in their lookup.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates an instance that inserts a port candidate at the center of each straight line segment.
            </summary>
      <param name="portOwner">The owner to receive the shape geometry from</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IPortOwner,System.Double[])">
      <summary>
            Creates an instance that inserts a port candidate at the given ratios of each segment
            of the shape's path.
            </summary>
      <param name="portOwner">The owner to receive the shape geometry from</param>
      <param name="ratios">A number of double values that are interpreted as ratio values between 0.0 and 1.0.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.AddExistingPortsEnabled">
      <summary>
             Gets or sets a property that determines whether 
             <see cref="M:yWorks.yFiles.UI.Input.AbstractPortCandidateProvider.AddExistingPorts(System.Collections.Generic.IList{yWorks.yFiles.UI.Input.IPortCandidate})">existing ports should be added to the list of ports</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.CreateList(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates the list of port candidates using the <see cref="T:yWorks.yFiles.UI.Drawing.IShapeGeometry"></see>
            obtained from the <paramref name="portOwner"></paramref>'s lookup.
            </summary>
      <param name="graph">The graph</param>
      <param name="portOwner">The owner of the ports for which to create the list of candidates.</param>
      <returns>A non-empty list of candidates.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates an enumeration of possibly port candidates.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which to provide the candidates, or <see langword="null"></see>.</param>
      <returns>An enumerable collection of port candidates.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Input.ShapeGeometryPortCandidateProvider.MinimumSegmentLength">
      <summary>
            Gets or sets the minimum length a segment needs to have in order to be used
            to add port candidates.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Input.UnoccupiedPortsCandidateProvider">
      <summary>
            Simple implementation of an <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see>
            that returns unoccuppied ports at a given entity.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.UnoccupiedPortsCandidateProvider.#ctor(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
             Creates an instance for the specified owner.
            </summary>
      <param name="portOwner">The owner to query the ports from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Input.UnoccupiedPortsCandidateProvider.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates an enumeration of possibly port candidates.
            </summary>
      <param name="context">The context for which the candidates should be provided.</param>
      <param name="graph">The graph for which to provide the candidates, or <see langword="null"></see>.</param>
      <returns>An enumerable collection of port candidates.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel">
      <summary>
            A label model for node labels that lie outside of the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>
            bounds.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.#ctor">
      <summary>
            Creates a new instance of this model
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.CreateParameter(yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position)">
      <summary>
            Creates a new parameter that is associated with this instance for the provided position.
            </summary>
      <param name="position">The position constant that describes the position of the label.</param>
      <returns>A new parameter instance.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.East">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Insets">
      <summary>
            Gets or sets the insets to use by this model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.North">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.NorthEast">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.NorthWest">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.South">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.SouthEast">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.SouthWest">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.West">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position">
      <summary>
            Enumeration of the possible positions of the <see cref="T:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.North">
      <summary>
            Encodes a position outside the node at the top 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.East">
      <summary>
            Encodes a position outside the node at the right side
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.South">
      <summary>
            Encodes a position outside the node at the bottom
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.West">
      <summary>
            Encodes a position outside the node at the left side
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.NorthEast">
      <summary>
            Encodes a position outside the node at the upper right corner
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.SouthEast">
      <summary>
            Encodes a position outside the node at the lower right corner
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.NorthWest">
      <summary>
            Encodes a position outside the node at the upper left corner
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position.SouthWest">
      <summary>
            Encodes a position outside the node at the lower left corner
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel">
      <summary>
            An edge label model that can be used to describe any position and orientation 
            of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.CreateEdgeAnchored(System.Double,System.Double,System.Double)">
      <summary>
            Creates a parameter for the given location.
            </summary>
      <param name="ratio">The ratio at which the label will be anchored between the location
            of the source port and the location of the target port.</param>
      <param name="distance">The distance orthogonally to the connection between the source and target point.</param>
      <param name="angle">The angle by which the label should be rotated.</param>
      <returns>A parameter that describes the position.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.EdgeRelativeAngle">
      <summary>
            Gets or sets a property that indicates whether the angle used by the <see cref="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.CreateEdgeAnchored(System.Double,System.Double,System.Double)">
            parameter</see> should be interpreted relative to the edge's orientation or as an absolute angle
            in the coordinate system.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.FindBestParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Tries to find a parameter that best matches the given layout for the
            provided label instance.
            </summary>
      <param name="label">The label to find a parameter for.</param>
      <param name="model">The model instance to use. This should be this instance.</param>
      <param name="labelLayout">The anticipated layout for the label.</param>
      <returns>
            A non-<c>null</c> parameter that can be used for the label to approximate the provided layout.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.Instance">
      <summary>
            A shared unmodifiable public instance that can be used to obtain parameters.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeEdgeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.FreeLabelModel">
      <summary>
            A label model that can be used to describe any position and orientation 
            of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.FreeLabelModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.CreateAbsolute(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Creates a new label at the given absolute position using the provided angle.
            </summary>
      <param name="anchorLocation">The location for the parameter.</param>
      <param name="angle">The angle of rotation.</param>
      <returns>A new parameter that is associated with this instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.CreateAnchored(yWorks.Canvas.Geometry.IPoint,System.Double)">
      <summary>
            Creates a new label at the given dynamic location using the provided angle.
            </summary>
      <param name="location">The location to place the parameter at. That instance is stored by reference.</param>
      <param name="angle">The angle of rotation.</param>
      <returns>A new parameter that is associated with this instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.CreateDynamic(yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Creates a new label whose layout is dynamically read from the provided instance.
            </summary>
      <param name="orientedRectangle">The oriented rectangle to dynamically retrieve the values from.</param>
      <returns>
            A new parameter that is associated with this instance.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.FreeLabelModel.Instance">
      <summary>
            A shared public instance that can be used to obtain parameters.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel">
      <summary>
            A node label model that can be used to describe any position and orientation 
            of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.CreateNodeCenterAnchored(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Creates a parameter instance that is anchored to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>'s center.
            </summary>
      <param name="offset">The offset to the layout's center.</param>
      <param name="angle">The angle to rotate the label by.</param>
      <returns>A parameter that exactly fits the described location.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.CreateNodeLayoutAnchored(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Creates a parameter instance that is anchored to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
      <param name="offset">The offset to the layout's top left corner.</param>
      <param name="angle">The angle to rotate the label by.</param>
      <returns>A parameter that exactly fits the described location.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.CreateNodeRatioAnchored(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
            Creates a parameter instance that anchors the label to the node at a given position.
            </summary>
      <param name="layoutRatio">The ratio that describes the point on the node's layout relative to its size.</param>
      <param name="layoutOffset">The offset to apply to the point on the node after the ratio has been determined.</param>
      <param name="labelRatio">The ratio that describes the point on the label's layout relative to its size.</param>
      <param name="labelOffset">The offset to apply to the point on the label after the ratio has been determined.</param>
      <param name="angle">The angle by which the label should be rotated around the point described using the ratio and offset.</param>
      <returns>
            A parameter that exactly fits the described location.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.FindBestParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Tries to find a parameter that best matches the given layout for the
            provided label instance.
            </summary>
      <param name="label">The label to find a parameter for.</param>
      <param name="model">The model instance to use. This should be this instance.</param>
      <param name="labelLayout">The anticipated layout for the label.</param>
      <returns>
            A non-<c>null</c> parameter that can be used for the label to approximate the provided layout.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.Instance">
      <summary>
            A shared public instance that can be used to obtain parameters.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.FreeNodeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.GenericLabelModel">
      <summary>
            An implementation of <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> that can be used to create custom
            label models out of existing <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Create a new generic label model using the provided parameter as the <see cref="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.CreateDefaultParameter">default parameter.</see></summary>
      <param name="defaultParameter">The parameter to use as the default.</param>
      <exception cref="T:System.ArgumentNullException">
        <c>defaultParameter</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabelCandidateDescriptor)">
      <summary>
            Create a new generic label model using the provided parameter as the <see cref="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.CreateDefaultParameter">default parameter.</see></summary>
      <param name="defaultParameter">The parameter to use as the default.</param>
      <param name="descriptor">The descriptor to associate with the parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <c>defaultParameter</c> is null.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.AddParameter(yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Adds another parameter to this models collection of parameters.
            </summary>
      <param name="parameter">The parameter to add to this instance.</param>
      <returns>A new parameter that wraps the provided parameter and uses this instance as its model.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.AddParameter(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabelCandidateDescriptor)">
      <summary>
            Adds another parameter to this models collection of parameters.
            </summary>
      <param name="parameter">The parameter to add to this instance.</param>
      <param name="descriptor">The descriptor to associate with the parameter.</param>
      <returns>A new parameter that wraps the provided parameter and uses this instance as its model.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.GetDescriptor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Yields the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>  that has been associated with the instance
            during <see cref="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.AddParameter(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabelCandidateDescriptor)"></see>.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="parameter">The parameter to get the descriptor for.</param>
      <returns>The descriptor instance that had been added to this instance during 
            <see cref="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.AddParameter(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabelCandidateDescriptor)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.GenericLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.InteriorLabelModel">
      <summary>
            A label model for node labels that lie inside of the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>
            bounds.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.#ctor">
      <summary>
            Creates a new instance of this model with empty insets.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Center">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.CreateParameter(yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position)">
      <summary>
            Creates the parameter for the given position.
            </summary>
      <param name="position">The position.</param>
      <returns>
      </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.East">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.GetMinimumNodeSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Returns the minimum size this model would require for the node owner of the label if the the given label was used with
            the provided parameter.
            </summary>
      <param name="label">The label to use.</param>
      <param name="parameter">The parameter to use.</param>
      <returns>The minimum size requirements for this label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.GetNodeInsets(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Returns the insets this model would require for the node owner of the label if the the given label was used with
            the provided parameter.
            </summary>
      <param name="label">The label to use.</param>
      <param name="parameter">The parameter to use.</param>
      <returns>The insets rectangle.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Insets">
      <summary>
            Gets or sets the insets to use within the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.North">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.NorthEast">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.NorthWest">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.South">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.SouthEast">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.SouthWest">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.West">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position">
      <summary>
            Enumeration of the possible positions of the <see cref="T:yWorks.yFiles.UI.LabelModels.InteriorLabelModel"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.North">
      <summary>
            Encodes a position at the top side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.East">
      <summary>
            Encodes a position at the right side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.South">
      <summary>
            Encodes a position at the bottom side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.West">
      <summary>
            Encodes a position at the left side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.NorthEast">
      <summary>
            Encodes a position at the upper right corner of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.SouthEast">
      <summary>
            Encodes a position at the lower right corner of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.NorthWest">
      <summary>
            Encodes a position at the upper left corner of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.SouthWest">
      <summary>
            Encodes a position at the lower left corner of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position.Center">
      <summary>
            Encodes a position at the center of the node interior
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel">
      <summary>
            A label model for node labels that lie inside of the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>
            bounds and have been stretched to fit the node's size.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.#ctor">
      <summary>
            Creates a new instance of this model with empty insets.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Center">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.CreateParameter(yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position)">
      <summary>
            Creates the parameter for the given position.
            </summary>
      <param name="position">The position.</param>
      <returns>
      </returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.East">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.GetMinimumNodeSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Returns the minimum size this model would require for the node owner of the label if the the given label was used with
            the provided parameter.
            </summary>
      <param name="label">The label to use.</param>
      <param name="parameter">The parameter to use.</param>
      <returns>The minimum size requirements for this label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.GetNodeInsets(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Returns the insets this model would require for the node owner of the label if the the given label was used with
            the provided parameter.
            </summary>
      <param name="label">The label to use.</param>
      <param name="parameter">The parameter to use.</param>
      <returns>The insets rectangle.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Insets">
      <summary>
            Gets or sets the insets to use within the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.North">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.South">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.West">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position">
      <summary>
            Enumeration of the possible positions of the <see cref="T:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position.North">
      <summary>
            Encodes a position at the top side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position.East">
      <summary>
            Encodes a position at the right side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position.South">
      <summary>
            Encodes a position at the bottom side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position.West">
      <summary>
            Encodes a position at the left side of the node interior
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position.Center">
      <summary>
            Encodes a position at the center of the node interior
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel">
      <summary>
            An edge label model that knows nine different label positions.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel"></see> class
            with a <see cref="P:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Distance"></see> of 10 and an <see cref="P:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Angle"></see> of 0.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel"></see> class.
            </summary>
      <param name="distance">The distance.</param>
      <param name="angle">The angle.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Angle">
      <summary>
            Gets or sets the angle for the rotation of the labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.CenterAbove">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.CenterBelow">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.CenterCentered">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.CreateParameter(yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position)">
      <summary>
            Create a model parameter for the specified <paramref name="position"></paramref></summary>
      <param name="position">The position for this parameter </param>
      <returns>a model parameter for the specified <paramref name="position"></paramref></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Distance">
      <summary>
            Gets or sets the distance of the labels above or below the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.SourceAbove">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.SourceBelow">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.SourceCentered">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.TargetAbove">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.TargetBelow">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.TargetCentered">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position">
      <summary>
            Determines the position of a label in the <see cref="T:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.SourceAbove">
      <summary>
            Encodes a label position at the source above the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.CenterAbove">
      <summary>
            Encodes a label position at the center above the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.TargetAbove">
      <summary>
            Encodes a label position at the target above the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.SourceCentered">
      <summary>
            Encodes a label position at the source of the edge that lies on the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.CenterCentered">
      <summary>
            Encodes a label position at the center of the edge that lies on the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.TargetCentered">
      <summary>
            Encodes a label position at the source of the edge that lies on the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.SourceBelow">
      <summary>
            Encodes a label position at the source below the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.CenterBelow">
      <summary>
            Encodes a label position at the center below the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.TargetBelow">
      <summary>
            Encodes a label position at the target below the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.AboveCenteredBelowMask">
      <summary>
            Mask value for label positions above, below or directly on the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.SourceCenterTargetMask">
      <summary>
            Mask value for label positions at the source, the center or the target of
            the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Source">
      <summary>
            Encodes a label position above, below or on the edge at the source
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Center">
      <summary>
            Encodes a label position above, below or on the edge at the center of the edge
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Target">
      <summary>
            Encodes a label position above, below or on the edge at the target
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Above">
      <summary>
            Encodes a label position above the edge at the source, center or target
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Centered">
      <summary>
            Encodes a label position directly on the edge at the source, center or target
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position.Below">
      <summary>
            Encodes a label position below the edge at the source, center or target
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel">
      <summary>
            A label model for edge labels that uses a ratio on the edge's path
            to determine the position of the label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.Angle">
      <summary>
            Gets or sets the angle of the label relative to the edge's path.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter for this model.
            </summary>
      <returns>A parameter like in <see cref="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.CreateRatio(System.Double)"></see> with a ratio of <c>0.5d</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.CreateRatio(System.Double)">
      <summary>
            Creates a parameter for this model using a ratio value between <c>0.0d</c>
            and <c>1.0d</c>.
            </summary>
      <param name="ratio">The ratio where the label should be placed along the edge's path.</param>
      <returns>A parameter that uses this model instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.Distance">
      <summary>
            Gets or sets a property that determines the distance between the label's center
            and the anchor point on the edge's path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.EdgeRelativeDistance">
      <summary>
            Gets or sets a property that determines how the
            <see cref="P:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.Distance"></see> value should be interpreted.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns possible parameters for the given label and model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.RotatingEdgeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.SandwichLabelModel">
      <summary>
            A node label model that knows only two possible positions.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.SandwichLabelModel"></see> class with zero offset.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.CreateNorthParameter">
      <summary>
            Creates a parameter for the north side of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.CreateSouthParameter">
      <summary>
            Creates a parameter for the south side of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.North">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.South">
      <summary>
            A convenience parameter instance that can be shared between
            label instances. 
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SandwichLabelModel.YOffset">
      <summary>
            The distance between the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> and
            the label's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Layout"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel">
      <summary>
            An edge <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> implementation that provides labels
            to both sides of the edge's path.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.Angle">
      <summary>
            Gets or sets the angle the labels are rotated about.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.CreateParameterLeftFromSource(System.Int32,System.Double)">
      <summary>
            Creates a parameter that describes
            a position at the left of the edge at the segment index from the source side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the source side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.CreateParameterLeftFromTarget(System.Int32,System.Double)">
      <summary>
            Creates a parameter that describes
            a position at the left of the edge at the segment index from the target side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the target side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.CreateParameterRightFromSource(System.Int32,System.Double)">
      <summary>
            Creates a parameter that describes
            a position at the right of the edge at the segment index from the source side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the source side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.CreateParameterRightFromTarget(System.Int32,System.Double)">
      <summary>
            Creates a parameter that describes
            a position at the right of the edge at the segment index from the target side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the target side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.Distance">
      <summary>
            Gets or sets the distance between the label and the edge's path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.EdgeRelativePosition">
      <summary>
            Gets or sets a property that determines if label's are placed left or right
            or above or below the edge's path.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel">
      <summary>
            An edge label model that can be used for labels along the path of an edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.#ctor">
      <summary>
            Creates a new instance with distance and angle set to <c>0</c>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a new instance using the provided values.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.Angle">
      <summary>
            Gets or sets the angle the labels are rotated about.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.CreateParameterFromSource(System.Int32,System.Double)">
      <summary>
            Creates a parameter that measures the provided segment index from the source side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the source side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.CreateParameterFromTarget(System.Int32,System.Double)">
      <summary>
            Creates a parameter that measures the provided segment index from the target side of the edge path.
            </summary>
      <param name="segmentIndex">The zero-based index of the segment beginning from the target side.</param>
      <param name="segmentRatio">The ratio at which to place the label at the segment.</param>
      <returns>A label parameter that describes the provided parameters for this model instance.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.Distance">
      <summary>
            Gets or sets the distance between the label and the edge's path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.EdgeRelativeDistance">
      <summary>
            Gets or sets a value indicating whether distance to the edge is interpreted
            relatively to the edge's path.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.LabelModels.SliderEdgeLabelModel.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.LabelModels.SliderParameterLocation">
      <summary>
            Flaggable enumeration that is used by <see cref="T:yWorks.yFiles.UI.LabelModels.SideSliderEdgeLabelModel"></see>
            to indicate the position.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SliderParameterLocation.Left">
      <summary>
            Left of the edge.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SliderParameterLocation.Right">
      <summary>
            Right of the edge.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SliderParameterLocation.FromSource">
      <summary>
            Measured from the source end.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.LabelModels.SliderParameterLocation.FromTarget">
      <summary>
            Measured from the target end.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.IPoint,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.IPoint,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.AnchorLocation">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.AnchoredParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.AnchoredParameterExtension.Anchor">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.AnchoredParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.ArrowExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ArrowExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ArrowExtension.#ctor(yWorks.yFiles.UI.Drawing.ArrowType)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ArrowExtension.#ctor(yWorks.yFiles.UI.Drawing.ArrowType,System.Windows.Media.Pen,System.Windows.Media.Brush,System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ArrowExtension.Brush">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ArrowExtension.CropLength">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ArrowExtension.Pen">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ArrowExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ArrowExtension.Scale">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ArrowExtension.Type">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension.#ctor(System.Int32,System.Boolean)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension.FromSource">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension.Index">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.BendAnchoredParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.Offset">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.CenterAnchoredLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.DynamicAnchoredParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.DynamicAnchoredParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.DynamicAnchoredParameterExtension.#ctor(yWorks.Canvas.Geometry.IPoint)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.DynamicAnchoredParameterExtension.Anchor">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.DynamicAnchoredParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.ExteriorLabelModel.Position,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.Position">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.ExteriorLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.AnchorLocation">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FixedLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.#ctor(System.Double,System.Double,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.#ctor(System.Double,System.Double,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.Distance">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.FreeEdgeLabelModelParameterExtension.Ratio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension.#ctor(System.Int32,yWorks.yFiles.UI.LabelModels.GenericLabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension.Index">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.GenericLabelModelParameterPair">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericLabelModelParameterPair.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Markup.GenericLabelModelParameterPair" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericLabelModelParameterPair.Descriptor">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericLabelModelParameterPair.Parameter">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.GenericMarkupExtension`1">
      <summary>
            Abstract base class for a generic <see cref="T:System.Windows.Markup.MarkupExtension"></see>
            that can be used to write XAML markup.
            </summary>
      <typeparam name="T">The type of object this extension can serialize.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericMarkupExtension`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Markup.GenericMarkupExtension`1" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericMarkupExtension`1.ConvertFrom(`0)">
      <summary>
            Initializes the state of this instance from the given object.
            </summary>
      <param name="t">The object.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.GenericModelExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter,System.Collections.Generic.List{yWorks.yFiles.UI.Model.ILabelModelParameter})">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.AddChild(System.Object)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.AddText(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericModelExtension.Default">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.GenericModelExtension.Parameters">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.GenericModelExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.InteriorLabelModel.Position,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.Position">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.InteriorStretchLabelModel.Position,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.Position">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.InteriorStretchLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.Offset">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.LayoutAnchoredLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.MemoryImageExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.MemoryImageExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.MemoryImageExtension.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.MemoryImageExtension.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.MemoryImageExtension.ImageData">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.MemoryImageExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.NinePositionsEdgeLabelModel.Position,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.Position">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NinePositionsEdgeLabelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.NodeScaledParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NodeScaledParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NodeScaledParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.NodeScaledParameterExtension.Offset">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.NodeScaledParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.#ctor(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.Angle">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.LabelOffset">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.LabelRatio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.LayoutOffset">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.LayoutRatio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RatioAnchoredLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension.#ctor(System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.RotatingEdgeLabelModelParameterExtension.Ratio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.SandwichParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SandwichParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SandwichParameterExtension.#ctor(yWorks.Canvas.Input.HandlePositions)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SandwichParameterExtension.#ctor(yWorks.Canvas.Input.HandlePositions,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SandwichParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SandwichParameterExtension.Position">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SandwichParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.SliderParameterLocation,System.Int32,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.SliderParameterLocation,System.Int32,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.Location">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.SegmentIndex">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SideSliderLabelModelParameterExtension.SegmentRatio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.SliderParameterLocation,System.Int32,System.Double)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.#ctor(yWorks.yFiles.UI.LabelModels.SliderParameterLocation,System.Int32,System.Double,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.Location">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.Model">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.SegmentIndex">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.SliderLabelModelParameterExtension.SegmentRatio">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.TypefaceExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.TypefaceExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Markup.TypefaceExtension" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.TypefaceExtension.ConvertFrom(System.Windows.Media.Typeface)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.TypefaceExtension.FontFamily">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.TypefaceExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.TypefaceExtension.Stretch">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.TypefaceExtension.Style">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.TypefaceExtension.Weight">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.Common.BendExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.BendExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.BendExtension.Location">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.BendExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.BendExtension.Tag">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.Common.GraphSettings">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.GraphSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Markup.Common.GraphSettings" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.GraphSettings.ApplyTo(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.GraphSettings.EdgeDefaults">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.GraphSettings.GroupNodeDefaults">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.GraphSettings.NodeDefaults">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.GraphSettings.ReadFrom(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.GraphSettings.UsePortCandidateProviders">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.Common.LabelExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.LabelExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.LabelExtension.#ctor(System.String)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.LabelExtension.LabelModelParameter">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.LabelExtension.PreferredSize">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.LabelExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.LabelExtension.Style">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.LabelExtension.Tag">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.LabelExtension.Text">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.Common.PortExtension">
      <summary>
      Helper class for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.PortExtension.#ctor">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.PortExtension.#ctor(yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.PortExtension.LocationModelParameter">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.PortExtension.ProvideValue(System.IServiceProvider)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.PortExtension.Style">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.PortExtension.Tag">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Markup.Common.Wrapper">
      <summary>
            Helper class that needs to be public used by the GraphML and XAML conversion process.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Markup.Common.Wrapper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Markup.Common.Wrapper" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Markup.Common.Wrapper.Wrappee">
      <summary>
      Helper property for XAML usage.
   </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter">
      <summary>
            An abstract basic implementation of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see> 
            interface that may be derived from to create a customized <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.DummyEdgeConverter"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            This method gets called by the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> implementation to determine
            whether a given edge in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> should be represented by a dummy edge
            in the given view.
            </summary>
      <param name="callback">The <see cref="T:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback"></see> implementation that needs to be called in order to
            communicate the results of this query.</param>
      <param name="foldedGraph">The instance into which the dummy edge is going to be inserted.</param>
      <param name="masterEdge">The edge from the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that needs to be represented by a dummy
            edge. Note that you may not return this instance.</param>
      <param name="localSourceNode">The source node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual source node.</param>
      <param name="sourceDummy">Determines whether the <paramref name="localSourceNode"></paramref> is currently a dummy node.</param>
      <param name="localTargetNode">The target node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual target node.</param>
      <param name="targetDummy">Determines whether the <paramref name="localTargetNode"></paramref> is currently a dummy node.</param>
      <returns>The edge as returned by <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)"></see>, or <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddToExistingDummy(yWorks.yFiles.UI.Model.IEdge)"></see>, 
            or <see langword="null"></see> if the edge will be <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.ExcludeDummyEdge">excluded</see> from the view.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Implements the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> method and changes the dummy edge appearance.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph to which the dummy edge belongs.</param>
      <param name="localDummyEdge">The dummy edge for which the appearance might need an update.</param>
      <param name="masterEdges">The list of <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">master edges</see>, that
            the dummy edge currently represents.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CloneEdgeStyle">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.DummyEdgeStyle"></see> instance should 
            be assigned as a <see cref="M:System.ICloneable.Clone"></see>clone or not.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CopyFirstLabel">
      <summary>
            Gets or sets a value indicating whether the first label of the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">master edge</see>
            should be recreated for the dummy edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Implements the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> method and initializes the dummy edge appearance.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph to which the dummy edge belongs.</param>
      <param name="localDummyEdge">The dummy edge for which the appearance shall be determined.</param>
      <param name="masterEdges">The list of <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">master edges</see>, that
            the dummy edge initially represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateEdgeStyle(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback factory method that creates the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> for use
            in <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateInitialStyle(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see>.
            </summary>
      <param name="foldedGraph">The folded graph instance.</param>
      <param name="dummyEdge">The dummy edge in the view whose <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see> should be initialed.</param>
      <param name="masterEdges">The edges that are being represented by the dummy edge.</param>
      <returns>The <see cref="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.DummyEdgeStyle"></see> or a <see cref="M:System.ICloneable.Clone"></see> of it
            depending on the <see cref="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CloneEdgeStyle"></see> property. This method may return <see langword="null"></see>
            to indicate that the default style should not be changed.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateInitialBends(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that initializes the bends
            of the dummy edge.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> call.</param>
      <param name="dummyEdge">The dummy edge in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterEdges">The master edges that the dummy edge represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateInitialLabels(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that initializes the initial labels
            of the dummy edge.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> call.</param>
      <param name="dummyEdge">The dummy edge in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterEdges">The master edges that the dummy edge represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateInitialPorts(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that initializes the ports
            of the dummy edge.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> call.</param>
      <param name="dummyEdge">The dummy edge in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterEdges">The master edges that the dummy edge represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateInitialStyle(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that initializes the <see cref="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetStyle(yWorks.yFiles.UI.Drawing.IEdgeStyle)">style property</see>
            of the dummy edge.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> call.</param>
      <param name="dummyEdge">The dummy edge in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterEdges">The master edges that the dummy edge represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateSourcePortLocationParameter(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that creates the source port location parameter.
            </summary>
      <param name="graph">The graph.</param>
      <param name="edge">The edge to create the parameter for.</param>
      <param name="masterEdges">The master edges.</param>
      <returns>The parameter to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CreateTargetPortLocationParameter(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback method that creates the target port location parameter.
            </summary>
      <param name="graph">The graph.</param>
      <param name="edge">The edge to create the parameter for.</param>
      <param name="masterEdges">The master edges.</param>
      <returns>The parameter to use.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.DummyEdgeStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> to use for the dummy edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.DummySourcePortStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> to use for the dummy source port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.DummyTargetPortStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> to use for the dummy target port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.FirstLabelModelParameter">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> to use for the first label of the dummy edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.FirstLabelStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> to use for the first label of the dummy edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.ResetBends">
      <summary>
            Gets or sets a value indicating whether to reset and clear the bends of a dummy edge initially.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.ResetDummyPorts">
      <summary>
            Gets or sets a value indicating whether to reset the location of dummy ports to the
            center of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.SynchronizeLabels(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Called by <see cref="M:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> to synchronize the first label if <see cref="P:yWorks.yFiles.UI.Model.AbstractDummyEdgeConverter.CopyFirstLabel"></see>
            is enabled.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph.</param>
      <param name="dummyEdge">The dummy edge.</param>
      <param name="masterEdges">The master edges.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.AbstractGraphWrapper">
      <summary>
            An abstract <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation that delegates all of its work
            to an existing implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a new instance that wraps a given <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
      <param name="graph">The graph to wrap.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a bend at the given index to the given edge using the coordinates provided.
            The added instance will be returned.
            </summary>
      <param name="edge">The edge to which the bend will be added.</param>
      <param name="index">The index for the newly added bend</param>
      <param name="location">the coordinates to use for the newly created bend</param>
      <returns>a newly created live bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.AddEventHandlers(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Adds event handlers that propagate graph events from <paramref name="graph"></paramref>
            to listeners on this instance. 
            </summary>
      <param name="graph">The graph for which event propagators should be created</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)">
      <summary>
            Add a label to the given item using the text as the initial label text and label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="labelModelParameter">The label model parameter instance to use.</param>
      <param name="text">the initial text of the label</param>
      <param name="style">The style to use for the label</param>
      <param name="preferredSize">The initial values to use for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle,System.Object)">
      <summary>
            Add a port to the given port owner using the location model parameter to determine the location of the port.
            </summary>
      <param name="portOwner">the owner to add the port instance to.</param>
      <param name="locationModelParameter">the parameter to use for the port to determine its location.</param>
      <param name="style">the style to initially assign to the <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see> property, e.g.
            <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see>.
            </param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created port</returns>
      <exception cref="T:System.NotSupportedException">If this instance cannot add a port to <paramref name="portOwner"></paramref>.</exception>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendAdded">
      <summary>
            Event that is triggered if a bend has been added to an edge in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendChanged">
      <summary>
            Event that is triggered if a bend has been changed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendRemoved">
      <summary>
            Event that is triggered if a bend has been removed from an edge in this graph.
            This event will be triggered, too, if an edge has been removed from the graph, for each
            of the bends that belonged to the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Bends">
      <summary>
            A collection view over the bends of the edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.CollectionModel">
      <summary>
            Offers a view over all elements that make up the graph. This is a combined view
            of all nodes, edges, labels, ports, and bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this graph contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.CreateEdge(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances using the
            given style instance. 
            </summary>
      <param name="source">The source node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="target">The target node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.CreateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.CreateNode(yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial geometry.
            </summary>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new node.</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.DisplaysInvalidated">
      <summary>
            Event that is triggered if the graph has changed visually and the display should
            be updated to reflect the changes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeChanged">
      <summary>
            Event that is triggered if an edge has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeCreated">
      <summary>
            Event that is triggered if an edge has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeDefaults">
      <summary>
            Gets or sets the defaults for normal edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeLabels">
      <summary>
            A collection view over the labels attached to edges contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeRemoved">
      <summary>
            Event that is triggered if an edge has been removed.
            This event will be triggered, too, prior to a node removal. 
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Edges">
      <summary>
            A collection view over the edges contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for all edges that are adjacent to the given 
            port as a <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>.
            </summary>
      <param name="port">the port to check</param>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgesAt(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see> for all edges that have the given port owner as their 
            <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port's</see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port's</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner"></see>
            depending on the <see cref="T:yWorks.yFiles.UI.Model.AdjacencyTypes"></see></summary>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <param name="portOwner">the port owner to check</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.GetLookup">
      <summary>
            Gets the lookup instance to use in <see cref="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Lookup(System.Type)"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph">
      <summary>
            The wrapped graph instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_BendAdded(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.BendAdded"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_BendChanged(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.BendChanged"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_BendRemoved(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.BendRemoved"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_DisplaysInvalidated(System.Object,System.EventArgs)">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.DisplaysInvalidated"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_EdgeChanged(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.EdgeChanged"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_EdgeCreated(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.EdgeCreated"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_EdgeRemoved(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.EdgeRemoved"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_LabelAdded(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.LabelAdded"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_LabelChanged(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.LabelChanged"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_LabelRemoved(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.LabelRemoved"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_NodeChanged(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.NodeChanged"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_NodeCreated(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.NodeCreated"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_NodeRemoved(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.NodeRemoved"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_PortAdded(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.PortAdded"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_PortChanged(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.PortChanged"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.graph_PortRemoved(System.Object,yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Event propagator for <see cref="E:yWorks.yFiles.UI.Model.IGraph.PortRemoved"></see> events from the wrapped graph.
            </summary>
      <param name="source">the source of the event</param>
      <param name="eventArgs">the parameters of this event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.InvalidateDisplays">
      <summary>
            Causes the <see cref="E:yWorks.yFiles.UI.Model.IGraph.DisplaysInvalidated"></see> event to be triggered.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelAdded">
      <summary>
            Event that is triggered if a label has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelChanged">
      <summary>
            Event that is triggered if a label has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelRemoved">
      <summary>
            Event that is triggered if a label has been removed from this graph instance. 
            This event will also be triggered, prior to the removal of the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Owner">owner</see>
            of the label.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AbstractGraphWrapper.lookup">
      <summary>
            The lookup instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.MapperRegistry">
      <summary>
            Gets the mapper registry that is associated with this graph instance.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeChanged">
      <summary>
            Event that is triggered if a node has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeCreated">
      <summary>
            Event that is triggered if a node has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeDefaults">
      <summary>
            Gets or sets the defaults for normal nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeLabels">
      <summary>
            A collection view over the labels attached to nodes contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeRemoved">
      <summary>
            Event that is triggered if a node has been removed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Nodes">
      <summary>
            A collection view over the nodes contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnBendAdded(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendAdded"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnBendChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendChanged"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnBendRemoved(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.BendRemoved"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnEdgeChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeChanged"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnEdgeCreated(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeCreated"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnEdgeRemoved(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.EdgeRemoved"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnInvalidateDisplays(System.EventArgs)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.DisplaysInvalidated"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnLabelAdded(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelAdded"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnLabelChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelChanged"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnLabelRemoved(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.LabelRemoved"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnNodeChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeChanged"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnNodeCreated(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeCreated"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnNodeRemoved(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.NodeRemoved"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnPortAdded(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortAdded"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnPortChanged(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortChanged"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.OnPortRemoved(yWorks.Canvas.Model.ItemEventArgs{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortRemoved"></see> event
            </summary>
      <param name="args">The parameters for the event</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortAdded">
      <summary>
            Event that is triggered if a port has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortChanged">
      <summary>
            Event that is triggered if a port has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.AbstractGraphWrapper.PortRemoved">
      <summary>
            Event that is triggered if a port has been removed from its <see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see>.
            This event will also be triggered prior to the removal of the corresponding owner
            of the port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Ports">
      <summary>
            A collection view over the ports contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Remove(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the given bend instance from its edge. 
            </summary>
      <param name="bend">the bend to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Remove(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Removes the given edge instance from this graph. 
            </summary>
      <param name="edge">the live edge to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Remove(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the given label from its owner. 
            This will trigger the corresponding event.
            </summary>
      <param name="label">the label to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Remove(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Removes the given node instance from this graph. 
            </summary>
      <param name="node">the live node to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Remove(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes a port from its owner. 
            </summary>
      <param name="port">the port that will be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.RemoveEventHandlers(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Removes event handlers for <paramref name="graph"></paramref> 
            that have been added with <see cref="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.AddEventHandlers(yWorks.yFiles.UI.Model.IGraph)"></see>.
            </summary>
      <param name="graph">The graph for which event propagators should be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Sets the bounds of the given node to the new values.
            </summary>
      <param name="node">a live node that belongs to this graph</param>
      <param name="bounds">The new bounds of the node to assign to its <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the label model parameter for the given label.
            </summary>
      <param name="label">The label.</param>
      <param name="parameter">The new parameter.</param>
      <exception cref="T:System.ArgumentException">If the parameter cannot be used for this label.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text of the given label.
            </summary>
      <param name="label">the label to modify</param>
      <param name="text">the new text of the label</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Modifies the location of the given bend.
            </summary>
      <param name="bend">the bend whose location is to be modified</param>
      <param name="location">the new location of the bend</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets a new <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> for the given port.
            </summary>
      <param name="port">The port to modify</param>
      <param name="locationParameter">the new parameter that determines the coordinates of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetLookup(yWorks.Support.ILookup)">
      <summary>
            Sets the lookup instance to use in <see cref="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.Lookup(System.Type)"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the preferred size of the label.
            </summary>
      <param name="label">The label.</param>
      <param name="preferredSize">The new preferred size.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Assigns the given style instance by reference to the edge.
            Style instances can be shared.
            </summary>
      <param name="edge">The edge that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Assigns the given style instance by reference to the label.
            Style instances can be shared.
            </summary>
      <param name="label">The label that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Assigns the given style instance by reference to the node.
            Style instances can be shared.
            </summary>
      <param name="node">The node that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractGraphWrapper.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Assigns the given style instance by reference to the port.
            Style instances can be shared. The style instance may be <c>null</c> in 
            which case the port will not be rendered.
            </summary>
      <param name="port">The port that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the port.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.AbstractLabeledItem">
      <summary>
            Base class for <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractLabeledItem.#ctor(yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Creates a new instance using the given collection of labels and a 
            <c>null</c><see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup</see>.
            </summary>
      <param name="labelCollection">the collection to use</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractLabeledItem.#ctor(yWorks.Support.ILookup,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Creates a new instance using the given collection of labels and the given lookup.
            </summary>
      <param name="labelCollection">the collection to use</param>
      <param name="lookup">the lookup to use</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractLabeledItem.Labels">
      <summary>
            Gets or sets the collection for the labels.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.AbstractModelItem">
      <summary>
            A basic implementation of a <see cref="T:yWorks.Canvas.Model.IModelItem"></see>
            with support for pluggable <see cref="T:yWorks.Support.ILookup"></see> implementations.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractModelItem.#ctor">
      <summary>
            Creates a new item with no initial lookup implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractModelItem.#ctor(yWorks.Support.ILookup)">
      <summary>
            Creates a new item using the given initial lookup implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">
      <summary>
            Returns the currently set <see cref="T:yWorks.Support.ILookup"></see> delegate.
            </summary>
      <returns>the current lookup delegate</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractModelItem.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.AbstractModelItem.SetLookupImplementation(yWorks.Support.ILookup)">
      <summary>
            Sets the <see cref="T:yWorks.Support.ILookup"></see> implementation used for
            <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.Lookup(System.Type)"></see> calls on this instance.
            </summary>
      <param name="newLookup">the new implementation to use</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.AbstractModelItem.Tag">
      <summary>
            Gets or sets the tag associated with this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.AdjacencyTypes">
      <summary>
            Enumeration type for the different types of adjacency.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AdjacencyTypes.None">
      <summary>
            Neither <see cref="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Incoming"></see> nor <see cref="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Outgoing"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Incoming">
      <summary>
            The constant for incoming edges. An edge that is incoming at its
            owner has the owner as its target.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Outgoing">
      <summary>
            The constant for outgoing edges. An edge that is outgoing from its
            owner has the owner as its source.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.AdjacencyTypes.All">
      <summary>
            Both <see cref="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Incoming"></see> and <see cref="F:yWorks.yFiles.UI.Model.AdjacencyTypes.Outgoing"></see></summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.BendDecorator">
      <summary>
            A subclass of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see>
            class that is specifically tailored for <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendDecorator.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.BendDecorator"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.BendDecorator.HandleDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IHandle"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.BendEventArgs">
      <summary>
            A specialized subclass of the <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see>
            class that is bound to the <see cref="T:yWorks.yFiles.UI.Model.IBend"></see> type and carries
            additional <see cref="T:yWorks.yFiles.UI.Model.IEdge">owner</see> and index information.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendEventArgs.#ctor(yWorks.yFiles.UI.Model.IBend,yWorks.yFiles.UI.Model.IEdge,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.BendEventArgs"></see> class.
            </summary>
      <param name="bend">The bend to assign to the <see cref="P:yWorks.Canvas.Model.ItemEventArgs`1.Item"></see> property.</param>
      <param name="owner">The previous owner of the bend.</param>
      <param name="index">The previous index of the bend in the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> list.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.BendEventArgs.Index">
      <summary>
            Gets the former index of the bend in the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> list.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.BendEventArgs.Owner">
      <summary>
            Gets the owner of the bend that owned the bend before the event happened.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.BendList">
      <summary>
            A simple implementation of a list of <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendList.#ctor">
      <summary>
            Initializes a new empty instance of the <see cref="T:yWorks.yFiles.UI.Model.BendList"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendList.#ctor(System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.BendList"></see> class using the provided list
            for the bend collection.
            </summary>
      <param name="bends">The bends.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendList.Add(System.Int32,yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Adds the bend at the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="bend">The bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendList.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.BendList.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.BendList.Item(System.Int32)">
      <summary>
            Returns the i-th element in the collection.
            </summary>
      <param name="i">the zero-based index of the item in this collection</param>
      <returns>the item for the given index</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.BendList.Remove(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the specified bend.
            </summary>
      <param name="bend">The bend.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.BendLocationChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.IBendLocationChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="bend">The bend whose location changed.</param>
      <param name="oldLocation">The old coordinates of the bend's location.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.CompositeGraph">
      <summary>
            A graph wrapper implementation that takes two <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instances
            and merges them into one.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a new instance which is a composite of the two given graphs.
            </summary>
      <param name="graph">The first graph.</param>
      <param name="graph2">The second graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a bend at the given index to the given edge using the coordinates provided.
            The added instance will be returned.
            </summary>
      <param name="edge">The edge to which the bend will be added.</param>
      <param name="index">The index for the newly added bend</param>
      <param name="location">the coordinates to use for the newly created bend</param>
      <returns>a newly created live bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)">
      <summary>
            Add a label to the given item using the text as the initial label text and label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="labelModelParameter">The label model parameter instance to use.</param>
      <param name="text">the initial text of the label</param>
      <param name="style">The style to use for the label</param>
      <param name="preferredSize">The initial values to use for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.Bends">
      <summary>
            A collection view over the bends of the edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.CollectionModel">
      <summary>
            Offers a view over all elements that make up the graph. This is a combined view
            of all nodes, edges, labels, ports, and bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this graph contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.CreateEdge(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances using the
            given style instance. 
            </summary>
      <param name="source">The source node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="target">The target node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.CreateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.EdgeLabels">
      <summary>
            A collection view over the labels attached to edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.Edges">
      <summary>
            A collection view over the edges contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for all edges that are adjacent to the given 
            port as a <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>.
            </summary>
      <param name="port">the port to check</param>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.EdgesAt(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see> for all edges that have the given port owner as their 
            <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port's</see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port's</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner"></see>
            depending on the <see cref="T:yWorks.yFiles.UI.Model.AdjacencyTypes"></see></summary>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <param name="portOwner">the port owner to check</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.NodeLabels">
      <summary>
            A collection view over the labels attached to nodes contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.Nodes">
      <summary>
            A collection view over the nodes contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.CompositeGraph.Ports">
      <summary>
            A collection view over the ports contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Remove(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the given bend instance from its edge. 
            </summary>
      <param name="bend">the bend to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Remove(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Removes the given edge instance from this graph. 
            </summary>
      <param name="edge">the live edge to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Remove(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the given label from its owner. 
            This will trigger the corresponding event.
            </summary>
      <param name="label">the label to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Remove(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Removes the given node instance from this graph. 
            </summary>
      <param name="node">the live node to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.Remove(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes a port from its owner. 
            </summary>
      <param name="port">the port that will be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Sets the bounds of the given node to the new values.
            </summary>
      <param name="node">a live node that belongs to this graph</param>
      <param name="bounds">The new bounds of the node to assign to its <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the label model parameter for the given label.
            </summary>
      <param name="label">The label.</param>
      <param name="parameter">The new parameter.</param>
      <exception cref="T:System.ArgumentException">If the parameter cannot be used for this label.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text of the given label.
            </summary>
      <param name="label">the label to modify</param>
      <param name="text">the new text of the label</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Modifies the location of the given bend.
            </summary>
      <param name="bend">the bend whose location is to be modified</param>
      <param name="location">the new location of the bend</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets a new <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> for the given port.
            </summary>
      <param name="port">The port to modify</param>
      <param name="locationParameter">the new parameter that determines the coordinates of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the preferred size of the label.
            </summary>
      <param name="label">The label.</param>
      <param name="preferredSize">The new preferred size.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Assigns the given style instance by reference to the edge.
            Style instances can be shared.
            </summary>
      <param name="edge">The edge that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Assigns the given style instance by reference to the label.
            Style instances can be shared.
            </summary>
      <param name="label">The label that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Assigns the given style instance by reference to the node.
            Style instances can be shared.
            </summary>
      <param name="node">The node that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.CompositeGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Assigns the given style instance by reference to the port.
            Style instances can be shared. The style instance may be <c>null</c> in 
            which case the port will not be rendered.
            </summary>
      <param name="port">The port that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the port.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptorProvider"></see> interface
            that always yields a constant <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.#ctor(yWorks.yFiles.UI.Model.ILabelCandidateDescriptor)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider"></see> class.
            that always yields <paramref name="descriptor"></paramref> in <see cref="M:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.GetDescriptor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)"></see>.
            </summary>
      <param name="descriptor">The descriptor to yield in <see cref="M:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.GetDescriptor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)"></see>.</param>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.ExternalDescriptorProvider">
      <summary>
            A sharable implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptorProvider"></see>
            interface that always yields <see cref="F:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.ExternalDescriptor"></see>. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.GetDescriptor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Always yields the parameter that has been passed to the constructor.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.ConstantLabelCandidateDescriptorProvider.InternalDescriptorProvider">
      <summary>
            A sharable implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptorProvider"></see>
            interface that always yields <see cref="F:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.InternalDescriptor"></see>. 
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultBendLookup">
      <summary>
            This is the default implementation of an <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>'s
            <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultBendLookup.#ctor">
      <summary>
            Create a new instance without a context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultBendLookup.#ctor(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Create a new instance with the given bend as context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultBendLookup.Bend">
      <summary>
            Gets or sets the bend this instance uses as the context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultBendLookup.Lookup(yWorks.yFiles.UI.Model.IBend,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Subclasses need to override this method.
            </summary>
      <param name="item">The context item to lookup an implementation for.</param>
      <param name="type">The type of the implementation to find.</param>
      <param name="nextLookup">The lookup to use for another type.</param>
      <param name="lastLookup">The lookup to use as a fallback for the type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter">
      <summary>
            The default implementation of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see> that
            is used by the <see cref="T:yWorks.yFiles.UI.Model.FoldingManager"></see> initially and can be customized to suit the application's needs.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Actually adds the dummy edge as a <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">separate edge</see>
            to the view, reusing existing port <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetRepresentative``1(``0)">representatives</see>
            of the original source and target port, if <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter.ReuseMasterPorts"></see> is enabled and that is possible for the given edge.
            </summary>
      <param name="callback">The <see cref="T:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback"></see> implementation.</param>
      <param name="foldedGraph">The instance into which the dummy edge is going to be inserted.</param>
      <param name="masterEdge">The edge from the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that needs to be represented by a dummy
            edge.</param>
      <param name="localSourceNode">The source node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual source node.</param>
      <param name="sourceDummy">Determines whether the <paramref name="localSourceNode"></paramref> is currently a dummy node.</param>
      <param name="localTargetNode">The target node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual target node.</param>
      <param name="targetDummy">Determines whether the <paramref name="localTargetNode"></paramref> is currently a dummy node.</param>
      <returns>The edge as returned by the call to <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter.ReuseDummyNodePorts">
      <summary>
            Gets or sets a property that determines whether this implementation should 
            reuse the ports of <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> nodes for the dummy edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyEdgeConverter.ReuseMasterPorts">
      <summary>
            Gets or sets a property that determines whether this implementation should 
            reuse the ports  
            of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> 
            at non-<see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> nodes for the dummy edges.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter">
      <summary>
            Simple default implementation of the <see cref="T:yWorks.yFiles.UI.Model.IDummyNodeConverter"></see> interface that
            is used by the <see cref="T:yWorks.yFiles.UI.Model.FoldingManager"></see>'s <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.DummyNodeConverter"></see>
            property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.#ctor">
      <summary>
             Initializes a new instance of this class with default values.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.#ctor(yWorks.yFiles.UI.Model.INodeDefaults)">
      <summary>
             Initializes a new instance of this class using the values
             provided by the <paramref name="collapsedNodeDefaults"></paramref> parameter.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.ChangeDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Implements the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> method and changes the dummy edge appearance.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph instance for which the dummy node can be changed.</param>
      <param name="dummyNode">The dummy node instance in the view</param>
      <param name="masterNode">The node that represents the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)"></see> item that
            is represented in the local view by the <paramref name="dummyNode"></paramref>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CloneNodeStyle">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CollapsedNodeStyle"></see> instance should 
            be assigned as a <see cref="M:System.ICloneable.Clone"></see>clone or not.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.ClonePortStyle">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.PortStyle"></see> instance should 
            be assigned as a <see cref="M:System.ICloneable.Clone"></see>clone or not.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CollapsedNodeStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> to use for the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed</see> group nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CopyFirstLabel">
      <summary>
            Gets or sets a value indicating whether the first label of the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">master group node</see>
            should be recreated for the collapsed group node instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Implements the <see cref="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> method and initializes the appearance of the 
            collapsed group node.
            </summary>
      <param name="callback">The callback to use for determining the appearance.</param>
      <param name="foldedGraph">The graph instance for which the dummy node has been created.</param>
      <param name="dummyNode">The dummy node instance in the view</param>
      <param name="masterNode">The node that represents the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)"></see> item that
            is represented in the local view by the <paramref name="dummyNode"></paramref>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialLabels(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that initializes the initial labels
            of the collapsed group node.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> call.</param>
      <param name="localCollapsedNode">The collapsed group node in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterNode">The master node that the dummy node represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialLayout(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that initializes the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> of the collapsed group node.
            </summary>
      <param name="callback">The callback to use for <see cref="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetBounds(yWorks.Canvas.Geometry.Structs.RectD)"></see></param>
      <param name="foldedGraph">The folded graph instance.</param>
      <param name="localCollapsedNode">The local collapsed group node to change.</param>
      <param name="masterNode">The master node that is represented by the local group node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialPorts(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Called by <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> to initialize the appearance of the 
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetRepresentative``1(``0)">representatives</see> of the master ports at the collapsed group node.
            </summary>
      <param name="callback">The callback to use for <see cref="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetPortStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">setting the port style</see>
            and <see cref="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetPortLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">location</see>.</param>
      <param name="foldedGraph">The folded graph instance.</param>
      <param name="localCollapsedNode">The local group node.</param>
      <param name="masterNode">The master group node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialStyle(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that initializes the <see cref="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetStyle(yWorks.yFiles.UI.Drawing.INodeStyle)">style property</see>
            of the collapsed group node.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph instance that has triggered the <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> call.</param>
      <param name="localCollapsedNode">The local node in the view that may be changed using the <paramref name="callback"></paramref>.</param>
      <param name="masterNode">The master node that the local dummy node represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateNodeStyle(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback factory method that creates the <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> for use
            in <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialStyle(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see>.
            </summary>
      <param name="foldedGraph">The folded graph instance.</param>
      <param name="localCollapsedNode">The local dummy node in the view whose <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see> should be initialized.</param>
      <param name="masterNode">The node that is being represented by the dummy node.</param>
      <returns>The <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CollapsedNodeStyle"></see> or a <see cref="M:System.ICloneable.Clone"></see> of it
            depending on the <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CloneNodeStyle"></see> property. This method may return <see langword="null"></see>
            to indicate that the default style should not be changed.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreatePortStyle(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback factory method that creates the <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> for use
            in <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CreateInitialPorts(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see>.
            </summary>
      <param name="foldedGraph">The folded graph instance.</param>
      <param name="localPort">The local port in the view whose <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see> should be initialed.</param>
      <param name="masterPort">The port that is being represented by the dummy port.</param>
      <returns>The <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.PortStyle"></see> or a <see cref="M:System.ICloneable.Clone"></see> of it
            depending on the <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.ClonePortStyle"></see> property. This method may return <see langword="null"></see>
            to indicate that the default style should not be changed.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.FirstLabelModelParameter">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> to use for the first label of the collapsed group node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.FirstLabelStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> to use for the first label of the collapsed group nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.InitialSize">
      <summary>
            Sets the initial size of the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> of the collapsed group node that
            will be assigned during the <see cref="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">creation</see>
            of the appearance of the collapsed group node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.PortStyle">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> to use for the ports at the collapsed group node that
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetRepresentative``1(``0)">represent</see> the ports of the 
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">master group node</see> in the collapsed state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.ResetPortLocation">
      <summary>
            Gets or sets a value indicating whether to reset the location of dummy ports to the
            center of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.SynchronizeLabels(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Called by <see cref="M:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.ChangeDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> to synchronize the first label if <see cref="P:yWorks.yFiles.UI.Model.DefaultDummyNodeConverter.CopyFirstLabel"></see>
            is enabled.
            </summary>
      <param name="callback">The callback.</param>
      <param name="foldedGraph">The folded graph.</param>
      <param name="localCollapsedNode">The local node instance.</param>
      <param name="masterNode">The master node.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator">
      <summary>
            The default implementation of the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeIntersectionCalculator"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.CropEdgePath(yWorks.Canvas.Drawing.GeneralPath@,System.Boolean,yWorks.yFiles.UI.Drawing.IArrow)">
      <summary>
            Crops an edge's path at the source or target side with respect to the given arrow.
            </summary>
      <param name="edgePath">The edge's path to crop.</param>
      <param name="atSource">if set to <see langword="true"></see> the source side is cropped.</param>
      <param name="arrow">The arrow to consider for the cropping.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.CropEdgePath(yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.yFiles.UI.Drawing.IArrow,yWorks.Canvas.Drawing.GeneralPath@)">
      <summary>
            Crops the provided <paramref name="edgePath"></paramref> at one end of an edge.
            </summary>
      <param name="edge">The edge whose path is to be cropped.</param>
      <param name="atSource">Whether to crop the source or target side of the path.</param>
      <param name="arrow">The arrow that is used at the end of the edge.</param>
      <param name="edgePath">The path to crop.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.GetIntersection(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IShapeGeometry,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Finds the intersection between a node and the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.Inside(yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IShapeGeometry,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Checks whether a given point is inside a node's shape geometry with respect to the edge that is being calculated.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultEdgeIntersectionCalculator.Instance">
      <summary>
            A singleton instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultEdgeLookup">
      <summary>
            The default <see cref="T:yWorks.Support.ILookup"></see> implementation as it is used by the 
            framework's implementations of <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeLookup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.DefaultEdgeLookup"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeLookup.#ctor(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.DefaultEdgeLookup"></see> class that uses
            the provided edge as the <see cref="P:yWorks.yFiles.UI.Model.DefaultItemLookup`1.Item"></see>.
            </summary>
      <param name="edge">The edge.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultEdgeLookup.Edge">
      <summary>
            Sets or gets edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultEdgeLookup.Lookup(yWorks.yFiles.UI.Model.IEdge,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Subclasses need to override this method.
            </summary>
      <param name="item">The context item to lookup an implementation for.</param>
      <param name="type">The type of the implementation to find.</param>
      <param name="nextLookup">The lookup to use for another type.</param>
      <param name="lastLookup">The lookup to use as a fallback for the type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultGraph">
      <summary>
            Central implementation of the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.#ctor">
      <summary>
            Creates a new instance of a graph that provides an <see cref="T:yWorks.Support.ILookupDecorator"></see> for
            all of its entities.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.#ctor(yWorks.yFiles.UI.Model.IGraphStructure)">
      <summary>
            Creates a new instance that delegates to the given graph structure.
            Normally there is no need to use this constructor, unless you want to implement your own
            graph structure.
            </summary>
      <param name="graphStructure">The structure that actually generates and holds the items in the
            graph.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="graphStructure"></paramref> is <see langword="null"></see>.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a bend at the given index to the given edge using the coordinates provided.
            The added instance will be returned.
            </summary>
      <param name="edge">The edge to which the bend will be added.</param>
      <param name="index">The index for the newly added bend</param>
      <param name="location">the coordinates to use for the newly created bend</param>
      <returns>a newly created live bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)">
      <summary>
            Add a label to the given item using the text as the initial label text and label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="labelModelParameter">The label model parameter instance to use.</param>
      <param name="text">the initial text of the label</param>
      <param name="style">The style to use for the label</param>
      <param name="preferredSize">The initial values to use for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.AddLookup(yWorks.Support.IContextLookupChainLink)">
      <summary>
            Adds the chain element to the lookup for this instance.
            </summary>
      <param name="chainLink">The lookup to decorate the current instance with.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle,System.Object)">
      <summary>
            Add a port to the given port owner using the coordinates as the new initial position of
            the port anchor.
            </summary>
      <param name="portOwner">the owner to add the port instance to.</param>
      <param name="locationModelParameter">the parameter to use for the port to determine its location.</param>
      <param name="portStyle">the style to assign initially to the port, e.g. <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see>.</param>
      <param name="tag">The tag to associate with the port, may be <see langword="null"></see>.</param>
      <returns>the newly created port</returns>
      <exception cref="T:System.NotSupportedException">If this instance cannot add a port to <paramref name="portOwner"></paramref>.</exception>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.BendAdded">
      <summary>
            Event that is triggered if a bend has been added to an edge in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.BendChanged">
      <summary>
            Event that is triggered if a bend has been changed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.BendRemoved">
      <summary>
            Event that is triggered if a bend has been removed from an edge in this graph.
            This event will be triggered, too, if an edge has been removed from the graph, for each
            of the bends that belonged to the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.Bends">
      <summary>
            A collection view over the bends of the edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.CollectionModel">
      <summary>
            Offers a view over all elements that make up the graph. This is a combined view
            of all nodes, edges, labels, ports, and bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this graph contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeLabelModelParameter">
      <summary>
            Factory method that obtains a <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            to use for a newly created edge label.
            </summary>
      <returns>A model parameter instance to use for the newly created edge label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeLabelStyle">
      <summary>
            Factory method for the default edge label style. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.EdgeDefaults"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.SimpleLabelStyle"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgePortLocationParameter">
      <summary>
            Creates the default edge port location parameter.
            </summary>
      <returns>A simple default parameter suitable for edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeStyle">
      <summary>
            Factory method for the default edge style. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.EdgeDefaults"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.PolylineEdgeStyle"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeLabelModelParameter">
      <summary>
            Factory method that obtains a <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            to use for a newly created node label.
            </summary>
      <returns>A model parameter instance to use for the newly created node label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeLabelStyle">
      <summary>
            Factory method for the default node label style. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.NodeDefaults"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.SimpleLabelStyle"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodePortLocationParameter">
      <summary>
            Creates the default node port location parameter.
            </summary>
      <returns>
        <see cref="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeCenterAnchored">
        </see>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeStyle">
      <summary>
            Factory method for the default node style. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.NodeDefaults"></see> property.
            </summary>
      <returns>a new instance of <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdge(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances using the
            given style instance.
            </summary>
      <param name="source">The source node the created edge will connect to. This implementation
            queries the <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.GetNewSourcePort(yWorks.yFiles.UI.Model.IPortOwner)"></see> method to determine which port to use.</param>
      <param name="target">The target node the created edge will connect to. This implementation
            queries the <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.GetNewSourcePort(yWorks.yFiles.UI.Model.IPortOwner)"></see> method to determine which port to use.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdgeDefaults">
      <summary>
            Callback method that creates the edge defaults.
            </summary>
      <returns>A new instance of the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.EdgeDefaults"></see> class that is populated
            using the return values of <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeStyle"></see>, <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdgeLabelDefaults"></see>, and
            <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdgePortDefaults"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdgeLabelDefaults">
      <summary>
            Callback method that creates the edge label defaults.
            </summary>
      <returns>A new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class that is populated
            using the return values of <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeLabelStyle"></see> and <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgeLabelModelParameter"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdgePortDefaults">
      <summary>
            Callback method that creates the edge port defaults.
            </summary>
      <returns>A new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class that is populated
            using the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see> and <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultEdgePortLocationParameter"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateMapperRegistry">
      <summary>
            Factory method for the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.MapperRegistry"></see> property that creates the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
      <returns>A new instance of <see cref="T:yWorks.yFiles.UI.Model.MapperRegistry"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNode(yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial geometry.
            </summary>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new node.</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNodeDefaults">
      <summary>
            Callback method that creates the node defaults.
            </summary>
      <returns>A new instance of the <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.NodeDefaults"></see> class that is populated
            using the return values of <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeStyle"></see>, <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNodeLabelDefaults"></see>, and
            <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNodePortDefaults"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNodeLabelDefaults">
      <summary>
            Callback method that creates the node label defaults.
            </summary>
      <returns>A new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class that is populated
            using the return values of <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeLabelStyle"></see> and <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodeLabelModelParameter"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateNodePortDefaults">
      <summary>
            Callback method that creates the node port defaults.
            </summary>
      <returns>A new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class that is populated
            using the <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see> and <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateDefaultNodePortLocationParameter"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreatePortStyle(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Factory method that creates and returns a port style to use for newly created
            ports.
            </summary>
      <returns>Either the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.Style"></see> instance or a <see cref="M:System.ICloneable.Clone">clone</see> of it.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateUndoEngine">
      <summary>
            Creates an <see cref="T:yWorks.Support.UndoEngine"></see> instance
            that automatically triggers <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.InvalidateDisplays"></see>
            upon each invocation of <see cref="M:yWorks.Support.UndoEngine.Undo"></see>
            and <see cref="M:yWorks.Support.UndoEngine.Redo"></see></summary>
      <returns>An <see cref="T:yWorks.Support.UndoEngine"></see> instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateUndoSupport">
      <summary>
            Creates the <see cref="T:yWorks.Support.IUndoSupport"></see> instance that can be
            <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.Lookup(System.Type)">looked up</see> on this instance.
            </summary>
      <returns>An undo support instance that enqueues <see cref="T:yWorks.Support.IUndoUnit"></see>s into
            this instance's <see cref="T:yWorks.Support.UndoEngine"></see>.</returns>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.DisplaysInvalidated">
      <summary>
            Event that is triggered if the graph has changed visually and the display should
            be updated to reflect the changes.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.EdgeChanged">
      <summary>
            Event that is triggered if an edge has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.EdgeCreated">
      <summary>
            Event that is triggered if an edge has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.EdgeDefaults">
      <summary>
            Gets or sets the defaults for normal edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.EdgeLabels">
      <summary>
            A collection view over the labels attached to edges contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.EdgeRemoved">
      <summary>
            Event that is triggered if an edge has been removed.
            This event will be triggered, too, prior to a node removal. 
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.Edges">
      <summary>
            A collection view over the edges contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for all edges that are adjacent to the given 
            port as a <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>.
            </summary>
      <param name="port">the port to check</param>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.EdgesAt(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see> for all edges that have the given port owner as their 
            <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port's</see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port's</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner"></see>
            depending on the <see cref="T:yWorks.yFiles.UI.Model.AdjacencyTypes"></see></summary>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <param name="portOwner">the port owner to check</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.GetBounds">
      <summary>
            Calculates the bounds of this graph using the 
            <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>, <see cref="P:yWorks.yFiles.UI.Model.IPort.Location">source port
            and target port locations</see>, and the <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>s.
            </summary>
      <returns>A rectangle that is the union of all elements in the graph.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.GetLookup">
      <summary>
            Returns the lookup implementation that is used for <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.Lookup(System.Type)"></see> calls.
            </summary>
      <returns>The replacing lookup instance or <c>null</c> if the internal
            lookup mechanism is used.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.GetNewSourcePort(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Determines a <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instance to use for the creation
            of a new edge that starts at the given node.
            </summary>
      <param name="source">The source node to find a port for.</param>
      <returns>The port to use for a newly created edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.GetNewTargetPort(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Determines a <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instance to use for the creation
            of a new edge that ends at the given node.
            </summary>
      <param name="target">The target node to find a port for.</param>
      <returns>The port to use for a newly created edge.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.GraphStructure">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Model.IGraphStructure">graph structure</see> instance used internally.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.GroupingSupported">
      <summary>
            Convenience method that enables or disables grouping capabilities 
            for this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.InnerLookup(System.Type)">
      <summary>
            The last element in the lookup chain is implemented by this method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.InvalidateDisplays">
      <summary>
            Triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.DisplaysInvalidated"></see> event.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.LabelAdded">
      <summary>
            Event that is triggered if a label has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.LabelChanged">
      <summary>
            Event that is triggered if a label has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.LabelRemoved">
      <summary>
            Event that is triggered if a label has been removed from this graph instance. 
            This event will also be triggered, prior to the removal of the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Owner">owner</see>
            of the label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Lookup(System.Type)">
      <summary>
            Returns an instance that provides another aspect of this instance of the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>
            An instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.MapperRegistry">
      <summary>
            Gets the mapper registry that is associated with this graph instance.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.NodeChanged">
      <summary>
            Event that is triggered if a node has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.NodeCreated">
      <summary>
            Event that is triggered if a node has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.NodeDefaults">
      <summary>
            Gets or sets the defaults for normal nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.NodeLabels">
      <summary>
            A collection view over the labels attached to nodes contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.NodeRemoved">
      <summary>
            Event that is triggered if a node has been removed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.Nodes">
      <summary>
            A collection view over the nodes contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnAddingBend(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IBend,System.Int32)">
      <summary>
            Callback that is invoked before a bend is added to this graph's structure.
            </summary>
      <param name="edge">The edge the bend will be added to.</param>
      <param name="bend">The bend that will be added to the edge.</param>
      <param name="index">The index where the bend will be added to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnAddingEdgeLabel(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that will be called just before an edge label is added to an edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnAddingNodeLabel(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that will be called just before a node label is added to a node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnAddingPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Called when a port is going to be added to a node.
            </summary>
      <param name="node">The node.</param>
      <param name="port">The port to be added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnBendAdded(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Callback that after a bend has been added to this graph's structure.
            </summary>
      <param name="bend">The bend that has been added to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnBendChanged(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Callback that is invoked after a bend has changed.
            </summary>
      <param name="bend">The bend that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnBendRemoved(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IBend,System.Int32)">
      <summary>
            Callback method that is invoked just after a bend has been removed from its edge.
            </summary>
      <param name="owner">The old edge.</param>
      <param name="bend">The bend.</param>
      <param name="index">The former index of the bend in the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> list.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnChangingBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Callback that is invoked before a bend is being changed.
            </summary>
      <param name="bend">An element that is going to be changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnChangingEdge(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback that is invoked before an edge is being changed.
            </summary>
      <param name="edge">An element that is going to be changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnChangingLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback that is invoked before a label is being changed.
            </summary>
      <param name="label">An element that is going to be changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnChangingNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that is invoked before a node is being changed.
            </summary>
      <param name="node">An element that is going to be changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnChangingPort(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback that is invoked before a port is being changed.
            </summary>
      <param name="port">An element that is going to be changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnCreatingEdge(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback that is invoked before the edge is added to this graph's structure.
            </summary>
      <param name="edge">An edge that is not yet contained in this graph.</param>
      <param name="sourcePort">The source port this edge will connect to.</param>
      <param name="targetPort">The target port this edge will connect to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnCreatingNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that is invoked before the node is added to this graph's structure.
            </summary>
      <param name="node">A node that is not yet contained in this graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnEdgeChanged(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback that is invoked after an edge has changed.
            </summary>
      <param name="edge">The edge that has changed.</param>
      <param name="oldSource">The source port that the edge had been connected to before the change.</param>
      <param name="oldTarget">The target port that the edge had been connected to before the change.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnEdgeCreated(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback that triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.EdgeCreated"></see> event.
            </summary>
      <param name="edge">The edge that has been created.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnEdgeLabelAdded(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Called after a label has been added to an edge.
            </summary>
      <param name="label">The label that has just been added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnEdgeLabelRemoved(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Called after a label has been removed from its edge.
            </summary>
      <param name="label">The label that has just been removed.</param>
      <param name="owner">The previous owner of the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnEdgeRemoved(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback that triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.EdgeRemoved"></see> event.
            </summary>
      <param name="edge">The edge that got removed</param>
      <param name="oldSource">The source port that the edge had been connected to.</param>
      <param name="oldTarget">The target port that the edge had been connected to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnInvalidateDisplays(System.EventArgs)">
      <summary>
            Triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.DisplaysInvalidated"></see> event.
            </summary>
      <param name="args">The event arguments.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnLabelChanged(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback that is invoked after a label has changed.
            </summary>
      <param name="label">The label that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnNodeChanged(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that is invoked after a node has changed.
            </summary>
      <param name="node">The node that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnNodeCreated(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.NodeCreated"></see> event.
            </summary>
      <param name="node">The node that has been created.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnNodeLabelAdded(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Called after a label has been added to a node.
            </summary>
      <param name="label">The label that has just been added.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnNodeLabelRemoved(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Called after a label has been removed from its node.
            </summary>
      <param name="label">The label that has just been removed.</param>
      <param name="owner">The old owner of the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnNodeRemoved(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that triggers the <see cref="E:yWorks.yFiles.UI.Model.DefaultGraph.NodeRemoved"></see> event.
            </summary>
      <param name="node">The node that got removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnPortAdded(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Called when a port has been added to a node.
            </summary>
      <param name="port">The port that has just been added to its owner.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnPortChanged(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback that is invoked after a port has changed.
            </summary>
      <param name="port">The port that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnPortRemoved(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback method that is called just after a port has been removed from its
            owner.
            </summary>
      <param name="port">The port that has been removed.</param>
      <param name="oldOwner">The previous owner of the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Callback method that is invoked just before a bend is removed.
            </summary>
      <param name="bend">The bend that will be removed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingEdge(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Callback that will be invoked before the node will be removed.
            </summary>
      <param name="edge">That edge that is going to be removed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingEdgeLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that will be called just before an edge label is removed from its edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that will be invoked before the node will be removed.
            </summary>
      <param name="node">That node that is going to be removed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingNodeLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that will be called just before a node label is removed from its node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.OnRemovingPort(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback method that is called just before a port
            will be removed.
            </summary>
      <param name="port">The port that is about to be removed.</param>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.PortAdded">
      <summary>
            Event that is triggered if a port has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.PortChanged">
      <summary>
            Event that is triggered if a port has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultGraph.PortRemoved">
      <summary>
            Event that is triggered if a port has been removed from its <see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see>.
            This event will also be triggered prior to the removal of the corresponding owner
            of the port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.Ports">
      <summary>
            A collection view over the ports contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Remove(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the given bend instance from its edge. 
            </summary>
      <param name="bend">the bend to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Remove(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Removes the given edge instance from this graph.
            </summary>
      <param name="edge">the live edge to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Remove(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the given label from its owner.
            This will trigger the corresponding event.
            </summary>
      <param name="label">the label to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Remove(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Removes the given node instance from this graph. 
            </summary>
      <param name="node">the live node to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.Remove(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes a port from its owner. 
            </summary>
      <param name="port">the port that will be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.RemoveLookup(yWorks.Support.IContextLookupChainLink)">
      <summary>
            Removes a previously added lookup chain element from the lookup of <c>this</c>.
            </summary>
      <param name="chainLink">The element to remove.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Sets the bounds of the given node to the new values.
            </summary>
      <param name="node">a live node that belongs to this graph</param>
      <param name="bounds">the new absolute bounds in world coordinates of the node</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the label model parameter for the given label.
            </summary>
      <param name="label">The label.</param>
      <param name="parameter">The new parameter.</param>
      <exception cref="T:System.ArgumentException">If the parameter cannot be used for this label.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text of the given label.
            </summary>
      <param name="label">the label to modify</param>
      <param name="text">the new text of the label</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Modifies the location of the given bend.
            </summary>
      <param name="bend">the bend whose location is to be modified</param>
      <param name="location">the new coordinates of the bend</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets a new <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> for the given port.
            </summary>
      <param name="port">The port to modify</param>
      <param name="locationParameter">the new parameter that determines the coordinates of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetLookupImplementation(yWorks.Support.ILookup)">
      <summary>
            Sets the lookup implementation that will be used for <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.Lookup(System.Type)"></see> calls.
            </summary>
      <param name="newLookup">The lookup instance to delegate lookup calls to.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the preferred size of the label.
            </summary>
      <param name="label">The label.</param>
      <param name="preferredSize">The new preferred size.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Assigns the given style instance by reference to the edge.
            Style instances can be shared.
            </summary>
      <param name="edge">The edge that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Assigns the given style instance by reference to the label.
            Style instances can be shared.
            </summary>
      <param name="label">The label that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Assigns the given style instance by reference to the node.
            </summary>
      <param name="node">The node that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Assigns the given style instance by reference to the port.
            Style instances can be shared. The style instance may be <c>null</c> in 
            which case the port will not be rendered.
            </summary>
      <param name="port">The port that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultGraph.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.UndoEngineEnabled">
      <summary>
            Determines whether the <see cref="T:yWorks.Support.UndoEngine"></see> used for this instance
            should be enabled.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultGraph.UsePortCandidateProviders">
      <summary>
            Gets or sets a property that determines whether 
            <see cref="M:yWorks.yFiles.UI.Model.DefaultGraph.CreateEdge(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)"></see>
            should use <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> implementations to 
            find the ports to connect the newly created edge to.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultHierarchy`1">
      <summary>
            A basic implementation of the <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see> interface.
            </summary>
      <typeparam name="T">The type of the elements in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.#ctor(`0)">
      <summary>
            Creates a new instance using the provided parameter as the root element.
            </summary>
      <param name="rootValue">The value for the root element.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.#ctor(`0,yWorks.Canvas.Model.IMapper{`0,System.Object})">
      <summary>
            Creates a new instance using the provided parameter as the root element
            and the given mapper to do the mapping.
            </summary>
      <param name="rootValue">The value for the root element.</param>
      <param name="mapper">The instance to do the mapping of the items in the hierarchy to the internally used data structure.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.AddChild(`0,`0)">
      <summary>
            Modifies the hierarchy by adding another child to the given parent.
            </summary>
      <param name="parent">The parent to add the child to.</param>
      <param name="child">The child to add to the parent.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.Contains(`0)">
      <summary>
            Determines whether the given item is part of this hierarchy.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item is contained.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.GetChildCount(`0)">
      <summary>
            Returns the number of children for the given parent item.
            </summary>
      <param name="parent">The parent to get the number of child items for.</param>
      <returns>The number of children.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.GetChildren(`0)">
      <summary>
            Returns an enumerable over the children of the provided item.
            </summary>
      <param name="item">The item for which to return the children.</param>
      <returns>All items that have <paramref name="item"></paramref> as their <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parent</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through a collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.GetParent(`0)">
      <summary>
            Returns the parent item of the item or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see> 
            if <paramref name="child"></paramref> is a top-level item.
            </summary>
      <param name="child">The item to retrieve the parent item for.</param>
      <returns>The parent item in this hierarchy or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.IsLeaf(`0)">
      <summary>
            Returns whether the given item is considered a leaf item.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item is considered a leaf.</returns>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemAdded">
      <summary>
            Event that will be triggered if an item has been added to the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemChanged">
      <summary>
            Event that will be triggered if an item has changed somehow in the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemMoved">
      <summary>
            Event that will be triggered if an item has been reparented in the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemRemoved">
      <summary>
            Event that will be triggered if an item has been removed from the model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.OnItemAdded(`0,`0)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemAdded"></see> event.
            </summary>
      <param name="item">The item that is added</param>
      <param name="parent">The parent of the item</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.OnItemChanged(`0,`0)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemChanged"></see> event.
            </summary>
      <param name="item">The item that is changed.</param>
      <param name="parent">The parent of the item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.OnItemMoved(`0,`0,`0)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemMoved"></see> event.
            </summary>
      <param name="item">The item that is reparented.</param>
      <param name="oldParent">The old parent of the item.</param>
      <param name="newParent">The new parent of the item.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.OnItemRemoved(`0,`0)">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.DefaultHierarchy`1.ItemRemoved"></see> event.
            </summary>
      <param name="item">The item that is removed</param>
      <param name="oldParent">The original parent of the item</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.PublishItemChanged(`0)">
      <summary>
            Triggers the firing of an <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemChanged"></see> event for the given item.
            </summary>
      <param name="item">The item that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.Remove(`0)">
      <summary>
            Removes the given item from its parent and this hierarchy.
            </summary>
      <param name="child">The child to remove from this hierarchy.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultHierarchy`1.Root">
      <summary>
            Gets the root item of the hierarchy.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.SetLeaf(`0,System.Boolean)">
      <summary>
            Determines whether the given item should be considered a leaf.
            </summary>
      <param name="item">The item to check.</param>
      <param name="leaf">Whether to make the item a leaf.</param>
      <exception cref="T:System.InvalidOperationException">If the item currently has children.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultHierarchy`1.SetParent(`0,`0)">
      <summary>
            Reparents a child item that already belongs to this hierarchy instance 
            to a new parent.
            </summary>
      <param name="child">The child to reparent.</param>
      <param name="parent">The new parent.</param>
      <exception cref="T:System.InvalidOperationException">If <paramref name="child"></paramref> is currently an ancestor of <paramref name="parent"></paramref>.</exception>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultItemLookup`1">
      <summary>
            An abstract base class for a <see cref="T:yWorks.Support.ILookup"></see> implementation
            that also implements <see cref="T:yWorks.Support.IContextLookupChainLink"></see>,
            <see cref="T:yWorks.Support.IContextLookup"></see> for a given type <typeparamref name="T"></typeparamref>.
            </summary>
      <typeparam name="T">The type to use in the context.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.#ctor">
      <summary>
            Instanciates an instace without a context <see cref="F:yWorks.yFiles.UI.Model.DefaultItemLookup`1.item"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.#ctor(`0)">
      <summary>
            Instanciates an instace with a context <see cref="F:yWorks.yFiles.UI.Model.DefaultItemLookup`1.item"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultItemLookup`1.item">
      <summary>
            The item to use in context-less lookup calls.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultItemLookup`1.Item">
      <summary>
            Gets or sets the context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.Lookup(System.Object,System.Type)">
      <summary>
            Tries to create or retrieve an implementation of the given type
            for a given item.
            </summary>
      <param name="item">the item to lookup a type for</param>
      <param name="type">the type to look up</param>
      <returns>an implementation or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>
            an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.Lookup(`0,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Subclasses need to override this method.
            </summary>
      <param name="item">The context item to lookup an implementation for.</param>
      <param name="type">The type of the implementation to find.</param>
      <param name="nextLookup">The lookup to use for another type.</param>
      <param name="lastLookup">The lookup to use as a fallback for the type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultItemLookup`1.SetNext(yWorks.Support.IContextLookup)">
      <summary>
            This method is called by the framework to register the fallback lookup implementation
            that should be used during a call to <see cref="M:yWorks.Support.IContextLookup.Lookup(System.Object,System.Type)"></see>.
            </summary>
      <param name="next">The context to use as a fallback.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultLabelLookup">
      <summary>
            This is the default implementation of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>'s
            <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelLookup.#ctor">
      <summary>
            Create a new instance without a context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelLookup.#ctor(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Create a new instance with the given item as context.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultLabelLookup.Label">
      <summary>
            Gets or sets the label this instance is acting upon.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelLookup.Lookup(yWorks.yFiles.UI.Model.ILabel,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Subclasses need to override this method.
            </summary>
      <param name="item">The context item to lookup an implementation for.</param>
      <param name="type">The type of the implementation to find.</param>
      <param name="nextLookup">The lookup to use for another type.</param>
      <param name="lastLookup">The lookup to use as a fallback for the type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder">
      <summary>
            A simple default implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder"></see>
            interface that uses the <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see>'s own <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterProvider"></see>
            instance to find the closest match.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.CalculateMetric(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Calculates a metric for the given label/parameter pair and the target label layout.
            </summary>
      <param name="label">The label to apply the parameter to.</param>
      <param name="parameter">The parameter candidate.</param>
      <param name="layout">The targetted layout rectangle.</param>
      <returns>A metric that indicates the distance between the candidate's layout and the target layout.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.Distance(yWorks.Canvas.Geometry.IOrientedRectangle,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Returns the distance between two <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see> instances.
            </summary>
      <param name="geometry">The first geometry.</param>
      <param name="targetGeometry">The geometry to compare the first one with.</param>
      <returns>A value indicating the distance between the two instances.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.FindBestParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Tries to find a parameter that best matches the given layout for the
            provided label instance.
            </summary>
      <param name="label">The label to find a parameter for.</param>
      <param name="model">The model instance to use. This should be the instance
            this instance has been obtained from.</param>
      <param name="labelLayout">The anticipated layout for the label.</param>
      <returns>
            A non-<c>null</c> parameter that can be used for the label to approximate the provided layout.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.GetCandidateParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Retrieves an enumerator over all candidates for a given label and model.
            </summary>
      <param name="label">The label.</param>
      <param name="model">The model of the label.</param>
      <returns>An enumerator over the candidates. The enumerator may be empty.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultLabelModelParameterFinder.Instance">
      <summary>
            A singleton instance of this class.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultNodeLookup">
      <summary>
            This is the default implementation of an <see cref="T:yWorks.yFiles.UI.Model.INode"></see>'s
            <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultNodeLookup.#ctor">
      <summary>
            Create a new instance without a context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultNodeLookup.#ctor(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Create a new instance with the given node as context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultNodeLookup.Lookup(yWorks.yFiles.UI.Model.INode,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Provides several default implementations for the various aspects of an <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.
            </summary>
      <param name="node">The node to find an implementation for.</param>
      <param name="type">The type.</param>
      <param name="nextLookup">The next lookup.</param>
      <param name="lastLookup">The last lookup.</param>
      <returns>An implementation or <c>null</c>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor">
      <summary>
            A simple <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see> that can be used
            to draw <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see> instances in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.#ctor">
      <summary>
            Instanciates a new descriptor.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CandidateDrawingInvalidFocusedKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering a invalid, focused <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CandidateDrawingInvalidNonFocusedKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering an invalid, non-focused <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CandidateDrawingValidFocusedKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering a valid, focused <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CandidateDrawingValidNonFocusedKey">
      <summary>
            A <see cref="T:System.Windows.ResourceKey"></see> that can be used by instances of the 
            <see cref="T:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor"></see> to look up a <see cref="T:System.Windows.Media.Drawing"></see>
            that will be used for the rendering a valid, non-focused <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CandidateSize">
      <summary>
            Gets or sets the size to use for a valid candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CurrentCandidateSize">
      <summary>
            Gets or sets the size to use for the <see cref="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CurrentPortCandidate"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.CurrentPortCandidate">
      <summary>
            Gets or sets the highlighted port candidate.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.GetBoundsProvider(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IBoundsProvider"></see> that can determine the visible bounds
            of the rendering of the user object.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.GetHitTestable(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IHitTestable"></see> that can determine whether 
            the rendering of the user object has been hit at a given coordinate.
            </summary>
      <param name="forUserObject">the user object to do the hit testing for</param>
      <returns>an implementation or <c>null</c> if the rendering cannot be hit tested</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.GetVisibilityTest(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisibilityTest"></see> that can if the 
            rendering of the user object would be visible in a given context.
            </summary>
      <param name="forUserObject">the user object to query the bounds for</param>
      <returns>an implementation or <c>null</c> if the bounds are not known, in which
            case the bounds are treated as infinite</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.GetVisualCreator(System.Object)">
      <summary>
            Returns an implementation of <see cref="T:yWorks.Canvas.Drawing.IVisualCreator"></see> that will create
            the <see cref="T:System.Windows.Media.Visual"></see> tree for the user object.
            This method may always return the same instance. By contract, clients will
            not cache instances returned, but will always call this method
            before the methods on the instance will be called.
            </summary>
      <param name="forUserObject">the user object to create a Visual for</param>
      <returns>an implementation or <c>null</c> if nothing shall be rendered</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.InvalidCenterBrush">
      <summary>
            Gets or sets the brush to use for an invalid candidate.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.IsDirty(yWorks.Canvas.ICanvasObject,yWorks.Canvas.ICanvasContext)">
      <summary>
            Determines whether the given canvas object is deemed dirty and needs
            updating.
            </summary>
      <param name="canvasObject">The object to check.</param>
      <param name="context">The context that will be used for the update.</param>
      <returns>Whether an update is needed.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortCandidateDescriptor.ValidCenterBrush">
      <summary>
            Gets or sets the brush to use for a valid candidate.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DefaultPortLookup">
      <summary>
            The default implementation of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>'s
            <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortLookup.#ctor">
      <summary>
            Create a new instance without a context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortLookup.#ctor(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Create a new instance with the given item as context.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DefaultPortLookup.Lookup(yWorks.yFiles.UI.Model.IPort,System.Type,yWorks.Support.ILookup,yWorks.Support.ILookup)">
      <summary>
            Subclasses need to override this method.
            </summary>
      <param name="item">The context item to lookup an implementation for.</param>
      <param name="type">The type of the implementation to find.</param>
      <param name="nextLookup">The lookup to use for another type.</param>
      <param name="lastLookup">The lookup to use as a fallback for the type.</param>
      <returns>
      </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DefaultPortLookup.Port">
      <summary>
            Gets or sets the associated port.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DummyEdgeId">
      <summary>
            A struct that can be used to describe a <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> edge that connects to nodes inside
            a collapsed group or other <see cref="T:yWorks.yFiles.UI.Model.DummyNodeId">dummy nodes</see> in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyEdgeId.#ctor(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Initializes an id for a dummy edge in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that represent a master edge and 
            connects a specific pair of nodes.
            </summary>
      <param name="masterEdge">An edge in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is represented
            by the dummy edge.</param>
      <param name="currentMasterSource">The source node of the edge or one of its ancestors to which the dummy edge 
            connects in the view, if the actual parent is currently <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed in an ancestor node</see>.</param>
      <param name="sourceCollapsed">
        <see langword="true">
        </see> if the <paramref name="currentMasterSource"></paramref> is the true source
            of the <paramref name="masterEdge"></paramref>, but is in its <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed/dummy</see> state.</param>
      <param name="targetCollapsed">
        <see langword="true">
        </see> if the <paramref name="currentMasterTarget"></paramref> is the true target
            of the <paramref name="masterEdge"></paramref>, but is in its <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed/dummy</see> state.</param>
      <param name="currentMasterTarget">The target node of the edge or one of its ancestors to which the dummy edge 
            connects in the view, if the actual parent is currently <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed in an ancestor node</see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyEdgeId.#ctor(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes and id for a dummy edge that is currently part of the given view.
            </summary>
      <param name="foldedGraph">The view the dummy edge is part of.</param>
      <param name="dummyEdge">The instance that is part of the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph">folded graph view</see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyEdgeId.CurrentMasterSource">
      <summary>
            The source node of the edge or an ancestor (both in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyEdgeId.CurrentMasterTarget">
      <summary>
            The target node of the edge or an ancestor (both in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyEdgeId.MasterEdge">
      <summary>
            The edge instance in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is represented by the dummy in 
            a view.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyEdgeId.SourceIsCollapsed">
      <summary>
            Specifies whether the <see cref="P:yWorks.yFiles.UI.Model.DummyEdgeId.CurrentMasterSource"></see> node is in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">collapsed/dummy</see> state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyEdgeId.TargetIsCollapsed">
      <summary>
            Specifies whether the <see cref="P:yWorks.yFiles.UI.Model.DummyEdgeId.CurrentMasterTarget"></see> node is in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">collapsed/dummy</see> state.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DummyNodeId">
      <summary>
            A struct that can be used to describe a collapsed node in an <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyNodeId.#ctor(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode)">
      <summary>
             Initializes a dummy node id from an actual node in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
      <param name="foldedGraph">The graph that contains the <paramref name="localNode"></paramref>.</param>
      <param name="localNode">The node for which there should be an id created.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyNodeId.#ctor(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Initializes a dummy node id for a collapsed dummy node in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view
            using the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">master</see> node.
            </summary>
      <param name="masterNode">The node in the master graph this dummy node will represent</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyNodeId.MasterNode">
      <summary>
            The node instance in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is represented by dummies in 
            a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.DummyNodePortId">
      <summary>
            A struct that can be used to describe a master port at 
            a <see cref="T:yWorks.yFiles.UI.Model.DummyNodeId">dummy node</see> in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyNodePortId.#ctor(yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
             Initializes a dummy node id from an actual node in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>.
            </summary>
      <param name="foldedGraph">The graph that contains the <paramref name="localPort"></paramref>.</param>
      <param name="localPort">The node for which there should be an id created.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.DummyNodePortId.#ctor(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Initializes a dummy port id for a port at a dummy node in a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view
            using the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">master</see> port.
            </summary>
      <param name="masterPort">The port in the master graph this dummy port will represent</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyNodePortId.AtDummy">
      <summary>
            Whether the port is at a dummy node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.DummyNodePortId.MasterPort">
      <summary>
            The port instance in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is represented by dummies in 
            a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.EdgeDecorator">
      <summary>
            A subclass of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see>
            class that is specifically tailored for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.EdgeDecorator.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.EdgeDecorator"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDecorator.BendCreatorDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IBendCreator"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDecorator.BendSelectionTesterDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IBendSelectionTester"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDecorator.EdgePortCandidateProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IEdgePortCandidateProvider"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDecorator.EditLabelHelperDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IEditLabelHelper"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.EdgeDefaults">
      <summary>
            A canonic implementation of the <see cref="T:yWorks.yFiles.UI.Model.IEdgeDefaults"></see> interface
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.EdgeDefaults.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.EdgeDefaults"></see> class
            with default edge style and label and port defaults.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.EdgeDefaults.#ctor(yWorks.yFiles.UI.Drawing.IEdgeStyle,yWorks.yFiles.UI.Model.ILabelDefaults,yWorks.yFiles.UI.Model.IPortDefaults)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.EdgeDefaults"></see> class.
            </summary>
      <param name="style">The edge style.</param>
      <param name="labelDefaults">The label defaults.</param>
      <param name="portDefaults">The port defaults.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.EdgeDefaults.GetStyleInstance">
      <summary>
            Factory method that returns a style instance for use with newly created edges.
            </summary>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDefaults.Labels">
      <summary>
            Gets or sets the defaults for labels at edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDefaults.Ports">
      <summary>
            Gets or sets the defaults for ports at edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IEdgeDefaults.GetStyleInstance"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeDefaults.Style">
      <summary>
            Gets or sets the style to use for edges.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.EdgeEventArgs">
      <summary>
            A specialized subclass of the <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see>
            class that is bound to the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> type and carries
            additional source and target port information.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.EdgeEventArgs.#ctor(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.EdgeEventArgs"></see> class.
            </summary>
      <param name="edge">The edge to assign to the <see cref="P:yWorks.Canvas.Model.ItemEventArgs`1.Item"></see> property.</param>
      <param name="sourcePort">The source port the edge was connected to before the event happened.</param>
      <param name="targetPort">The target port the edge was connected to before the event happened.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeEventArgs.SourcePort">
      <summary>
            Gets the source port the edge was connected to before the event happened.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.EdgeEventArgs.TargetPort">
      <summary>
            Gets the target port the edge was connected to before the event happened.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ElementCopiedDelegate">
      <summary>
            Callback delegate used by <see cref="T:yWorks.yFiles.UI.Model.GraphCopier"></see> and the like.
            </summary>
      <param name="original">The element that has been copied.</param>
      <param name="copy">The copy of the original element.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter">
      <summary>
            A simple implementation of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see> interface
            for use in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.DummyEdgeConverter"></see> property, that will
            prevent dummy edges from appearing in the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Always calls <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.ExcludeDummyEdge"></see></summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Does nothing and should not normally be called by the view since all dummy edges are excluded from it.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ExcludingDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Does nothing and should not normally be called by the view since all dummy edges are excluded from it.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.FilteredGraphWrapper">
      <summary>
            A decorator implementation of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            that contains a subset of the wrapped graph instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.#ctor(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.yFiles.UI.Model.INode},System.Predicate{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Creates a new graph instance that wraps the original graph
            and uses the <see cref="T:System.Predicate`1"></see>s to determine which nodes and edges
            should be contained in the graph.
            </summary>
      <param name="graph">The graph to wrap</param>
      <param name="nodePredicate">The predicate that determines which nodes to keep.</param>
      <param name="edgePredicate">The predicate that determines which edges to keep.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Bends">
      <summary>
            A collection view over the bends of the edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.CollectionModel">
      <summary>
            Offers a view over all elements that make up the graph. This is a combined view
            of all nodes, edges, labels, ports, and bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this graph contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgeLabels">
      <summary>
            A collection view over the labels attached to edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgePredicate">
      <summary>
            Gets the predicate function for the edges.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgePredicateChanged">
      <summary>
            Should be called by the client if the <see cref="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgePredicate"></see>
            changed for the edge in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgePredicateChanged(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Should be called by the client if the <see cref="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgePredicate"></see>
            changed for the given edge in the graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Edges">
      <summary>
            A collection view over the edges contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for all edges that are adjacent to the given 
            port as a <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>.
            </summary>
      <param name="port">the port to check</param>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.EdgesAt(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see> for all edges that have the given port owner as their 
            <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port's</see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port's</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner"></see>
            depending on the <see cref="T:yWorks.yFiles.UI.Model.AdjacencyTypes"></see></summary>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <param name="portOwner">the port owner to check</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.FullGraph">
      <summary>
            Gets the full graph that has been wrapped by this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Lookup(System.Type)">
      <summary>
            Returns an instance that implements the given type or <c>null</c>.
            </summary>
      <param name="type">the type for which an instance shall be returned</param>
      <returns>an instance that is assignable to type or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodeLabels">
      <summary>
            A collection view over the labels attached to nodes contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodePredicate">
      <summary>
            Gets the predicate function for the nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodePredicateChanged">
      <summary>
            Should be called by the client if the <see cref="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodePredicate"></see>
            changed for the nodes in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodePredicateChanged(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Should be called by clients if the <see cref="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.NodePredicate"></see>
            changed for the given node.
            </summary>
      <param name="node">The node.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Nodes">
      <summary>
            A collection view over the nodes contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FilteredGraphWrapper.Ports">
      <summary>
            A collection view over the ports contained in this graph.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.FoldedGraphExtensions">
      <summary>
            Contains <c>static</c> extension methods for the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldedGraphExtensions.GetFoldedGraph(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> instance from the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">The context to retrieve the implementation from.</param>
      <returns>The instance or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.FoldingManager">
      <summary>
            This class adds folding support to <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementations on top of the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.#ctor">
      <summary>
            Creates a new manager with a default backing graph implementation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates a manager instance for the given <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> to create views on top of it
            that support folding operations.
            </summary>
      <param name="masterGraph">The graph to use as the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>. This instance needs to support
            the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <c>masterGraph</c> is null.</exception>
      <exception cref="T:System.ArgumentException">If the graph does not support <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>. Turn on grouping support.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.AutoAdjustMasterGroupNodeBounds">
      <summary>
            Gets or sets a property that determines whether the manager should synchronize
            the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.AutoAdjustGroupNodeBounds"></see> property of
            the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGroupedGraph"></see> with the client views.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView">
      <summary>
            Variant of the <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode,System.Predicate{yWorks.yFiles.UI.Model.INode})"></see> method
            where the root is set to the root in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.
            The view lazily evaluates the value of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.DefaultExpandedPredicate"></see> method to determine the initial
            expanded state of the nodes.
            </summary>
      <returns>A new graph instance that represents a synchronized view on the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Variant of the <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode,System.Predicate{yWorks.yFiles.UI.Model.INode})"></see> method
            which lazily evaluates the value of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.DefaultExpandedPredicate"></see> method to determine the initial
            expanded state of the nodes.
            </summary>
      <param name="root">A group node or the root of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see> whose contents will be displayed in the view.</param>
      <returns>A new graph instance that represents a synchronized view on the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode,System.Predicate{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Creates a separate view instance of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> which is a synchronized copy of a subset of the
            items from the master graph.
            </summary>
      <param name="root">A group node or the root of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see> whose contents will be displayed in the view.</param>
      <param name="expandedPredicate">A predicate that can be provided to the view that will be used as a callback to determine the 
            initial <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">expansion state</see> of group nodes in the view.</param>
      <returns>A new graph instance that represents a synchronized view on the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.DefaultExpandedPredicate">
      <summary>
            Gets or sets the <see cref="T:System.Predicate`1"></see> function to use
            by default to determine the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">initial expanded state</see> 
            for the views that have been <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode)">created</see> with the default expanded predicate
            function.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.Dispose">
      <summary>
            Disposes of this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.DummyEdgeConverter">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see> implementation that is used
            to create/convert and modify the <see cref="T:yWorks.yFiles.UI.Model.DummyEdgeId">dummy edges</see>
            inside the view instances.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <c>value</c> is null.</exception>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.DummyNodeConverter">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.IDummyNodeConverter"></see> implementation that is used
            to create/convert and modify the <see cref="T:yWorks.yFiles.UI.Model.DummyNodeId">collapsed group node dummies</see>
            inside the view instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.GetChangeDummyAppearanceCallback(yWorks.yFiles.UI.Model.DummyEdgeId)">
      <summary>
            Returns a callback object that can be used to modify the appearance of a given dummy
            edge without using a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
      <param name="edgeId">The id of the dummy edge to modify.</param>
      <returns>A callback implementation that can be used to modify the edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.GetChangeDummyAppearanceCallback(yWorks.yFiles.UI.Model.DummyNodeId)">
      <summary>
            Returns a callback object that can be used to modify the appearance of a given dummy
            node without using a <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view.
            </summary>
      <param name="nodeId">The id of the dummy node to modify.</param>
      <returns>A callback implementation that can be used to modify the node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyEdgeId)">
      <summary>
            Return a data container implementation that is not part of any actual <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            that describes the state of the edge for the given <see cref="T:yWorks.yFiles.UI.Model.DummyEdgeId"></see>.
            </summary>
      <param name="edgeId">The id of the dummy edge for which the view state should be returned.</param>
      <returns>An implementation of <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> that can be used to query
            all properties of the edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyNodeId)">
      <summary>
            Provides access to the dummy state of a node for a specific view.
            </summary>
      <param name="nodeId">The id for which the state should be returned.</param>
      <returns>A state holder implementation of a node, which is not part of any graph and can 
            only be modified through the <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.GetChangeDummyAppearanceCallback(yWorks.yFiles.UI.Model.DummyNodeId)"></see> method.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nodeId">
        </paramref> is out of range.
            The master node does not belong to the managed graph.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyNodePortId)">
      <summary>
            Provides access to the dummy state of a port for a specific view.
            </summary>
      <param name="nodePortId">The id for which the state should be returned.</param>
      <returns>A state holder implementation of a port, which is not part of any graph and can 
            only be modified through the <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.GetChangeDummyAppearanceCallback(yWorks.yFiles.UI.Model.DummyNodeId)"></see> method.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.HasViewState(yWorks.yFiles.UI.Model.DummyEdgeId)">
      <summary>
            Determines whether for the given <see cref="T:yWorks.yFiles.UI.Model.DummyEdgeId"></see>
            this manager has stored associated view local state.
            </summary>
      <param name="id">The id for which state is requested.</param>
      <returns>Whether <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyEdgeId)"></see> would return existing state information.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.HasViewState(yWorks.yFiles.UI.Model.DummyNodeId)">
      <summary>
            Determines whether for the given <see cref="T:yWorks.yFiles.UI.Model.DummyNodeId"></see>
            this manager has stored associated view local state.
            </summary>
      <param name="id">The id for which state is requested.</param>
      <returns>Whether <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyNodeId)"></see> would return existing state information.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.HasViewState(yWorks.yFiles.UI.Model.DummyNodePortId)">
      <summary>
            Determines whether for the given <see cref="T:yWorks.yFiles.UI.Model.DummyNodePortId"></see>
            this manager has stored associated view local state.
            </summary>
      <param name="id">The id for which state is requested.</param>
      <returns>Whether <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.GetViewState(yWorks.yFiles.UI.Model.DummyNodePortId)"></see> would return existing state information.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.IsInitiallyExpanded(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the given group node from the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>
            should be displayed in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see>ed state if it is included
            in a <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView(yWorks.yFiles.UI.Model.INode)">managed view</see> for the first time.
            </summary>
      <param name="groupNode">The group node in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.</param>
      <returns>
        <see langword="true">
        </see> iff the node should be initially displayed in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see>ed state
            in the view that queries the initial state.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph">
      <summary>
            Yields the master <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance that holds the complete model in expanded group node state.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGroupedGraph">
      <summary>
            Yields the master <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance that models the fully expanded 
            grouped graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy">
      <summary>
            Yields the master <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see> instance that contains all nodes in the model, regardless of
            their (view-local) collapsed state.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.PrepareFoldedGraph(yWorks.yFiles.UI.Model.IFoldedGraph)">
      <summary>
            Callback that can be overridden by subclasses to prepare the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> instance
            right before it will be initialized with a copy of the elements in the initial graph.
            </summary>
      <param name="foldedGraph">The graph view that has just been created but is still empty.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.FoldingManager.SetInitiallyExpanded(yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Allows for setting the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">expanded state</see>
            of a group node from the master graph that will be applied to the group nodes 
            in the default <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView">managed views</see> the 
            next time it will become visible in those views.
            </summary>
      <param name="groupNode">The group node in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.</param>
      <param name="expanded">
        <see langword="true">
        </see> iff the node should be displayed in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see>ed state
            the next time it will become visible in the default views.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.FoldingManager.Views">
      <summary>
            Yields all currently known <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView">view instances</see> that
            are managed by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphClipboard">
      <summary>
            Clipboard implementation for <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.#ctor">
      <summary>
            Creates a new initially empty clipboard.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.AdjustPosition(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Moves the item after a paste operation according to <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.PasteDelta"></see>.
            </summary>
      <param name="copiedItem">The item to adjust the position of after it has been pasted into the target graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.AdjustPosition(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Adjusts the state of the dummy edge after a paste operation according to <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.PasteDelta"></see>.
            </summary>
      <param name="callback">The callback to use to adjust the position.</param>
      <param name="edgeViewState">The state of the edge to adjust the position of after it has been pasted into the target graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.AdjustPosition(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Adjusts the state of the dummy node after a paste operation according to <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.PasteDelta"></see>.
            </summary>
      <param name="callback">The callback to use to adjust the position.</param>
      <param name="nodeViewState">The state of the node to adjust after it has been pasted into the target graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Clear">
      <summary>
            Clears the clipboard's contents.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph">
      <summary>
            Gets or sets the graph that contains the clipboard's contents.
            </summary>
      <exception cref="T:System.ArgumentNullException">If <c>value</c> is <see langword="null"></see>.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Copies the elements indicated by the filter to the clipboard graph.
            </summary>
      <param name="sourceGraph">The graph to copy the contents from.</param>
      <param name="filter">The filter to apply to the source graph's elements.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)">
      <summary>
            Calls <see cref="M:yWorks.yFiles.UI.Model.GraphCopier.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)"></see> on either 
            the current <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ToClipboardCopier"></see> instance
            or <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.FromClipboardCopier"></see> instance, depending on whether the <paramref name="targetGraph"></paramref>
            is the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph"></see> instance.
            </summary>
      <param name="sourceGraph">The source graph to pass to <see cref="M:yWorks.yFiles.UI.Model.GraphCopier.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)"></see></param>
      <param name="filter">The predicate to pass on.</param>
      <param name="targetGraph">The target graph to pass on.</param>
      <param name="targetRootNode">The node to use as the root node in the target's <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>.</param>
      <param name="elementCopiedDelegate">The delegate to pass on.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateClipboardGraph">
      <summary>
            Creates the graph used for the clipboard.
            </summary>
      <returns>A new preconfigured <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateClipBoardHelperCopyFilter">
      <summary>
            Convenience method that creates a <see cref="T:System.Predicate`1"></see>
            that is based upon the outcome of the <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCopy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see>
            method that can be found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            of the provided <see cref="T:yWorks.Canvas.Model.IModelItem"></see>.
            </summary>
      <returns>A predicate that uses <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCopy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateClipBoardHelperCutFilter">
      <summary>
            Convenience method that creates a <see cref="T:System.Predicate`1"></see>
            that is based upon the outcome of the <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see>
            method that can be found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            of the provided <see cref="T:yWorks.Canvas.Model.IModelItem"></see>.
            </summary>
      <returns>A predicate that uses <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateClipBoardHelperPasteFilter">
      <summary>
            Convenience method that creates a <see cref="T:System.Predicate`1"></see>
            that is based upon the outcome of the <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldPaste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see>
            method that can be found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            of the provided <see cref="T:yWorks.Canvas.Model.IModelItem"></see>.
            </summary>
      <returns>A predicate that uses <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldPaste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateFromClipboardCopier">
      <summary>
            Factory method that creates the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.FromClipboardCopier"></see>.
            </summary>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.GraphCopier"></see> instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateSelectionFilter(yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Creates a <see cref="T:System.Predicate`1"></see> for use in the <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Cut(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})"></see>
            and <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)"></see> methods.
            </summary>
      <param name="selection">The selection model to base the filter on.</param>
      <returns>A predicate that filters subgraph induced by the selection of nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.CreateToClipboardCopier">
      <summary>
            Factory method that creates the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ToClipboardCopier"></see>.
            </summary>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.GraphCopier"></see> instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Cut(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Cuts the items indicated by <paramref name="filter"></paramref> to the clipboard and removes them
            from the graph.
            </summary>
      <param name="sourceGraph">The graph to cut the items from.</param>
      <param name="filter">The filter to use.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphClipboard.Empty">
      <summary>
            Determines whether the clipboard graph is empty.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphClipboard.FromClipboardCopier">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.GraphCopier"></see> instance that will
            be used to copy the graph from the clipboard to the target graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.GetClipboardHelper(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Retrieves the <see cref="T:yWorks.yFiles.UI.Model.IClipboardHelper"></see> instance associated 
            with the given item.
            </summary>
      <param name="item">The item to find the clipboard helper for.</param>
      <returns>An instance or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.GetMemento(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Retrieves the memento associated with an item in the clipboard graph
            that has been stored with the item during <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.OnElementCopied(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)"></see>
            and <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.OnElementCut(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)"></see>.
            </summary>
      <param name="clipboardModelItem">The item in the clipboard graph.</param>
      <returns>The object returned by the <see cref="T:yWorks.yFiles.UI.Model.IClipboardHelper"></see> methods or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.OnElementCopied(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Model.ElementCopiedDelegate">
        </see> that will be invoked for each item that
            has been copied into the clipboard graph in response to a <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)"></see>
            operation.
            </summary>
      <param name="original">The original element from the source graph instance.</param>
      <param name="copy">The copy from the clipboard graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.OnElementCut(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Model.ElementCopiedDelegate">
        </see> that will be invoked for each item that
            has been copied into the clipboard graph in response to a <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Cut(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})"></see>
            operation.
            </summary>
      <param name="original">The original element from the source graph instance.</param>
      <param name="copy">The copy from the clipboard graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.OnElementPasted(yWorks.Canvas.Model.IModelItem,yWorks.Canvas.Model.IModelItem)">
      <summary>
        <see cref="T:yWorks.yFiles.UI.Model.ElementCopiedDelegate">
        </see> that will be invoked for each item that
            has been pasted into the target graph in response to a <see cref="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph)"></see>
            operation.
            </summary>
      <param name="original">The original element from the clipboard graph instance.</param>
      <param name="copy">The copy from the target graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Pastes all of the contents of the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph"></see> into the target graph.
            </summary>
      <param name="targetGraph">
      </param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Pastes the contents from the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph"></see> to the <paramref name="targetGraph"></paramref>
            after applying a <paramref name="filter"></paramref>.
            </summary>
      <param name="targetGraph">The graph to paste the contents in.</param>
      <param name="filter">The filter to apply to the clipboard graph.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.ElementCopiedDelegate)">
      <summary>
            Pastes the contents from the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph"></see> to the <paramref name="targetGraph"></paramref>
            after applying a <paramref name="filter"></paramref>.
            </summary>
      <param name="targetGraph">The graph to paste the contents in.</param>
      <param name="filter">The filter to apply to the clipboard graph.</param>
      <param name="elementPasted">The callback to use for each element that has been pasted.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.Paste(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraphSelection)">
      <summary>
            Pastes the <see cref="P:yWorks.yFiles.UI.Model.GraphClipboard.ClipboardGraph"></see>'s contents into the <paramref name="targetGraph"></paramref>,
            selecting all pasted elements.
            </summary>
      <param name="targetGraph">The graph to paste into.</param>
      <param name="graphSelection">The selection model to set the selection on.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphClipboard.PasteDelta">
      <summary>
            Gets or sets a vector that will be used to move nodes and bends by
            after they have been pasted to the target graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphClipboard.RemoveElements(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Removes elements from the graph based on a <see cref="T:System.Predicate`1"></see>.
            </summary>
      <param name="sourceGraph">The graph to remove elements from.</param>
      <param name="predicate">The predicate that decides which elements to remove.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphClipboard.ToClipboardCopier">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.GraphCopier"></see> instance that will
            be used to copy the graph to the clipboard.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphCopier">
      <summary>
            Utility class that copies parts of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> to another
            instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.GraphCopier" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.AddBend(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IBend,System.Int32)">
      <summary>
            Callback method that adds a bend to the targetEdge in the targetGraph as a copy of the source bend.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="targetEdge">The target edge to add the bend to.</param>
      <param name="sourceBend">The source bend to copy the values from.</param>
      <param name="index">The index to add the bend at.</param>
      <returns>The newly created bend.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Callback method that adds a label to the target item in the targetGraph as a copy of the source label.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="targetItem">The item owner in the target graph to add the label to.</param>
      <param name="sourceLabel">The source label in the source graph.</param>
      <returns>The newly created label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback method that adds a port to the targetPortOwner in the targetGraph as a copy of the source port.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="targetPortOwner">The port owner in the target graph to add the port to.</param>
      <param name="sourcePort">The source port in the source graph.</param>
      <returns>The newly created port.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphCopier.Clone">
      <summary>
            Gets or sets the types of items that should be <see cref="M:System.ICloneable.Clone">cloned</see>
            for the copy operation.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ElementCopiedDelegate)">
      <summary>
            Copies a subgraph described by a <see cref="T:System.Predicate`1"></see> from the <paramref name="sourceGraph"></paramref>
            to the <paramref name="targetGraph"></paramref>.
            </summary>
      <param name="sourceGraph">The graph to copy the elements from.</param>
      <param name="filter">The filter that decides which elements to copy.</param>
      <param name="targetGraph">The graph to copy the elements to.</param>
      <param name="elementCopiedDelegate">A delegate to invoke for each element being copied.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.Copy(yWorks.yFiles.UI.Model.IGraph,System.Predicate{yWorks.Canvas.Model.IModelItem},yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.ElementCopiedDelegate)">
      <summary>
            Copies a subgraph induced by a <see cref="T:System.Predicate`1"></see> from the <paramref name="sourceGraph"></paramref>
            to the <paramref name="targetGraph"></paramref>.
            </summary>
      <param name="sourceGraph">The graph to copy the elements from.</param>
      <param name="filter">The filter that decides which elements to copy.</param>
      <param name="targetGraph">The graph to copy the elements to.</param>
      <param name="targetRoot">The group node that should act as the root node for the pasted elements. May be <see langword="null"></see> if there is no
            such node.</param>
      <param name="elementCopiedDelegate">A delegate to invoke for each element being copied.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Callback method that adds an edge to the targetGraph as a copy of the source edge.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="sourceEdge">The edge in the source graph.</param>
      <param name="targetSourcePort">The new source port in the target graph.</param>
      <param name="targetTargetPort">The new target port in the target graph.</param>
      <returns>The newly created edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyEdgeStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Copies an <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> instance.
            </summary>
      <param name="graph">The graph that contains the edge.</param>
      <param name="edge">The edge to copy the style from.</param>
      <returns>The style to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyEdgeTag(yWorks.yFiles.UI.Model.IEdge,System.Object)">
      <summary>
            Callback that copies the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
      <param name="oldEdge">The old edge.</param>
      <param name="tag">The tag to copy.</param>
      <returns>The copy of the tag.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphCopier.CopyGrouping">
      <summary>
            Gets or sets a property that determines whether <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1">grouping information</see>.
            Should be copied to <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> target graphs.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyGroupNode(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that creates a copy of the <paramref name="sourceGroupNode"></paramref> in the <paramref name="targetGraph"></paramref>.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="sourceGroupNode">The source node to create a copy of in the <paramref name="targetGraph"></paramref>.</param>
      <param name="targetParent">The parent of the group node in the target graph.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyLabelModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Copies a <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> for a given label.
            </summary>
      <param name="graph">The graph that contains the label.</param>
      <param name="label">The label to copy the label model parameter from.</param>
      <returns>The copy of the parameter to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyLabelStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Copies an <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> instance.
            </summary>
      <param name="graph">The graph that contains the label.</param>
      <param name="label">The label to copy the style from.</param>
      <returns>The style to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyLabelTag(yWorks.yFiles.UI.Model.ILabel,System.Object)">
      <summary>
            Callback that copies the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> of a <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>.
            </summary>
      <param name="oldLabel">The old label.</param>
      <param name="tag">The tag to copy.</param>
      <returns>The copy of the tag.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyNode(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that creates a copy of the <paramref name="sourceNode"></paramref> in the <paramref name="targetGraph"></paramref>.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGraph">The target graph.</param>
      <param name="sourceNode">The source node to create a copy of in the <paramref name="targetGraph"></paramref>.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyNode(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback method that creates a copy of the <paramref name="sourceNode"></paramref> in the <paramref name="targetGroupedGraph"></paramref>.
            </summary>
      <param name="sourceGraph">The source graph.</param>
      <param name="targetGroupedGraph">The target grouped graph instance.</param>
      <param name="targetParent">The parent of the group node in the target graph.</param>
      <param name="sourceNode">The source node to create a copy of in the <paramref name="targetGroupedGraph"></paramref>.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyNodeStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Copies an <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> instance.
            </summary>
      <param name="graph">The graph that contains the node.</param>
      <param name="node">The node to copy the style from.</param>
      <returns>The style to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyNodeTag(yWorks.yFiles.UI.Model.INode,System.Object)">
      <summary>
            Callback that copies the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> of a <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.
            </summary>
      <param name="oldNode">The old node.</param>
      <param name="tag">The tag to copy.</param>
      <returns>The copy of the tag.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyPortLocationModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Copies a <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> for a given port.
            </summary>
      <param name="graph">The graph that contains the port.</param>
      <param name="port">The port to copy the model parameter from.</param>
      <returns>The copy of the parameter to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyPortStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Copies an <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> instance.
            </summary>
      <param name="graph">The graph that contains the port.</param>
      <param name="port">The port to copy the style from.</param>
      <returns>The style to apply for the copy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyPortTag(yWorks.yFiles.UI.Model.IPort,System.Object)">
      <summary>
            Callback that copies the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> of a <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>.
            </summary>
      <param name="oldPort">The old port.</param>
      <param name="tag">The tag to copy.</param>
      <returns>The copy of the tag.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphCopier.CopyTag(yWorks.Canvas.Model.IModelItem,System.Object)">
      <summary>
            Callback that will copy a <see cref="P:yWorks.Support.ITagOwner.Tag"></see> for the target graph.
            </summary>
      <param name="oldOwner">The old owner of the tag.</param>
      <param name="tag">The tag to copy.</param>
      <returns>A copy of the tag.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphCopier.CopyViewStates">
      <summary>
            Gets or sets a property that determines whether <see cref="T:yWorks.yFiles.UI.Model.FoldingManager">additional view states</see>.
            Should be copied to target graphs.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes">
      <summary>
             Enumeration that can use <see cref="T:System.FlagsAttribute">flags</see> to indicate
             which items should be <see cref="M:System.ICloneable.Clone">cloned</see> during
             copy operations.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.NodeStyle">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Drawing.INodeStyle"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.EdgeStyle">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeStyle"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.PortStyle">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Drawing.IPortStyle"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.LabelStyle">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyle"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.LabelModelParameter">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.PortLocationModelParameter">
      <summary>
            Indicates the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.Tags">
      <summary>
            Indicates the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> constant.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphCopier.CloneTypes.All">
      <summary>
            A combination of all flags in this enumeration.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphDecorator">
      <summary>
            Helper class that can be used to aid in 
            decorating <see cref="T:yWorks.Canvas.Model.IModelItem"></see>s from an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphDecorator.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.GraphDecorator"></see> class.
            </summary>
      <param name="graph">The graph.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphDecorator.BendDecorator">
      <summary>
            Returns a <see cref="P:yWorks.yFiles.UI.Model.GraphDecorator.BendDecorator"></see> instance that can be
            used to decorate the <see cref="T:yWorks.yFiles.UI.Model.IBend"></see> instances in the graph
            that this decorator has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphDecorator.EdgeDecorator">
      <summary>
            Returns an <see cref="P:yWorks.yFiles.UI.Model.GraphDecorator.EdgeDecorator"></see> instance that can be
            used to decorate the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instances in the graph
            that this decorator has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphDecorator.LabelDecorator">
      <summary>
            Returns a <see cref="P:yWorks.yFiles.UI.Model.GraphDecorator.LabelDecorator"></see> instance that can be
            used to decorate the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> instances in the graph
            that this decorator has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphDecorator.NodeDecorator">
      <summary>
            Returns a <see cref="P:yWorks.yFiles.UI.Model.GraphDecorator.NodeDecorator"></see> instance that can be
            used to decorate the <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instances in the graph
            that this decorator has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphDecorator.PortDecorator">
      <summary>
            Returns a <see cref="P:yWorks.yFiles.UI.Model.GraphDecorator.PortDecorator"></see> instance that can be
            used to decorate the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instances in the graph
            that this decorator has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphDecoratorExtensions">
      <summary>
            Static class that contains extension methods for <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            to aid in conveniently using <see cref="T:yWorks.Support.ILookupDecorator"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphDecoratorExtensions.GetDecorator(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.GraphDecorator"></see> instance for use with the given graph.
            </summary>
      <param name="graph">The graph to get a <see cref="T:yWorks.yFiles.UI.Model.GraphDecorator"></see> instance for.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.GraphDecorator"></see></returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphExtensions">
      <summary>
            Extension method holder class that extends the
            <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> type with utility methods.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,System.String)">
      <summary>
            Add a label to the given item using the text as the initial label text.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="text">the initial text of the label</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,System.String)">
      <summary>
            Add a label to the given item using the text as the initial label text as well as  label model parameter.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="parameter">The label model parameter instance to use.</param>
      <param name="text">the initial text of the label</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String)">
      <summary>
            Add a label to the given item using the text as the initial label text as well as  label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="parameter">The label model parameter instance to use.</param>
      <param name="style">The style to assign to the new label.</param>
      <param name="text">the initial text of the label</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,System.Object)">
      <summary>
            Add a label to the given item using the text as the initial label text as well as label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="parameter">The label model parameter instance to use.</param>
      <param name="style">The style to assign to the new label.</param>
      <param name="text">the initial text of the label</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="tag">The <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign to the new label.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddLabel(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Add a label to the given item using the text as the initial label text as well as label model parameter, preferred size, and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="parameter">The label model parameter instance to use.</param>
      <param name="style">The style to assign to the new label.</param>
      <param name="text">the initial text of the label</param>
      <param name="preferredSize">The initial preferred size to assign.</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Adds a new port to the graph at the port using the default location model parameter
            for the <paramref name="owner"></paramref>.
            </summary>
      <param name="graph">The graph to add the port to. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <returns>The newly added port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a new port to the graph at the port using the given location.
            </summary>
      <param name="graph">The graph to add the port to. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <param name="location">The absolute world coordinate location to add the port at.</param>
      <returns>The newly added port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Add a port to the given port owner using the absolute coordinates as the new initial position of
            the port anchor.
            </summary>
      <param name="portOwner">the owner to add the port instance to.</param>
      <param name="location">the location to use for the port to determine its location.
            This is passed to the <see cref="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateLocationModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)"></see> method 
            to determine the initial <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> to use.</param>
      <param name="style">the style to initially assign to the <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see> property, e.g.
            <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see>.
            </param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created port</returns>
      <exception cref="T:System.NotSupportedException">If this instance cannot add a port to <paramref name="portOwner"></paramref>.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Adds a new port to the graph at the port owner using the given location parameter.
            </summary>
      <param name="graph">The graph to add the port to. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <param name="locationModelParameter">The location model parameter to use for the newly created port.</param>
      <returns>The newly added port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddPort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Adds a new port to the graph using a <see langword="null"></see><see cref="P:yWorks.Support.ITagOwner.Tag"></see></summary>
      <param name="graph">The graph to add the port to. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <param name="locationModelParameter">The location model parameter to use for the newly created port.</param>
      <param name="portStyle">The port style to assign to the port.</param>
      <returns>The newly added port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AddRelativePort(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a new port to the graph at the node using a location that is relative to the center of the node.
            </summary>
      <param name="graph">The graph to add the port to. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <param name="relativeLocation">The offset of the port relative to the center of the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.</param>
      <returns>The newly added port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AdjustPreferredSize(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Adjusts the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see> property of a label to
            fit the suggested size of its <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see>.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="label">The label to adjust the size for.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AppendBend(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Appends a new bend to the list of bends at the given edge.
            </summary>
      <param name="graph">The graph to add the bend to. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="edge">The edge to add the bend to.</param>
      <param name="location">The location of the bend.</param>
      <returns>The newly created bend.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.AppendBends(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IEnumerable{yWorks.Canvas.Geometry.Structs.PointD})">
      <summary>
            Appends bends to the given edge using the provided locations.
            </summary>
      <param name="graph">The graph to add the bends to. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="edge">The edge to add the bends to.</param>
      <param name="locations">The locations of the bends.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.BeginEdit(yWorks.yFiles.UI.Model.IGraph,System.String,System.String)">
      <summary>
            Convenience method that uses the <see cref="T:yWorks.Support.IUndoSupport"></see> from the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s <see cref="T:yWorks.Support.ILookup"></see>
            to <see cref="M:yWorks.Support.IUndoSupport.BeginEdit(System.String,System.String)">begin an edit</see>.
            </summary>
      <param name="graph">The graph to edit. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="undoName">The name of the undo operation.</param>
      <param name="redoName">The name of the redo operation.</param>
      <returns>An edit that can be used for editing. This will return a dummy implementation if no <see cref="T:yWorks.Support.IUndoSupport"></see>
            is available.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.BeginEdit``1(yWorks.yFiles.UI.Model.IGraph,System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Convenience method that uses the <see cref="T:yWorks.Support.IUndoSupport"></see> from the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s <see cref="T:yWorks.Support.ILookup"></see>
            to <see cref="M:yWorks.Support.IUndoSupport.BeginEdit``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">begin an edit</see>.
            </summary>
      <param name="graph">The graph to edit. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="undoName">The name of the undo operation.</param>
      <param name="redoName">The name of the redo operation.</param>
      <param name="items">The items to pass to <see cref="M:yWorks.Support.IUndoSupport.BeginEdit``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})"></see>.</param>
      <typeparam name="T">The type of the items to edit.</typeparam>
      <returns>An edit that can be used for editing. This will return a dummy implementation if no <see cref="T:yWorks.Support.IUndoSupport"></see>
            is available.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CalculatePreferredSize(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,System.String)">
      <summary>
            Calculates the preferred size of a label with the given properties.
            </summary>
      <param name="graph">The graph to which the label will be added and that will yield the <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults">label defaults</see>.</param>
      <param name="item">The item that will own the label.</param>
      <param name="text">The text.</param>
      <returns>The size as calculated by the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CalculatePreferredSize(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Drawing.ILabelStyle,yWorks.yFiles.UI.Model.ILabelModelParameter,System.String)">
      <summary>
            Calculates the preferred size of a label with the given properties.
            </summary>
      <param name="graph">The graph to which the label will be added.</param>
      <param name="item">The item that will own the label.</param>
      <param name="labelStyle">The label style.</param>
      <param name="labelModelParameter">The label model parameter.</param>
      <param name="text">The text.</param>
      <returns>The size as calculated by the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CalculatePreferredSize(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Drawing.ILabelStyle,yWorks.yFiles.UI.Model.ILabelModelParameter,System.String,System.Object)">
      <summary>
            Calculates the preferred size of a label with the given properties.
            </summary>
      <param name="graph">The graph to which the label will be added.</param>
      <param name="item">The item that will own the label.</param>
      <param name="labelStyle">The label style.</param>
      <param name="labelModelParameter">The label model parameter.</param>
      <param name="text">The text.</param>
      <param name="tag">The tag for the label.</param>
      <returns>The size as calculated by the <see cref="T:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Clear(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Clears the graph instance, removing all entities in proper order.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.ClearBends(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Removes all bends from the given edge. 
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="edge">the edge whose bends will be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="sourceNode">The source node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port for the edge.</param>
      <param name="targetNode">The target node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port for the edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="sourceNode">The source node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port for the edge.</param>
      <param name="targetNode">The target node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port for the edge.</param>
      <param name="edgeStyle">The initial style to use for the edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="edgeStyle">The initial style to assign to the edge.</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateEdgeStyle(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Convenience method that delegates to the <see cref="M:yWorks.yFiles.UI.Model.IEdgeDefaults.GetStyleInstance"></see>
            method of the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s <see cref="P:yWorks.yFiles.UI.Model.IGraph.EdgeDefaults"></see>.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The style instance to use for newly created edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateLabelModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Creates the label model parameter for a given <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>.
            </summary>
      <param name="graph">The graph to retrieve the <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults"></see> from. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="item">The item that is the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Owner"></see> of the label in question.</param>
      <returns>The default label model parameter to use for newly created labels at the item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateLabelStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Convenience method that delegates to the <see cref="M:yWorks.yFiles.UI.Model.IEdgeDefaults.GetStyleInstance"></see>
            method of the <see cref="M:yWorks.yFiles.UI.Model.GraphExtensions.GetLabelDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem)"></see> for the given <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem">labeled item</see>.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="item">The item the newly created label will belong to.</param>
      <returns>The style instance to use for newly created edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateLocationModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Uses the <see cref="M:yWorks.yFiles.UI.Model.GraphExtensions.GetPortDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">port defaults</see> for the <paramref name="owner"></paramref>
            to obtain the <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)">location model parameter</see>.
            </summary>
      <param name="graph">The graph to obtain the <see cref="M:yWorks.yFiles.UI.Model.GraphExtensions.GetPortDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">port defaults</see> from. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port to be created.</param>
      <returns>The default parameter to use for the <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> as returned by <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateLocationModelParameter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a location model parameter for a newly created <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> at the <paramref name="owner"></paramref> that matches the 
            <paramref name="location"></paramref>.
            </summary>
      <param name="graph">The graph to add the port to.  This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the port.</param>
      <param name="location">The location in the world coordinate system where the port should be added.</param>
      <returns>A location model parameter that matches the location.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Creates and returns a node using default values for the geometry and style.
            </summary>
      <returns>A newly created node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial center location.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="location">the initial coordinates of the center of 
            the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> property</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial geometry.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> property</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGraph,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial geometry.
            </summary>
      <param name="graph">The graph to create the node in. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreateNodeStyle(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Convenience method that delegates to the <see cref="M:yWorks.yFiles.UI.Model.INodeDefaults.GetStyleInstance"></see>
            method of the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>'s <see cref="P:yWorks.yFiles.UI.Model.IGraph.NodeDefaults"></see>.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The style instance to use for newly created nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.CreatePortStyle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Convenience method that delegates to the <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>
            method of the <see cref="M:yWorks.yFiles.UI.Model.GraphExtensions.GetPortDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)"></see> for the given <paramref name="owner"></paramref>.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner that be used for the newly created port.</param>
      <returns>The style instance to use for newly created ports.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Degree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Calculates the number of edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="port">The port owner to count the degree of.</param>
      <returns>The number of edges that are incident to the port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Degree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Calculates the number of edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="portOwner">The port owner to count the degree of.</param>
      <returns>The number of edges that are incident to the port owner.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.EdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Convenience method that yields all adjacent edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.EdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Convenience method that yields all adjacent edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetDefaultNodeBounds(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Gets the default node bounds for newly created nodes in the graph.
            </summary>
      <param name="graph">The graph to obtain the <see cref="T:yWorks.yFiles.UI.Model.INodeDefaults"></see> from.</param>
      <returns>The bounds anchored at (0,0) with <see cref="P:yWorks.yFiles.UI.Model.IGraph.NodeDefaults"></see>' <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Size"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Finds an edge that connects <paramref name="from"></paramref> and <paramref name="to"></paramref> in the given graph.
            </summary>
      <param name="graph">The graph to find the edge in. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="from">The <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> of the edge to find.</param>
      <param name="to">The <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see> of the edge to find.</param>
      <returns>An edge that satisfies the constraints or <see langword="null"></see>, if none was found.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetEdge(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Finds an edge that connects <paramref name="from"></paramref> and <paramref name="to"></paramref> in the given graph.
            </summary>
      <param name="graph">The graph to find the edge in. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="from">The <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> owner of the edge to find.</param>
      <param name="to">The <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see> owner of the edge to find.</param>
      <returns>An edge that satisfies the constraints or <see langword="null"></see>, if none was found.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetFoldedGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph">folded graph</see> instance associated with this
            <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> or <see langword="null"></see> if none is associated with it.
            </summary>
      <param name="graph">The graph to look up the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance.</param>
      <returns>The implementation of the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> or <see langword="null"></see> if 
            the graph has not been created by a <see cref="T:yWorks.yFiles.UI.Model.FoldingManager"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetGraph(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance from the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">The context to retrieve the graph from.</param>
      <returns>Return the graph or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetGraphSelection(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.yFiles.UI.Model.IGraphSelection"></see> instance from the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">The context to retrieve the selection from.</param>
      <returns>Return the selection or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetGroupedGraph(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph">grouped graph</see> instance associated with this
            <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> or <see langword="null"></see> if none is associated with it.
            </summary>
      <param name="graph">The graph to look up the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance.</param>
      <returns>The implementation of the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> or <see langword="null"></see> if 
            <see cref="P:yWorks.yFiles.UI.Model.DefaultGraph.GroupingSupported">grouping is not supported</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetIndex(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Gets the index of the bend at its <see cref="P:yWorks.yFiles.UI.Model.IBend.Owner"></see>.
            </summary>
      <param name="bend">The bend to get the index of.</param>
      <returns>The zero based index of the bend in the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Bends"></see> list; <c>-1</c> if the bend is not part of an edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetLabelDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults">label defaults</see> for a given <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>
            in the context of the <paramref name="graph"></paramref>.
            </summary>
      <param name="graph">The graph that contains the <paramref name="item"></paramref>. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="item">The item that the label defaults are returned for. If this is a <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph">group node</see>,
            the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see>'s <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Labels">label defaults</see> will be returned,
            otherwise the <see cref="P:yWorks.yFiles.UI.Model.IGraph.NodeDefaults"></see> or <see cref="P:yWorks.yFiles.UI.Model.IGraph.EdgeDefaults"></see><see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Labels">labels</see>
            will be returned.</param>
      <returns>Appropriate <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults"></see> for the provided <paramref name="item"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetPortDefaults(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Gets the <see cref="T:yWorks.yFiles.UI.Model.IPortDefaults">port defaults</see> for a given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            in the context of the <paramref name="graph"></paramref>.
            </summary>
      <param name="graph">The graph that contains the <paramref name="item"></paramref>. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="item">The item that the label defaults are returned for. If this is a <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph">group node</see>,
            the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see>'s <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Ports">port defaults</see> will be returned,
            otherwise the <see cref="P:yWorks.yFiles.UI.Model.IGraph.NodeDefaults"></see> or <see cref="P:yWorks.yFiles.UI.Model.IGraph.EdgeDefaults"></see><see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Ports">ports</see>
            will be returned.</param>
      <returns>Appropriate <see cref="T:yWorks.yFiles.UI.Model.IPortDefaults"></see> for the provided <paramref name="item"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetSourceNode(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Gets the source node for the given edge or <see langword="null"></see>.
            </summary>
      <param name="edge">The edge to get the <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see>
            as an <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The source node or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.GetTargetNode(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Gets the target node for the given edge or <see langword="null"></see>.
            </summary>
      <param name="edge">The edge to get the <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see>
            as an <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The target node or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.InDegree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Calculates the number of incoming edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="port">The port to count the incoming edges of.</param>
      <returns>The number of edges that have the port as their target port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.InDegree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Calculates the number of incoming edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="portOwner">The port owner to count the incoming edges of.</param>
      <returns>The number of edges that have the port owner as their target port's owner.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.InEdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Convenience method that yields the incoming edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.InEdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Convenience method that yields the incoming edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.IsSelfloop(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
             Returns whether an <see cref="T:yWorks.yFiles.UI.Model.IEdge">edge</see> is a self loop.
            </summary>
      <param name="edge">The edge to use. This is a <c>this</c> parameter, so that the method can be used
             as an extension method.</param>
      <returns>
        <see langword="true">
        </see>, if the edge is a self loop</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Neighbors``1(yWorks.yFiles.UI.Model.IGraph,``0)">
      <summary>
            Yields the neighbors of a given <paramref name="portOwner"></paramref>.
            </summary>
      <param name="graph">The graph to use for obtaining the <see cref="M:yWorks.yFiles.UI.Model.IGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">adjacent edges</see>
            This is a <c>this</c> argument so that this method can be used as an extension method.</param>
      <param name="portOwner">The port owner.</param>
      <typeparam name="T">The type of the <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see></typeparam>
      <returns>An enumerable over all neighbors.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Opposite(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Yields the opposites port of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
      <param name="edge">The edge to get the opposite <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> of <paramref name="port"></paramref> from.</param>
      <param name="port">The port that the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> is connected to.</param>
      <returns>The opposite port.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="port"></paramref> is neither the source or target of the edge.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Opposite(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Yields the opposites port owner of an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
      <param name="edge">The edge to get the opposite <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> of <paramref name="owner"></paramref> from.</param>
      <param name="owner">The owner of the port that the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> is connected to.</param>
      <returns>The owner of the opposite port.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="owner"></paramref> is neither the source or target of the edge.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.OutDegree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Calculates the number of outgoing edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="port">The port to count the outgoing edges of.</param>
      <returns>The number of edges that have the port as their source port.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.OutDegree(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Calculates the number of outgoing edges at the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>
            for this graph.
            </summary>
      <param name="graph">The graph, which is a <c>this</c>-argument so that it can be used as an extension method.</param>
      <param name="portOwner">The port owner to count the outgoing edges of.</param>
      <returns>The number of edges that have the port owner as their source port's owner.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.OutEdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Convenience method that yields the outgoing edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.OutEdgesAt(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Convenience method that yields the outgoing edges at the given owner.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="owner">The owner of the edges.</param>
      <returns>An enumerable for the edges.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Predecessors``1(yWorks.yFiles.UI.Model.IGraph,``0)">
      <summary>
            Yields the predecessors of a given <paramref name="portOwner"></paramref>.
            </summary>
      <param name="graph">The graph to use for obtaining the <see cref="M:yWorks.yFiles.UI.Model.IGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">adjacent edges</see>
            This is a <c>this</c> argument so that this method can be used as an extension method.</param>
      <param name="portOwner">The port owner.</param>
      <typeparam name="T">The type of the <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see></typeparam>
      <returns>An enumerable over all predecessors.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Remove(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Convenience method that removes a <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see> from the graph.
            </summary>
      <param name="graph">The graph to remove the item from. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="labeledItem">The item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="labeledItem"></paramref> is neither <see cref="T:yWorks.yFiles.UI.Model.INode"></see> nor <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Remove(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Convenience method that removes a <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> from the graph.
            </summary>
      <param name="graph">The graph to remove the port owner from. This is a <c>this</c> argument so that this method can be used
            as an extension method.</param>
      <param name="portOwner">The port owner to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="portOwner"></paramref> is neither <see cref="T:yWorks.yFiles.UI.Model.INode"></see> nor <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Reverse(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
             Reverses an edge by <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">setting source and target port</see>
             to <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see> and <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see>.
            </summary>
      <param name="edge">The edge to reverse.</param>
      <param name="graph">The graph that contains the edge
              This is a <c>this</c> parameter, so that the method can be used
             as an extension method.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.SetCenter(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the center of a node to the given world coordinates.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="node">The node to recenter.</param>
      <param name="center">The new center coordinates of the node in the world coordinate system.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.SetLocation(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Convenience method that tries to set the absolute coordinates of the given port to the given values.
            </summary>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="port">The port to modify</param>
      <param name="location">the new absolute coordinates of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.SetRelativeLocation(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Tries to set the location of the port relative to its <see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see> if
            the owner is a <see cref="T:yWorks.yFiles.UI.Model.INode">node</see>. 
            </summary>
      <param name="port">the port</param>
      <param name="relativeLocation">the new coordinate offsets relative to the center of the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>'s
            center.</param>
      <param name="graph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the port is not owned by a node</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphExtensions.Successors``1(yWorks.yFiles.UI.Model.IGraph,``0)">
      <summary>
            Yields the successors of a given <paramref name="portOwner"></paramref>.
            </summary>
      <param name="graph">The graph to use for obtaining the <see cref="M:yWorks.yFiles.UI.Model.IGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">adjacent edges</see>
            This is a <c>this</c> argument so that this method can be used as an extension method.</param>
      <param name="portOwner">The port owner.</param>
      <typeparam name="T">The type of the <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see></typeparam>
      <returns>An enumerable over all successors.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphItemType">
      <summary>
            Helper class that deals with the <see cref="T:yWorks.yFiles.UI.Model.GraphItemTypes"></see>
            enumeration.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains any of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains any of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains any of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains all of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains all of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains all of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.GetItemType(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Gets the type of the item.
            </summary>
      <param name="item">The item.</param>
      <returns>The type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.GetItemTypes(System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines the types of the items contained in the collection of items.
            </summary>
      <param name="items">The items.</param>
      <returns>The types of the items.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.GetItemTypes(System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines the types of the items contained in the collection of items.
            </summary>
      <param name="items">The items.</param>
      <returns>The types of the items.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.GetItemTypes(System.Collections.IEnumerator)">
      <summary>
            Determines the types of the items contained in the collection of items.
            </summary>
      <param name="items">The items.</param>
      <returns>The types of the items.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Is(yWorks.yFiles.UI.Model.GraphItemTypes,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether the <paramref name="item"></paramref> is of the specified <paramref name="type"></paramref>.
            </summary>
      <param name="item">The item.</param>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if the <paramref name="item"></paramref> is of the specified <paramref name="type"></paramref>; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains none of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains none of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
      <param name="items">The items.</param>
      <param name="types">The types.</param>
      <returns>
        <c>true</c> if the specified items contains none of the types; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphItemTypes">
      <summary>
            An enumeration for use in various properties
            that can take a bitwise combination of item types that make up an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.Node">
      <summary>
            Constant for nodes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.Edge">
      <summary>
            Constant for edges.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.NodeLabel">
      <summary>
            Constant for node labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.EdgeLabel">
      <summary>
            Constant for edge labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.Port">
      <summary>
            Constant for ports.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.Label">
      <summary>
            Constant for all kinds of labels.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.LabeledItem">
      <summary>
            Constant for all kinds of <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.Bend">
      <summary>
            Constant for node bends.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.All">
      <summary>
            Constant for all item types.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.GraphItemTypes.None">
      <summary>
            Constant for no item type.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Is(yWorks.yFiles.UI.Model.GraphItemTypes,yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether the <paramref name="item"></paramref> is of the specified <paramref name="type"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerable{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.Generic.IEnumerator{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.ContainsAll(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains all of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.Contains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains any of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphItemType.NotContains(yWorks.yFiles.UI.Model.GraphItemTypes,System.Collections.IEnumerator)">
      <summary>
            Determines whether the specified items collection contains none of the types described
            by <paramref name="types"></paramref>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphObstacleProvider">
      <summary>
            A convenience composite implementation of the <see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see>
            that will use the <see cref="P:yWorks.yFiles.UI.Model.IGraph.Edges"></see> and <see cref="P:yWorks.yFiles.UI.Model.IGraph.Nodes"></see>
            of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> from the <see cref="T:yWorks.Canvas.Drawing.IRenderContext"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphObstacleProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.GraphObstacleProvider" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphObstacleProvider.GetGraph(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Helper method that retrieves the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> to use
            from the <paramref name="canvasContext"></paramref></summary>
      <param name="canvasContext">The context to retrieve the implementation from.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance to query or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphObstacleProvider.GetObstacles(yWorks.Canvas.Drawing.IRenderContext)">
      <summary>
            Iterates over all <see cref="P:yWorks.yFiles.UI.Model.IGraph.Edges"></see> and
            <see cref="P:yWorks.yFiles.UI.Model.IGraph.Nodes"></see> to query
            an <see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see> from
            the <see cref="T:yWorks.Canvas.Model.IModelItem"></see>'s <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="canvasContext">The context where the obstacles are queried for.</param>
      <returns>A path that is the concatenated path of all obstacles for the given context.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphObstacleProvider.QueryEdges">
      <summary>
            Gets or sets a value indicating whether to query the <see cref="P:yWorks.yFiles.UI.Model.IGraph.Edges"></see>
            for an <see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see> implementation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphObstacleProvider.QueryNodes">
      <summary>
            Gets or sets a value indicating whether to query the <see cref="P:yWorks.yFiles.UI.Model.IGraph.Nodes"></see>
            for an <see cref="T:yWorks.Canvas.Model.IObstacleProvider"></see> implementation.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GraphSelection">
      <summary>
            Simple implementation of the <see cref="T:yWorks.yFiles.UI.Model.IGraphSelection"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.#ctor">
      <summary>
            Creates a new instance with no initial <see cref="P:yWorks.yFiles.UI.Model.GraphSelection.Graph"></see>
            assigned.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
            Instanciates an instance using the the graph as the model.
            </summary>
      <param name="graph">
      </param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.Clear">
      <summary>
            Clears the selection.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.Count">
      <summary>
            Returns the number of selected items.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.CreateBendSelectionModel">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.Model.DefaultSelectionModel`1"></see> to use for the bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.CreateEdgeSelectionModel">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.Model.DefaultSelectionModel`1"></see> to use for the edges.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.CreateLabelSelectionModel">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.Model.DefaultSelectionModel`1"></see> to use for the labels.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.CreateNodeSelectionModel">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.Model.DefaultSelectionModel`1"></see> to use for the nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.CreatePortSelectionModel">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.Model.DefaultSelectionModel`1"></see> to use for the ports.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection of all selected elements.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"></see> object that can be used to iterate through all selected elements.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.Graph">
      <summary>
            Gets or sets the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> this instance
            is using as the domain for the selection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether an item is currently selected.
            </summary>
      <param name="o">The item to check.</param>
      <returns>Whether it is currently selected.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.yFiles.UI.Model.IBend)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.yFiles.UI.Model.IEdge)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.yFiles.UI.Model.ILabel)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.yFiles.UI.Model.INode)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.IsSelected(yWorks.yFiles.UI.Model.IPort)"></member>
    <member name="E:yWorks.yFiles.UI.Model.GraphSelection.ItemDeselected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            selected to unselected.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.GraphSelection.ItemSelected">
      <summary>
            An event that will be triggered if an item changed its selection state from
            unselected to selected.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.OnItemDeselected(yWorks.Canvas.Model.ItemEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.GraphSelection.ItemDeselected"></see> event
            </summary>
      <param name="itemEventArgs">The parameters for the event</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.OnItemSelected(yWorks.Canvas.Model.ItemEventArgs{yWorks.Canvas.Model.IModelItem})">
      <summary>
            Raises the <see cref="E:yWorks.yFiles.UI.Model.GraphSelection.ItemSelected"></see> event
            </summary>
      <param name="itemEventArgs">The parameters for the event</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.SelectedBends">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected bends.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.SelectedEdges">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.SelectedLabels">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.SelectedNodes">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GraphSelection.SelectedPorts">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected ports.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.Canvas.Model.IModelItem,System.Boolean)">
      <summary>
            Sets the selection state of an item.
            </summary>
      <param name="o">The object to set the selection state for.</param>
      <param name="selected">Whether to select the object.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.yFiles.UI.Model.IBend,System.Boolean)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.yFiles.UI.Model.IEdge,System.Boolean)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.yFiles.UI.Model.ILabel,System.Boolean)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.yFiles.UI.Model.INode,System.Boolean)"></member>
    <member name="M:yWorks.yFiles.UI.Model.GraphSelection.SetSelected(yWorks.yFiles.UI.Model.IPort,System.Boolean)"></member>
    <member name="T:yWorks.yFiles.UI.Model.GroupedGraph">
      <summary>
            Default implementation of the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> interface that can be used
            to decorate <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.#ctor">
      <summary>
             Creates a new instance using a newly created empty <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> instance
             and <see cref="T:yWorks.yFiles.UI.Model.DefaultHierarchy`1"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.#ctor(yWorks.yFiles.UI.Model.IGraph)">
      <summary>
             Creates a new instance using a newly created <see cref="T:yWorks.yFiles.UI.Model.DefaultHierarchy`1"></see> instance
             and the provided <paramref name="graph"></paramref>.
            </summary>
      <param name="graph">The graph implementation to use for managing the node hierarchy.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IHierarchy{yWorks.yFiles.UI.Model.INode})">
      <summary>
             Creates a new instance using the provided graph and hierarchy instance.
            </summary>
      <param name="graph">The graph implementation to use for managing the node hierarchy.</param>
      <param name="hierarchy">The hierarchy to use. The hierarchy needs to be initialized already, i.e. all of the nodes of the
             graph need to be part of the hierarchy.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.#ctor(yWorks.yFiles.UI.Model.IHierarchy{yWorks.yFiles.UI.Model.INode})">
      <summary>
             Creates a new instance using a newly created empty <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> instance
             and the provided <paramref name="hierarchy"></paramref>.
            </summary>
      <param name="hierarchy">The hierarchy implementation to use for managing the node hierarchy.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.AdjustGroupNodeBounds(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Method to adjust the size of a group node.
            </summary>
      <param name="groupNode">The group node to adjust the size of.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GroupedGraph.AutoAdjustGroupNodeBounds">
      <summary>
            Gets or sets a property that determines whether the bounds of group nodes should automatically
            be adjusted whenever the nodes that belong to the group node change their bounds.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateDefaultGroupNodeStyle">
      <summary>
            Factory method for the DefaultGroupNodeStyle property. This method will be called 
            upon first access to the <see cref="P:yWorks.yFiles.UI.Model.GroupedGraph.GroupNodeDefaults"></see> property.
            </summary>
      <returns>A new instance of <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateGroupNode(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates a new group node using the provided style and bounds as a child of <paramref name="parent"></paramref>.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="bounds">The initial bounds to use for the new node.</param>
      <param name="style">The style to use for the new node.</param>
      <param name="tag">The <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateGroupNodeDefaults">
      <summary>
            Factory method that creates the <see cref="T:yWorks.yFiles.UI.Model.INodeDefaults"></see> for group nodes.
            </summary>
      <returns>The defaults for group nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateGroupNodeLabelDefaults">
      <summary>
            Factory method that creates the <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults"></see> for group nodes.
            </summary>
      <returns>The defaults for group nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateGroupNodePortDefaults">
      <summary>
            Factory method that creates the <see cref="T:yWorks.yFiles.UI.Model.IPortDefaults"></see> for group nodes.
            </summary>
      <returns>The defaults for group nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.CreateNode(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref> using the given bounds
            and style.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.Dispose">
      <summary>
            Disposes of this instance. This removes all artifacts from the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> instance that 
            has been added during the registration.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.GetParent(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Convenience method that yields the <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parent</see> of a node.
            </summary>
      <param name="node">The node to yield the parent node.</param>
      <returns>The parent of the node or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see> if the node is a top level node.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GroupedGraph.Graph">
      <summary>
            Yields the graph instance that this instance is working on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.GroupedGraph.GroupNodeDefaults">
      <summary>
            Gets or sets the defaults for group nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.GroupNodes(System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})"></member>
    <member name="P:yWorks.yFiles.UI.Model.GroupedGraph.Hierarchy">
      <summary>
            Yields the hierarchy of the nodes in this grouped graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.OnGroupNodeCreated(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Called whenever a new group node has been created in the graph.
            </summary>
      <param name="parent">The new parent node of the node or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
      <param name="node">The newly created node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.OnNodeChanged(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that will be called once the original <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            triggers the <see cref="E:yWorks.yFiles.UI.Model.IGraph.NodeChanged"></see> event.
            </summary>
      <param name="node">The node that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.OnNodeCreated(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Called whenever a new node has been created in the graph.
            </summary>
      <param name="parent">The new parent node of the node or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</param>
      <param name="node">The newly created node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.OnNodeRemoved(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Called whenever a node has been removed in the graph.
            </summary>
      <param name="node">The removed node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraph.SetParent(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Sets the parent node for a given node.
            </summary>
      <param name="node">The node to assign a new parent.</param>
      <param name="parent">The parent group node to assign to <paramref name="node"></paramref>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.GroupedGraphExtensions">
      <summary>
            Contains <c>static</c> extension methods for the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateGroupNode(yWorks.yFiles.UI.Model.IGroupedGraph)">
      <summary>
            Creates a new group node using the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see>.
            </summary>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateGroupNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates a new group node using the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see> as a child of <paramref name="parent"></paramref>.
            </summary>
      <param name="groupedGraph">The <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance to use. This is a <c>this</c> parameter so that it can be used
            as an extension method.</param>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateGroupNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref>.
            </summary>
      <param name="bounds">The new bounds of the node.</param>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="nodeStyle">The initial style to assign.</param>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateGroupNodeStyle(yWorks.yFiles.UI.Model.IGroupedGraph)">
      <summary>
            Creates a group node style using the <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see>.
            </summary>
      <param name="groupedGraph">The <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance to use. This is a <c>this</c> parameter so that it can be used
            as an extension method.</param>
      <returns>A style instance to use for new group nodes.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref>.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref>.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="bounds">The new bounds of the node.</param>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref>.
            </summary>
      <param name="bounds">The new bounds of the node.</param>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="nodeStyle">The initial style to assign.</param>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.CreateNode(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref>.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <param name="bounds">The initial bounds of the node.</param>
      <param name="nodeStyle">The initial style to assign.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new node.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.GetDefaultGroupNodeBounds(yWorks.yFiles.UI.Model.IGroupedGraph)">
      <summary>
            Gets the bounds for a default group node using <see cref="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults"></see>.
            </summary>
      <param name="groupedGraph">The graph to use. This is a <c>this</c> parameter, so that the method can be used
            as an extension method.</param>
      <returns>The bounds for a newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.GetGroupedGraph(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Tries to retrieve an <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance from the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see>.
            </summary>
      <param name="context">The context to retrieve the implementation from.</param>
      <returns>The instance or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.GroupNodes(yWorks.yFiles.UI.Model.IGroupedGraph,System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Groups the nodes in <paramref name="children"></paramref> into a newly created group node.
            </summary>
      <param name="children">The children to group into the new group node.</param>
      <param name="groupedGraph">The <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance to use. This is a <c>this</c> parameter so that it can be used
            as an extension method.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.GroupNodes(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode,System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Groups the nodes in <paramref name="children"></paramref> into the provided group node.
            </summary>
      <param name="groupedGraph">The <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance to use. This is a <c>this</c> parameter so that it can be used
            as an extension method.</param>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="children">The children to group into the group node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.GroupedGraphExtensions.GroupNodes(yWorks.yFiles.UI.Model.IGroupedGraph,yWorks.yFiles.UI.Model.INode[])">
      <summary>
            Groups the nodes into a newly created group node.
            </summary>
      <param name="children">The children to group into the new group node.</param>
      <param name="groupedGraph">The <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> instance to use. This is a <c>this</c> parameter so that it can be used
            as an extension method.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.HierarchyChange">
      <summary>
            The type of hierarchy change that a <see cref="T:yWorks.yFiles.UI.Model.HierarchyEventArgs`1"></see> may carry.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.HierarchyChange.Added">
      <summary>
             The type of change that is triggered by <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemAdded"></see> events.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.HierarchyChange.Moved">
      <summary>
             The type of change that is triggered by <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemMoved"></see> events.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.HierarchyChange.Removed">
      <summary>
             The type of change that is triggered by <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemRemoved"></see> events.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.HierarchyChange.Changed">
      <summary>
             The type of change that is triggered by <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemChanged"></see> events.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.HierarchyEventArgs`1">
      <summary>
            The event argument class used by <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>s to notify
            listeners of changes to the hierarchy.
            </summary>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.#ctor(yWorks.yFiles.UI.Model.HierarchyChange,`0,`0,`0)">
      <summary>
            Creates a new instance of the event using the provided parameters.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.CreateItemAdded(`0,`0)">
      <summary>
            Factory method that creates an event for <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemAdded"></see> notifications.
            </summary>
      <param name="item">The item that has been added.</param>
      <param name="newParent">The new parent.</param>
      <returns>The event to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.CreateItemChanged(`0,`0)">
      <summary>
            Factory method that creates an event for <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemChanged"></see> notifications.
            </summary>
      <param name="item">The item that has been changed.</param>
      <param name="parent">The current parent.</param>
      <returns>The event to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.CreateItemMoved(`0,`0,`0)">
      <summary>
            Factory method that creates an event for <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemMoved"></see> notifications.
            </summary>
      <param name="item">The item that has been reparented.</param>
      <param name="oldParent">The old parent.</param>
      <param name="newParent">The new parent.</param>
      <returns>The event to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.CreateItemRemoved(`0,`0)">
      <summary>
            Factory method that creates an event for <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemRemoved"></see> notifications.
            </summary>
      <param name="item">The item that has been removed.</param>
      <param name="oldParent">The last valid parent.</param>
      <returns>The event to use.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.EventType">
      <summary>
            Yields the type of this event.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.Item">
      <summary>
            Yields the item that is the subject of this event.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.NewParent">
      <summary>
            Yields the new parent of the <see cref="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.Item"></see>, if applicable.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.OldParent">
      <summary>
            Yields the old parent of the <see cref="P:yWorks.yFiles.UI.Model.HierarchyEventArgs`1.Item"></see>, if applicable.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.HierarchyExtensions">
      <summary>
            Static utility class that offers convenience methods for
            often used tasks in conjunction with <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>
            instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.Elements``1(yWorks.yFiles.UI.Model.IHierarchy{``0})">
      <summary>
            Returns all elements that are part of the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
      <returns>An enumeration of the contents of the hierarchy at the time of this invokation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.GetDescendants``1(yWorks.yFiles.UI.Model.IHierarchy{``0},``0)">
      <summary>
            Returns all descendants of the provided item that are part of the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <param name="root">The root item to get the descendants from.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
      <returns>An enumeration of the children of the item at the time of this invokation in reverse dfs prefix order.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.GetDescendantsBottomUp``1(yWorks.yFiles.UI.Model.IHierarchy{``0},``0)">
      <summary>
            Returns all descendants of the provided item that are part of the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <param name="root">The root item to get the descendants from.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
      <returns>An enumeration of the children of the item at the time of this invokation in dfs postfix order.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.GetNearestCommonAncestor``1(yWorks.yFiles.UI.Model.IHierarchy{``0},System.Collections.Generic.IEnumerator{``0})">
      <summary>
            Determines the nearest common ancestor of the items provided in the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <param name="items">The items to find the nearest common ancestor of.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.GetNearestCommonAncestor``1(yWorks.yFiles.UI.Model.IHierarchy{``0},``0[])">
      <summary>
            Determines the nearest common ancestor of the items provided in the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <param name="items">The items to find the nearest common ancestor of.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.GetPathToRoot``1(yWorks.yFiles.UI.Model.IHierarchy{``0},``0)">
      <summary>
            Gets the path to root traversing all <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parents</see>
            of the given item.
            </summary>
      <param name="hierarchy">The hierarchy to use for retrieving the <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parent</see>.</param>
      <param name="item">The item to start.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
      <returns>A list that includes the item but not the <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>, unless they are identical and all parent in between them.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.HierarchyExtensions.IsDescendant``1(yWorks.yFiles.UI.Model.IHierarchy{``0},``0,``0)">
      <summary>
            Determines whether <paramref name="parent"></paramref> is a parent of <paramref name="node"></paramref>
            in the hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy itself.</param>
      <param name="node">The node to check.</param>
      <param name="parent">The parent to check.</param>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
      <returns>Whether parent is an ancestor of node.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.HierarchyItemEventHandler`1">
      <summary>
            The delegate that is used to deliver 
            <see cref="T:yWorks.yFiles.UI.Model.HierarchyEventArgs`1"></see> of an <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see>.
            </summary>
      <param name="source">The source that triggered the event. This is an <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see> implementation.</param>
      <param name="eventArgs">The event arguments.</param>
      <typeparam name="T">The type of the item in the hierarchy.</typeparam>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback">
      <summary>
            The interface of the callback that is passed to implementations of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see>'s
            <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)"></see> method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Tells the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view implementation to add the edge provided to the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)"></see>
            method as a separate dummy edge to the view at the given ports.
            </summary>
      <param name="sourcePort">The source port at the source node in the view to use or <see langword="null"></see> if an extra 
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> port should be added for the edge to connect to at the source.</param>
      <param name="targetPort">The target port at the target node in the view to use or <see langword="null"></see> if an extra 
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> port should be added for the edge to connect to at the target.</param>
      <returns>
            The dummy edge that has been created in the view. Don't change the properties of the edge directly.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddToExistingDummy(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Tells the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view implementation to logically add the edge provided to the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)"></see>
            method to a dummy edge that already exists in the view.
            </summary>
      <param name="dummyEdge">One of the <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.GetExistingDummyEdges(System.Boolean)">existing dummy edges</see> from the view which 
            has been chosen to represent the master edge in this view as a dummy.</param>
      <returns>The dummy edge that represents the edge in the view, which is the same as the <paramref name="dummyEdge"></paramref> parameter. 
            Don't change the properties of the edge directly.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.ExcludeDummyEdge">
      <summary>
            Tells the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view implementation not to add a dummy for the edge provided 
            to the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)"></see>
            method in this view.
            </summary>
      <returns>
            This method will always return <see langword="null"></see>. This is for symmetry reasons to be easily exchangeable with the 
            other methods.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.GetExistingDummyEdges(System.Boolean)">
      <summary>
            Helper methods that can be used by the implementation of the <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)"></see> method
            to determine the dummy edges that are currently part of the view and interconnect the same nodes as the 
            dummy edge would, if it was included in the view.
            </summary>
      <param name="ignoreDirection">Whether the direction of the edges should be ignored so that
            reverse edges are included in the enumeration, too.</param>
      <returns>An collection of currently existing dummy edges in the view that interconnects the same source and target node.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IBend">
      <summary>
            The interface used in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation
            to control the layout of <see cref="T:yWorks.yFiles.UI.Model.IEdge">edges</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IBend.Location">
      <summary>
             Gets a view of the location of the bend in the world coordinate system.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IBend.Owner">
      <summary>
            Returns the edge this bend instance belongs to.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IBendLocationChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>'s <see cref="P:yWorks.Canvas.Geometry.IPoint.X">coordinates</see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IBendLocationChangeReporter.LocationChanged">
      <summary>
            The event that notifies listeners of bend location changes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback">
      <summary>
            The interface of the callback that is passed to implementations of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see>'s
            <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see> and <see cref="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})"></see>
            methods.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.AddBend(System.Int32,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.Canvas.Geometry.Structs.PointD)"></see> operation for the edge
            that this callback has been configured for.
            </summary>
      <param name="index">The index where the new bend needs to be inserted.</param>
      <param name="location">The new coordinates of the bend.</param>
      <returns>The new bend for this dummy edge.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.ClearBends">
      <summary>
            Removes all bends from the edge
            that this callback has been configured for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.RemoveBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.IBend)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="bend">The bend instance to remove.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)"></see> operation for the given
            bend at the item
            that this callback has been configured for.
            </summary>
      <param name="bend">The bend instance to set the location.</param>
      <param name="location">The new coordinates of the bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetSourcePortLocationParameter(yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)"></see> operation for the source
            port of the edge
            that this callback has been configured for.
            </summary>
      <param name="locationParameter">The new parameter for the location of the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetSourcePortStyle(yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)"></see> operation for the source
            port of the edge
            that this callback has been configured for.
            </summary>
      <param name="portStyle">The new style for the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetStyle(yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)"></see> operation for the edge
            that this callback has been configured for.
            </summary>
      <param name="edgeStyle">The new edge style.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetTargetPortLocationParameter(yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)"></see> operation for the target
            port of the edge
            that this callback has been configured for.
            </summary>
      <param name="locationParameter">The parameter for the location of the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback.SetTargetPortStyle(yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)"></see> operation for the target
            port of the edge
            that this callback has been configured for.
            </summary>
      <param name="portStyle">The new style for the port.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback">
      <summary>
            The interface of the callback that is passed to implementations of the <see cref="T:yWorks.yFiles.UI.Model.IDummyNodeConverter"></see>'s
            <see cref="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.ChangeDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see> and <see cref="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)"></see>
            methods.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetBounds(yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)"></see> operation for the node
            that this callback has been configured for.
            </summary>
      <param name="bounds">The new bounds of the node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetPortLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)"></see> operation for port at the node
            that this callback has been configured for.
            </summary>
      <param name="port">The port at the node to assign the style.</param>
      <param name="locationParameter">The new location parameter for the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetPortStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)"></see> operation for port at the node
            that this callback has been configured for.
            </summary>
      <param name="port">The port at the node to assign the style.</param>
      <param name="portStyle">The style to assign.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback.SetStyle(yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)"></see> operation for the node
            that this callback has been configured for.
            </summary>
      <param name="nodeStyle">The style to assign.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback">
      <summary>
            Common base interface for both the <see cref="T:yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback"></see>
            and <see cref="T:yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.AddLabel(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="labelModelParameter">The label model parameter to use.</param>
      <param name="style">The style to use.</param>
      <param name="text">The text to assign.</param>
      <param name="preferredSize">The initial preferred size of the label to assign to the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>The label instance that has been added to the item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.ClearLabels">
      <summary>
            Convenience method that <see cref="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.ILabel)">removes</see> all labels from the item
            that this callback has been configured for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.RemoveLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.ILabel)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="label">The label instance to remove.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="label">The label to change.</param>
      <param name="parameter">The new parameter.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="label">The label to change.</param>
      <param name="text">The new text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,System.Double,System.Double)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.SizeD)"></see> operation for the item
            that this callback has been configured for.
            </summary>
      <param name="label">The label to change.</param>
      <param name="width">The width of the preferred size.</param>
      <param name="height">The height of the preferred size.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IChangeLabeledItemAppearanceCallback.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Performs the <see cref="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)"></see> operation for the provided label
            that this callback has been configured for.
            </summary>
      <param name="label">The label instance to assign the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see> property.</param>
      <param name="style">The style to assign.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IClipboardHelper">
      <summary>
            Interface that helps in clipboard actions that can be associated with each <see cref="T:yWorks.Canvas.Model.IModelItem"></see> in
            the context where clipboards are needed.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.Copy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)">
      <summary>
            This method is called during the copy operation of the given item to retrieve additional state
            that can be later used during a <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Paste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see> operation.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item to copy to the clipboard.</param>
      <returns>A custom user object that will later be provided to <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Paste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.Cut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)">
      <summary>
            This method is called during the cut operation of the given item to retrieve additional state
            that can be later used during a <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Paste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see> operation.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item to cut to the clipboard.</param>
      <returns>A custom user object that will later be provided to <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Paste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.Paste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)">
      <summary>
            This method is called after the item has been pasted from the clipboard.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item that has been created during the paste operation.</param>
      <param name="userData">The data that had been queried during <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Cut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see> or <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Copy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see> respectively.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCopy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)">
      <summary>
            Determines whether the given item can or should be copied to the clipboard.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item in question.</param>
      <returns>Whether this item should be copied.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldCut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)">
      <summary>
            Determines whether the given item can or should be cut to the clipboard.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item in question.</param>
      <returns>Whether this item should be cut.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IClipboardHelper.ShouldPaste(yWorks.yFiles.UI.Model.GraphClipboard,System.Object,System.Object)">
      <summary>
            Determines whether the given item can or should be pasted from the clipboard to the target graph.
            </summary>
      <param name="clipboard">The clipboard that is using the interface, can be <see langword="null"></see></param>
      <param name="item">The item in the clipboard.</param>
      <param name="userData">The state memento that had been created during <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Cut(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see> or <see cref="M:yWorks.yFiles.UI.Model.IClipboardHelper.Copy(yWorks.yFiles.UI.Model.GraphClipboard,System.Object)"></see>.</param>
      <returns>Whether this item should be pasted.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.FoldingManager"></see> and <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>
            which is responsible for managing edges between dummy nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            This method gets called by the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> implementation to determine
            whether a given edge in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> should be represented by a dummy edge
            in the given view.
            </summary>
      <param name="callback">The <see cref="T:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback"></see> implementation that needs to be called in order to
            communicate the results of this query.</param>
      <param name="foldedGraph">The instance into which the dummy edge is going to be inserted.</param>
      <param name="masterEdge">The edge from the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that needs to be represented by a dummy
            edge. Note that you may not return this instance.</param>
      <param name="localSourceNode">The source node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual source node.</param>
      <param name="sourceDummy">Determines whether the <paramref name="localSourceNode"></paramref> is currently a dummy node.</param>
      <param name="localTargetNode">The target node that belongs to the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view that will act as the local
            representative of the actual target node.</param>
      <param name="targetDummy">Determines whether the <paramref name="localTargetNode"></paramref> is currently a dummy node.</param>
      <returns>The edge as returned by <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)"></see>, or <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddToExistingDummy(yWorks.yFiles.UI.Model.IEdge)"></see>, 
            or <see langword="null"></see> if the edge will be <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.ExcludeDummyEdge">excluded</see> from the view.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.ChangeDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback that is triggered by the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view to adjust the appearance of a dummy edge, e.g. to 
            reflect a state change in the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">master edges</see> that make up
            that dummy edge.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph to which the dummy edge belongs.</param>
      <param name="localDummyEdge">The dummy edge for which the appearance might need an update.</param>
      <param name="masterEdges">The list of <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">master edges</see>, that
            the dummy edge currently represents.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IDummyEdgeConverter.CreateDummyEdgeAppearance(yWorks.yFiles.UI.Model.IChangeDummyEdgeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Callback that is triggered by the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view to initially create the appearance of a dummy edge.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph to which the dummy edge belongs.</param>
      <param name="localDummyEdge">The dummy edge for which the appearance shall be determined.</param>
      <param name="masterEdges">The list of <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">master edges</see>, that
            the dummy edge initially represents.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IDummyNodeConverter">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.FoldingManager"></see> and <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see>
            which is responsible for managing the appearance of dummy nodes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.ChangeDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that is used by <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view implementations to change the appearance
            of a <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> node.
            </summary>
      <param name="callback">The callback to use for changing the appearance.</param>
      <param name="foldedGraph">The graph instance for which the dummy node can be changed.</param>
      <param name="dummyNode">The dummy node instance in the view</param>
      <param name="masterNode">The node that represents the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)"></see> item that
            is represented in the local view by the <paramref name="dummyNode"></paramref>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IDummyNodeConverter.CreateDummyNodeAppearance(yWorks.yFiles.UI.Model.IChangeDummyNodeAppearanceCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Callback that is used by <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view implementations to initially create the appearance
            of a <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">dummy</see> node.
            </summary>
      <param name="callback">The callback to use for determining the appearance.</param>
      <param name="foldedGraph">The graph instance for which the dummy node has been created.</param>
      <param name="dummyNode">The dummy node instance in the view</param>
      <param name="masterNode">The node that represents the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)"></see> item that
            is represented in the local view by the <paramref name="dummyNode"></paramref>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IEdge">
      <summary>
            The interface used to model edges in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdge.Bends">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.IBend">bends</see> that
            describe the geometry of this edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">
      <summary>
            Gets the source port instance this edge is connected to.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdge.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this edge in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">
      <summary>
            Gets the target port instance this edge is connected to.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IEdgeDefaults">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> to declare and obtain the defaults
            for edges and their labels or ports.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IEdgeDefaults.GetStyleInstance">
      <summary>
            Factory method that returns a style instance for use with newly created edges.
            </summary>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Labels">
      <summary>
            Gets or sets the defaults for labels at edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Ports">
      <summary>
            Gets or sets the defaults for ports at edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdgeDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IEdgeDefaults.GetStyleInstance"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IEdgeDefaults.Style">
      <summary>
            Gets or sets the style to use for edges.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IFoldedGraph">
      <summary>
            Interface that is used for manipulating a <see cref="M:yWorks.yFiles.UI.Model.FoldingManager.CreateManagedView">managed view</see>
            of an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> that supports folding operations like <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">expanding</see> and
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsing</see> of nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.AutoSwitchToAncestor">
      <summary>
            Determines whether this instance should automatically switch the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot"></see> to an ancestor
            of the current root, if this view becomes <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Invalid"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">
      <summary>
            This method will collapse the <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetChildren(`0)">children</see> of a group node into the group node.
            </summary>
      <param name="groupNode">A group node that is part of the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see> and <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Hierarchy"></see> that belongs to this instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.Dispose">
      <summary>
            Disposes of this view explicitly.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.EnqueueNavigationalUndoUnits">
      <summary>
            Determines whether changes to the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot"></see> property and calls to 
            <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)"></see> and <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see> should be recorded in undo history.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">
      <summary>
            This method will expand a previously <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed</see> group node to make its contents
            appear in this view.
            </summary>
      <param name="groupNode">A group node that is part of the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see> and <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Hierarchy"></see> that belongs to this instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)">
      <summary>
            Helper method that can be used to retrieve the original "master" items in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>
            that is managed by the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Manager"></see> associated with this view.
            </summary>
      <param name="item">The item that is part of this <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see> for which the original "master" item in the
            <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> will be returned.</param>
      <typeparam name="T">The type of the argument, which is typically <see cref="T:yWorks.yFiles.UI.Model.INode"></see>, <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>, <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>,
            <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>, or <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>.</typeparam>
      <returns>An item in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that corresponds to the <paramref name="item">argument</paramref>
            or <see langword="null"></see>, if there is no such item.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMasterEdges(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Helper method that corresponds to the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetMaster``1(``0)"></see> method, but is used for dummy edges, only.
            </summary>
      <param name="dummyEdge">The dummy edge for which the master edges should be returned.</param>
      <returns>An enumerable that can enumerate all of the edges in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>
            that are being represented by the dummy edge in this <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph">view</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.GetRepresentative``1(``0)">
      <summary>
            Helper method that can be used to retrieve the representing items in this <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see>-view
            for all items that are part of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is associated
            with the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Manager"></see> of this instance.
            </summary>
      <param name="item">An item that is part of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> that is associated with the
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Manager"></see> of this instance.</param>
      <typeparam name="T">The type of the argument, which is typically <see cref="T:yWorks.yFiles.UI.Model.INode"></see>, <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>, <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>,
            <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>, or <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>.</typeparam>
      <returns>An item in the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph">local graph view</see> that corresponds to the <paramref name="item">argument</paramref>
            or <see langword="null"></see>, if the item is not currently being represented in this view.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph">
      <summary>
            Provides a reference to the <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation that provides the actual view data.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IFoldedGraph.GroupCollapsed">
      <summary>
            Event that will be triggered whenever a group has been <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)"></see>d.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.GroupedGraph">
      <summary>
            Provides a reference to the <see cref="T:yWorks.yFiles.UI.Model.IGroupedGraph"></see> implementation that is backing the 
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see> view.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IFoldedGraph.GroupExpanded">
      <summary>
            Event that will be triggered whenever a group has been <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see>ed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.Hierarchy">
      <summary>
            Provides a reference to the <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see> implementation that is backing the 
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see> view.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.Invalid">
      <summary>
            Determines if this view is currently valid and can be edited.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsDummy(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether the specified item is a dummy in this view.
            </summary>
      <param name="item">One of the items that are <see cref="M:yWorks.yFiles.UI.Model.IGraph.Contains(yWorks.Canvas.Model.IModelItem)">contained</see> in the <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Graph"></see>.</param>
      <returns>
            	Whether the item is a dummy that is not an exact copy of an item in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsExpanded(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the provided node from this
            <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Hierarchy"></see> is currently <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">expanded</see>.
            </summary>
      <param name="groupNode">The group node for which the <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">expanded</see> state will be returned.</param>
      <returns>
        <see langword="true">
        </see>, if the group node can be <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Collapse(yWorks.yFiles.UI.Model.INode)">collapsed</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IFoldedGraph.IsInitiallyExpanded(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether the given group node from the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see>
            will be displayed in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)"></see>ed state the next time it will be included in this view.
            </summary>
      <param name="masterGroupNode">The group node in the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.</param>
      <returns>
        <see langword="true">
        </see> iff the node should be displayed in <see cref="M:yWorks.yFiles.UI.Model.IFoldedGraph.Expand(yWorks.yFiles.UI.Model.INode)">expanded</see> state
            the next time it will become visible in this view.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.LocalRoot">
      <summary>
            Gets or sets an entity of the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see> to serve as the virtual <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see> 
            for the view's local <see cref="P:yWorks.yFiles.UI.Model.IFoldedGraph.Hierarchy"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IFoldedGraph.Manager">
      <summary>
            Provides access to the manager that created this view and that contains references to 
            the <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterGraph"></see> and <see cref="P:yWorks.yFiles.UI.Model.FoldingManager.MasterHierarchy"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IGraph">
      <summary>
            Central interface that models a graph which can be displayed
            in a <see cref="T:yWorks.Canvas.CanvasControl">canvas</see> or <see cref="T:yWorks.yFiles.UI.GraphControl"></see>. 
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Adds a bend at the given index to the given edge using the coordinates provided.
            The added instance will be returned.
            </summary>
      <param name="edge">The edge to which the bend will be added.</param>
      <param name="index">The index for the newly added bend</param>
      <param name="location">the coordinates to use for the newly created bend</param>
      <returns>a newly created live bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Drawing.ILabelStyle,System.String,yWorks.Canvas.Geometry.Structs.SizeD,System.Object)">
      <summary>
            Add a label to the given item using the text as the initial label text and label model parameter and style.
            </summary>
      <param name="item">the item to add the label to.</param>
      <param name="labelModelParameter">The label model parameter instance to use.</param>
      <param name="text">the initial text of the label</param>
      <param name="style">The style to use for the label</param>
      <param name="preferredSize">The initial values to use for the <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.</param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created label</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Drawing.IPortStyle,System.Object)">
      <summary>
            Add a port to the given port owner using the location model parameter to determine the location of the port.
            </summary>
      <param name="portOwner">the owner to add the port instance to.</param>
      <param name="locationModelParameter">the parameter to use for the port to determine its location.</param>
      <param name="style">the style to initially assign to the <see cref="P:yWorks.yFiles.UI.Model.IPort.Style"></see> property, e.g.
            <see cref="F:yWorks.yFiles.UI.Drawing.Common.VoidPortStyle.Instance"></see>.
            </param>
      <param name="tag">the initial <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign.</param>
      <returns>the newly created port</returns>
      <exception cref="T:System.NotSupportedException">If this instance cannot add a port to <paramref name="portOwner"></paramref>.</exception>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.BendAdded">
      <summary>
            Event that is triggered if a bend has been added to an edge in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.BendChanged">
      <summary>
            Event that is triggered if a bend has been changed.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.BendRemoved">
      <summary>
            Event that is triggered if a bend has been removed from an edge in this graph.
            This event will be triggered, too, if an edge has been removed from the graph, for each
            of the bends that belonged to the edge.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.Bends">
      <summary>
            A collection view over the bends of the edges contained in this graph.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.CollectionModel">
      <summary>
            Offers a view over all elements that make up the graph. This is a combined view
            of all nodes, edges, labels, ports, and bends.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this graph contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.CreateEdge(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Convenience method that creates and returns an edge that connects to the given node instances using the
            given style instance. 
            </summary>
      <param name="source">The source node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="target">The target node the created edge will connect to. It is up to the implementation
            to decide which port to use at the given node. The implementation may create a new port of the edge.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.CreateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IEdgeStyle,System.Object)">
      <summary>
            Creates and returns an edge that connects to the given port instances. 
            </summary>
      <param name="sourcePort">The source port the created edge will connect to.</param>
      <param name="targetPort">The target port the created edge will connect to.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new edge.</param>
      <returns>the newly created edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.CreateNode(yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates and returns a node using default values for the style and the specified initial geometry.
            </summary>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The initial value of the <see cref="P:yWorks.Support.ITagOwner.Tag"></see> that will be assigned to the new node.</param>
      <returns>A newly created node instance</returns>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.DisplaysInvalidated">
      <summary>
            Event that is triggered if the graph has changed visually and the display should
            be updated to reflect the changes.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.EdgeChanged">
      <summary>
            Event that is triggered if an edge has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.EdgeCreated">
      <summary>
            Event that is triggered if an edge has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.EdgeDefaults">
      <summary>
            Gets or sets the defaults for normal edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.EdgeLabels">
      <summary>
            A collection view over the labels attached to edges contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.EdgeRemoved">
      <summary>
            Event that is triggered if an edge has been removed.
            This event will be triggered, too, prior to a node removal. 
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.Edges">
      <summary>
            A collection view over the edges contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.EdgesAt(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> for all edges that are adjacent to the given 
            port as a <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort"></see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort"></see>.
            </summary>
      <param name="port">the port to check</param>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.EdgesAt(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Returns an <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see> for all edges that have the given port owner as their 
            <see cref="P:yWorks.yFiles.UI.Model.IEdge.TargetPort">target port's</see> or <see cref="P:yWorks.yFiles.UI.Model.IEdge.SourcePort">source port's</see><see cref="P:yWorks.yFiles.UI.Model.IPort.Owner"></see>
            depending on the <see cref="T:yWorks.yFiles.UI.Model.AdjacencyTypes"></see></summary>
      <param name="adjacencyType">The type of adjacency to consider.</param>
      <param name="portOwner">the port owner to check</param>
      <returns>An enumeration of all adjacent edges of the given type.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.InvalidateDisplays">
      <summary>
            Causes the <see cref="E:yWorks.yFiles.UI.Model.IGraph.DisplaysInvalidated"></see> event to be triggered.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.LabelAdded">
      <summary>
            Event that is triggered if a label has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.LabelChanged">
      <summary>
            Event that is triggered if a label has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.LabelRemoved">
      <summary>
            Event that is triggered if a label has been removed from this graph instance. 
            This event will also be triggered, prior to the removal of the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Owner">owner</see>
            of the label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.MapperRegistry">
      <summary>
            Gets the mapper registry that is associated with this graph instance.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.NodeChanged">
      <summary>
            Event that is triggered if a node has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.NodeCreated">
      <summary>
            Event that is triggered if a node has been created.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.NodeDefaults">
      <summary>
            Gets or sets the defaults for normal nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.NodeLabels">
      <summary>
            A collection view over the labels attached to nodes contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.NodeRemoved">
      <summary>
            Event that is triggered if a node has been removed.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.Nodes">
      <summary>
            A collection view over the nodes contained in this graph.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.PortAdded">
      <summary>
            Event that is triggered if a port has been added to this graph instance. 
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.PortChanged">
      <summary>
            Event that is triggered if a port has been changed, e.g. if its style 
            has been replaced.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IGraph.PortRemoved">
      <summary>
            Event that is triggered if a port has been removed from its <see cref="P:yWorks.yFiles.UI.Model.IPort.Owner">owner</see>.
            This event will also be triggered prior to the removal of the corresponding owner
            of the port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraph.Ports">
      <summary>
            A collection view over the ports contained in this graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the given bend instance from its edge. 
            </summary>
      <param name="bend">the bend to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Removes the given edge instance from this graph. 
            </summary>
      <param name="edge">the live edge to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the given label from its owner. 
            This will trigger the corresponding event.
            </summary>
      <param name="label">the label to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Removes the given node instance from this graph. 
            </summary>
      <param name="node">the live node to be removed from this graph instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.Remove(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes a port from its owner. 
            </summary>
      <param name="port">the port that will be removed</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetBounds(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD)">
      <summary>
            Sets the bounds of the given node to the new values.
            </summary>
      <param name="node">a live node that belongs to this graph</param>
      <param name="bounds">The new bounds of the node to assign to its <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the label model parameter for the given label.
            </summary>
      <param name="label">The label.</param>
      <param name="parameter">The new parameter.</param>
      <exception cref="T:System.ArgumentException">If the parameter cannot be used for this label.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text of the given label.
            </summary>
      <param name="label">the label to modify</param>
      <param name="text">the new text of the label</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetLocation(yWorks.yFiles.UI.Model.IBend,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Modifies the location of the given bend.
            </summary>
      <param name="bend">the bend whose location is to be modified</param>
      <param name="location">the new location of the bend</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets a new <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> for the given port.
            </summary>
      <param name="port">The port to modify</param>
      <param name="locationParameter">the new parameter that determines the coordinates of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.Canvas.Geometry.Structs.SizeD)">
      <summary>
            Sets the preferred size of the label.
            </summary>
      <param name="label">The label.</param>
      <param name="preferredSize">The new preferred size.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Assigns the given style instance by reference to the edge.
            Style instances can be shared.
            </summary>
      <param name="edge">The edge that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Assigns the given style instance by reference to the label.
            Style instances can be shared.
            </summary>
      <param name="label">The label that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Assigns the given style instance by reference to the node.
            Style instances can be shared.
            </summary>
      <param name="node">The node that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraph.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Assigns the given style instance by reference to the port.
            Style instances can be shared. The style instance may be <c>null</c> in 
            which case the port will not be rendered.
            </summary>
      <param name="port">The port that will be assigned the new style</param>
      <param name="style">The style instance that will be assigned to the port.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IGraphSelection">
      <summary>
            Manages the selection state of items in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedBends">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected bends.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedEdges">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedLabels">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedNodes">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphSelection.SelectedPorts">
      <summary>
            An <see cref="T:yWorks.Canvas.Model.ISelectionModel`1"></see> of the selected ports.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IGraphStructure">
      <summary>
            The interface used by utility classes that <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see>
            delegates most of its work to. Normally you don't need to deal with this interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Adds a bend to an edge at the given index.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.AddEdge(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Adds a previously created edge to the collection of edges.
            </summary>
      <param name="edge">the edge to add</param>
      <param name="sourcePort">the source port to connect the edge to</param>
      <param name="targetPort">the target port to connect the edge to</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Adds a previously created label to its owner.
            </summary>
      <param name="owner">The new owner.</param>
      <param name="label">The label to add.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.AddNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Adds a previously created node to the collection of nodes.
            </summary>
      <param name="node">the node to add</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Add a previously created port to a given node.
            </summary>
      <param name="owner">The owner of the port.</param>
      <param name="port">The port that is not owned by another item.</param>
      <param name="locationParameter">The location of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="bend">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="edge">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="label">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="node">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.Contains(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="port">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.CreateBend(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates but does not add a bend for a given edge instance.
            </summary>
      <param name="forEdge">The edge to add the bend to.</param>
      <returns>The newly created bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.CreateEdge">
      <summary>
            Callback factory method that creates an IEdge implementation.
            </summary>
      <returns>a non-live edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.CreateLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Creates a label for a given owner using the provided model parameter.
            </summary>
      <param name="owner">The owner.</param>
      <param name="modelParameter">The model parameter.</param>
      <returns>A newly created label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.CreateNode">
      <summary>
            Callback factory method that creates an INode implementation.
            </summary>
      <returns>a non-live node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.CreatePort(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Create but don't yet add a port for a given node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphStructure.Edges">
      <summary>
            Gets a collection view over the edges in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.GetEdges(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Enumerates all edges that are incident to the given port.
            </summary>
      <param name="port">the port</param>
      <param name="adjacencyType">what kind of adjacent edges to yield</param>
      <returns>an enumerable that yields the edges</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.GetEdges(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Enumerates all edges that are incident to ports owned by the given owner.
            </summary>
      <param name="portOwner">the item that owns the ports</param>
      <param name="adjacencyType">what kind of adjacent edges to yield</param>
      <returns>an enumerable that yields the edges</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGraphStructure.Nodes">
      <summary>
            Gets a collection view over the nodes in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.RemoveBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the bend from its edge.
            </summary>
      <param name="bend">The bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.RemoveEdge(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Remove an edge from the current set of edges.
            </summary>
      <param name="edge">the edge to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.RemoveLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the label from its owner.
            </summary>
      <param name="label">The label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.RemoveNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Remove a node from the current set of nodes.
            </summary>
      <param name="node">the node to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.RemovePort(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes the port from its owner.
            </summary>
      <param name="port">The port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the <see cref="P:yWorks.yFiles.UI.Model.ILabel.LabelModelParameter"></see> for a given label.
            </summary>
      <param name="label">The label to modify.</param>
      <param name="parameter">The parameter to set.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text for a given label to the specified text.
            </summary>
      <param name="label">The label.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets the location model parameter for the given port.
            </summary>
      <param name="port">The port to set the parameter.</param>
      <param name="locationModelParameter">The new location model parameter for the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="edge">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="label">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="node">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphStructure.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="port">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport">
      <summary>
            Support interface that is used by <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see>
            to create the <see cref="T:yWorks.Support.IUndoUnit"></see>s for structural graph changes.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateAddBendUndoUnit(yWorks.yFiles.UI.Model.IBend,System.Int32)">
      <summary>
            Creates the bend creation <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given bend.
            </summary>
      <param name="bend">The bend that has been created.</param>
      <param name="index">The index at which the bend has been added.</param>
      <returns>The unit that can be used to undo and redo the creation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateAddLabelUndoUnit(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Creates the label creation <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given label.
            </summary>
      <param name="label">The label that has been added.</param>
      <returns>The unit that can be used to undo and redo the creation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateAddPortUndoUnit(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates the port creation <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given port.
            </summary>
      <param name="port">The port that has been added.</param>
      <returns>The unit that can be used to undo and redo the creation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateChangePortsUndoUnit(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates the change ports <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given edge.
            </summary>
      <param name="edge">The edge that has been reconnected to other ports.</param>
      <param name="oldSource">The old source port the edge connected to before the change.</param>
      <param name="oldTarget">The old target port the edge connected to before the change.</param>
      <returns>The unit that can be used to undo and redo the port change operation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateCreateEdgeUndoUnit(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates the edge creation <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given edge.
            </summary>
      <param name="edge">The edge that has been created.</param>
      <returns>The unit that can be used to undo and redo the creation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateCreateNodeUndoUnit(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates the node creation <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given node.
            </summary>
      <param name="node">The node that has been created.</param>
      <returns>The unit that can be used to undo and redo the creation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateRemoveBendUndoUnit(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Creates the bend removal <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given bend.
            </summary>
      <param name="bend">The bend that will be removed.</param>
      <returns>The unit that can be used to undo and redo the removal.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateRemoveEdgeUndoUnit(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates the edge removal <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given edge.
            </summary>
      <param name="edge">The edge that will be removed.</param>
      <returns>The unit that can be used to undo and redo the removal.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateRemoveLabelUndoUnit(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Creates the label removal <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given label.
            </summary>
      <param name="label">The label that will be removed.</param>
      <returns>The unit that can be used to undo and redo the removal.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateRemoveNodeUndoUnit(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates the node removal <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given node.
            </summary>
      <param name="node">The node that will be removed.</param>
      <returns>The unit that can be used to undo and redo the removal.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGraphUndoUnitSupport.CreateRemovePortUndoUnit(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates the port removal <see cref="T:yWorks.Support.IUndoUnit">undo unit</see> for the given port.
            </summary>
      <param name="port">The port that will be removed.</param>
      <returns>The unit that can be used to undo and redo the removal.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IGroupedGraph">
      <summary>
             Provides a hierarchic view over an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>. 
             </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGroupedGraph.AdjustGroupNodeBounds(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Method to adjust the size of a group node.
            </summary>
      <param name="groupNode">The group node to adjust the size of.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGroupedGraph.AutoAdjustGroupNodeBounds">
      <summary>
            Gets or sets a property that determines whether the bounds of group nodes should automatically
            be adjusted whenever the nodes that belong to the group node change their bounds.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGroupedGraph.CreateGroupNode(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates a new group node using the provided style and bounds as a child of <paramref name="parent"></paramref>.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="bounds">The initial bounds to use for the new node.</param>
      <param name="style">The style to use for the new node.</param>
      <param name="tag">The <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The newly created group node.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGroupedGraph.CreateNode(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.RectD,yWorks.yFiles.UI.Drawing.INodeStyle,System.Object)">
      <summary>
            Creates a new ordinary node as a direct descendant of <paramref name="parent"></paramref> using the given bounds
            and style.
            </summary>
      <param name="parent">The node to use as the parent in the grouping hierarchy.</param>
      <param name="bounds">The bounds to use initially. 
            The values will be copied to the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout">Layout</see> field.</param>
      <param name="style">The style instance that will be assigned to the newly created instance. This is done
            by reference.</param>
      <param name="tag">The <see cref="P:yWorks.Support.ITagOwner.Tag"></see> to assign to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.</param>
      <returns>The newly created node.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGroupedGraph.Graph">
      <summary>
            Yields the graph instance that this instance is working on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGroupedGraph.GroupNodeDefaults">
      <summary>
            Gets or sets the defaults for group nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IGroupedGraph.Hierarchy">
      <summary>
            Yields the hierarchy of the nodes in this grouped graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IGroupedGraph.SetParent(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Sets the parent node for a given node.
            </summary>
      <param name="node">The node to assign a new parent.</param>
      <param name="parent">The parent group node to assign to <paramref name="node"></paramref>.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IHierarchy`1">
      <summary>
            The interface that models an observable tree-like hierarchy.
            </summary>
      <typeparam name="T">The type of the items in the hierarachy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.AddChild(`0,`0)">
      <summary>
            Modifies the hierarchy by adding another child to the given parent.
            </summary>
      <param name="parent">The parent to add the child to.</param>
      <param name="child">The child to add to the parent.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.Contains(`0)">
      <summary>
            Determines whether the given item is part of this hierarchy.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item is contained.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetChildCount(`0)">
      <summary>
            Returns the number of children for the given parent item.
            </summary>
      <param name="parent">The parent to get the number of child items for.</param>
      <returns>The number of children.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetChildren(`0)">
      <summary>
            Returns an enumerable over the children of the provided item.
            </summary>
      <param name="item">The item for which to return the children.</param>
      <returns>All items that have <paramref name="item"></paramref> as their <see cref="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">parent</see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.GetParent(`0)">
      <summary>
            Returns the parent item of the item or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see> 
            if <paramref name="child"></paramref> is a top-level item.
            </summary>
      <param name="child">The item to retrieve the parent item for.</param>
      <returns>The parent item in this hierarchy or <see cref="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.IsLeaf(`0)">
      <summary>
            Returns whether the given item is considered a leaf item.
            </summary>
      <param name="item">The item to check.</param>
      <returns>Whether the item is considered a leaf.</returns>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemAdded">
      <summary>
            Event that will be triggered if an item has been added to the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemChanged">
      <summary>
            Event that will be triggered if an item has changed somehow in the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemMoved">
      <summary>
            Event that will be triggered if an item has been reparented in the model.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemRemoved">
      <summary>
            Event that will be triggered if an item has been removed from the model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.PublishItemChanged(`0)">
      <summary>
            Triggers the firing of an <see cref="E:yWorks.yFiles.UI.Model.IHierarchy`1.ItemChanged"></see> event for the given item.
            </summary>
      <param name="item">The item that has changed.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.Remove(`0)">
      <summary>
            Removes the given item from its parent and this hierarchy.
            </summary>
      <param name="child">The child to remove from this hierarchy.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IHierarchy`1.Root">
      <summary>
            Gets the root item of the hierarchy.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.SetLeaf(`0,System.Boolean)">
      <summary>
            Determines whether the given item should be considered a leaf.
            </summary>
      <param name="item">The item to check.</param>
      <param name="leaf">Whether to make the item a leaf.</param>
      <exception cref="T:System.InvalidOperationException">If the item currently has children.</exception>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IHierarchy`1.SetParent(`0,`0)">
      <summary>
            Reparents a child item that already belongs to this hierarchy instance 
            to a new parent.
            </summary>
      <param name="child">The child to reparent.</param>
      <param name="parent">The new parent.</param>
      <exception cref="T:System.InvalidOperationException">If <paramref name="child"></paramref> is currently an ancestor of <paramref name="parent"></paramref>.</exception>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabel">
      <summary>
            The interface used in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation
            for labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.LabelModelParameter">
      <summary>
            Gets the label model's parameter that determines the positioning of this label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.Layout">
      <summary>
            Provides access to the layout of a label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.Owner">
      <summary>
            Gets the owner of this label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize">
      <summary>
            Gets the preferred size of the label with respect to its current 
            contents and the implementation of the visualization.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this node in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabel.Text">
      <summary>
            Gets the text string associated with this label.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor">
      <summary>
            Interface that describes the properties of a candidate <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see></summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.EdgeOverlapPenalty">
      <summary>
            Gets the edge overlap penalty that is used by labeling algorithms to weigh in the
            penalty if this label candidate overlaps with an edge path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.ExternalCandidate">
      <summary>
            Gets a value indicating whether this candidate is deemed an external candidate.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.NodeOverlapPenalty">
      <summary>
            Gets the edge overlap penalty that is used by labeling algorithms to weigh in the
            penalty if this label candidate overlaps with a node's bounds.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.Profit">
      <summary>
            Gets the profit to weigh in if this candidate is chosen.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptorProvider">
      <summary>
            An interface that can be used to retrieve <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>
            instances for a given combination of <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s and 
            <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter">parameter candidates</see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelCandidateDescriptorProvider.GetDescriptor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Gets the descriptor for a given combination of label and <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>.
            </summary>
      <param name="label">The label to possibly assign the <paramref name="parameter"></paramref>.</param>
      <param name="parameter">The parameter to provide a descriptor for if applied to the given <paramref name="label"></paramref>.</param>
      <returns>A descriptor or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelDefaults">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> and the like to declare and obtain the defaults
            for labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelDefaults.AutoAdjustPreferredSize">
      <summary>
            Gets or sets a property that determines whether to automatically adjust
            the preferred size of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetLabelModelParameterInstance(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Factory method that returns a label model parameter instance for use with newly created labels.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The parameter to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.LabelModelParameter"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareLabelModelParameterInstance"></see>
            is enabled.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Factory method that returns a style instance for use with newly created labels.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelDefaults.LabelModelParameter">
      <summary>
            Gets or sets the label model parameter to use for labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareLabelModelParameterInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.LabelModelParameter"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetLabelModelParameterInstance(yWorks.yFiles.UI.Model.ILabeledItem)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.ILabeledItem)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelDefaults.Style">
      <summary>
            Gets or sets the style to use for labels.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabeledItem">
      <summary>
            Common interface for items in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation
            that may own <see cref="T:yWorks.yFiles.UI.Model.ILabel">labels</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabeledItem.Labels">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.ILabel">labels</see> that
            are owned by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelModel">
      <summary>
            Yields the geometry of <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModel.CreateDefaultParameter">
      <summary>
            Creates a default parameter that can be used for this model.
            </summary>
      <returns>a parameter for this model instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModel.GetContext(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of label
            and parameter.
            </summary>
      <param name="label">The label to use in the context.</param>
      <param name="parameter">The parameter to use for the label in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the label/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModel.GetGeometry(yWorks.yFiles.UI.Model.ILabelModelParameter,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Calculates the geometry in form of an <see cref="T:yWorks.Canvas.Geometry.IOrientedRectangle"></see>
            for a given label using the given model parameter.
            </summary>
      <param name="parameter">A parameter that has been created by this model.
            This is typically the parameter that yielded this instance through its
            <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see> property.
            </param>
      <param name="label">the label to calculate the geometry for</param>
      <returns>An instance that describes the geometry. This is typically
            an instance designed as a flyweight, so clients should not cache the
            instance but store the values if they need a snapshot for later use</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelModelParameter">
      <summary>
            Common interface for parameters that are created by 
            <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> instances.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model">
      <summary>
            Gets the model that can be used to query the geometry of a label given
            this parameter and a label instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModelParameter.Supports(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Determines whether this parameter can be used for a given label instance.
            </summary>
      <param name="label">the label this parameter should be associated with</param>
      <returns>whether this parameter instance can be used for the given label</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder">
      <summary>
            Utility interface used by <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> implementations to
            find the best <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            to approximate a given layout.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModelParameterFinder.FindBestParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel,yWorks.Canvas.Geometry.IOrientedRectangle)">
      <summary>
            Tries to find a parameter that best matches the given layout for the
            provided label instance.
            </summary>
      <param name="label">The label to find a parameter for.</param>
      <param name="model">The model instance to use. This should be the instance
            this instance has been obtained from.</param>
      <param name="labelLayout">The anticipated layout for the label.</param>
      <returns>A non-<c>null</c> parameter that can be used for the label to approximate the provided layout.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelModelParameterProvider">
      <summary>
            Helper interface used by <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> implementations
            to provide possible candidate <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>s
            for a given label and model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ILabelModelParameterProvider.GetParameters(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Returns an enumerator over a set of possible <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"></see>
            instances that can be used for the given label and model.
            </summary>
      <param name="label">The label instance to use.</param>
      <param name="model">The model to provide parameters for.</param>
      <returns>A possibly empty enumerator over a set of label model parameters.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ILabelTextChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>'s <see cref="P:yWorks.yFiles.UI.Model.ILabel.Text"></see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.ILabelTextChangeReporter.TextChanged">
      <summary>
            The event that will be triggered once the label's text property has changed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IMapperMetadata">
      <summary>
            The interface for the meta data that is associated with <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>s in 
            a <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IMapperMetadata.KeyType">
      <summary>
            Gets the type of the keys in the <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IMapperMetadata.ValueType">
      <summary>
            Gets the type of the values in the <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IMapperRegistry">
      <summary>
            A registry that can be used to store <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> implementations
            by tag.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a mapper for the given tag.
            </summary>
      <param name="tag">The tag to use.</param>
      <param name="mapper">The mapper to register.</param>
      <typeparam name="K">The key type for the mapper.</typeparam>
      <typeparam name="V">The value type for the mapper.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IMapperRegistry.GetMapper``2(System.Object)">
      <summary>
            Return a mapper that has previously been registered with this instance for the given tag.
            </summary>
      <param name="tag">The tag to use to look up the mapper.</param>
      <typeparam name="K">The key type for the mapper.</typeparam>
      <typeparam name="V">The value type for the mapper.</typeparam>
      <returns>The previously registered instance or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IMapperRegistry.GetMapperMetadata(System.Object)">
      <summary>
            Gets the mapper <see cref="T:yWorks.yFiles.UI.Model.IMapperMetadata">meta data</see> for the mapper
            that is registered using the <paramref name="tag"></paramref>.
            </summary>
      <param name="tag">The tag.</param>
      <returns>The meta data or <see langword="null"></see> if there is no such mapper registered for the given tag.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IMapperRegistry.RegisteredTags">
      <summary>
            Gets an enumerable over all tags that have been used to 
            register mapper implementations with this interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IMapperRegistry.RemoveMapper(System.Object)">
      <summary>
            Removes a previously registered mapper for the given tag.
            </summary>
      <param name="tag">The tag that has been used for registering the mapper.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IMapperRegistry.SetMapperMetadata(System.Object,yWorks.yFiles.UI.Model.IMapperMetadata)">
      <summary>
            Sets the mapper meta data for the mapper that has been <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">registered</see>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="tag">The tag.</param>
      <param name="metadata">The meta data to store with the mapper.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.KeyType"></see>
            or <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.ValueType"></see> mismatch the mapper instance in the registry.</exception>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.INode">
      <summary>
            The interface for node entities in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INode.Layout">
      <summary>
            Returns a live view of the layout of the node.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INode.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this node in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.INodeBoundsChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.yFiles.UI.Model.INode"></see>'s <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.INodeBoundsChangeReporter.BoundsChanged">
      <summary>
            The event that notifies listeners of node bounds changes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.INodeDefaults">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> and the like to declare and obtain the defaults
            for nodes and their labels or ports.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.INodeDefaults.GetStyleInstance">
      <summary>
            Factory method that returns a style instance for use with newly created nodes.
            </summary>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INodeDefaults.Labels">
      <summary>
            Gets or sets the defaults for labels at nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INodeDefaults.Ports">
      <summary>
            Gets or sets the defaults for ports at nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INodeDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.INodeDefaults.GetStyleInstance"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INodeDefaults.Size">
      <summary>
            Gets or sets the default node size.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.INodeDefaults.Style">
      <summary>
            Gets or sets the style to use for nodes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IObservableHierarchy`1">
      <summary>
            Support interface in the context of <see cref="T:yWorks.yFiles.UI.Model.IHierarchy`1"></see> whose implementations
            can be found in the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)">lookup</see> of a <see cref="T:yWorks.yFiles.UI.Model.DefaultHierarchy`1"></see>.
            </summary>
      <typeparam name="T">The type of the items in the hierarchy.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IObservableHierarchy`1.GetChildren(`0)">
      <summary>
            Provides a collection view of the children of <paramref name="parent"></paramref>
            that implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"></see>.
            </summary>
      <param name="parent">The parent to provide a child collection of.</param>
      <returns>The observable live collection of the children of <paramref name="parent"></paramref>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPort">
      <summary>
            The interface used in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> implementation
            for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s to connect to.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPort.Location">
      <summary>
            Returns a live view of the location of the port in world coordinates.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPort.LocationModelParameter">
      <summary>
             Gets the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> that 
             is used to determine the <see cref="P:yWorks.yFiles.UI.Model.IPort.Location"></see> of this port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPort.Owner">
      <summary>
            Returns the owner of this port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPort.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this port in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortDefaults">
      <summary>
            Interface used by <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> to declare and obtain the defaults
            for ports at nodes and edges.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortDefaults.AutoCleanup">
      <summary>
            Determines whether unused ports should automatically be removed from their owners
            as soon as no further edge is connected to them.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Factory method that returns a location model parameter instance for use with newly created ports.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The parameter to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.LocationModelParameter"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareLocationModelParameterInstance"></see>
            is enabled.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Factory method that returns a style instance for use with newly created ports.
            </summary>
      <param name="owner">The owner of the port that will be created.</param>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortDefaults.LocationModelParameter">
      <summary>
            Gets or sets the location model parameter to use for ports.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareLocationModelParameterInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.LocationModelParameter"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortDefaults.Style">
      <summary>
            Gets or sets the style to use for ports.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortLocationModel">
      <summary>
            Determines the location of <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortLocationModel.CreateParameter(yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Factory method that creates a parameter for the given port that tries to match the provided location
            in absolute world coordinates.
            </summary>
      <param name="portOwner">The port owner that will own the port for which the parameter shall be created.</param>
      <param name="location">The location in the world coordinate system that should be matched as best as possible.</param>
      <returns>A new instance that can be used to describe the location of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> at the given
            <paramref name="portOwner"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortLocationModel.GetContext(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of port
            and parameter.
            </summary>
      <param name="port">The port to use in the context.</param>
      <param name="parameter">The parameter to use for the port in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the port/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortLocationModel.GetLocation(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Determines the location of the port for the given parameter.
            </summary>
      <param name="port">The port to determine the location for.</param>
      <param name="parameter">The parameter to use. The parameter can be expected to be created by this instance
            having the <see cref="P:yWorks.yFiles.UI.Model.IPortLocationModelParameter.Model"></see> property set to this instance..</param>
      <returns>The calculated location of the port.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter">
      <summary>
            The interface that all parameters for <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModel"></see>s need
            to implement.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortLocationModelParameter.Model">
      <summary>
            Gets the model that has created this parameter.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortLocationModelParameter.Supports(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Predicate function that can be used to decide whether it is legal to use this parameter and model
            combination with <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> instances at the given <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see>.
            </summary>
      <param name="portOwner">The port owner that owns a port which will be associated with this location parameter.</param>
      <returns>Whether this parameter supports port instances for the given owner.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortLocationModelParameterChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>'s <see cref="P:yWorks.yFiles.UI.Model.IPort.LocationModelParameter">parameter</see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IPortLocationModelParameterChangeReporter.LocationModelParameterChanged">
      <summary>
            The event that notifies listeners of port location model parameter changes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortOwner">
      <summary>
            The common interface for items in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see>
            that may own <see cref="T:yWorks.yFiles.UI.Model.IPort">ports</see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.IPortOwner.Ports">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.IPort">ports</see> that
            are owned by this instance.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPortSelectionTester">
      <summary>
            Interface that can be used to find ports at specific locations in the canvas.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortSelectionTester.GetPort(yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the port at the given world coordinate position or <c>null</c> if there
            is no such port.
            </summary>
      <param name="location">The coordinates of the position in the world coordinate system.</param>
      <param name="ctx">The canvas context to use for querying the position.</param>
      <returns>The port at the position or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.IPortSelectionTester.GetPorts(yWorks.Canvas.Geometry.Structs.RectD,yWorks.Canvas.ICanvasContext)">
      <summary>
            Returns the ports for the given marquee rectangle.
            </summary>
      <param name="box">The marquee selection box in the world coordinate system.</param>
      <param name="ctx">The canvas context to use for querying the position.</param>
      <returns>An enumerable over the ports inside the marquee selection box.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.IPreferredSizeChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>'s <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize">preferred size</see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.IPreferredSizeChangeReporter.PreferredSizeChanged">
      <summary>
            The event that notifies listeners of bend location changes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ITagChangeReporter">
      <summary>
            An interface that can be used to register an event listener
            that will be notified of changes of an <see cref="T:yWorks.Support.ITagOwner"></see>'s <see cref="P:yWorks.Support.ITagOwner.Tag"></see>.
            </summary>
    </member>
    <member name="E:yWorks.yFiles.UI.Model.ITagChangeReporter.TagChanged">
      <summary>
            The event that will be triggered once a tag has changed.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ItemDecorator`1">
      <summary>
            A utility class that helps in <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">decorating</see> the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>
            method of <see cref="T:yWorks.Canvas.Model.IModelItem"></see> instances that are contained
            in an <see cref="T:yWorks.yFiles.UI.Model.IGraph"></see> which are managed by an <see cref="T:yWorks.Support.ILookupDecorator"></see>.
            </summary>
      <typeparam name="TModelItem">The type of the model item that can be decorated by instances of this type.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ItemDecorator`1.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.ClipboardHelperDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Model.IClipboardHelper"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.ItemDecorator`1.decorator">
      <summary>
            The <see cref="T:yWorks.Support.ILookupDecorator"></see> instance to pass to the various
            <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> helper instances.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.FocusIndicatorDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IFocusIndicatorInstaller"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ItemDecorator`1.GetDecoratorFor``1">
      <summary>
            Creates a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> for the <typeparamref name="TModelItem"></typeparamref>
            that can be used to decorate <typeparamref name="TInterface"></typeparamref> types of the model items.
            </summary>
      <typeparam name="TInterface">The type of the interface that should be decorated of the instances' <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.</typeparam>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> for the specified interface.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ItemDecorator`1.GetDecoratorFor``1(System.Boolean,System.Boolean)">
      <summary>
            Creates a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> for the <typeparamref name="TModelItem"></typeparamref>
            that can be used to decorate <typeparamref name="TInterface"></typeparamref> types of the model items.
            </summary>
      <param name="decorateNulls">if set to <c>true</c><see langword="null"></see> values will be decorated, otherwise not.</param>
      <param name="nullIsFallback">if set to <c>true</c><see langword="null"></see> values will be treated as fallback values, otherwise they will
            be used as the final result.</param>
      <typeparam name="TInterface">The type of the interface that should be decorated of the instances' <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.</typeparam>
      <returns>
            A new <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> for the specified interface.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.HandleProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.HighlightDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IHighlightInstaller"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.MarqueeTestableDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Drawing.IMarqueeTestable"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.MementoSupportDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Support.IMementoSupport"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.PositionHandlerDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IPositionHandler"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ItemDecorator`1.SelectionDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Model.ISelectionInstaller"></see>
            type for the type of items this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.LabelCandidateDescriptor">
      <summary>
            A simple mutable default implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelCandidateDescriptor" /> class</summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.EdgeOverlapPenalty">
      <summary>
            Gets the edge overlap penalty that is used by labeling algorithms to weigh in the
            penalty if this label candidate overlaps with an edge path.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.ExternalCandidate">
      <summary>
            Gets a value indicating whether this candidate is deemed an external candidate.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.ExternalDescriptor">
      <summary>
            A sharable immutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>
            interface that has penalties of <c>1.0d</c> and a profit of <c>1.0d</c> and yields <see langword="true"></see>
            for the <see cref="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.ExternalCandidate"></see> property.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.InternalDescriptor">
      <summary>
            A sharable immutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor"></see>
            interface that has penalties of <c>1.0d</c> and a profit of <c>1.0d</c> and yields <see langword="false"></see>
            for the <see cref="P:yWorks.yFiles.UI.Model.ILabelCandidateDescriptor.ExternalCandidate"></see> property.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.NodeOverlapPenalty">
      <summary>
            Gets the edge overlap penalty that is used by labeling algorithms to weigh in the
            penalty if this label candidate overlaps with a node's bounds.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelCandidateDescriptor.Profit">
      <summary>
            Gets the profit to weigh in if this candidate is chosen.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.LabelDecorator">
      <summary>
            A subclass of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see>
            class that is specifically tailored for <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDecorator.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDecorator"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDecorator.LabelModelParameterFinderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterFinder"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDecorator.LabelModelParameterProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameterProvider"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.LabelDefaults">
      <summary>
            A canonic implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabelDefaults"></see> interface
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class using a trivial parameter.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.#ctor(yWorks.yFiles.UI.Drawing.ILabelStyle,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class using the provided properties.
            </summary>
      <param name="style">The label style.</param>
      <param name="labelModelParameter">The label model parameter.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.#ctor(yWorks.yFiles.UI.Model.ILabelDefaults)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class using the properties of the provided instance.
            </summary>
      <param name="labelDefaults">The label defaults to obtain the settings from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelDefaults"></see> class using the provided parameter.
            </summary>
      <param name="parameter">The parameter.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDefaults.AutoAdjustPreferredSize">
      <summary>
            Gets or sets a property that determines whether to automatically adjust
            the preferred size of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.GetLabelModelParameterInstance(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Factory method that returns a label model parameter instance for use with newly created labels.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The parameter to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.LabelModelParameter"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareLabelModelParameterInstance"></see>
            is enabled.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Factory method that returns a style instance for use with newly created labels.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDefaults.LabelModelParameter">
      <summary>
            Gets or sets the label model parameter to use for labels.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDefaults.ShareLabelModelParameterInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.LabelModelParameter"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetLabelModelParameterInstance(yWorks.yFiles.UI.Model.ILabeledItem)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.ILabelDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.ILabelDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.ILabeledItem)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelDefaults.Style">
      <summary>
            Gets or sets the style to use for labels.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.LabelEventArgs">
      <summary>
            A specialized subclass of the <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see>
            class that is bound to the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> type and carries
            additional <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem">owner</see> information.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LabelEventArgs.#ctor(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LabelEventArgs"></see> class.
            </summary>
      <param name="label">The label to assign to the <see cref="P:yWorks.Canvas.Model.ItemEventArgs`1.Item"></see> property.</param>
      <param name="owner">The previous owner of the label.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LabelEventArgs.Owner">
      <summary>
            Gets the owner of the label that owned the label before the event happened.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.LabelTextChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.ILabelTextChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="label">The label whose <see cref="P:yWorks.yFiles.UI.Model.ILabel.Text"></see> has changed.</param>
      <param name="oldText">The old text.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ListLabelCollection">
      <summary>
            A simple implementation of the <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see>
            interface for <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>s that is backed by a list.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListLabelCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ListLabelCollection"></see> class
            using a default backing store.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListLabelCollection.#ctor(System.Collections.Generic.IList{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ListLabelCollection"></see> class
            using the provided instance as the backing store.
            </summary>
      <param name="labels">The labels collection.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListLabelCollection.Add(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Add a new label to this collection.
            </summary>
      <param name="label">The label to add.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ListLabelCollection.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListLabelCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ListLabelCollection.Item(System.Int32)">
      <summary>
            Returns the i-th element in the collection.
            </summary>
      <param name="i">the zero-based index of the item in this collection</param>
      <returns>the item for the given index</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.ListLabelCollection.labels">
      <summary>
            The backing list.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListLabelCollection.Remove(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Remove a label from this collection
            </summary>
      <param name="label">The label to remove</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.ListPortCollection">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.Canvas.Model.IListEnumerable`1"></see>
            interface for <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.#ctor(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ListPortCollection"></see> class
            using the provided node as the owner.
            </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.#ctor(yWorks.yFiles.UI.Model.INode,System.Collections.Generic.IList{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.ListPortCollection"></see> class
            using the specified node and ports list.
            </summary>
      <param name="node">The node.</param>
      <param name="ports">The ports.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.Add(System.Int32,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Adds a port at the specified position.
            </summary>
      <param name="pos">The position.</param>
      <param name="port">The port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.Add(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Adds the specified port.
            </summary>
      <param name="port">The port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.AddRelative(System.Int32,yWorks.Canvas.Geometry.Structs.PointD)"></member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.AddRelative(yWorks.Canvas.Geometry.Structs.PointD)"></member>
    <member name="P:yWorks.yFiles.UI.Model.ListPortCollection.Count">
      <summary>
            Returns the number of elements in this collection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.CreateCenterAnchoredPort(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Utility method that creates a node center anchored port.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.ListPortCollection.Item(System.Int32)">
      <summary>
            Returns the i-th element in the collection.
            </summary>
      <param name="i">the zero-based index of the item in this collection</param>
      <returns>the item for the given index</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.ListPortCollection.node">
      <summary>
            The node this collection is using.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.Remove(System.Int32)"></member>
    <member name="M:yWorks.yFiles.UI.Model.ListPortCollection.Remove(yWorks.yFiles.UI.Model.IPort)"></member>
    <member name="T:yWorks.yFiles.UI.Model.LookupDecorator`2">
      <summary>
            A convenience class that facilitates the process of using <see cref="T:yWorks.Support.ILookupDecorator"></see>.
            </summary>
      <typeparam name="TDecoratedType">The type of the instances whose <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> behavior should be modified.</typeparam>
      <typeparam name="TInterface">The interface or type that clients will use during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> call.
            Note that this is normally an interface and not the implementation of the interface since client code will use
            the interface for the query.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.#ctor(yWorks.Support.ILookupDecorator,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> class.
            </summary>
      <param name="decorator">The decorator instance that will be used to <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>
            add lookup .</param>
      <param name="decorateNulls">The initial value of the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.DecorateNulls"></see> property.</param>
      <param name="nullIsFallback">The initial value of the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.NullIsFallback"></see> property.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.AddChainLink(yWorks.Support.IContextLookupChainLink)">
      <summary>
            Simple helper method that tries to add the provided chain link to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see>.
            </summary>
      <param name="link">The link to add.</param>
      <returns>
            The <paramref name="link"></paramref> that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LookupDecorator`2.DecorateNulls">
      <summary>
            Gets or sets a value indicating whether calls that make it possible to wrap existing implementations
            (<see cref="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementationWrapper(System.Predicate{`0},yWorks.Support.Extensions.WrapperFactory{`0,`1})"></see> and
            <see cref="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementationWrapper(yWorks.Support.Extensions.WrapperFactory{`0,`1})"></see>) that yield <see langword="null"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator">
      <summary>
            Gets or sets the decorator instance that is used by this instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.HideImplementation">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will yield <see langword="null"></see>
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all <typeparamref name="TDecoratedType"></typeparamref> items.
            </summary>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.HideImplementation(System.Predicate{`0})">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will yield <see langword="null"></see>
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all <typeparamref name="TDecoratedType"></typeparamref> items that match the <param name="predicate"></param>.
            </summary>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.LookupDecorator`2.NullIsFallback">
      <summary>
            Gets or sets a value indicating how a <see langword="null"></see> result value of the <see cref="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementation(System.Predicate{`0},`1)"></see>
            and <see cref="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetFactory(yWorks.Support.FactoryDelegate{`1,`0})"></see> methods should be interpreted.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetFactory(System.Predicate{`0},yWorks.Support.FactoryDelegate{`1,`0})">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will use a <paramref name="factory"></paramref>
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all items that match the <paramref name="predicate"></paramref>.
            </summary>
      <param name="predicate">The predicate that determines for which items the factory shall be called.</param>
      <param name="factory">The factory that is queried to create the result.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetFactory(yWorks.Support.FactoryDelegate{`1,`0})">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will use a <paramref name="factory"></paramref>
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all items that of type <typeparamref name="TDecoratedType"></typeparamref>.
            </summary>
      <param name="factory">The factory that is queried to create the result.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementation(System.Predicate{`0},`1)">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will yield <paramref name="implementation"></paramref>
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all items that match the <paramref name="predicate"></paramref>.
            </summary>
      <param name="predicate">The predicate that determines for which items the implementation shall be returned.</param>
      <param name="implementation">The implementation to return if the <paramref name="predicate"></paramref> matches.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementation(`0,`1)">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will yield <paramref name="implementation"></paramref>
            if <typeparamref name="TInterface"></typeparamref> is queried on the <paramref name="forItem"></paramref>'s <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="forItem">The item for which the implementation shall be returned.</param>
      <param name="implementation">The implementation to return if <paramref name="forItem"></paramref>
            is queried for <typeparamref name="TInterface"></typeparamref>.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementationWrapper(System.Predicate{`0},yWorks.Support.Extensions.WrapperFactory{`0,`1})">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will use a <paramref name="factory"></paramref>
            callback that wraps the underlying implementation
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all items that match the <paramref name="predicate"></paramref>.
            </summary>
      <param name="predicate">The predicate that determines for which items the wrapping shall be performed.</param>
      <param name="factory">The factory that will be passed the underlying implementation and that is queried to create the result.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.LookupDecorator`2.SetImplementationWrapper(yWorks.Support.Extensions.WrapperFactory{`0,`1})">
      <summary>
            Adds a <see cref="T:yWorks.Support.IContextLookupChainLink">link to the chain</see>, that will use a <paramref name="factory"></paramref>
            callback that wraps the underlying implementation
            if <typeparamref name="TInterface"></typeparamref> is queried during the <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see> 
            on all <typeparamref name="TDecoratedType"></typeparamref> items.
            </summary>
      <param name="factory">The factory that will be passed the underlying implementation and that is queried to create the result.</param>
      <returns>
            The <see cref="T:yWorks.Support.IContextLookupChainLink"></see> implementation that has been <see cref="M:yWorks.Support.ILookupDecorator.AddLookup(System.Type,yWorks.Support.IContextLookupChainLink)">added</see>
            to the <see cref="P:yWorks.yFiles.UI.Model.LookupDecorator`2.Decorator"></see> as a result of this call, or <see langword="null"></see> if the decoration was unsuccessful.
            Using <see cref="M:yWorks.Support.ILookupDecorator.RemoveLookup(System.Type,yWorks.Support.IContextLookupChainLink)"></see>, the effect of this call can be undone.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.MapperMetadata">
      <summary>
            A simple implementation of the <see cref="T:yWorks.yFiles.UI.Model.IMapperMetadata"></see> interface that can be 
            used as a base class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperMetadata.#ctor(System.Type,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.MapperMetadata"></see> class.
            </summary>
      <param name="keyType">Type of the keys.</param>
      <param name="valueType">Type of the values.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperMetadata.#ctor(yWorks.yFiles.UI.Model.IMapperMetadata)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.MapperMetadata"></see> from the given instance class.
            </summary>
      <param name="metadata">The metadata to copy key and value type from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperMetadata.Create``2(yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Creates an instance for the specified mapper.
            </summary>
      <param name="mapper">The mapper instance to create the metadata for.</param>
      <typeparam name="TKey">The type of the keys.</typeparam>
      <typeparam name="TValue">The type of the values.</typeparam>
      <returns>An instance that uses the <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.KeyType"></see> and
            <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.ValueType"></see> of the mapper.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.MapperMetadata.KeyType">
      <summary>
            Gets the type of the keys in the <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.MapperMetadata.ValueType">
      <summary>
            Gets the type of the values in the <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.MapperRegistry">
      <summary>
            A simple <see cref="T:System.Collections.Generic.Dictionary`2"></see>-based implementation of the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>
            interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.MapperRegistry" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">
      <summary>
            Register a mapper for the given tag.
            </summary>
      <param name="tag">The tag to use.</param>
      <param name="mapper">The mapper to register.</param>
      <typeparam name="K">The key type for the mapper.</typeparam>
      <typeparam name="V">The value type for the mapper.</typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.GetMapper``2(System.Object)">
      <typeparam name="K">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="K"/&gt; documentation for "M:yWorks.yFiles.UI.Model.MapperRegistry.GetMapper``2(System.Object)"]</p>
      </typeparam>
      <typeparam name="V">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="V"/&gt; documentation for "M:yWorks.yFiles.UI.Model.MapperRegistry.GetMapper``2(System.Object)"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.GetMapperMetadata(System.Object)">
      <summary>
            Gets the mapper <see cref="T:yWorks.yFiles.UI.Model.IMapperMetadata">meta data</see> for the mapper
            that is registered using the <paramref name="tag"></paramref>.
            </summary>
      <param name="tag">The tag.</param>
      <returns>The meta data or <see langword="null"></see> if there is no such mapper registered for the given tag.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.MapperRegistry.RegisteredTags">
      <summary>
            Gets an enumerable over all tags that have been used to 
            register mapper implementations with this interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.RemoveMapper(System.Object)">
      <summary>
            Removes a previously registered mapper for the given tag.
            </summary>
      <param name="tag">The tag that has been used for registering the mapper.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistry.SetMapperMetadata(System.Object,yWorks.yFiles.UI.Model.IMapperMetadata)">
      <summary>
            Sets the mapper meta data for the mapper that has been <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">registered</see>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="tag">The tag.</param>
      <param name="metadata">The meta data to store with the mapper.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.KeyType"></see>
            or <see cref="P:yWorks.yFiles.UI.Model.IMapperMetadata.ValueType"></see> mismatch the mapper instance in the registry.</exception>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.MapperRegistryExtensions">
      <summary>
            Provides static convenience extension methods for the <see cref="T:yWorks.yFiles.UI.Model.IMapperRegistry"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistryExtensions.AddConstantMapper``2(yWorks.yFiles.UI.Model.IMapperRegistry,System.Object,``1)">
      <summary>
            Creates a simple read-only <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>
            implementation and <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">adds</see>
            it to the <paramref name="registry"></paramref>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="registry">The registry.</param>
      <param name="tag">The tag.</param>
      <param name="constant">The value to yield during <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> reads.</param>
      <typeparam name="K">The type of the keys of the mapper.</typeparam>
      <typeparam name="V">The type of the values of the mapper.</typeparam>
      <returns>The newly created mapper instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistryExtensions.AddDictionaryMapper``2(yWorks.yFiles.UI.Model.IMapperRegistry,System.Object)">
      <summary>
            Creates and <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">adds</see>
            a new <see cref="T:yWorks.Canvas.Model.DictionaryMapper`2"></see> to the <paramref name="registry"></paramref>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="registry">The registry.</param>
      <param name="tag">The tag.</param>
      <typeparam name="K">The type of the keys of the mapper.</typeparam>
      <typeparam name="V">The type of the values of the mapper.</typeparam>
      <returns>The newly created mapper instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistryExtensions.AddMapper``2(yWorks.yFiles.UI.Model.IMapperRegistry,System.Object)">
      <summary>
            Creates and <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">adds</see>
            a new <see cref="T:yWorks.Canvas.Model.WeakDictionaryMapper`2"></see> to the <paramref name="registry"></paramref>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="registry">The registry.</param>
      <param name="tag">The tag.</param>
      <typeparam name="K">The type of the keys of the mapper.</typeparam>
      <typeparam name="V">The type of the values of the mapper.</typeparam>
      <returns>The newly created mapper instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistryExtensions.AddMapper``2(yWorks.yFiles.UI.Model.IMapperRegistry,System.Object,yWorks.Canvas.Model.MapperDelegate{``0,``1})">
      <summary>
            Creates a delegate based read-only <see cref="T:yWorks.Canvas.Model.IMapper`2"></see>
            implementation and <see cref="M:yWorks.yFiles.UI.Model.IMapperRegistry.AddMapper``2(System.Object,yWorks.Canvas.Model.IMapper{``0,``1})">adds</see>
            it to the <paramref name="registry"></paramref>
            using the provided <paramref name="tag"></paramref>.
            </summary>
      <param name="registry">The registry.</param>
      <param name="tag">The tag.</param>
      <param name="getter">The getter delegate to which <see cref="T:yWorks.Canvas.Model.IMapper`2"></see> reads will be delegated.</param>
      <typeparam name="K">The type of the keys of the mapper.</typeparam>
      <typeparam name="V">The type of the values of the mapper.</typeparam>
      <returns>The newly created mapper instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MapperRegistryExtensions.GetObjectObjectMapper(yWorks.yFiles.UI.Model.IMapperRegistry,System.Object)">
      <summary>
            Return a mapper instance for which there has previously been registered an instance for the given tag,
            however using a different type parameter set.
            </summary>
      <param name="registry">The registry to retrieve and wrap the mapper from.</param>
      <param name="tag">The tag to use to look up the mapper.</param>
      <returns>
            An instance that delegates to the original mapper or <see langword="null"></see> if no mapper has been 
            found for the provided tag.
            </returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter">
      <summary>
            A simple implementation of the <see cref="T:yWorks.yFiles.UI.Model.IDummyEdgeConverter"></see> interface
            that will make the <see cref="T:yWorks.yFiles.UI.Model.IFoldedGraph"></see> view contain at most one
            dummy edge between each pair of nodes by letting a single dummy edge
            represent all master edges.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter.AddDummyEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Tries to add the dummy edge to an <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.GetExistingDummyEdges(System.Boolean)">existing</see>
            dummy edge, considering the <see cref="P:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter.IgnoreEdgeDirection"></see> property.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter.AddFirstSeparateEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
      <summary>
            Adds the first separate edge to the source and target node pair using the <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)"></see> method.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.MergingDummyEdgeConverter.IgnoreEdgeDirection">
      <summary>
            Gets or sets a value indicating whether edge direction should be ignored for the determination of
            the <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.GetExistingDummyEdges(System.Boolean)">existing dummy edges</see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.NodeBoundsChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.INodeBoundsChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="node">The node whose bounds have changed.</param>
      <param name="oldLayout">The old bounds.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.NodeDecorator">
      <summary>
            A subclass of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see>
            class that is specifically tailored for <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.NodeDecorator.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.NodeDecorator"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.EditLabelHelperDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IEditLabelHelper"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.GroupBoundsCalculatorDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Drawing.IGroupBoundsCalculator"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.InsetsProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"></see> (tied to the <see cref="T:yWorks.yFiles.UI.Model.INode"></see> type parameter)
            for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.PortCandidateProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Input.IPortCandidateProvider"></see> 
            for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.ReshapeHandleProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IReshapeHandleProvider"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.ShapeGeometryDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Drawing.IShapeGeometry"></see>
            type for the type <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDecorator.SizeConstraintProviderDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.ISizeConstraintProvider`1"></see>
            type for the type <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.NodeDefaults">
      <summary>
            A canonic implementation of the <see cref="T:yWorks.yFiles.UI.Model.INodeDefaults"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.NodeDefaults.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.NodeDefaults"></see> class using default properties.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.NodeDefaults.#ctor(yWorks.yFiles.UI.Drawing.INodeStyle,yWorks.yFiles.UI.Model.ILabelDefaults,yWorks.yFiles.UI.Model.IPortDefaults)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.NodeDefaults"></see> class using the given properties.
            </summary>
      <param name="style">The node style.</param>
      <param name="labelDefaults">The label defaults.</param>
      <param name="portDefaults">The port defaults.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.NodeDefaults.GetStyleInstance">
      <summary>
            Factory method that returns a style instance for use with newly created nodes.
            </summary>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDefaults.Labels">
      <summary>
            Gets or sets the defaults for labels at nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDefaults.Ports">
      <summary>
            Gets or sets the defaults for ports at nodes.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.INodeDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.INodeDefaults.GetStyleInstance"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDefaults.Size">
      <summary>
            Gets or sets the default node size.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.NodeDefaults.Style">
      <summary>
            Gets or sets the style to use for nodes.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortDecorator">
      <summary>
            A subclass of the <see cref="T:yWorks.yFiles.UI.Model.ItemDecorator`1"></see>
            class that is specifically tailored for <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDecorator.#ctor(yWorks.Support.ILookupDecorator)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDecorator"></see> class.
            </summary>
      <param name="decorator">The decorator to use, which can be <see langword="null"></see>.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDecorator.EdgeIntersectionDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.yFiles.UI.Drawing.IEdgeIntersectionCalculator"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDecorator.HandleDecorator">
      <summary>
            Gets a <see cref="T:yWorks.yFiles.UI.Model.LookupDecorator`2"></see> that decorates the
            <see cref="T:yWorks.Canvas.Input.IHandle"></see>
            type for the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s of the graph this instance has been created for.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortDefaults">
      <summary>
            A canonic implementation of the <see cref="T:yWorks.yFiles.UI.Model.IPortDefaults"></see> interface.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class
            using a trivial location model parameter.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.#ctor(yWorks.yFiles.UI.Drawing.IPortStyle,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class using the given properties.
            </summary>
      <param name="style">The port style.</param>
      <param name="locationModelParameter">The location model parameter.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.#ctor(yWorks.yFiles.UI.Model.IPortDefaults)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class using the values of the provided instance.
            </summary>
      <param name="portDefaults">The port defaults to retrieve the initial values from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.#ctor(yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortDefaults"></see> class using a given location model parameter.
            </summary>
      <param name="locationModelParameter">The location model parameter.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDefaults.AutoCleanup">
      <summary>
            Determines whether unused ports should automatically be removed from their owners
            as soon as no further edge is connected to them.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Factory method that returns a location model parameter instance for use with newly created ports.
            </summary>
      <param name="owner">The owner of the label that will be created.</param>
      <returns>The parameter to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.LocationModelParameter"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareLocationModelParameterInstance"></see>
            is enabled.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.GetStyleInstance"></member>
    <member name="M:yWorks.yFiles.UI.Model.PortDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Factory method that returns a style instance for use with newly created ports.
            </summary>
      <param name="owner">The owner of the port that will be created.</param>
      <returns>The style to use, which for most implementations is either a <see cref="M:System.ICloneable.Clone">clone</see>
            of or the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.Style"></see> property, if <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.ShareStyleInstance"></see>
            is enabled.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDefaults.LocationModelParameter">
      <summary>
            Gets or sets the location model parameter to use for ports.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDefaults.ShareLocationModelParameterInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.LocationModelParameter"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetLocationModelParameterInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDefaults.ShareStyleInstance">
      <summary>
            Gets or sets a value indicating whether the <see cref="P:yWorks.yFiles.UI.Model.IPortDefaults.Style"></see>
            instance should be shared referentially or <see cref="M:System.ICloneable.Clone">cloned</see>
            upon a call to <see cref="M:yWorks.yFiles.UI.Model.IPortDefaults.GetStyleInstance(yWorks.yFiles.UI.Model.IPortOwner)"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortDefaults.Style">
      <summary>
            Gets or sets the style to use for ports.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortEventArgs">
      <summary>
            A specialized subclass of the <see cref="T:yWorks.Canvas.Model.ItemEventArgs`1"></see>
            class that is bound to the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> type and carries
            additional <see cref="T:yWorks.yFiles.UI.Model.IPortOwner"></see> information.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortEventArgs.#ctor(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortEventArgs"></see> class.
            </summary>
      <param name="port">The port to assign to the <see cref="P:yWorks.Canvas.Model.ItemEventArgs`1.Item"></see> property.</param>
      <param name="owner">The owner of the port the port was attached to.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortEventArgs.Owner">
      <summary>
            Gets the owner the port the was connected to before the event happened.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortLocationModelParameterChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameterChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="port">The port whose location changed.</param>
      <param name="oldParameter">The old parameter of the port.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortRelocationHandle">
      <summary>
            A sophisticated implementation of the <see cref="T:yWorks.Canvas.Input.IHandle"></see> interface
            the can be used to relocate a port.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,System.Boolean)">
      <summary>
            Creates a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortRelocationHandle"></see> class.
            </summary>
      <param name="graph">The graph or null. If the graph is null, the handle will try to 
            receive the graph from the <see cref="T:yWorks.Canvas.Input.IInputModeContext"></see> it is used in during <see cref="M:yWorks.yFiles.UI.Model.PortRelocationHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="edge">The edge.</param>
      <param name="sourcePort">if set to <see langword="true"></see> the source port will be subject to relocation,
            otherwise it will be the target port.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.AddExistingPort">
      <summary>
            Gets or sets a property that determines whether the existing port should be 
            available as a possible port candidate, too.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.CancelDrag(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the dragging has been canceled by the user.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="originalLocation">The value of the coordinate of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.ConfigureDummy(yWorks.yFiles.UI.Model.SimpleEdge,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Configures the dummy edge to look like the given edge.
            </summary>
      <param name="dummy">The dummy edge that should mimic the given edge.</param>
      <param name="edge">The edge to mimic.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.CreateDummyEdge">
      <summary>
            Factory method that creates the dummy edge that will
            be shown during the drag operation.
            </summary>
      <returns>The dummy edge instance to use.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.CreateDummyEdgeVisualCreator(yWorks.yFiles.UI.Model.SimpleEdge)">
      <summary>
            Factory method that creates a dummy paintable for the
            dummy edge during the drag operation.
            </summary>
      <param name="dummy">The dummy to create a paintable for.</param>
      <returns>A paintable that shows the dummy.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.CreateExistingPortCandidate(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Factory method that creates the candidate for the existing port.
            </summary>
      <param name="currentPort">The port to create a candidate for.</param>
      <returns>The candidate or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.CreatePortCandidateDescriptor">
      <summary>
            Factory method that creates the <see cref="T:yWorks.Canvas.ICanvasObjectDescriptor"></see>
            that will be used to paint the <see cref="T:yWorks.yFiles.UI.Input.IPortCandidate"></see>s.
            </summary>
      <returns>The descriptor to use for the rendering in the <see cref="T:yWorks.Canvas.CanvasControl"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.Cursor">
      <summary>
            Provides the cursor to display when the mouse hovers over or drags this
            handle.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the repositioning has just been finished.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            This is the same value as delivered in the last invocation of <see cref="M:yWorks.Canvas.Input.IDragHandler.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see></param>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.GetClosestCandidate(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,System.Collections.Generic.IEnumerable{yWorks.yFiles.UI.Input.IPortCandidate})">
      <summary>
            Finds the closest candidate from the given set of candidates.
            </summary>
      <param name="context">The context in for which the closest handle candidate is sought.</param>
      <param name="location">The location for which to find a candidate.</param>
      <param name="candidates">The list of possible candidates.</param>
      <returns>The closes candidate or <c>null</c>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.GetPort(yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Callback used during <see cref="M:yWorks.yFiles.UI.Model.PortRelocationHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see>
            to actually get the new port from the chosen candidate.
            </summary>
      <param name="candidate">The candidate to get a port instance from.</param>
      <returns>A non-null port instance.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.GetPortCandidates(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IEdge,System.Boolean)">
      <summary>
            Gets the possible candidates for the given edge.
            </summary>
      <param name="context">The context that is used to retrieve the candidates for.</param>
      <param name="edge">The edge.</param>
      <param name="sourcePort">Whether to look for source port candidates.</param>
      <returns>A non-null enumerable over the candidates.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.HandleMove(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Called by clients to indicate that the element has been dragged and its position
            should be updated.
            </summary>
      <param name="originalLocation">The value of the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> property at the time of <see cref="M:yWorks.Canvas.Input.IDragHandler.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)"></see>.</param>
      <param name="newLocation">The coordinates in the world coordinate system that the client wants the handle to be at.
            Depending on the implementation the <see cref="P:yWorks.Canvas.Input.IDragHandler.Location"></see> may or may not be modified to reflect the new value.
            </param>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
      <returns>Whether the move had any visual effect. This is a hint to the engine to optimize invalidation.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.HideOriginalEdge(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Hides the original edge that during the
            drag operation.
            </summary>
      <param name="edge">The edge to hide.</param>
      <param name="context">The context to get the canvas the edge should be hidden from.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.InitializeDrag(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Called by clients to indicate that the element is going to be dragged.
            </summary>
      <param name="inputModeContext">The context to retrieve information about the drag from.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.InputModeContext">
      <summary>
            Gets or sets the context to operate on.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.Location">
      <summary>
            Returns a view of the location of the item.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.MaximumSnapDistance">
      <summary>
            Gets or sets the maximum distance the pointer may be away of a candidate in order to
            be snapped to the candidate.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.SetClosestCandidate(yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Updates the closes candidate for visual feedback.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.SetPort(yWorks.Canvas.Input.IInputModeContext,yWorks.yFiles.UI.Model.IEdge,System.Boolean,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Callback that is triggered by <see cref="M:yWorks.yFiles.UI.Model.PortRelocationHandle.DragFinished(yWorks.Canvas.Input.IInputModeContext,yWorks.Canvas.Geometry.Structs.PointD,yWorks.Canvas.Geometry.Structs.PointD)"></see> to actually change the port.
            </summary>
      <param name="context">The context.</param>
      <param name="edge">The edge to change ports.</param>
      <param name="setSourcePort">Whether to set the source port. <see langword="false"></see> for target ports.</param>
      <param name="portCandidate">The candidate that has been chosen.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Finally sets the ports for the edge to the new values.
            </summary>
      <param name="edge">The edge to set the ports for.</param>
      <param name="sourcePort">The (possibly) new source port.</param>
      <param name="targetPort">The (possibly) new target port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.SetPosition(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Updates the position of the handle.
            </summary>
      <param name="location">The new location of the handle.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.SetToPortCandidate(yWorks.yFiles.UI.Model.SimpleEdge,System.Boolean,yWorks.yFiles.UI.Input.IPortCandidate)">
      <summary>
            Updates the dummy edge's visual appearance to reflect the new port candidate.
            </summary>
      <param name="dummy">The dummy edge.</param>
      <param name="source">Whether to update the source or target port.</param>
      <param name="candidate">The new candidate to indicate.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.ShowDummyEdge">
      <summary>
            Gets or sets a property that determines whether to show a dummy edge
            during the drag operation.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.ShowHitNodeCandidatesOnly">
      <summary>
            Gets or sets a value indicating whether to show the candidates of hit nodes only.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.PortRelocationHandle.Type">
      <summary>
            Returns the type of the handle that can be used by the rendering engine
            to render types differently.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandle.UnhideOriginalEdge(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.CanvasControl)">
      <summary>
            Unhides the original edge that was hidden during the
            drag operation.
            </summary>
      <param name="edge">The edge to unhide.</param>
      <param name="canvas">The canvas the edge was hidden from.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortRelocationHandleProvider">
      <summary>
            Simple implementation of a <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see>
            that can be used for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            It will return the <see cref="T:yWorks.Canvas.Input.IHandle"></see>s for
            the ports using <see cref="T:yWorks.yFiles.UI.Model.PortRelocationHandle"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandleProvider.#ctor(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.PortRelocationHandleProvider"></see> class
            using the given graph and edge.
            </summary>
      <param name="graph">The graph or null. If the graph is null, the handles will try to 
            receive the graph from the <see cref="T:yWorks.yFiles.UI.GraphControl"></see> it is used in.</param>
      <param name="edge">The edge.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandleProvider.CreatePortRelocationHandle(yWorks.yFiles.UI.Model.IGraph,yWorks.yFiles.UI.Model.IEdge,System.Boolean)">
      <summary>
            Factory method that creates the a <see cref="T:yWorks.yFiles.UI.Model.PortRelocationHandle"></see>.
            </summary>
      <param name="graph">The graph that contains the edge.</param>
      <param name="edge">The edge.</param>
      <param name="sourcePort">if set to <see langword="true"></see> the handle for the source port is sought.</param>
      <returns>A handle or <see langword="null"></see>.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.PortRelocationHandleProvider.edge">
      <summary>
            The edge this provider is working on.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortRelocationHandleProvider.GetHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns a collection of zero or more <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementations
            that are associated with this instance.
            </summary>
      <returns>A collection of handles.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.PortRelocationHandleProvider.graph">
      <summary>
            The graph this provider is working on.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PortsHandleProvider">
      <summary>
            A simple implementation of an <see cref="T:yWorks.Canvas.Input.IHandleProvider"></see>
            that returns all handles in the lookup of the ports
            owned by the given owner.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortsHandleProvider.#ctor(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates an instance using the given owner as the provider for the ports.
            </summary>
      <param name="portOwner">
      </param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortsHandleProvider.GetHandle(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Retrieves the handle implementation from the port's lookup.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.PortsHandleProvider.GetHandles(yWorks.Canvas.Input.IInputModeContext)">
      <summary>
            Returns a collection of zero or more <see cref="T:yWorks.Canvas.Input.IHandle"></see> implementations
            that are associated with the ports of this context.
            </summary>
      <returns>A collection of handles.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Model.PortsHandleProvider.portOwner">
      <summary>
            The owner of the ports.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.PreferredSizeChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.IPreferredSizeChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="label">The label whose preferred size changed.</param>
      <param name="oldPreferredSize">The old preferred size of the label.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimpleBend">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.IBend"></see>
            interface that can be used stand-alone.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleBend.#ctor(yWorks.Support.ILookup,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleBend"></see> class.
            </summary>
      <param name="lookup">The lookup to use.</param>
      <param name="owner">The owner of the bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleBend.#ctor(yWorks.Support.ILookup,yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleBend"></see> class.
            </summary>
      <param name="lookup">The lookup to use.</param>
      <param name="owner">The owner of the bend.</param>
      <param name="location">The location of the bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleBend.#ctor(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleBend"></see> class using the given owner
            and a default location.
            </summary>
      <param name="owner">The owner of the bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleBend.#ctor(yWorks.yFiles.UI.Model.IEdge,yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleBend"></see> class using the given owner
            and  location.
            </summary>
      <param name="owner">The owner of the bend.</param>
      <param name="location">The location of the bend.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleBend.Location">
      <summary>
            Gets or sets the location of this bend.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleBend.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleBend.Owner">
      <summary>
            Returns the edge this bend instance belongs to.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleBend.X">
      <summary>
            Gets the current x coordinate of this bend.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleBend.Y">
      <summary>
            Gets the current y coordinate of this bend.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimpleEdge">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>
            interface that can be used stand-alone.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleEdge.#ctor(yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Creates an edge with a <see cref="T:yWorks.yFiles.UI.Model.DefaultEdgeLookup">default lookup</see>
            using the given source and target ports and bend and label collections.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleEdge.#ctor(yWorks.Support.ILookup,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.IBend})">
      <summary>
            Creates an edge with the given lookup,
            using the given source and target ports and bend and label collections.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleEdge.#ctor(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Creates an edge with a <see cref="T:yWorks.yFiles.UI.Model.DefaultEdgeLookup">default lookup</see>
            using the given source and target ports.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleEdge.Bends">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.IBend">bends</see> that
            describe the geometry of this edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleEdge.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleEdge.Ports">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.IPort">ports</see> that
            are owned by this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleEdge.SourcePort">
      <summary>
            Gets the source port instance this edge is connected to.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleEdge.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this edge in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleEdge.TargetPort">
      <summary>
            Gets the target port instance this edge is connected to.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimpleGraphStructure">
      <summary>
            This class can be used to build a specialized <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleGraphStructure"></see> class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.AddBend(yWorks.yFiles.UI.Model.IEdge,System.Int32,yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Adds a bend to an edge at the given index.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.AddEdge(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Adds a previously created edge to the collection of edges.
            </summary>
      <param name="edge">the edge to add</param>
      <param name="sourcePort">the source port to connect the edge to</param>
      <param name="targetPort">the target port to connect the edge to</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.AddLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Adds a previously created label to its owner.
            </summary>
      <param name="owner">The new owner.</param>
      <param name="label">The label to add.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.AddNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Adds a previously created node to the collection of nodes.
            </summary>
      <param name="node">the node to add</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.AddPort(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Add a previously created port to a given node.
            </summary>
      <param name="owner">The owner of the port.</param>
      <param name="port">The port that is not owned by another item.</param>
      <param name="locationParameter">The location of the port</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.Canvas.Model.IModelItem)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="bend">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="edge">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="label">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="node">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.Contains(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Determines whether this instance contains the specified item.
            </summary>
      <param name="port">The item.</param>
      <returns>
        <see langword="true">
        </see> if this graph contains the specified item; otherwise, <see langword="false"></see>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateBend(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates but does not add a bend for a given edge instance.
            </summary>
      <param name="forEdge">The edge to add the bend to.</param>
      <returns>The newly created bend</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateBendList">
      <summary>
            Creates a bend list.
            </summary>
      <returns>
        <see cref="T:yWorks.yFiles.UI.Model.BendList">
        </see>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateDefaultBend(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates a default bend for the edge.
            </summary>
      <param name="forEdge">The edge.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.SimpleBend"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateDefaultEdge">
      <summary>
            Factory method.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateDefaultLabel(yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Creates a default label using the given parameter.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>The <see cref="T:yWorks.yFiles.UI.Model.SimpleLabel"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateDefaultNode">
      <summary>
            Creates the default node.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateDefaultPort(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates the default port for the owner.
            </summary>
      <param name="owner">The owner.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.SimplePort"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateEdge">
      <summary>
            Callback factory method that creates an IEdge implementation.
            </summary>
      <returns>a non-live edge instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateLabel(yWorks.yFiles.UI.Model.ILabeledItem,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Creates a label for a given owner using the provided model parameter.
            </summary>
      <param name="owner">The owner.</param>
      <param name="modelParameter">The model parameter.</param>
      <returns>A newly created label.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateLabelCollection(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Creates the label collection for the owner.
            </summary>
      <param name="owner">The owner.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.ListLabelCollection"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateLabelCollection(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates the label collection for the owner.
            </summary>
      <param name="owner">The owner.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.ListLabelCollection"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateNode">
      <summary>
            Callback factory method that creates an INode implementation.
            </summary>
      <returns>a non-live node instance</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreateNodeLayout">
      <summary>
            Creates the node layout.
            </summary>
      <returns>A rectangle of (0,0,30,30)</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreatePort(yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Create but don't yet add a port for a given node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.CreatePortCollection(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Creates the port collection for the owner.
            </summary>
      <param name="owner">The owner.</param>
      <returns>A new <see cref="T:yWorks.yFiles.UI.Model.ListPortCollection"></see></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleGraphStructure.Edges">
      <summary>
            Gets a collection view over the edges in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.GetEdges(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Enumerates all edges that are incident to the given port.
            </summary>
      <param name="port">the port</param>
      <param name="adjacencyType">what kind of adjacent edges to yield</param>
      <returns>an enumerable that yields the edges</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.GetEdges(yWorks.yFiles.UI.Model.IPortOwner,yWorks.yFiles.UI.Model.AdjacencyTypes)">
      <summary>
            Enumerates all edges that are incident to ports owned by the given owner.
            </summary>
      <param name="portOwner">the item that owns the ports</param>
      <param name="adjacencyType">what kind of adjacent edges to yield</param>
      <returns>an enumerable that yields the edges</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleGraphStructure.Nodes">
      <summary>
            Gets a collection view over the nodes in the graph.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.RemoveBend(yWorks.yFiles.UI.Model.IBend)">
      <summary>
            Removes the bend from its edge.
            </summary>
      <param name="bend">The bend.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.RemoveEdge(yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Remove an edge from the current set of edges.
            </summary>
      <param name="edge">the edge to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.RemoveLabel(yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Removes the label from its owner.
            </summary>
      <param name="label">The label.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.RemoveNode(yWorks.yFiles.UI.Model.INode)">
      <summary>
            Remove a node from the current set of nodes.
            </summary>
      <param name="node">the node to remove</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.RemovePort(yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Removes the port from its owner.
            </summary>
      <param name="port">The port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetLabelModelParameter(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Sets the <see cref="P:yWorks.yFiles.UI.Model.ILabel.LabelModelParameter"></see> for a given label.
            </summary>
      <param name="label">The label to modify.</param>
      <param name="parameter">The parameter to set.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetLabelText(yWorks.yFiles.UI.Model.ILabel,System.String)">
      <summary>
            Sets the label text for a given label to the specified text.
            </summary>
      <param name="label">The label.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetLocationModelParameter(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Sets the location model parameter for the given port.
            </summary>
      <param name="port">The port to set the parameter.</param>
      <param name="locationModelParameter">The new location model parameter for the port.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetPorts(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)">
      <summary>
            Sets the ports of the given edge to the new values.
            </summary>
      <param name="edge">The edge to change the ports.</param>
      <param name="sourcePort">The new source port instance.</param>
      <param name="targetPort">The new target port instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetStyle(yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="edge">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetStyle(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="label">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetStyle(yWorks.yFiles.UI.Model.INode,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="node">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleGraphStructure.SetStyle(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Drawing.IPortStyle)">
      <summary>
            Associates the style with the given item.
            </summary>
      <param name="port">the item to associate the style with</param>
      <param name="style">the new style instance</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimpleLabel">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see>
            interface that can be used stand-alone.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleLabel.#ctor(yWorks.Support.ILookup,yWorks.yFiles.UI.Model.ILabelModelParameter,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleLabel"></see> class
            using the provided lookup, parameter, and text.
            </summary>
      <param name="lookup">The lookup.</param>
      <param name="modelParameter">The model parameter.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleLabel.#ctor(yWorks.yFiles.UI.Model.ILabelModelParameter,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleLabel"></see> class
            using the provided parameter and text.
            </summary>
      <param name="modelParameter">The model parameter.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleLabel.AdoptPreferredSizeFromStyle">
      <summary>
            Gets the <see cref="M:yWorks.yFiles.UI.Drawing.ILabelStyleRenderer.GetPreferredSize(yWorks.yFiles.UI.Model.ILabel,yWorks.yFiles.UI.Drawing.ILabelStyle)"></see> from
            the labels style and sets the <see cref="P:yWorks.yFiles.UI.Model.SimpleLabel.PreferredSize"></see> to that value.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.LabelModelParameter">
      <summary>
            Gets the label model's parameter that determines the positioning of this label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.Layout">
      <summary>
            Provides access to the layout of a label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleLabel.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.Owner">
      <summary>
            Gets the owner of this label.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.PreferredSize">
      <summary>
            Gets the preferred size of the label with respect to its current 
            contents and the implementation of the visualization.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this node in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleLabel.Text">
      <summary>
            Gets the text string associated with this label.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimpleNode">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>
            interface that can be used stand-alone.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleNode.#ctor">
      <summary>
            Creates a default node with default <see cref="T:yWorks.yFiles.UI.Model.DefaultNodeLookup">lookup</see> and
            null labels and port collection.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleNode.#ctor(yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel},yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Creates a node with a <see cref="T:yWorks.yFiles.UI.Model.DefaultNodeLookup">default lookup</see>
            using the given label and ports collection as well as the layout instance.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleNode.#ctor(yWorks.Support.ILookup,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.ILabel},yWorks.Canvas.Geometry.IRectangle,yWorks.Canvas.Model.IListEnumerable{yWorks.yFiles.UI.Model.IPort})">
      <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Model.SimpleNode"></see> class.
            </summary>
      <param name="lookup">The lookup.</param>
      <param name="labelCollection">The label collection.</param>
      <param name="layout">The layout.</param>
      <param name="ports">The ports.</param>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleNode.Layout">
      <summary>
            Returns a live view of the layout of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimpleNode.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleNode.Ports">
      <summary>
            Provides access to a collection of <see cref="T:yWorks.yFiles.UI.Model.IPort">ports</see> that
            are owned by this instance.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimpleNode.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this node in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.SimplePort">
      <summary>
            A simple mutable implementation of the <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>
            interface that can be used stand-alone.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimplePort.#ctor(yWorks.Support.ILookup,yWorks.Canvas.Geometry.IPoint,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates a port with a <see cref="T:yWorks.yFiles.UI.Model.DefaultPortLookup">default lookup</see>
            using the given lookup, location and owner.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimplePort.#ctor(yWorks.Support.ILookup,yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates a port with a <see cref="T:yWorks.yFiles.UI.Model.DefaultPortLookup">default lookup</see>
            using the given lookup, location and owner.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimplePort.#ctor(yWorks.yFiles.UI.Model.IPortLocationModelParameter,yWorks.yFiles.UI.Model.IPortOwner)">
      <summary>
            Creates a port with a <see cref="T:yWorks.yFiles.UI.Model.DefaultPortLookup">default lookup</see>
            using the given location and owner.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimplePort.Location">
      <summary>
            Returns a live view of the location of the port in world coordinates.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimplePort.LocationModelParameter">
      <summary>
             Gets the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see> that 
             is used to determine the <see cref="P:yWorks.yFiles.UI.Model.IPort.Location"></see> of this port.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimplePort.Lookup(System.Type)">
      <summary>
            Simple lookup implementation that delegates to the 
            current <see cref="M:yWorks.yFiles.UI.Model.AbstractModelItem.GetLookup">lookup delegate</see> if it is available.
            Otherwise returns <c>this</c> if <c>this</c> is assignable to the provided type.
            </summary>
      <param name="type">the query type</param>
      <returns>an implementation of <c>type</c> or <c>null</c></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimplePort.Owner">
      <summary>
            Returns the owner of this port.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Model.SimplePort.SetLocation(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Sets the location of this port.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Model.SimplePort.Style">
      <summary>
            Returns the style that is responsible for the visual representation
            of this port in a <see cref="T:yWorks.Canvas.CanvasControl"></see>.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Model.TagChanged">
      <summary>
            Event delegate method that is used in the <see cref="T:yWorks.yFiles.UI.Model.ITagChangeReporter"></see>
            interface. <see cref="T:yWorks.yFiles.UI.Model.DefaultGraph"></see> by default has an implementation of this interface 
            in it's <see cref="M:yWorks.Support.ILookup.Lookup(System.Type)"></see>.
            </summary>
      <param name="owner">The owner whose <see cref="P:yWorks.Support.ITagOwner.Tag"></see> has changed.</param>
      <param name="oldTag">The old tag.</param>
      <param name="newTag">The new tag.</param>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder">
      <summary>
            Default implementation of <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> objects
            that recursively creates <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s for a <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see>
            that contains properties of <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instances. This implementation contains
            the first label and the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see> of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)">
      <summary>
            Adds new option items to the given <paramref name="context"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.BuildLabelOptions(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Builds the options for the first label of the edge instance.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="subject">The current edge instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.BuildStyleOptions(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.IEdge)">
      <summary>
            Builds the options for the style of the edge instance.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="edge">The current edge instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.GetLabelOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Method that retrieves an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the given label and context.
            </summary>
      <param name="context">The context to use.</param>
      <param name="label">The label instance.</param>
      <returns>The builder to use or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.GetStyleOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Method that retrieves an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the given style and context.
            </summary>
      <param name="context">The context to use.</param>
      <param name="style">The current style instance.</param>
      <returns>The builder to use or <see langword="null"></see>.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.LabelPropertyName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the label of the item.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultEdgeOptionBuilder.StylePropertyName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the style of the item.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder">
      <summary>
            A simple default implementation of the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            that recursively creates a property map for an <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> which contains
            the first label and the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see> of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.#ctor">
      <summary>
            Creates a new instance of a builder for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.BuildLabelProperties``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})">
      <summary>
            Method that populates the <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see> for labels in a given context.
            </summary>
      <param name="context">The context to use for queries.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.BuildLabelProperties``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.BuildPropertyMapImpl(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Called by the base class to actually build the properties for the <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>.
            </summary>
      <param name="context">The context to use as the builder.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.BuildStyleProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.IEdge})">
      <summary>
            Method that populates the <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see> for edge styles in a given context.
            </summary>
      <param name="context">The context to use for queries.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.GetLabelPropertyMapBuilder``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0},yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Method that retrieves the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> for the provided label instance.
            </summary>
      <param name="context">The context to use for queries.</param>
      <param name="label">The label instance currently associated with the <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.GetLabelPropertyMapBuilder``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0},yWorks.yFiles.UI.Model.ILabel)"]</p>
      </typeparam>
      <returns>A builder or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.GetStylePropertyMapBuilder(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.IEdge},yWorks.yFiles.UI.Drawing.IEdgeStyle)">
      <summary>
            Method that retrieves the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> for the provided style instance.
            </summary>
      <param name="context">The context to use for queries.</param>
      <param name="style">The style instance currently associated with the edge.</param>
      <returns>A builder or <see langword="null"></see></returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Option.DefaultEdgePropertyMapBuilder.StyleAssignmentPolicy">
      <summary>
            Determines how changes to the <see cref="P:yWorks.yFiles.UI.Model.IEdge.Style"></see> instance
            that are triggered by modifying the properties this instance creates 
            are treated.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder">
      <summary>
            Default implementation of <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> for <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> objects
            that recursively creates <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s for a <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see>
            that contains properties of <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> instances. This implementation contains
            the model parameter, preferred size, and the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see> of the label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.#ctor">
      <summary>
            Creates a new instance of a builder for labels.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)">
      <summary>
            Adds new option items to the given <paramref name="context"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddLabelModelParameterItems(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Adds <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s that are bound to the label's <see cref="P:yWorks.yFiles.UI.Model.ILabel.LabelModelParameter"></see>
            and the associated <see cref="P:yWorks.yFiles.UI.Model.ILabelModelParameter.Model"></see>.
            property to the builder.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="label">The current label instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddLabelTextItem(yWorks.Option.DataBinding.IOptionBuilderContext)">
      <summary>
            Adds an <see cref="T:yWorks.Option.Handler.IOptionItem"></see> that is bound to the label's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Text"></see>
            property to the builder.
            </summary>
      <param name="context">The context to use for building.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddPreferredSizeItems(yWorks.Option.DataBinding.IOptionBuilderContext)">
      <summary>
            Adds <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s that are bound to the label's <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>
            property to the builder.
            </summary>
      <param name="context">The context to use for building.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddStyleItems(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Adds a <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s that are bound to the label's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see>
            to the builder.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="label">The current label instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.AddValidModelsItems(yWorks.Option.DataBinding.IOptionBuilderContext)">
      <summary>
            Adds the currently valid <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> items to the context.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.GetLabelModelOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Retrieves the <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> to use for the label model of the provided label.
            </summary>
      <param name="context">The context to use.</param>
      <param name="model">The current model instance.</param>
      <returns>The builder or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.GetStyleOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Retrieves the <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> to use for the given style.
            </summary>
      <param name="context">The context to use.</param>
      <param name="style">The current style instance.</param>
      <returns>The builder or <see langword="null"></see>.</returns>
    </member>
    <member name="P:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.ValidEdgeLabelModels">
      <summary>
            Gets a modifiable list of types of <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> that are valid
            for <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Option.DefaultLabelOptionBuilder.ValidNodeLabelModels">
      <summary>
            Gets a modifiable list of types of <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> that are valid
            for <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder">
      <summary>
            A simple default implementation of the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            that recursively creates a property map for an <see cref="T:yWorks.yFiles.UI.Model.ILabel"></see> which contains
            the model parameter, preferred size, and the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see> of the label.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.#ctor">
      <summary>
            Creates a new instance for building label properties.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildLabelModelParameterProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Model.ILabelModelParameter)">
      <summary>
            Builds the properties for the labels's <see cref="P:yWorks.yFiles.UI.Model.ILabel.LabelModelParameter"></see>
            and <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildLabelTextProperty(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Builds the property for the labels's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Text"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildModelProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Builds the properties for the labels's <see cref="T:yWorks.yFiles.UI.Model.ILabelModel"></see> type.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildPreferredSizeProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            Builds the properties for the labels's <see cref="P:yWorks.yFiles.UI.Model.ILabel.PreferredSize"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildPropertyMapImpl(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel})">
      <summary>
            The core method that needs to be implemented by subclasses.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.BuildStyleProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Builds the properties for the labels's <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see></summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.EdgeLabelModelProperty">
      <summary>
            The name of the property to use for the label models for edges.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.GetLabelModelPropertyMapBuilder(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Model.ILabelModel)">
      <summary>
            Retrieves the builder for the given label model.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.GetStyleBuilder(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.ILabel},yWorks.yFiles.UI.Drawing.ILabelStyle)">
      <summary>
            Retrieves the builder for the given style.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.NodeLabelModelProperty">
      <summary>
            The name of the property to use for the label models for nodes.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.PreferredSizeProperty">
      <summary>
            The name of the property to use for the preferred size.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.StyleAssignmentPolicy">
      <summary>
            Determines how changes to the <see cref="P:yWorks.yFiles.UI.Model.ILabel.Style"></see> instance
            that are triggered by modifying the properties this instance creates 
            are treated.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.StyleProperty">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the style of the item.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultLabelPropertyMapBuilder.TextProperty">
      <summary>
            The name of the property to use for the text.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder">
      <summary>
            Default implementation of <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> for <see cref="T:yWorks.yFiles.UI.Model.INode"></see> objects
            that recursively creates <see cref="T:yWorks.Option.Handler.IOptionItem"></see>s for a <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see>
            that contains properties of <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instances. This implementation contains
            the first label and the <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see> of the node, as well as properties
            for the node's <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.AddItems(yWorks.Option.DataBinding.IOptionBuilderContext,System.Type,System.Object)">
      <summary>
            Adds new option items to the given <paramref name="context"></paramref>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.BuildLabelOptions(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabeledItem)">
      <summary>
            Builds the options for the first label of the node instance.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="subject">The current node instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.BuildLayoutOptions(yWorks.Option.DataBinding.IOptionBuilderContext)">
      <summary>
            This method <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)"></see> binds the
            <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> properties to corresponding option items.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.BuildStyleOptions(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.INode)">
      <summary>
            Builds the options for the style of the node instance.
            </summary>
      <param name="context">The context to use for building.</param>
      <param name="node">The current node instance.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.GetLabelOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Method that retrieves an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the given label and context.
            </summary>
      <param name="context">The context to use.</param>
      <param name="label">The label instance.</param>
      <returns>The builder to use or <see langword="null"></see>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodeOptionBuilder.GetStyleOptionBuilder(yWorks.Option.DataBinding.IOptionBuilderContext,yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Method that retrieves an <see cref="T:yWorks.Option.DataBinding.IOptionBuilder"></see> instance for the given style and context.
            </summary>
      <param name="context">The context to use.</param>
      <param name="style">The current style instance.</param>
      <returns>The builder to use or <see langword="null"></see>.</returns>
    </member>
    <member name="T:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder">
      <summary>
            A simple default implementation of the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see>
            that recursively creates a property map for an <see cref="T:yWorks.yFiles.UI.Model.INode"></see> which contains
            the first label and the <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see> of the node.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.#ctor">
      <summary>
            Creates a new instance of a builder for <see cref="T:yWorks.yFiles.UI.Model.INode"></see> instances.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.BuildLabelProperties``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})">
      <summary>
            Method that populates the <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see> for labels in a given context.
            </summary>
      <param name="context">The context to use for queries.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.BuildLabelProperties``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0})"]</p>
      </typeparam>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.BuildLayoutProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Method that <see cref="M:yWorks.Option.DataBinding.IPropertyBuildContext`1.AddEntry(System.String,yWorks.Option.DataBinding.IValueGetter,yWorks.Option.DataBinding.IValueSetter)">adds entries</see>
            for the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see> of a node.
            </summary>
      <param name="context">The context to use.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.BuildPropertyMapImpl(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Called by the base class to actually build the properties for the <see cref="T:yWorks.yFiles.UI.Model.INode"></see>.
            </summary>
      <param name="context">The context to use as the builder.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.BuildStyleProperties(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.INode})">
      <summary>
            Method that populates the <see cref="T:yWorks.Option.DataBinding.IPropertyMap"></see> for edge styles in a given context.
            </summary>
      <param name="context">The context to use for queries.</param>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.GetLabelPropertyMapBuilder``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0},yWorks.yFiles.UI.Model.ILabel)">
      <summary>
            Method that retrieves the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> for the provided label instance.
            </summary>
      <param name="context">The context to use for queries.</param>
      <param name="label">The label instance currently associated with the <see cref="T:yWorks.yFiles.UI.Model.ILabeledItem"></see>.</param>
      <typeparam name="T">
        <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;typeparam name="T"/&gt; documentation for "M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.GetLabelPropertyMapBuilder``1(yWorks.Option.DataBinding.IPropertyBuildContext{``0},yWorks.yFiles.UI.Model.ILabel)"]</p>
      </typeparam>
      <returns>A builder or <see langword="null"></see></returns>
    </member>
    <member name="M:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.GetStylePropertyMapBuilder(yWorks.Option.DataBinding.IPropertyBuildContext{yWorks.yFiles.UI.Model.INode},yWorks.yFiles.UI.Drawing.INodeStyle)">
      <summary>
            Method that retrieves the <see cref="T:yWorks.Option.DataBinding.IPropertyMapBuilder"></see> for the provided style instance.
            </summary>
      <param name="context">The context to use for queries.</param>
      <param name="style">The style instance currently associated with the node.</param>
      <returns>A builder or <see langword="null"></see></returns>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LabelPropertyName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the label of the item.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LayoutHeightName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)">entry name</see>
            used for the height property of the layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LayoutPropertyName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the layout of the node.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LayoutWidthName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)">entry name</see>
            used for the width property of the layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LayoutXName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)">entry name</see>
            used for the x property of the layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.LayoutYName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.BindItem(yWorks.Option.Handler.IOptionItem,System.String)">entry name</see>
            used for the y property of the layout.
            </summary>
    </member>
    <member name="P:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.StyleAssignmentPolicy">
      <summary>
            Determines how changes to the <see cref="P:yWorks.yFiles.UI.Model.INode.Style"></see> instance
            that are triggered by modifying the properties this instance creates 
            are treated.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.Option.DefaultNodePropertyMapBuilder.StylePropertyName">
      <summary>
            The <see cref="M:yWorks.Option.DataBinding.IOptionBuilderContext.CreateChildContext(System.String)">child context prefix</see>
            used for the style of the item.
            </summary>
    </member>
    <member name="T:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel">
      <summary>
            A simple implementation of the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModel"></see>
            that uses simple <see cref="T:yWorks.Canvas.Geometry.Structs.PointD"></see> and <see cref="T:yWorks.Canvas.Geometry.IPoint"></see> implementations 
            to anchor ports in the world coordinate system.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.CreateDynamicParameter(yWorks.Canvas.Geometry.IPoint)">
      <summary>
            Creates a dynamic parameter that fixes the port location at the given coordinates.
            </summary>
      <param name="location">The location of the port.</param>
      <returns>A parameter that exactly matches the provided coordinates.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.CreateParameter(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a parameter that fixes the port location at the given coordinates.
            </summary>
      <param name="location">The location of the port.</param>
      <returns>A parameter that exactly matches the provided coordinates.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.CreateParameter(yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Factory method that creates a parameter for the given port that tries to match the provided location
            in absolute world coordinates.
            </summary>
      <param name="portOwner">The port owner that will own the port for which the parameter shall be created.</param>
      <param name="location">The location in the world coordinate system that should be matched as best as possible.</param>
      <returns>
            A new instance that can be used to describe the location of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> at the given
            <paramref name="portOwner"></paramref>.
            </returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.GetContext(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of port
            and parameter.
            </summary>
      <param name="port">The port to use in the context.</param>
      <param name="parameter">The parameter to use for the port in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the port/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.GetLocation(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Determines the location of the port for the given parameter.
            </summary>
      <param name="port">The port to determine the location for.</param>
      <param name="parameter">The parameter to use. The parameter can be expected to be created by this instance
            having the <see cref="P:yWorks.yFiles.UI.Model.IPortLocationModelParameter.Model"></see> property set to this instance..</param>
      <returns>The calculated location of the port.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.Instance">
      <summary>
            A static immutable global instance of this class.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.AnchoredPortLocationModel.Lookup(System.Type)">
      <summary>
            This implementation has nothing in its lookup and will always yield <see langword="null"></see></summary>
    </member>
    <member name="T:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel">
      <summary>
            An implementation of the <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModel"></see>
            that can create <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModelParameter"></see>s
            that describe the location of ports that are attached to the bends of <see cref="T:yWorks.yFiles.UI.Model.IEdge"></see>s.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.CreateFromSource(System.Int32)">
      <summary>
            Creates a parameter that indicates the location of the bend with index <paramref name="bendIndex"></paramref>
            starting from the source side.
            </summary>
      <param name="bendIndex">The index of the bend counting from the source side.</param>
      <returns>A parameter that anchors the port at a bend.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.CreateFromTarget(System.Int32)">
      <summary>
            Creates a parameter that indicates the location of the bend with index <paramref name="bendIndex"></paramref>
            starting from the target side.
            </summary>
      <param name="bendIndex">The index of the bend counting from the target side.</param>
      <returns>A parameter that anchors the port at a bend.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.CreateParameter(yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Factory method that creates a parameter for the given port that tries to match the provided location
            in absolute world coordinates.
            </summary>
      <param name="portOwner">The port owner that will own the port for which the parameter shall be created.</param>
      <param name="location">The location in the world coordinate system that should be matched as best as possible.</param>
      <returns>A new instance that can be used to describe the location of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> at the given
            <paramref name="portOwner"></paramref>.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.FirstBend">
      <summary>
            A convenience instance of a parameter that is bound to the first <see cref="T:yWorks.yFiles.UI.Model.IBend"></see> of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.GetContext(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of port
            and parameter.
            </summary>
      <param name="port">The port to use in the context.</param>
      <param name="parameter">The parameter to use for the port in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the port/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.GetLocation(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Determines the location of the port for the given parameter.
            </summary>
      <param name="port">The port to determine the location for.</param>
      <param name="parameter">The parameter to use. The parameter can be expected to be created by this instance
            having the <see cref="P:yWorks.yFiles.UI.Model.IPortLocationModelParameter.Model"></see> property set to this instance..</param>
      <returns>The calculated location of the port.</returns>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.Instance">
      <summary>
            A static immutable global instance of this class.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.LastBend">
      <summary>
            A convenience instance of a parameter that is bound to the last <see cref="T:yWorks.yFiles.UI.Model.IBend"></see> of the edge.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.BendAnchoredPortLocationModel.Lookup(System.Type)">
      <summary>
            This implementation has nothing in its lookup and will always yield <see langword="null"></see></summary>
    </member>
    <member name="T:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel">
      <summary>
            A straightforward implementation of an <see cref="T:yWorks.yFiles.UI.Model.IPortLocationModel"></see>
            for <see cref="T:yWorks.yFiles.UI.Model.IPort"></see>s at <see cref="T:yWorks.yFiles.UI.Model.INode"></see>s that determine the location
            dynamically using the <see cref="P:yWorks.yFiles.UI.Model.INode.Layout"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel" /> class</summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateAbsoluteParameter(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a parameter for the given <see cref="T:yWorks.yFiles.UI.Model.INode"></see> that will 
            exactly match the given absolute world coordinates.
            </summary>
      <param name="owner">The owner to use for determining the offsets.</param>
      <param name="location">The absolute world coordinates location of the port.</param>
      <returns>A parameter that exactly matches the <paramref name="location"></paramref>
            unless the node's width and height is non-positive.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateOffsetParameter(yWorks.yFiles.UI.Model.INode,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates the parameter for the given <see cref="T:yWorks.yFiles.UI.Model.INode"></see> that will 
            exactly match the given relative location.
            </summary>
      <param name="owner">The owner to use for determining the offsets.</param>
      <param name="relativeLocation">The location of the port relative to the center of the node.</param>
      <returns>A parameter that exactly matches the <paramref name="relativeLocation"></paramref>
            unless the node's width and height is non-positive.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateParameter(yWorks.yFiles.UI.Model.IPortOwner,yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Factory method that creates a parameter for the given port that tries to match the provided location
            in absolute world coordinates.
            </summary>
      <param name="portOwner">The port owner that will own the port for which the parameter shall be created.</param>
      <param name="location">The location in the world coordinate system that should be matched as best as possible.</param>
      <returns>A new instance that can be used to describe the location of an <see cref="T:yWorks.yFiles.UI.Model.IPort"></see> at the given
            <paramref name="portOwner"></paramref>.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">
      <summary>
            Creates a parameter that uses the given relative offsets.
            </summary>
      <param name="relativeOffsets">The relative offsets.</param>
      <returns>A new parameter that matches the specification.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.GetContext(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
            Provides a <see cref="T:yWorks.Support.ILookup">lookup context</see> for the given combination of port
            and parameter.
            </summary>
      <param name="port">The port to use in the context.</param>
      <param name="parameter">The parameter to use for the port in the context.</param>
      <returns>An implementation of the <see cref="T:yWorks.Support.ILookup"></see> interface that can be used to query additional aspects
            of the port/parameter combination.</returns>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.GetLocation(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPortLocationModelParameter)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.Instance">
      <summary>
            A read only immutable instance of the <see cref="T:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel"></see>.
            </summary>
    </member>
    <member name="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.Lookup(System.Type)">
      <summary>
      Helper method for XAML usage.
   </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeBottomAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the center of the bottom border of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeBottomLeftAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the bottom left corner of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeBottomRightAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the bottom right corner of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeCenterAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the center of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeLeftAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the center of the left border of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeRightAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the center of the right border of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeTopAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the center of the top border of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeTopLeftAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the top left corner of the node layout.
            </summary>
    </member>
    <member name="F:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.NodeTopRightAnchored">
      <summary>
            A read only immutable singleton instance of a <see cref="M:yWorks.yFiles.UI.PortLocationModels.NodeScaledPortLocationModel.CreateScaledParameter(yWorks.Canvas.Geometry.Structs.PointD)">scaled parameter</see>
            that locates the port at the top right corner of the node layout.
            </summary>
    </member>
  </members>
</doc>