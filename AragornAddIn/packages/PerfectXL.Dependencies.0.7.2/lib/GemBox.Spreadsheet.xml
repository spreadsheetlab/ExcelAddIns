<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GemBox.Spreadsheet</name>
    </assembly>
    <members>
        <member name="M:External.Zip.ZipWriter.AddEntry(System.String,System.IO.Stream)">
            <summary>
            Adds an entry to the ZIP file (only writes the header, to write
            the content use Stream methods).
            </summary>
            <param name="entryPath">The relative path of the entry in the ZIP file.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.Reset">
            <summary>
              Reset the BitWriter.
            </summary>
            <remarks>
              <para>
                This is useful when the BitWriter writes into a MemoryStream, and
                is used by a BZip2Compressor, which itself is re-used for multiple
                distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteBits(System.Int32,System.UInt32)">
            <summary>
              Write some number of bits from the given value, into the output.
            </summary>
            <remarks>
              <para>
                The nbits value should be a max of 25, for safety. For performance
                reasons, this method does not check!
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteByte(System.Byte)">
            <summary>
              Write a full 8-bit byte into the output.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.WriteInt(System.UInt32)">
            <summary>
              Write four 8-bit bytes into the output.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.Flush">
            <summary>
              Write all available byte-aligned bytes.
            </summary>
            <remarks>
              <para>
                This method writes no new output, but flushes any accumulated
                bits. At completion, the accumulator may contain up to 7
                bits.
              </para>
              <para>
                This is necessary when re-assembling output from N independent
                compressors, one for each of N blocks. The output of any
                particular compressor will in general have some fragment of a byte
                remaining. This fragment needs to be accumulated into the
                parent BZip2OutputStream.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BitWriter.FinishAndPad">
            <summary>
              Writes all available bytes, and emits padding for the final byte as
              necessary. This must be the last method invoked on an instance of
              BitWriter.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BitWriter.RemainingBits">
            <summary>
              Delivers the remaining bits, left-aligned, in a byte.
            </summary>
            <remarks>
              <para>
                This is valid only if NumRemainingBits is less than 8;
                in other words it is valid only after a call to Flush().
              </para>
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2Compressor.increments">
            Knuth's increments seem to work better than Incerpi-Sedgewick here.
            Possibly because the number of elems to sort is usually small, typically
            &lt;= 20.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.#ctor(External.Zip.Internal.BZip2.BitWriter)">
            <summary>
              BZip2Compressor writes its compressed data out via a BitWriter. This
              is necessary because BZip2 does byte shredding.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.Fill(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Accept new bytes into the compressor data buffer
            </summary>
            <remarks>
              <para>
                This method does the first-level (cheap) run-length encoding, and
                stores the encoded data into the rle block.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.write0(System.Byte)">
             <summary>
               Process one input byte into the block.
             </summary>
            
             <remarks>
               <para>
                 To "process" the byte means to do the run-length encoding.
                 There are 3 possible return values:
            
                    0 - the byte was not written, in other words, not
                        encoded into the block. This happens when the
                        byte b would require the start of a new run, and
                        the block has no more room for new runs.
            
                    1 - the byte was written, and the block is not full.
            
                    2 - the byte was written, and the block is full.
            
               </para>
             </remarks>
             <returns>0 if the byte was not written, non-zero if written.</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.AddRunToOutputBlock(System.Boolean)">
             <summary>
               Append one run to the output block.
             </summary>
            
             <remarks>
               <para>
                 This compressor does run-length-encoding before BWT and etc. This
                 method simply appends a run to the output block. The append always
                 succeeds. The return value indicates whether the block is full:
                 false (not full) implies that at least one additional run could be
                 processed.
               </para>
             </remarks>
             <returns>true if the block is now full; otherwise false.</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.CompressAndWrite">
            <summary>
              Compress the data that has been placed (Run-length-encoded) into the
              block. The compressed data goes into the CompressedBytes array.
            </summary>
            <remarks>
              <para>
                Side effects: 1.  fills the CompressedBytes array.  2. sets the
                AvailableBytesOut property.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.mainSimpleSort(External.Zip.Internal.BZip2.BZip2Compressor.CompressionState,System.Int32,System.Int32,System.Int32)">
             This is the most hammered method of this class.
            
             <p>
             This is the version using unrolled loops.
             </p>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2Compressor.mainQSort3(External.Zip.Internal.BZip2.BZip2Compressor.CompressionState,System.Int32,System.Int32,System.Int32)">
            Method "mainQSort3", file "blocksort.c", BZip2 1.0.2
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2Compressor.UncompressedBytes">
            <summary>
              The number of uncompressed bytes being held in the buffer.
            </summary>
            <remarks>
              <para>
                I am thinking this may be useful in a Stream that uses this
                compressor class. In the Close() method on the stream it could
                check this value to see if anything has been written at all.  You
                may think the stream could easily track the number of bytes it
                wrote, which would eliminate the need for this. But, there is the
                case where the stream writes a complete block, and it is full, and
                then writes no more. In that case the stream may want to check.
              </para>
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2Compressor.CompressionState.quadrant">
            Array instance identical to sfmap, both are used only
            temporarily and independently, so we do not need to allocate
            additional memory.
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2InputStream">
            <summary>
              A read-only decorator stream that performs BZip2 decompression on Read.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
              Create a BZip2InputStream, wrapping it around the given input Stream.
            </summary>
            <remarks>
              <para>
                The input stream will be closed when the BZip2InputStream is closed.
              </para>
            </remarks>
            <param name='input'>The stream from which to read compressed data</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a BZip2InputStream with the given stream, and
               specifying whether to leave the wrapped stream open when
               the BZip2InputStream is closed.
             </summary>
             <param name='input'>The stream from which to read compressed data</param>
             <param name='leaveOpen'>
               Whether to leave the input stream open, when the BZip2InputStream closes.
             </param>
            
             <example>
            
               This example reads a bzip2-compressed file, decompresses it,
               and writes the decompressed data into a newly created file.
            
               <code>
               var fname = "logfile.log.bz2";
               using (var fs = File.OpenRead(fname))
               {
                   using (var decompressor = new Ionic.BZip2.BZip2InputStream(fs))
                   {
                       var outFname = fname + ".decompressed";
                       using (var output = File.Create(outFname))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = decompressor.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               output.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read data from the stream.
             </summary>
            
             <remarks>
               <para>
                 To decompress a BZip2 data stream, create a <c>BZip2InputStream</c>,
                 providing a stream that reads compressed data.  Then call Read() on
                 that <c>BZip2InputStream</c>, and the data read will be decompressed
                 as you read.
               </para>
            
               <para>
                 A <c>BZip2InputStream</c> can be used only for <c>Read()</c>, not for <c>Write()</c>.
               </para>
             </remarks>
            
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.ReadByte">
            <summary>
              Read a single byte from the stream.
            </summary>
            <returns>the byte read from the stream, or -1 if EOF</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="buffer">this parameter is never used</param>
            <param name="offset">this parameter is never used</param>
            <param name="count">this parameter is never used</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.Close">
            <summary>
              Close the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.GetBits(System.Int32)">
            <summary>
              Read n bits from input, right justifying the result.
            </summary>
            <remarks>
              <para>
                For example, if you read 1 bit, the result is either 0
                or 1.
              </para>
            </remarks>
            <param name ="n">
              The number of bits to read, always between 1 and 32.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.hbCreateDecodeTables(System.Int32[],System.Int32[],System.Int32[],System.Char[],System.Int32,System.Int32,System.Int32)">
            Called by createHuffmanDecodingTables() exclusively.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.createHuffmanDecodingTables(System.Int32,System.Int32)">
            Called by recvDecodingTables() exclusively.
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2InputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes read in.
             </remarks>
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2InputStream.CState">
            <summary>
              Compressor State
            </summary>
        </member>
        <member name="F:External.Zip.Internal.BZip2.BZip2InputStream.DecompressionState.unzftab">
            Freq table collected to save a pass over the data during
            decompression.
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2InputStream.DecompressionState.initTT(System.Int32)">
             Initializes the tt array.
            
             This method is called when the required length of the array is known.
             I don't initialize it at construction time to avoid unneccessary
             memory allocation when compressing small files.
        </member>
        <member name="T:External.Zip.Internal.BZip2.BZip2OutputStream">
            <summary>
              A write-only decorator stream that compresses data as it is
              written using the BZip2 algorithm.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
             <summary>
               Constructs a new <c>BZip2OutputStream</c>, that sends its
               compressed output to the given output stream.
             </summary>
            
             <param name='output'>
               The destination stream, to which compressed output will be sent.
             </param>
            
             <example>
            
               This example reads a file, then compresses it with bzip2 file,
               and writes the compressed data into a newly created file.
            
               <code>
               var fname = "logfile.log";
               using (var fs = File.OpenRead(fname))
               {
                   var outFname = fname + ".bz2";
                   using (var output = File.Create(outFname))
                   {
                       using (var compressor = new Ionic.BZip2.BZip2OutputStream(output))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = fs.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               compressor.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
              Constructs a new <c>BZip2OutputStream</c> with specified blocksize.
            </summary>
            <param name = "output">the destination stream.</param>
            <param name = "blockSize">
              The blockSize in units of 100000 bytes.
              The valid range is 1..9.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              Constructs a new <c>BZip2OutputStream</c>.
            </summary>
              <param name = "output">the destination stream.</param>
            <param name = "leaveOpen">
              whether to leave the captive stream open upon closing this stream.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
             <summary>
               Constructs a new <c>BZip2OutputStream</c> with specified blocksize,
               and explicitly specifies whether to leave the wrapped stream open.
             </summary>
            
             <param name = "output">the destination stream.</param>
             <param name = "blockSize">
               The blockSize in units of 100000 bytes.
               The valid range is 1..9.
             </param>
             <param name = "leaveOpen">
               whether to leave the captive stream open upon closing this stream.
             </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Close">
            <summary>
              Close the stream.
            </summary>
            <remarks>
              <para>
                This may or may not close the underlying stream.  Check the
                constructors that accept a bool value.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Flush">
            <summary>
              Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               Use the <c>BZip2OutputStream</c> to compress data while writing:
               create a <c>BZip2OutputStream</c> with a writable output stream.
               Then call <c>Write()</c> on that <c>BZip2OutputStream</c>, providing
               uncompressed data as input.  The data sent to the output stream will
               be the compressed form of the input data.
             </para>
            
             <para>
               A <c>BZip2OutputStream</c> can be used only for <c>Write()</c> not for <c>Read()</c>.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="buffer">this parameter is never used</param>
            <param name="offset">this parameter is never used</param>
            <param name="count">this parameter is never used</param>
            <returns>never returns anything; always throws</returns>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.BlockSize">
            <summary>
              The blocksize parameter specified at construction time.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value is always false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value should always be true, unless and until the
            object is disposed and closed.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.BZip2OutputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes written through.
             </remarks>
        </member>
        <member name="T:External.Zip.Internal.BZip2.ParallelBZip2OutputStream">
             <summary>
               A write-only decorator stream that compresses data as it is
               written using the BZip2 algorithm. This stream compresses by
               block using multiple threads.
             </summary>
             <para>
               This class performs BZIP2 compression through writing.  For
               more information on the BZIP2 algorithm, see
               <see href="http://en.wikipedia.org/wiki/BZIP2"/>.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.BZip2.BZip2OutputStream"/>,
               except that this implementation uses an approach that employs multiple
               worker threads to perform the compression.  On a multi-cpu or multi-core
               computer, the performance of this class can be significantly higher than
               the single-threaded BZip2OutputStream, particularly for larger streams.
               How large?  Anything over 10mb is a good candidate for parallel
               compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla <c>BZip2OutputStream</c>. Also, for small files, the
               <c>ParallelBZip2OutputStream</c> can be much slower than the vanilla
               <c>BZip2OutputStream</c>, because of the overhead associated to using the
               thread pool.
             </para>
            
             <seealso cref="T:External.Zip.Internal.BZip2.BZip2OutputStream"/>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream)">
             <summary>
               Constructs a new <c>ParallelBZip2OutputStream</c>, that sends its
               compressed output to the given output stream.
             </summary>
            
             <param name='output'>
               The destination stream, to which compressed output will be sent.
             </param>
            
             <example>
            
               This example reads a file, then compresses it with bzip2 file,
               and writes the compressed data into a newly created file.
            
               <code>
               var fname = "logfile.log";
               using (var fs = File.OpenRead(fname))
               {
                   var outFname = fname + ".bz2";
                   using (var output = File.Create(outFname))
                   {
                       using (var compressor = new Ionic.BZip2.ParallelBZip2OutputStream(output))
                       {
                           byte[] buffer = new byte[2048];
                           int n;
                           while ((n = fs.Read(buffer, 0, buffer.Length)) > 0)
                           {
                               compressor.Write(buffer, 0, n);
                           }
                       }
                   }
               }
               </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
              Constructs a new <c>ParallelBZip2OutputStream</c> with specified blocksize.
            </summary>
            <param name = "output">the destination stream.</param>
            <param name = "blockSize">
              The blockSize in units of 100000 bytes.
              The valid range is 1..9.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              Constructs a new <c>ParallelBZip2OutputStream</c>.
            </summary>
              <param name = "output">the destination stream.</param>
            <param name = "leaveOpen">
              whether to leave the captive stream open upon closing this stream.
            </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
             <summary>
               Constructs a new <c>ParallelBZip2OutputStream</c> with specified blocksize,
               and explicitly specifies whether to leave the wrapped stream open.
             </summary>
            
             <param name = "output">the destination stream.</param>
             <param name = "blockSize">
               The blockSize in units of 100000 bytes.
               The valid range is 1..9.
             </param>
             <param name = "leaveOpen">
               whether to leave the captive stream open upon closing this stream.
             </param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Close">
            <summary>
              Close the stream.
            </summary>
            <remarks>
              <para>
                This may or may not close the underlying stream.  Check the
                constructors that accept a bool value.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Flush">
            <summary>
              Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               Use the <c>ParallelBZip2OutputStream</c> to compress data while
               writing: create a <c>ParallelBZip2OutputStream</c> with a writable
               output stream.  Then call <c>Write()</c> on that
               <c>ParallelBZip2OutputStream</c>, providing uncompressed data as
               input.  The data sent to the output stream will be the compressed
               form of the input data.
             </para>
            
             <para>
               A <c>ParallelBZip2OutputStream</c> can be used only for
               <c>Write()</c> not for <c>Read()</c>.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="buffer">this parameter is never used</param>
            <param name="offset">this parameter is never used</param>
            <param name="count">this parameter is never used</param>
            <returns>never returns anything; always throws</returns>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.MaxWorkers">
             <summary>
               The maximum number of concurrent compression worker threads to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of concurrent worker
               threads to employ for compression. The implementation of this stream
               employs multiple threads from the .NET thread pool, via <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>, to compress the incoming data by
               block.  As each block of data is compressed, this stream re-orders the
               compressed blocks and writes them to the output stream.
             </para>
            
             <para>
               A higher number of workers enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               By default, DotNetZip allocates 4 workers per CPU core, subject to the
               upper limit specified in this property. For example, suppose the
               application sets this property to 16.  Then, on a machine with 2
               cores, DotNetZip will use 8 workers; that number does not exceed the
               upper limit specified by this property, so the actual number of
               workers used will be 4 * 2 = 8.  On a machine with 4 cores, DotNetZip
               will use 16 workers; again, the limit does not apply. On a machine
               with 8 cores, DotNetZip will use 16 workers, because of the limit.
             </para>
            
             <para>
               For each compression "worker thread" that occurs in parallel, there is
               up to 2mb of memory allocated, for buffering and processing. The
               actual number depends on the <see cref="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BlockSize"/> property.
             </para>
            
             <para>
               CPU utilization will also go up with additional workers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BlockSize">
            <summary>
              The blocksize parameter specified at construction time.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value is always false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the
               total number of uncompressed bytes written through.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.BZip2.ParallelBZip2OutputStream.BytesWrittenOut">
            <summary>
            The total number of bytes written out by the stream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.BZip2.Rand.Rnums(System.Int32)">
            <summary>
              Returns the "random" number at a specific index.
            </summary>
            <param name='i'>the index</param>
            <returns>the random number</returns>
        </member>
        <member name="T:External.Zip.Internal.ComHelper">
            <summary>
            This class exposes a set of COM-accessible wrappers for static
            methods available on the ZipFile class.  You don't need this
            class unless you are using DotNetZip from a COM environment.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.IsZipFile(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String)">ZipFile.IsZipFile(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.IsZipFileWithExtract(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)">ZipFile.IsZipFile(string, bool)</see>
            </summary>
            <remarks>
            We cannot use "overloaded" Method names in COM interop.
            So, here, we use a unique name.
            </remarks>
            <param name="filename">The filename to of the zip file to check.</param>
            <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.CheckZip(System.String)">
             <summary>
              A wrapper for <see cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)">ZipFile.CheckZip(string)</see>
             </summary>
             <param name="filename">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.CheckZipPassword(System.String,System.String)">
             <summary>
              A COM-friendly wrapper for the static method <see cref="M:External.Zip.Internal.ZipFile.CheckZipPassword(System.String,System.String)"/>.
             </summary>
            
             <param name="filename">The filename to of the zip file to check.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.FixZipDirectory(System.String)">
            <summary>
             A wrapper for <see cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)">ZipFile.FixZipDirectory(string)</see>
            </summary>
            <param name="filename">The filename to of the zip file to fix.</param>
        </member>
        <member name="M:External.Zip.Internal.ComHelper.GetZipLibraryVersion">
            <summary>
             A wrapper for <see cref="P:External.Zip.Internal.ZipFile.LibraryVersion">ZipFile.LibraryVersion</see>
            </summary>
            <returns>
             the version number on the DotNetZip assembly, formatted as a string.
            </returns>
        </member>
        <member name="T:External.Zip.Internal.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,External.Zip.Internal.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:External.Zip.Internal.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:External.Zip.Internal.Crc.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
               <c>PkzipWeak</c> implies the use of Zip 2.0 encryption, which is known to be
               weak and subvertible.
             </para>
            
             <para>
               A note on interoperability: Values of <c>PkzipWeak</c> and <c>None</c> are
               specified in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
               specification</see>, and are considered to be "standard".  Zip archives
               produced using these options will be interoperable with many other zip tools
               and libraries, including Windows Explorer.
             </para>
            
             <para>
               Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
               specification, but rather imply the use of a vendor-specific extension from
               WinZip. If you want to produce interoperable Zip archives, do not use these
               values.  For example, if you produce a zip archive using WinZipAes256, you
               will be able to open it in Windows Explorer on Windows XP and Vista, but you
               will not be able to extract entries; trying this will lead to an "unspecified
               error". For this reason, some people have said that a zip archive that uses
               WinZip's AES encryption is not actually a zip archive at all.  A zip archive
               produced this way will be readable with the WinZip tool (Version 11 and
               beyond).
             </para>
            
             <para>
               There are other third-party tools and libraries, both commercial and
               otherwise, that support WinZip's AES encryption. These will be able to read
               AES-encrypted zip archives produced by DotNetZip, and conversely applications
               that use DotNetZip to read zip archives will be able to read AES-encrypted
               archives produced by those tools or libraries.  Consult the documentation for
               those other tools and libraries to find out if WinZip's AES encryption is
               supported.
             </para>
            
             <para>
               In case you care: According to <see href="http://www.winzip.com/aes_info.htm">the WinZip specification</see>, the
               actual AES key used is derived from the <see cref="P:External.Zip.Internal.ZipEntry.Password"/> via an
               algorithm that complies with <see href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration
               count of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands
               for "Password Based Key Derivation Function #2".
             </para>
            
             <para>
               A word about password strength and length: The AES encryption technology is
               very good, but any system is only as secure as the weakest link.  If you want
               to secure your data, be sure to use a password that is hard to guess.  To make
               it harder to guess (increase its "entropy"), you should make it longer.  If
               you use normal characters from an ASCII keyboard, a password of length 20 will
               be strong enough that it will be impossible to guess.  For more information on
               that, I'd encourage you to read <see href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
               article.</see>
             </para>
            
             <para>
               The WinZip AES algorithms are not supported with the version of DotNetZip that
               runs on the .NET Compact Framework.  This is because .NET CF lacks the
               HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.WriteDelegate">
             <summary>
               Delegate in which the application writes the <c>ZipEntry</c> content for the named entry.
             </summary>
            
             <param name="entryName">The name of the entry that must be written.</param>
             <param name="stream">The stream to which the entry data should be written.</param>
            
             <remarks>
               When you add an entry and specify a <c>WriteDelegate</c>, via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)"/>, the application
               code provides the logic that writes the entry data directly into the zip file.
             </remarks>
            
             <example>
            
             This example shows how to define a WriteDelegate that obtains a DataSet, and then
             writes the XML for the DataSet into the zip archive.  There's no need to
             save the XML to a disk file first.
            
             <code lang="C#">
             private void WriteEntry (String filename, Stream output)
             {
                 DataSet ds1 = ObtainDataSet();
                 ds1.WriteXml(output);
             }
            
             private void Run()
             {
                 using (var zip = new ZipFile())
                 {
                     zip.AddEntry(zipEntryName, WriteEntry);
                     zip.Save(zipFileName);
                 }
             }
             </code>
            
             <code lang="vb">
             Private Sub WriteEntry (ByVal filename As String, ByVal output As Stream)
                 DataSet ds1 = ObtainDataSet()
                 ds1.WriteXml(stream)
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.OpenDelegate">
             <summary>
               Delegate in which the application opens the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should open the stream for.
             </param>
            
             <remarks>
               When you add an entry via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.CloseDelegate">
             <summary>
               Delegate in which the application closes the stream, just-in-time, for the named entry.
             </summary>
            
             <param name="entryName">
             The name of the ZipEntry that the application should close the stream for.
             </param>
            
             <param name="stream">The stream to be closed.</param>
            
             <remarks>
               When you add an entry via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>, the application code provides the logic that
               opens and closes the stream for the given ZipEntry.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
        </member>
        <member name="T:External.Zip.Internal.SetCompressionCallback">
             <summary>
               Delegate for the callback by which the application tells the
               library the CompressionLevel to use for a file.
             </summary>
            
             <remarks>
             <para>
               Using this callback, the application can, for example, specify that
               previously-compressed files (.mp3, .png, .docx, etc) should use a
               <c>CompressionLevel</c> of <c>None</c>, or can set the compression level based
               on any other factor.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.SetCompression"/>
        </member>
        <member name="T:External.Zip.Internal.ZipProgressEventType">
            <summary>
              In an EventArgs type, indicates which sort of progress event is being
              reported.
            </summary>
            <remarks>
              There are events for reading, events for saving, and events for
              extracting. This enumeration allows a single EventArgs type to be sued to
              describe one of multiple subevents. For example, a SaveProgress event is
              invoked before, after, and during the saving of a single entry.  The value
              of an enum with this type, specifies which event is being triggered.  The
              same applies to Extraction, Reading and Adding events.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_Started">
            <summary>
            Indicates that a Add() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_AfterAddEntry">
            <summary>
            Indicates that an individual entry in the archive has been added.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Adding_Completed">
            <summary>
            Indicates that a Add() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite">
            <summary>
              Indicates that extraction of an entry would overwrite an existing
              filesystem file. You must use
              <see cref="F:External.Zip.Internal.ExtractExistingFileAction.InvokeExtractProgressEvent">
              ExtractExistingFileAction.InvokeExtractProgressEvent</see> in the call
              to <c>ZipEntry.Extract()</c> in order to receive this event.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
              The given event is reporting the number of bytes written so far for
              the current entry during an Extract() operation.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipProgressEventType.Error_Saving">
            <summary>
            Indicates that an error has occurred while saving a zip file.
            This generally means the file cannot be opened, because it has been
            removed, or because it is locked by another process.  It can also
            mean that the file cannot be Read, because of a range lock conflict.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation.
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract
            operation that is in progress.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            This number will be -1 if the value cannot be determined.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.AddProgressEventArgs">
            <summary>
            Provides information about the progress of a Add operation.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,External.Zip.Internal.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:External.Zip.Internal.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,External.Zip.Internal.ZipEntry,System.String)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
        </member>
        <member name="P:External.Zip.Internal.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipErrorEventArgs">
            <summary>
            Provides information about the an error that occurred while zipping.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipErrorEventArgs.Exception">
            <summary>
            Returns the exception that occurred, if any.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipErrorEventArgs.FileName">
            <summary>
            Returns the name of the file that caused the exception, if any.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile
            which has no filename set, you can get this exception.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:External.Zip.Internal.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:External.Zip.Internal.ExtractExistingFileAction">
             <summary>
             An enum for the options when extracting an entry would overwrite an existing file. 
             </summary>
             
             <remarks>
               <para>
                 This enum describes the actions that the library can take when an
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> method is called to extract an
                 entry to a filesystem, and the extraction would overwrite an existing filesystem
                 file.
               </para>
             </remarks>
            
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.Throw">
            <summary>
            Throw an exception when extraction would overwrite an existing file. (For
            COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.OverwriteSilently">
            <summary>
            When extraction would overwrite an existing file, overwrite the file silently.
            The overwrite will happen even if the target file is marked as read-only.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.DoNotOverwrite">
            <summary>
            When extraction would overwrite an existing file, don't overwrite the file, silently. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ExtractExistingFileAction.InvokeExtractProgressEvent">
            <summary>
            When extraction would overwrite an existing file, invoke the ExtractProgress
            event, using an event type of <see cref="F:External.Zip.Internal.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite"/>.  In
            this way, the application can decide, just-in-time, whether to overwrite the
            file. For example, a GUI application may wish to pop up a dialog to allow
            the user to choose. You may want to examine the <see cref="P:External.Zip.Internal.ExtractProgressEventArgs.ExtractLocation"/> property before making
            the decision. If, after your processing in the Extract progress event, you
            want to NOT extract the file, set <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
            on the <c>ZipProgressEventArgs.CurrentEntry</c> to <c>DoNotOverwrite</c>.
            If you do want to extract the file, set <c>ZipEntry.ExtractExistingFile</c>
            to <c>OverwriteSilently</c>.  If you want to cancel the Extraction, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            DoNotOverwrite in that a cancel will not extract any further entries, if
            there are any.  (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.FileSelector">
             <summary>
               FileSelector encapsulates logic that selects files from a source - a zip file
               or the filesystem - based on a set of criteria.  This class is used internally
               by the DotNetZip library, in particular for the AddSelectedFiles() methods.
               This class can also be used independently of the zip capability in DotNetZip.
             </summary>
            
             <remarks>
            
             <para>
               The FileSelector class is used internally by the ZipFile class for selecting
               files for inclusion into the ZipFile, when the <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/> method, or one of
               its overloads, is called.  It's also used for the <see cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String)"/> methods.  Typically, an
               application that creates or manipulates Zip archives will not directly
               interact with the FileSelector class.
             </para>
            
             <para>
               Some applications may wish to use the FileSelector class directly, to
               select files from disk volumes based on a set of criteria, without creating or
               querying Zip archives.  The file selection criteria include: a pattern to
               match the filename; the last modified, created, or last accessed time of the
               file; the size of the file; and the attributes of the file.
             </para>
            
             <para>
               Consult the documentation for <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>
               for more information on specifying the selection criteria.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.#ctor(System.String)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
            
             <para>
               By default the FileSelector will traverse NTFS Reparse Points.  To
               change this, use <see cref="M:External.Zip.Internal.FileSelector.#ctor(System.String,System.Boolean)">FileSelector(String, bool)</see>.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.#ctor(System.String,System.Boolean)">
             <summary>
               Constructor that allows the caller to specify file selection criteria.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the caller to specify a set of criteria for
               selection of files.
             </para>
            
             <para>
               See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a description of
               the syntax of the selectionCriteria string.
             </para>
             </remarks>
            
             <param name="selectionCriteria">The criteria for file selection.</param>
             <param name="traverseDirectoryReparsePoints">
             whether to traverse NTFS reparse points (junctions).
             </param>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.ToString">
            <summary>
            Returns a string representation of the FileSelector object.
            </summary>
            <returns>The string representation of the boolean logic statement of the file
            selection criteria for this instance. </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectFiles(System.String)">
             <summary>
               Returns the names of the files in the specified directory
               that fit the selection criteria specified in the FileSelector.
             </summary>
            
             <remarks>
               This is equivalent to calling <see cref="M:External.Zip.Internal.FileSelector.SelectFiles(System.String,System.Boolean)"/>
               with recurseDirectories = false.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectFiles(System.String,System.Boolean)">
             <summary>
               Returns the names of the files in the specified directory that fit the
               selection criteria specified in the FileSelector, optionally recursing
               through subdirectories.
             </summary>
            
             <remarks>
               This method applies the file selection criteria contained in the
               FileSelector to the files contained in the given directory, and
               returns the names of files that conform to the criteria.
             </remarks>
            
             <param name="directory">
               The name of the directory over which to apply the FileSelector
               criteria.
             </param>
            
             <param name="recurseDirectories">
               Whether to recurse through subdirectories when applying the file
               selection criteria.
             </param>
            
             <returns>
               A collection of strings containing fully-qualified pathnames of files
               that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectEntries(External.Zip.Internal.ZipFile)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="M:External.Zip.Internal.FileSelector.SelectEntries(External.Zip.Internal.ZipFile,System.String)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
            
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used
             by the ZipFile class.
             </para>
            
             <para>
             This overload allows the selection of ZipEntry instances from the ZipFile to be restricted
             to entries contained within a particular directory in the ZipFile.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:External.Zip.Internal.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="P:External.Zip.Internal.FileSelector.SelectionCriteria">
             <summary>
               The string specifying which files to include when retrieving.
             </summary>
             <remarks>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator,
               and a value.  Consider the string "name != *.doc" .  The noun is
               "name".  The operator is "!=", implying "Not Equal".  The value is
               "*.doc".  That criterion, in English, says "all files with a name that
               does not end in the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename;
               "atime", "mtime", and "ctime" for last access time, last modfied time,
               and created time of the file, respectively; "attributes" (or "attrs")
               for the file attributes; "size" (or "length") for the file length
               (uncompressed); and "type" for the type of object, either a file or a
               directory.  The "attributes", "type", and "name" nouns all support =
               and != as operators.  The "size", "atime", "mtime", and "ctime" nouns
               support = and !=, and &gt;, &gt;=, &lt;, &lt;= as well.  The times are
               taken to be expressed in local time.
             </para>
            
             <para>
               Specify values for the file attributes as a string with one or more of
               the characters H,R,S,A,I,L in any order, implying file attributes of
               Hidden, ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint
               (symbolic link) respectively.
             </para>
            
             <para>
               To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as
               the format.  If you omit the HH:mm:ss portion, it is assumed to be
               00:00:00 (midnight).
             </para>
            
             <para>
               The value for a size criterion is expressed in integer quantities of
               bytes, kilobytes (use k or kb after the number), megabytes (m or mb),
               or gigabytes (g or gb).
             </para>
            
             <para>
               The value for a name is a pattern to match against the filename,
               potentially including wildcards.  The pattern follows CMD.exe glob
               rules: * implies one or more of any character, while ?  implies one
               character.  If the name pattern contains any slashes, it is matched to
               the entire filename, including the path; otherwise, it is matched
               against only the filename without the path.  This means a pattern of
               "*\*.*" matches all files one directory level deep, while a pattern of
               "*.*" matches all files in all directories.
             </para>
            
             <para>
               To specify a name pattern that includes spaces, use single quotes
               around the pattern.  A pattern of "'* *.*'" will match all files that
               have spaces in the filename.  The full criteria string for that would
               be "name = '* *.*'" .
             </para>
            
             <para>
               The value for a type criterion is either F (implying a file) or D
               (implying a directory).
             </para>
            
             <para>
               Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime &gt; 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>ctime &gt; 2009/01/01-03:00:00</term>
                 <description>all files with a created time after 3am (local time),
                 on January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size &gt; 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
               You can combine criteria with the conjunctions AND, OR, and XOR. Using
               a string like "name = *.txt AND size &gt;= 100k" for the
               selectionCriteria retrieves entries whose names end in .txt, and whose
               uncompressed size is greater than or equal to 100 kilobytes.
             </para>
            
             <para>
               For more complex combinations of criteria, you can use parenthesis to
               group clauses in the boolean logic.  Absent parenthesis, the
               precedence of the criterion atoms is determined by order of
               appearance.  Unlike the C# language, the AND conjunction does not take
               precendence over the logical OR.  This is important only in strings
               that contain 3 or more criterion atoms.  In other words, "name = *.txt
               and size &gt; 1000 or attributes = H" implies "((name = *.txt AND size
               &gt; 1000) OR attributes = H)" while "attributes = H OR name = *.txt
               and size &gt; 1000" evaluates to "((attributes = H OR name = *.txt)
               AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
               Using time properties requires some extra care. If you want to
               retrieve all entries that were last updated on 2009 February 14,
               specify "mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this
               to say: all files updated after 12:00am on February 14th, until
               12:00am on February 15th.  You can use the same bracketing approach to
               specify any time period - a year, a month, a week, and so on.
             </para>
            
             <para>
               The syntax allows one special case: if you provide a string with no
               spaces, it is treated as a pattern to match for the filename.
               Therefore a string like "*.xls" will be equivalent to specifying "name
               = *.xls".  This "shorthand" notation does not work with compound
               criteria.
             </para>
            
             <para>
               There is no logic in this class that insures that the inclusion
               criteria are internally consistent.  For example, it's possible to
               specify criteria that says the file must have a size of less than 100
               bytes, as well as a size that is greater than 1000 bytes.  Obviously
               no file will ever satisfy such criteria, but this class does not check
               for or detect such inconsistencies.
             </para>
            
             </remarks>
            
             <exception cref="T:System.Exception">
               Thrown in the setter if the value has an invalid syntax.
             </exception>
        </member>
        <member name="P:External.Zip.Internal.FileSelector.TraverseReparsePoints">
            <summary>
             Indicates whether searches will traverse NTFS reparse points, like Junctions.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.EnumUtil">
            <summary>
            Summary description for EnumUtil.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.GetDescription(System.Enum)">
            <summary>
              Returns the value of the DescriptionAttribute if the specified Enum
              value has one.  If not, returns the ToString() representation of the
              Enum value.
            </summary>
            <param name="value">The Enum to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.Parse(System.Type,System.String)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.
              Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <returns></returns>
        </member>
        <member name="M:External.Zip.Internal.EnumUtil.Parse(System.Type,System.String,System.Boolean)">
            <summary>
              Converts the string representation of the name or numeric value of one
              or more enumerated constants to an equivalent enumerated object.  A
              parameter specified whether the operation is case-sensitive.  Note:
              use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">
              A string containing the name or value to convert.
            </param>
            <param name="ignoreCase">
              Whether the operation is case-sensitive or not.</param>
            <returns></returns>
        </member>
        <member name="T:External.Zip.Internal.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.GetFileLength(System.String)">
            private null constructor
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.NormalizePathForUseInZipFile(System.String)">
            <summary>
            Utility routine for transforming path names from filesystem format (on Windows that means backslashes) to
            a format suitable for use within zipfiles. This means trimming the volume letter and colon (if any) And
            swapping backslashes for forward slashes.
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
             <summary>
               Finds a signature in the zip stream. This is useful for finding
               the end of a zip entry, for example, or the beginning of the next ZipEntry.
             </summary>
            
             <remarks>
               <para>
                 Scans through 64k at a time.
               </para>
            
               <para>
                 If the method fails to find the requested signature, the stream Position
                 after completion of this method is unchanged. If the method succeeds in
                 finding the requested signature, the stream position after completion is
                 direct AFTER the signature found in the stream.
               </para>
             </remarks>
            
             <param name="stream">The stream to search</param>
             <param name="SignatureToFind">The 4-byte signature to find</param>
             <returns>The number of bytes read</returns>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.CreateAndOpenUniqueTempFile(System.String,System.IO.Stream@,System.String@)">
            <summary>
              Create a pseudo-random filename, suitable for use as a temporary
              file, and open it.
            </summary>
            <remarks>
            <para>
              The System.IO.Path.GetRandomFileName() method is not available on
              the Compact Framework, so this library provides its own substitute
              on NETCF.
            </para>
            <para>
              This method produces a filename of the form
              DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced by randomly
              chosen characters, and creates that file.
            </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.SharedUtilities.ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them.
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.CountingStream">
            <summary>
              A decorator stream. It wraps another stream, and performs bookkeeping
              to keep track of the stream Position.
            </summary>
            <remarks>
              <para>
                In some cases, it is not possible to get the Position of a stream, let's
                say, on a write-only output stream like ASP.NET's
                <c>Response.OutputStream</c>, or on a different write-only stream
                provided as the destination for the zip by the application.  In this
                case, programmers can use this counting stream to count the bytes read
                or written.
              </para>
              <para>
                Consider the scenario of an application that saves a self-extracting
                archive (SFX), that uses a custom SFX stub.
              </para>
              <para>
                Saving to a filesystem file, the application would open the
                filesystem file (getting a <c>FileStream</c>), save the custom sfx stub
                into it, and then call <c>ZipFile.Save()</c>, specifying the same
                FileStream. <c>ZipFile.Save()</c> does the right thing for the zipentry
                offsets, by inquiring the Position of the <c>FileStream</c> before writing
                any data, and then adding that initial offset into any ZipEntry
                offsets in the zip directory. Everything works fine.
              </para>
              <para>
                Now suppose the application is an ASPNET application and it saves
                directly to <c>Response.OutputStream</c>. It's not possible for DotNetZip to
                inquire the <c>Position</c>, so the offsets for the SFX will be wrong.
              </para>
              <para>
                The workaround is for the application to use this class to wrap
                <c>HttpResponse.OutputStream</c>, then write the SFX stub and the ZipFile
                into that wrapper stream. Because <c>ZipFile.Save()</c> can inquire the
                <c>Position</c>, it will then do the right thing with the offsets.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The constructor.
            </summary>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Adjust(System.Int64)">
             <summary>
                Adjust the byte count on the stream.
             </summary>
            
             <param name='delta'>
               the number of bytes to subtract from the count.
             </param>
            
             <remarks>
               <para>
                 Subtract delta from the count of bytes written to the stream.
                 This is necessary when seeking back, and writing additional data,
                 as happens in some cases when saving Zip files.
               </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read method.
            </summary>
            <param name="buffer">The buffer to hold the data read from the stream.</param>
            <param name="offset">the offset within the buffer to copy the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Write data into the stream.
            </summary>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Flush">
            <summary>
              Flushes the underlying stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Seek in the stream.
            </summary>
            <param name="offset">the offset point to seek to</param>
            <param name="origin">the reference point from which to seek</param>
            <returns>The new position</returns>
        </member>
        <member name="M:External.Zip.Internal.CountingStream.SetLength(System.Int64)">
             <summary>
               Set the length of the underlying stream.  Be careful with this!
             </summary>
            
             <param name='value'>the length to set on the underlying stream.</param>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.WrappedStream">
            <summary>
              Gets the wrapped stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.BytesWritten">
            <summary>
              The count of bytes written out to the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.BytesRead">
            <summary>
              the count of bytes that have been read from the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanRead">
            <summary>
              Whether the stream can be read.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanSeek">
            <summary>
              Whether it is possible to call Seek() on the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.CanWrite">
            <summary>
              Whether it is possible to call Write() on the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.Length">
            <summary>
              The length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.ComputedPosition">
            <summary>
              Returns the sum of number of bytes written, plus the initial
              offset before writing.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.CountingStream.Position">
            <summary>
              The Position of the stream.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipCrypto">
             <summary>
               This class implements the "traditional" or "classic" PKZip encryption,
               which today is considered to be weak. On the other hand it is
               ubiquitous. This class is intended for use only by the DotNetZip
               library.
             </summary>
            
             <remarks>
               Most uses of the DotNetZip library will not involve direct calls into
               the ZipCrypto class.  Instead, the ZipCrypto class is instantiated and
               used by the ZipEntry() class when encryption or decryption on an entry
               is employed.  If for some reason you really wanted to use a weak
               encryption algorithm in some other application, you might use this
               library.  But you would be much better off using one of the built-in
               strong encryption libraries in the .NET Framework, like the AES
               algorithm or SHA.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.#ctor">
             <summary>
               The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
               This class is intended for internal use by the library only. It's
               probably not useful to you. Seriously.  Stop reading this
               documentation.  It's a waste of your time.  Go do something else.
               Check the football scores. Go get an ice cream with a friend.
               Seriously.
             </remarks>
            
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
             <summary>
               Call this method on a cipher text to render the plaintext. You must
               first initialize the cipher with a call to InitCipher.
             </summary>
            
             <example>
               <code>
                 var cipher = new ZipCrypto();
                 cipher.InitCipher(Password);
                 // Decrypt the header.  This has a side effect of "further initializing the
                 // encryption keys" in the traditional zip encryption.
                 byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
               </code>
             </example>
            
             <param name="cipherText">The encrypted buffer.</param>
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to CipherText.Length.
             </param>
            
             <returns>The plaintext.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
             <summary>
               This is the converse of DecryptMessage.  It encrypts the plaintext
               and produces a ciphertext.
             </summary>
            
             <param name="plainText">The plain text buffer.</param>
            
             <param name="length">
               The number of bytes to encrypt.
               Should be less than or equal to plainText.Length.
             </param>
            
             <returns>The ciphertext.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipCrypto.InitCipher(System.String)">
             <summary>
               This initializes the cipher with the given password.
               See AppNote.txt for details.
             </summary>
            
             <param name="passphrase">
               The passphrase for encrypting or decrypting with this cipher.
             </param>
            
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
            
             Then, initialize the keys with a password:
            
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
            
             Where update_keys() is defined as:
            
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
            
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
            
             <para>
               After the keys are initialized, then you can use the cipher to
               encrypt the plaintext.
             </para>
            
             <para>
               Essentially we encrypt the password with the keys, then discard the
               ciphertext for the password. This initializes the keys for later use.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipCrypto.MagicByte">
            <summary>
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipCipherStream">
            <summary>
              A Stream for reading and concurrently decrypting data from a zip file,
              or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipCipherStream.#ctor(System.IO.Stream,External.Zip.Internal.ZipCrypto,External.Zip.Internal.CryptoMode)">
            <summary>  The constructor. </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:External.Zip.Internal.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ReadDirEntry(External.Zip.Internal.ZipFile,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
               Reads one entry from the zip directory structure in the zip file.
             </summary>
            
             <param name="zf">
               The zipfile for which a directory entry will be read.  From this param, the
               method gets the ReadStream and the expected text encoding
               (ProvisionalAlternateEncoding) which is used if the entry is not marked
               UTF-8.
             </param>
            
             <param name="previouslySeen">
               a list of previously seen entry names; used to prevent duplicates.
             </param>
            
             <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry.
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
               Sets the NTFS Creation, Access, and Modified times for the given entry.
             </summary>
            
             <remarks>
             <para>
               When adding an entry from a file or directory, the Creation, Access, and
               Modified times for the given entry are automatically set from the
               filesystem values. When adding an entry from a stream or string, the
               values are implicitly set to DateTime.Now.  The application may wish to
               set these values to some arbitrary value, before saving the archive, and
               can do so using the various setters.  If you want to set all of the times,
               this method is more efficient.
             </para>
            
             <para>
               The values you set here will be retrievable with the <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/> and <see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/> properties.
             </para>
            
             <para>
               When this method is called, if both <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> are false, then the
               <c>EmitTimesInWindowsFormatWhenSaving</c> flag is automatically set.
             </para>
            
             <para>
               DateTime values provided here without a DateTimeKind are assumed to be Local Time.
             </para>
            
             </remarks>
             <param name="created">the creation time of the entry.</param>
             <param name="accessed">the last access time of the entry.</param>
             <param name="modified">the last modified time of the entry.</param>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract">
             <summary>
               Extract the entry to the filesystem, starting at the current
               working directory.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to
               be the right one for you... If you don't like these, check
               out the <c>ExtractWithPassword()</c> methods.
             </overloads>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(External.Zip.Internal.ExtractExistingFileAction)"/>
            
             <remarks>
            
             <para>
               This method extracts an entry from a zip file into the current
               working directory.  The path of the entry as extracted is the full
               path as specified in the zip archive, relative to the current
               working directory.  After the file is extracted successfully, the
               file attributes and timestamps are set.
             </para>
            
             <para>
               The action taken when extraction an entry would overwrite an
               existing file is determined by the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property.
             </para>
            
             <para>
               Within the call to <c>Extract()</c>, the content for the entry is
               written into a filesystem file, and then the last modified time of the
               file is set according to the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property on
               the entry. See the remarks the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property for
               some details about the last modified time.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
               Extract the entry to a file in the filesystem, using the specified
               behavior when extraction would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the file is set after
               extraction.
             </para>
             </remarks>
            
             <param name="extractExistingFile">
               The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)">
             <summary>
               Extracts the entry to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see cref="T:System.IO.FileStream"/>, a <see cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory.
             </summary>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files,
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
            
             <remarks>
            
             <para>
               Using this method, existing entries in the filesystem will not be
               overwritten. If you would like to force the overwrite of existing
               files, see the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property, or call
               <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
            
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
               Extract the entry to the filesystem, using the current working directory
               and the specified password.
             </summary>
            
             <overloads>
               This method has a bunch of overloads! One of them is sure to be
               the right one for you...
             </overloads>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
            
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>property, or call
               <see cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property for some
               details about how the "last modified" time of the created file is
               set.
             </para>
             </remarks>
            
             <example>
               In this example, entries that use encryption are extracted using a
               particular password.
             <code>
             using (var zip = ZipFile.Read(FilePath))
             {
                 foreach (ZipEntry e in zip)
                 {
                     if (e.UsesEncryption)
                         e.ExtractWithPassword("Secret!");
                     else
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified password.
             </summary>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,External.Zip.Internal.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
             <para>
               Existing entries in the filesystem will not be overwritten. If you
               would like to force the overwrite of existing files, see the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>property, or call
               <see cref="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)"/>.
             </para>
            
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(External.Zip.Internal.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to a file in the filesystem, relative to the
               current directory, using the specified behavior when extraction
               would overwrite an existing file.
             </summary>
            
             <remarks>
             <para>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <param name="password">The Password to use for decrypting the entry.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.String,External.Zip.Internal.ExtractExistingFileAction,System.String)">
             <summary>
               Extract the entry to the filesystem, starting at the specified base
               directory, and using the specified behavior when extraction would
               overwrite an existing file.
             </summary>
            
             <remarks>
               See the remarks on the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property, for some
               details about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="extractExistingFile">The action to take if extraction would
             overwrite an existing file.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
             <summary>
               Extracts the entry to the specified stream, using the specified
               Password.  For example, the caller could extract to Console.Out, or
               to a MemoryStream.
             </summary>
            
             <remarks>
             <para>
               The caller can specify any write-able stream, for example a <see cref="T:System.IO.FileStream"/>, a <see cref="T:System.IO.MemoryStream"/>, or ASP.NET's
               <c>Response.OutputStream</c>.  The content will be decrypted and
               decompressed as necessary. If the entry is encrypted and no password
               is provided, this method will throw.
             </para>
             <para>
               The position on the stream is not reset by this method before it extracts.
               You may want to call stream.Seek() before calling ZipEntry.Extract().
             </para>
             </remarks>
            
            
             <param name="stream">
               the stream to which the entry should be extracted.
             </param>
             <param name="password">
               The password to use for decrypting the entry.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.OpenReader">
             <summary>
               Opens a readable stream corresponding to the zip entry in the
               archive.  The stream decompresses and decrypts as necessary, as it
               is read.
             </summary>
            
             <remarks>
            
             <para>
               DotNetZip offers a variety of ways to extract entries from a zip
               file.  This method allows an application to extract an entry by
               reading a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               The return value is of type <see cref="T:External.Zip.Internal.Crc.CrcCalculatorStream"/>.  Use it as you would any
               stream for reading.  When an application calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream, it will
               receive data from the zip entry that is decrypted and decompressed
               as necessary.
             </para>
            
             <para>
               <c>CrcCalculatorStream</c> adds one additional feature: it keeps a
               CRC32 checksum on the bytes of the stream as it is read.  The CRC
               value is available in the <see cref="P:External.Zip.Internal.Crc.CrcCalculatorStream.Crc"/> property on the
               <c>CrcCalculatorStream</c>.  When the read is complete, your
               application
               <em>should</em> check this CRC against the <see cref="P:External.Zip.Internal.ZipEntry.Crc"/>
               property on the <c>ZipEntry</c> to validate the content of the
               ZipEntry. You don't have to validate the entry using the CRC, but
               you should, to verify integrity. Check the example for how to do
               this.
             </para>
            
             <para>
               If the entry is protected with a password, then you need to provide
               a password prior to calling <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/>, either by
               setting the <see cref="P:External.Zip.Internal.ZipEntry.Password"/> property on the entry, or the
               <see cref="P:External.Zip.Internal.ZipFile.Password"/> property on the <c>ZipFile</c>
               itself. Or, you can use <see cref="M:External.Zip.Internal.ZipEntry.OpenReader(System.String)"/>, the
               overload of OpenReader that accepts a password parameter.
             </para>
            
             <para>
               If you want to extract entry data into a write-able stream that is
               already opened, like a <see cref="T:System.IO.FileStream"/>, do not
               use this method. Instead, use <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)"/>.
             </para>
            
             <para>
               Your application may use only one stream created by OpenReader() at
               a time, and you should not call other Extract methods before
               completing your reads on a stream obtained from OpenReader().  This
               is because there is really only one source stream for the compressed
               content.  A call to OpenReader() seeks in the source stream, to the
               beginning of the compressed content.  A subsequent call to
               OpenReader() on a different entry will seek to a different position
               in the source stream, as will a call to Extract() or one of its
               overloads.  This will corrupt the state for the decompressing stream
               from the original call to OpenReader().
             </para>
            
             <para>
                The <c>OpenReader()</c> method works only when the ZipEntry is
                obtained from an instance of <c>ZipFile</c>. This method will throw
                an exception if the ZipEntry is obtained from a <see cref="T:External.Zip.Internal.ZipInputStream"/>.
             </para>
             </remarks>
            
             <example>
               This example shows how to open a zip archive, then read in a named
               entry via a stream. After the read loop is complete, the code
               compares the calculated during the read loop with the expected CRC
               on the <c>ZipEntry</c>, to verify the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n;
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.OpenReader(System.String)">
             <summary>
               Opens a readable stream for an encrypted zip entry in the archive.
               The stream decompresses and decrypts as necessary, as it is read.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/> method for
               full details. This overload allows the application to specify a
               password for the <c>ZipEntry</c> to be read.
             </para>
             </remarks>
            
             <param name="password">The password to use for decrypting the entry.</param>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ValidateOutput(System.String,System.IO.Stream,System.String@)">
            <summary>
            Validates that the args are consistent.
            </summary>
            <remarks>
            Only one of {baseDir, outStream} can be non-null.
            If baseDir is non-null, then the outputFile is created.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ReadEntry(External.Zip.Internal.ZipContainer,System.Boolean)">
            <summary>
              Reads one <c>ZipEntry</c> from the given stream.  The content for
              the entry does not get decompressed or decrypted.  This method
              basically reads metadata, and seeks.
            </summary>
            <param name="zc">the ZipContainer this entry belongs to.</param>
            <param name="first">
              true of this is the first entry being read from the stream.
            </param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.FindExtraFieldSegment(System.Byte[],System.Int32,System.UInt16)">
            <summary>
              Finds a particular segment in the given extra field.
              This is used when modifying a previously-generated
              extra field, in particular when removing the AES crypto
              segment in the extra field.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.ProcessExtraField(System.IO.Stream,System.Int16)">
            <summary>
              At current cursor position in the stream, read the extra
              field, and set the properties on the ZipEntry instance
              appropriately.  This can be called when processing the
              Extra field in the Central Directory, or in the local
              header.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.GetEncodedFileNameBytes">
            <summary>
              generate and return a byte array that encodes the filename
              for the entry.
            </summary>
            <remarks>
              <para>
                side effects: generate and store into _CommentBytes the
                byte array for any comment attached to the entry. Also
                sets _actualEncoding to indicate the actual encoding
                used. The same encoding is used for both filename and
                comment.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.PrepSourceStream">
             <summary>
               Stores the position of the entry source stream, or, if the position is
               already stored, seeks to that position.
             </summary>
            
             <remarks>
             <para>
               This method is called in prep for reading the source stream.  If PKZIP
               encryption is used, then we need to calc the CRC32 before doing the
               encryption, because the CRC is used in the 12th byte of the PKZIP
               encryption header.  So, we need to be able to seek backward in the source
               when saving the ZipEntry. This method is called from the place that
               calculates the CRC, and also from the method that does the encryption of
               the file data.
             </para>
            
             <para>
               The first time through, this method sets the _sourceStreamOriginalPosition
               field. Subsequent calls to this method seek to that position.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.CopyMetaData(External.Zip.Internal.ZipEntry)">
            <summary>
            Copy metadata that may have been changed by the app.  We do this when
            resetting the zipFile instance.  If the app calls Save() on a ZipFile, then
            tries to party on that file some more, we may need to Reset() it , which
            means re-reading the entries and then copying the metadata.  I think.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.SetInputAndFigureFileLength(System.IO.Stream@)">
            <summary>
              Set the input stream and get its length, if possible.  The length is
              used for progress updates, AND, to allow an optimization in case of
              a stream/file of zero length. In that case we skip the Encrypt and
              compression Stream. (like DeflateStream or BZip2OutputStream)
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipEntry.PrepOutputStream(System.IO.Stream,System.Int64,External.Zip.Internal.CountingStream@,System.IO.Stream@,System.IO.Stream@,External.Zip.Internal.Crc.CrcCalculatorStream@)">
            <summary>
              Prepare the given stream for output - wrap it in a CountingStream, and
              then in a CRC stream, and an encryptor and deflator as appropriate.
            </summary>
            <remarks>
              <para>
                Previously this was used in ZipEntry.Write(), but in an effort to
                introduce some efficiencies in that method I've refactored to put the
                code inline.  This method still gets called by ZipOutputStream.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Info">
            <summary>
            Provides a human-readable string with information about the ZipEntry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.LastModified">
             <summary>
               The time and date at which the file indicated by the <c>ZipEntry</c> was
               last modified.
             </summary>
            
             <remarks>
             <para>
               The DotNetZip library sets the LastModified value for an entry, equal to
               the Last Modified time of the file in the filesystem.  If an entry is
               added from a stream, the library uses <c>System.DateTime.Now</c> for this
               value, for the given entry.
             </para>
            
             <para>
               This property allows the application to retrieve and possibly set the
               LastModified value on an entry, to an arbitrary value.  <see cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind"/>
               setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
               <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
               Be aware that because of the way <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               Zip specification</see> describes how times are stored in the zip file,
               the full precision of the <c>System.DateTime</c> datatype is not stored
               for the last modified time when saving zip files.  For more information on
               how times are formatted, see the PKZip specification.
             </para>
            
             <para>
               The actual last modified time of a file can be stored in multiple ways in
               the zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               Zip tools and libraries will always at least handle (read or write) the
               DOS time, and may also handle the other time formats.  Keep in mind that
               while the names refer to particular operating systems, there is nothing in
               the time formats themselves that prevents their use on other operating
               systems.
             </para>
            
             <para>
               When reading ZIP files, the DotNetZip library reads the Windows-formatted
               time, if it is stored in the entry, and sets both <c>LastModified</c> and
               <c>ModifiedTime</c> to that value. When writing ZIP files, the DotNetZip
               library by default will write both time quantities. It can also emit the
               Unix-formatted time if desired (See <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>.)
             </para>
            
             <para>
               The last modified time of the file created upon a call to
               <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
               for differences in how the .NET Base Class Library deals with daylight
               saving time (DST) versus how the Windows filesystem deals with daylight
               saving time.  Raymond Chen <see href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
               some good context</see>.
             </para>
            
             <para>
               In a nutshell: Daylight savings time rules change regularly.  In 2007, for
               example, the inception week of DST changed.  In 1977, DST was in place all
               year round. In 1945, likewise.  And so on.  Win32 does not attempt to
               guess which time zone rules were in effect at the time in question.  It
               will render a time as "standard time" and allow the app to change to DST
               as necessary.  .NET makes a different choice.
             </para>
            
             <para>
               Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
               see in the Windows Explorer property sheet for a file that was last
               written to on the other side of the DST transition. For example, suppose
               the file was last modified on October 17, 2003, during DST but DST is not
               currently in effect. Explorer's file properties reports Thursday, October
               17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
               2003, 9:45 AM.
             </para>
            
             <para>
               Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
               STANDARD Time. Even though October 17 of that year occurred during Pacific
               Daylight Time, Win32 displays the time as standard time because that's
               what time it is NOW.
             </para>
            
             <para>
               .NET BCL assumes that the current DST rules were in place at the time in
               question.  So, .NET says, "Well, if the rules in effect now were also in
               effect on October 17, 2003, then that would be daylight time" so it
               displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
            
             <para>
               So .NET gives a value which is more intuitively correct, but is also
               potentially incorrect, and which is not invertible. Win32 gives a value
               which is intuitively incorrect, but is strictly correct.
             </para>
            
             <para>
               Because of this funkiness, this library adds one hour to the LastModified
               time on the extracted file, if necessary.  That is to say, if the time in
               question had occurred in what the .NET Base Class Library assumed to be
               DST. This assumption may be wrong given the constantly changing DST rules,
               but it is the best we can do.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para>
               This value corresponds to the "last modified" time in the NTFS file times
               as described in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>.  When getting this property, the value may be
               different from <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/>.  When setting the property,
               the <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/> property also gets set, but with a lower
               precision.
             </para>
            
             <para>
               Let me explain. It's going to take a while, so get
               comfortable. Originally, waaaaay back in 1989 when the ZIP specification
               was originally described by the esteemed Mr. Phil Katz, the dominant
               operating system of the time was MS-DOS. MSDOS stored file times with a
               2-second precision, because, c'mon, <em>who is ever going to need better
               resolution than THAT?</em> And so ZIP files, regardless of the platform on
               which the zip file was created, store file times in exactly <see href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used
               in 1989</see>.
             </para>
            
             <para>
               Since then, the ZIP spec has evolved, but the internal format for file
               timestamps remains the same.  Despite the fact that the way times are
               stored in a zip file is rooted in DOS heritage, any program on any
               operating system can format a time in this way, and most zip tools and
               libraries DO - they round file times to the nearest even second and store
               it just like DOS did 25+ years ago.
             </para>
            
             <para>
               PKWare extended the ZIP specification to allow a zip file to store what
               are called "NTFS Times" and "Unix(tm) times" for a file.  These are the
               <em>last write</em>, <em>last access</em>, and <em>file creation</em>
               times of a particular file. These metadata are not actually specific
               to NTFS or Unix. They are tracked for each file by NTFS and by various
               Unix filesystems, but they are also tracked by other filesystems, too.
               The key point is that the times are <em>formatted in the zip file</em>
               in the same way that NTFS formats the time (ticks since win32 epoch),
               or in the same way that Unix formats the time (seconds since Unix
               epoch). As with the DOS time, any tool or library running on any
               operating system is capable of formatting a time in one of these ways
               and embedding it into the zip file.
             </para>
            
             <para>
               These extended times are higher precision quantities than the DOS time.
               As described above, the (DOS) LastModified has a precision of 2 seconds.
               The Unix time is stored with a precision of 1 second. The NTFS time is
               stored with a precision of 0.0000001 seconds. The quantities are easily
               convertible, except for the loss of precision you may incur.
             </para>
            
             <para>
               A zip archive can store the {C,A,M} times in NTFS format, in Unix format,
               or not at all.  Often a tool running on Unix or Mac will embed the times
               in Unix format (1 second precision), while WinZip running on Windows might
               embed the times in NTFS format (precision of of 0.0000001 seconds).  When
               reading a zip file with these "extended" times, in either format,
               DotNetZip represents the values with the
               <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c>
               properties on the <c>ZipEntry</c>.
             </para>
            
             <para>
               While any zip application or library, regardless of the platform it
               runs on, could use any of the time formats allowed by the ZIP
               specification, not all zip tools or libraries do support all these
               formats.  Storing the higher-precision times for each entry is
               optional for zip files, and many tools and libraries don't use the
               higher precision quantities at all. The old DOS time, represented by
               <see cref="P:External.Zip.Internal.ZipEntry.LastModified"/>, is guaranteed to be present, though it
               sometimes unset.
             </para>
            
             <para>
               Ok, getting back to the question about how the <c>LastModified</c>
               property relates to this <c>ModifiedTime</c>
               property... <c>LastModified</c> is always set, while
               <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS
               times extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also
               may not be set on an entry that is read from an existing zip file.)
               When reading a zip file, then <c>LastModified</c> takes the DOS time
               that is stored with the file. If the DOS time has been stored as zero
               in the zipfile, then this library will use <c>DateTime.Now</c> for the
               <c>LastModified</c> value.  If the ZIP file was created by an evolved
               tool, then there will also be higher precision NTFS or Unix times in
               the zip file.  In that case, this library will read those times, and
               set <c>LastModified</c> and <c>ModifiedTime</c> to the same value, the
               one corresponding to the last write time of the file.  If there are no
               higher precision times stored for the entry, then <c>ModifiedTime</c>
               remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>),
               and <c>LastModified</c> keeps its DOS time.
             </para>
            
             <para>
               When creating zip files with this library, by default the extended time
               properties (<c>ModifiedTime</c>, <c>AccessedTime</c>, and
               <c>CreationTime</c>) are set on the ZipEntry instance, and these data are
               stored in the zip archive for each entry, in NTFS format. If you add an
               entry from an actual filesystem file, then the entry gets the actual file
               times for that file, to NTFS-level precision.  If you add an entry from a
               stream, or a string, then the times get the value <c>DateTime.Now</c>.  In
               this case <c>LastModified</c> and <c>ModifiedTime</c> will be identical,
               to 2 seconds of precision.  You can explicitly set the
               <c>CreationTime</c>, <c>AccessedTime</c>, and <c>ModifiedTime</c> of an
               entry using the property setters.  If you want to set all of those
               quantities, it's more efficient to use the <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/> method.  Those
               changes are not made permanent in the zip file until you call <see cref="M:External.Zip.Internal.ZipFile.Save"/> or one of its cousins.
             </para>
            
             <para>
               When creating a zip file, you can override the default behavior of
               this library for formatting times in the zip file, disabling the
               embedding of file times in NTFS format or enabling the storage of file
               times in Unix format, or both.  You may want to do this, for example,
               when creating a zip file on Windows, that will be consumed on a Mac,
               by an application that is not hip to the "NTFS times" format. To do
               this, use the <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> and
               <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> properties.  A valid zip
               file may store the file times in both formats.  But, there are no
               guarantees that a program running on Mac or Linux will gracefully
               handle the NTFS-formatted times when Unix times are present, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. DotNetZip will always do something
               reasonable; other libraries or tools may not. When in doubt, test.
             </para>
            
             <para>
               I'll bet you didn't think one person could type so much about time, eh?
               And reading it was so enjoyable, too!  Well, in appreciation, <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">maybe you
               should donate</see>?
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.LastModified"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
            <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
            <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Windows format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Windows. The default value of
               this property is <c>true</c>.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all zip tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving">ZipFile.EmitTimesInWindowsFormatWhenSaving</see>
               property, to specify the behavior for all entries in a zip, rather than
               the property on each individual entry.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for the given
               entry will be emitted in "Unix(tm) format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entry should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified
               (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are automatically
               set from the filesystem values. When adding an entry from a stream or
               string, all three values are implicitly set to DateTime.Now.  Applications
               can also explicitly set those times by calling <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since Jan 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Although the time values are
               easily convertible, subject to a loss of precision, some tools and
               libraries may be able to read only one or the other. DotNetZip can read or
               write times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive from the <see cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> property.  It is
               possible that a zip entry can embed the timestamps in both forms, one
               form, or neither.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle NTFS Formatted times, or that a
               non-DotNetZip-powered application running on Windows will be able to
               handle file times in Unix format. When in doubt, test.
             </para>
            
             <para>
               Normally you will use the <see cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving">ZipFile.EmitTimesInUnixFormatWhenSaving</see>
               property, to specify the behavior for all entries, rather than the
               property on each individual entry.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Attributes">
             <summary>
               The file attributes for the entry.
             </summary>
            
             <remarks>
            
             <para>
               The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
               ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
               <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
               adding an entry from the filesystem.  When adding an entry from a stream
               or string, the Attributes are not set implicitly.  Regardless of the way
               an entry was added to a <c>ZipFile</c>, you can set the attributes
               explicitly if you like.
             </para>
            
             <para>
               When reading a <c>ZipEntry</c> from a <c>ZipFile</c>, the attributes are
               set according to the data stored in the <c>ZipFile</c>. If you extract the
               entry from the archive to a filesystem file, DotNetZip will set the
               attributes on the resulting file accordingly.
             </para>
            
             <para>
               The attributes can be set explicitly by the application.  For example the
               application may wish to set the <c>FileAttributes.ReadOnly</c> bit for all
               entries added to an archive, so that on unpack, this attribute will be set
               on the extracted file.  Any changes you make to this property are made
               permanent only when you call a <c>Save()</c> method on the <c>ZipFile</c>
               instance that contains the ZipEntry.
             </para>
            
             <para>
               For example, an application may wish to zip up a directory and set the
               ReadOnly bit on every file in the archive, so that upon later extraction,
               the resulting files will be marked as ReadOnly.  Not every extraction tool
               respects these attributes, but if you unpack with DotNetZip, as for
               example in a self-extracting archive, then the attributes will be set as
               they are stored in the <c>ZipFile</c>.
             </para>
            
             <para>
               These attributes may not be interesting or useful if the resulting archive
               is extracted on a non-Windows platform.  How these attributes get used
               upon extraction depends on the platform and tool used.
             </para>
            
             <para>
               This property is only partially supported in the Silverlight version
               of the library: applications can read attributes on entries within
               ZipFiles. But extracting entries within Silverlight will not set the
               attributes on the extracted files.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.LocalFileName">
             <summary>
               The name of the filesystem file, referred to by the ZipEntry.
             </summary>
            
             <remarks>
              <para>
                This property specifies the thing-to-be-zipped on disk, and is set only
                when the <c>ZipEntry</c> is being created from a filesystem file.  If the
                <c>ZipFile</c> is instantiated by reading an existing .zip archive, then
                the LocalFileName will be <c>null</c> (<c>Nothing</c> in VB).
              </para>
            
              <para>
                When it is set, the value of this property may be different than <see cref="P:External.Zip.Internal.ZipEntry.FileName"/>, which is the path used in the archive itself.  If you
                call <c>Zip.AddFile("foop.txt", AlternativeDirectory)</c>, then the path
                used for the <c>ZipEntry</c> within the zip archive will be different
                than this path.
              </para>
            
              <para>
               If the entry is being added from a stream, then this is null (Nothing in VB).
              </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.FileName"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.FileName">
             <summary>
               The name of the file contained in the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               This is the name of the entry in the <c>ZipFile</c> itself.  When creating
               a zip archive, if the <c>ZipEntry</c> has been created from a filesystem
               file, via a call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/> or <see cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>, or a related overload, the value
               of this property is derived from the name of that file. The
               <c>FileName</c> property does not include drive letters, and may include a
               different directory path, depending on the value of the
               <c>directoryPathInArchive</c> parameter used when adding the entry into
               the <c>ZipFile</c>.
             </para>
            
             <para>
               In some cases there is no related filesystem file - for example when a
               <c>ZipEntry</c> is created using <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)"/> or one of the similar overloads.  In this case, the value of
               this property is derived from the fileName and the directory path passed
               to that method.
             </para>
            
             <para>
               When reading a zip file, this property takes the value of the entry name
               as stored in the zip file. If you extract such an entry, the extracted
               file will take the name given by this property.
             </para>
            
             <para>
               Applications can set this property when creating new zip archives or when
               reading existing archives. When setting this property, the actual value
               that is set will replace backslashes with forward slashes, in accordance
               with <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, for compatibility with Unix(tm) and ... get
               this.... Amiga!
             </para>
            
             <para>
               If an application reads a <c>ZipFile</c> via <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> or a related overload, and then explicitly
               sets the FileName on an entry contained within the <c>ZipFile</c>, and
               then calls <see cref="M:External.Zip.Internal.ZipFile.Save"/>, the application will effectively
               rename the entry within the zip archive.
             </para>
            
             <para>
               If an application sets the value of <c>FileName</c>, then calls
               <c>Extract()</c> on the entry, the entry is extracted to a file using the
               newly set value as the filename.  The <c>FileName</c> value is made
               permanent in the zip archive only <em>after</em> a call to one of the
               <c>ZipFile.Save()</c> methods on the <c>ZipFile</c> that contains the
               ZipEntry.
             </para>
            
             <para>
               If an application attempts to set the <c>FileName</c> to a value that
               would result in a duplicate entry in the <c>ZipFile</c>, an exception is
               thrown.
             </para>
            
             <para>
               When a <c>ZipEntry</c> is contained within a <c>ZipFile</c>, applications
               cannot rename the entry within the context of a <c>foreach</c> (<c>For
               Each</c> in VB) loop, because of the way the <c>ZipFile</c> stores
               entries.  If you need to enumerate through all the entries and rename one
               or more of them, use <see cref="P:External.Zip.Internal.ZipFile.EntriesSorted">ZipFile.EntriesSorted</see> as the
               collection.  See also, <see cref="M:External.Zip.Internal.ZipFile.GetEnumerator">ZipFile.GetEnumerator()</see>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.InputStream">
             <summary>
             The stream that provides content for the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The application can use this property to set the input stream for an
               entry on a just-in-time basis. Imagine a scenario where the application
               creates a <c>ZipFile</c> comprised of content obtained from hundreds of
               files, via calls to <c>AddFile()</c>. The DotNetZip library opens streams
               on these files on a just-in-time basis, only when writing the entry out to
               an external store within the scope of a <c>ZipFile.Save()</c> call.  Only
               one input stream is opened at a time, as each entry is being written out.
             </para>
            
             <para>
               Now imagine a different application that creates a <c>ZipFile</c>
               with content obtained from hundreds of streams, added through <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>.  Normally the
               application would supply an open stream to that call.  But when large
               numbers of streams are being added, this can mean many open streams at one
               time, unnecessarily.
             </para>
            
             <para>
               To avoid this, call <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/> and specify delegates that open and close the stream at
               the time of Save.
             </para>
            
            
             <para>
               Setting the value of this property when the entry was not added from a
               stream (for example, when the <c>ZipEntry</c> was added with <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/> or <see cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>, or when the entry was added by
               reading an existing zip archive) will throw an exception.
             </para>
            
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.InputStreamWasJitProvided">
             <summary>
               A flag indicating whether the InputStream was provided Just-in-time.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip archive, an application can obtain content for one or
               more of the <c>ZipEntry</c> instances from streams, using the <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/> method.  At the time
               of calling that method, the application can supply null as the value of
               the stream parameter.  By doing so, the application indicates to the
               library that it will provide a stream for the entry on a just-in-time
               basis, at the time one of the <c>ZipFile.Save()</c> methods is called and
               the data for the various entries are being compressed and written out.
             </para>
            
             <para>
               In this case, the application can set the <see cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
               property, typically within the SaveProgress event (event type: <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry"/>) for that entry.
             </para>
            
             <para>
               The application will later want to call Close() and Dispose() on that
               stream.  In the SaveProgress event, when the event type is <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry"/>, the application can
               do so.  This flag indicates that the stream has been provided by the
               application on a just-in-time basis and that it is the application's
               responsibility to call Close/Dispose on that stream.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property, indicating the version of <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> that the extracting tool or library must support to
               extract the given entry.  Generally higher versions indicate newer
               features.  Older zip engines obviously won't know about new features, and
               won't be able to extract entries that depend on those newer features.
             </para>
            
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
            
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption.
             </description>
             </item>
            
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
            
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
               There are other values possible, not listed here. DotNetZip supports
               regular PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract
               entries that require a zip engine higher than 45.
             </para>
            
             <para>
               This value is set upon reading an existing zip file, or after saving a zip
               archive.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               Each entry in a zip file can optionally have a comment associated to
               it. The comment might be displayed by a zip tool during extraction, for
               example.
             </para>
            
             <para>
               By default, the <c>Comment</c> is encoded in IBM437 code page. You can
               specify an alternative with <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncoding"/> and
              <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/>.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AlternateEncoding"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.RequiresZip64">
             <summary>
             Indicates whether the entry requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is null (Nothing in VB) until a <c>Save()</c> method on the
               containing <see cref="T:External.Zip.Internal.ZipFile"/> instance has been called. The property is
               non-null (<c>HasValue</c> is true) only after a <c>Save()</c> method has
               been called.
             </para>
            
             <para>
               After the containing <c>ZipFile</c> has been saved, the Value of this
               property is true if any of the following three conditions holds: the
               uncompressed size of the entry is larger than 0xFFFFFFFF; the compressed
               size of the entry is larger than 0xFFFFFFFF; the relative offset of the
               entry within the zip archive is larger than 0xFFFFFFFF.  These quantities
               are not known until a <c>Save()</c> is attempted on the zip archive and
               the compression is applied.
             </para>
            
             <para>
               If none of the three conditions holds, then the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the entry, as saved in the
               zip archive, does not use ZIP64.  It merely indicates that ZIP64 is
               <em>not required</em>.  An entry may use ZIP64 even when not required if
               the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:External.Zip.Internal.Zip64Option.Always"/>, or if
               the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property on the containing
               <c>ZipFile</c> instance is set to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/>
               and the output stream was not seekable.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.OutputUsedZip64">
             <summary>
               Indicates whether the entry actually used ZIP64 extensions, as it was most
               recently written to the output file or stream.
             </summary>
            
             <remarks>
            
             <para>
               This Nullable property is null (Nothing in VB) until a <c>Save()</c>
               method on the containing <see cref="T:External.Zip.Internal.ZipFile"/> instance has been
               called. <c>HasValue</c> is true only after a <c>Save()</c> method has been
               called.
             </para>
            
             <para>
               The value of this property for a particular <c>ZipEntry</c> may change
               over successive calls to <c>Save()</c> methods on the containing ZipFile,
               even if the file that corresponds to the <c>ZipEntry</c> does not. This
               may happen if other entries contained in the <c>ZipFile</c> expand,
               causing the offset for this particular entry to exceed 0xFFFFFFFF.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.BitField">
             <summary>
               The bitfield for the entry as defined in the zip spec. You probably
               never need to look at this.
             </summary>
            
             <remarks>
             <para>
               You probably do not need to concern yourself with the contents of this
               property, but in case you do:
             </para>
            
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
            
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
            
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
            
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
            
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
            
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
            
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
            
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
            
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
            
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
            
             <item>
             <term>13</term>
             <description>
               Used when encrypting the Central Directory to indicate selected data
               values in the Local Header are masked to hide their actual values.  See
               the section in <a
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</a> describing the Strong Encryption Specification for
               details.
             </description>
             </item>
            
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionMethod">
             <summary>
               The compression method employed for this ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               Zip specification</see> allows a variety of compression methods.  This
               library supports just two: 0x08 = Deflate.  0x00 = Store (no compression),
               for reading or writing.
             </para>
            
             <para>
               When reading an entry from an existing zipfile, the value you retrieve
               here indicates the compression method used on the entry by the original
               creator of the zip.  When writing a zipfile, you can specify either 0x08
               (Deflate) or 0x00 (None).  If you try setting something else, you will get
               an exception.
             </para>
            
             <para>
               You may wish to set <c>CompressionMethod</c> to <c>CompressionMethod.None</c> (0)
               when zipping already-compressed data like a jpg, png, or mp3 file.
               This can save time and cpu cycles.
             </para>
            
             <para>
               When setting this property on a <c>ZipEntry</c> that is read from an
               existing zip file, calling <c>ZipFile.Save()</c> will cause the new
               CompressionMethod to be used on the entry in the newly saved zip file.
             </para>
            
             <para>
               Setting this property may have the side effect of modifying the
               <c>CompressionLevel</c> property. If you set the <c>CompressionMethod</c> to a
               value other than <c>None</c>, and <c>CompressionLevel</c> is previously
               set to <c>None</c>, then <c>CompressionLevel</c> will be set to
               <c>Default</c>.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressionMethod"/>
            
             <example>
               In this example, the first entry added to the zip archive uses the default
               behavior - compression is used where it makes sense.  The second entry,
               the MP3 file, is added to the archive without being compressed.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = CompressionMethod.None;
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = CompressionMethod.None
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionLevel">
             <summary>
               Sets the compression level to be used for the entry when saving the zip
               archive. This applies only for CompressionMethod = DEFLATE.
             </summary>
            
             <remarks>
              <para>
                When using the DEFLATE compression method, Varying the compression
                level used on entries can affect the size-vs-speed tradeoff when
                compression and decompressing data streams or files.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
            
              <para>
                When setting this property on a <c>ZipEntry</c> that is read from an
                existing zip file, calling <c>ZipFile.Save()</c> will cause the new
                <c>CompressionLevel</c> to be used on the entry in the newly saved zip file.
              </para>
            
              <para>
                Setting this property may have the side effect of modifying the
                <c>CompressionMethod</c> property. If you set the <c>CompressionLevel</c>
                to a value other than <c>None</c>, <c>CompressionMethod</c> will be set
                to <c>Deflate</c>, if it was previously <c>None</c>.
              </para>
            
              <para>
                Setting this property has no effect if the <c>CompressionMethod</c> is something
                other than <c>Deflate</c> or <c>None</c>.
              </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressedSize">
             <summary>
               The compressed size of the file, in bytes, within the zip archive.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the compressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UncompressedSize">
             <summary>
               The size of the file, in bytes, before compression, or after extraction.
             </summary>
            
             <remarks>
               When reading a <c>ZipFile</c>, this value is read in from the existing
               zip file. When creating or updating a <c>ZipFile</c>, the uncompressed
               size is computed during compression.  Therefore the value on a
               <c>ZipEntry</c> is valid after a call to <c>Save()</c> (or one of its
               overloads) in that case.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
            
             <remarks>
             <para>
               This is a ratio of the compressed size to the uncompressed size of the
               entry, expressed as a double in the range of 0 to 100+. A value of 100
               indicates no compression at all.  It could be higher than 100 when the
               compression algorithm actually inflates the data, as may occur for small
               files, or uncompressible data that is encrypted.
             </para>
            
             <para>
               You could format it for presentation to a user via a format string of
               "{3,5:F0}%" to see it as a percentage.
             </para>
            
             <para>
               If the size of the original uncompressed file is 0, implying a
               denominator of 0, the return value will be zero.
             </para>
            
             <para>
               This property is valid after reading in an existing zip file, or after
               saving the <c>ZipFile</c> that contains the ZipEntry. You cannot know the
               effect of a compression transform until you try it.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             <c>Save()</c> on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file).
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.
             </summary>
            
             <remarks>
             <para>
               This is a readonly property on the entry.  When reading a zip file,
               the value for the <c>ZipEntry</c> is determined by the data read
               from the zip file.  After saving a ZipFile, the value of this
               property for each <c>ZipEntry</c> indicates whether encryption was
               actually used (which will have been true if the <see cref="P:External.Zip.Internal.ZipEntry.Password"/> was set and the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property
               was something other than <see cref="F:External.Zip.Internal.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Encryption">
             <summary>
               Set this to specify which encryption algorithm to use for the entry when
               saving it to a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Set this property in order to encrypt the entry when the <c>ZipFile</c> is
               saved. When setting this property, you must also set a <see cref="P:External.Zip.Internal.ZipEntry.Password"/> on the entry.  If you set a value other than <see cref="F:External.Zip.Internal.EncryptionAlgorithm.None"/> on this property and do not set a
               <c>Password</c> then the entry will not be encrypted. The <c>ZipEntry</c>
               data is encrypted as the <c>ZipFile</c> is saved, when you call <see cref="M:External.Zip.Internal.ZipFile.Save"/> or one of its cousins on the containing
               <c>ZipFile</c> instance. You do not need to specify the <c>Encryption</c>
               when extracting entries from an archive.
             </para>
            
             <para>
               The Zip specification from PKWare defines a set of encryption algorithms,
               and the data formats for the zip archive that support them, and PKWare
               supports those algorithms in the tools it produces. Other vendors of tools
               and libraries, such as WinZip or Xceed, typically support <em>a
               subset</em> of the algorithms specified by PKWare. These tools can
               sometimes support additional different encryption algorithms and data
               formats, not specified by PKWare. The AES Encryption specified and
               supported by WinZip is the most popular example. This library supports a
               subset of the complete set of algorithms specified by PKWare and other
               vendors.
             </para>
            
             <para>
               There is no common, ubiquitous multi-vendor standard for strong encryption
               within zip files. There is broad support for so-called "traditional" Zip
               encryption, sometimes called Zip 2.0 encryption, as <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
               by PKWare</see>, but this encryption is considered weak and
               breakable. This library currently supports the Zip 2.0 "weak" encryption,
               and also a stronger WinZip-compatible AES encryption, using either 128-bit
               or 256-bit key strength. If you want DotNetZip to support an algorithm
               that is not currently supported, call the author of this library and maybe
               we can talk business.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class also has a <see cref="P:External.Zip.Internal.ZipFile.Encryption"/> property.  In most cases you will use
               <em>that</em> property when setting encryption. This property takes
               precedence over any <c>Encryption</c> set on the <c>ZipFile</c> itself.
               Typically, you would use the per-entry Encryption when most entries in the
               zip archive use one encryption algorithm, and a few entries use a
               different one.  If all entries in the zip file use the same Encryption,
               then it is simpler to just set this property on the ZipFile itself, when
               creating a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you can
               modify the Encryption on an encrypted entry: you can remove encryption
               from an entry that was encrypted; you can encrypt an entry that was not
               encrypted previously; or, you can change the encryption algorithm.  The
               changes in encryption are not made permanent until you call Save() on the
               <c>ZipFile</c>.  To effect changes in encryption, the entry content is
               streamed through several transformations, depending on the modification
               the application has requested. For example if the entry is not encrypted
               and the application sets <c>Encryption</c> to <c>PkzipWeak</c>, then at
               the time of <c>Save()</c>, the original entry is read and decompressed,
               then re-compressed and encrypted.  Conversely, if the original entry is
               encrypted with <c>PkzipWeak</c> encryption, and the application sets the
               <c>Encryption</c> property to <c>WinZipAes128</c>, then at the time of
               <c>Save()</c>, the original entry is decrypted via PKZIP encryption and
               decompressed, then re-compressed and re-encrypted with AES.  This all
               happens automatically within the library, but it can be time-consuming for
               large entries.
             </para>
            
             <para>
               Additionally, when updating archives, it is not possible to change the
               password when changing the encryption algorithm.  To change both the
               algorithm and the password, you need to Save() the zipfile twice.  First
               set the <c>Encryption</c> to None, then call <c>Save()</c>.  Then set the
               <c>Encryption</c> to the new value (not "None"), then call <c>Save()</c>
               once again.
             </para>
            
             <para>
               The WinZip AES encryption algorithms are not supported on the .NET Compact
               Framework.
             </para>
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other file
               uses encryption.
             </para>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown in the setter if EncryptionAlgorithm.Unsupported is specified.
             </exception>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.Password">ZipEntry.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipFile.Encryption">ZipFile.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.Password">
             <summary>
             The Password to be used when encrypting a <c>ZipEntry</c> upon
             <c>ZipFile.Save()</c>, or when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
               This is a write-only property on the entry. Set this to request that the
               entry be encrypted when writing the zip archive, or set it to specify the
               password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
               The password set here is implicitly used to encrypt the entry during the
               <see cref="M:External.Zip.Internal.ZipFile.Save"/> operation, or to decrypt during the <see cref="M:External.Zip.Internal.ZipEntry.Extract"/> or <see cref="M:External.Zip.Internal.ZipEntry.OpenReader"/> operation.  If you set
               the Password on a <c>ZipEntry</c> after calling <c>Save()</c>, there is no
               effect.
             </para>
            
             <para>
               Consider setting the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property when using a
               password. Answering concerns that the standard password protection
               supported by all zip tools is weak, WinZip has extended the ZIP
               specification with a way to use AES Encryption to protect entries in the
               Zip file. Unlike the "PKZIP 2.0" encryption specified in the PKZIP
               specification, <see href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES
               Encryption</see> uses a standard, strong, tested, encryption
               algorithm. DotNetZip can create zip archives that use WinZip-compatible
               AES encryption, if you set the <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/> property. But,
               archives created that use AES encryption may not be readable by all other
               tools and libraries. For example, Windows Explorer cannot read a
               "compressed folder" (a zip file) that uses AES encryption, though it can
               read a zip file that uses "PKZIP encryption."
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class also has a <see cref="P:External.Zip.Internal.ZipFile.Password"/>
               property.  This property takes precedence over any password set on the
               ZipFile itself.  Typically, you would use the per-entry Password when most
               entries in the zip archive use one password, and a few entries use a
               different password.  If all entries in the zip file use the same password,
               then it is simpler to just set this property on the ZipFile itself,
               whether creating a zip archive or extracting a zip archive.
             </para>
            
             <para>
               Some comments on updating archives: If you read a <c>ZipFile</c>, you
               cannot modify the password on any encrypted entry, except by extracting
               the entry with the original password (if any), removing the original entry
               via <see cref="M:External.Zip.Internal.ZipFile.RemoveEntry(External.Zip.Internal.ZipEntry)"/>, and then adding a new
               entry with a new Password.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the Password property on that <c>ZipEntry</c> and then
               calling <c>Save()</c> on the <c>ZipFile</c> does not update the password
               on that entry in the archive.  Neither is an exception thrown. Instead,
               what happens during the <c>Save()</c> is the existing entry is copied
               through to the new zip archive, in its original encrypted form. Upon
               re-reading that archive, the entry can be decrypted with its original
               password.
             </para>
            
             <para>
               If you read a ZipFile, and there is an un-encrypted entry, you can set the
               <c>Password</c> on the entry and then call Save() on the ZipFile, and get
               encryption on that entry.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file with two entries, and then extracts the
               entries from the zip file.  When creating the zip file, the two files are
               added to the zip file using password protection. Each entry uses a
               different password.  During extraction, each file is extracted with the
               appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 ZipEntry entry;
                 entry= zip.AddFile("Declaration.txt");
                 entry.Password= "123456!";
                 entry = zip.AddFile("Report.xls");
                 entry.Password= "1Secret!";
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 ZipEntry entry;
                 entry = zip["Declaration.txt"];
                 entry.Password = "123456!";
                 entry.Extract("extractDir");
                 entry = zip["Report.xls"];
                 entry.Password = "1Secret!";
                 entry.Extract("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim entry as ZipEntry
                 entry= zip.AddFile("Declaration.txt")
                 entry.Password= "123456!"
                 entry = zip.AddFile("Report.xls")
                 entry.Password= "1Secret!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 Dim entry as ZipEntry
                 entry = zip("Declaration.txt")
                 entry.Password = "123456!"
                 entry.Extract("extractDir")
                 entry = zip("Report.xls")
                 entry.Password = "1Secret!"
                 entry.Extract("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
            
             <remarks>
               <para>
                 This property affects the behavior of the Extract methods (one of the
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
                 extraction would would overwrite an existing filesystem file. If you do
                 not set this property, the library throws an exception when extracting
                 an entry would overwrite an existing file.
               </para>
            
               <para>
                 This property has no effect when extracting to a stream, or when the file to be
                 extracted does not already exist.
               </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>
            
             <example>
               This example shows how to set the <c>ExtractExistingFile</c> property in
               an <c>ExtractProgress</c> event, in response to user input. The
               <c>ExtractProgress</c> event is invoked if and only if the
               <c>ExtractExistingFile</c> property was previously set to
               <c>ExtractExistingFileAction.InvokeExtractProgressEvent</c>.
             <code lang="C#">
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
                     Console.WriteLine("extract {0} ", e.CurrentEntry.FileName);
            
                 else if (e.EventType == ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite)
                 {
                     ZipEntry entry = e.CurrentEntry;
                     string response = null;
                     // Ask the user if he wants overwrite the file
                     do
                     {
                         Console.Write("Overwrite {0} in {1} ? (y/n/C) ", entry.FileName, e.ExtractLocation);
                         response = Console.ReadLine();
                         Console.WriteLine();
            
                     } while (response != null &amp;&amp; response[0]!='Y' &amp;&amp;
                              response[0]!='N' &amp;&amp; response[0]!='C');
            
                     if  (response[0]=='C')
                         e.Cancel = true;
                     else if (response[0]=='Y')
                         entry.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                     else
                         entry.ExtractExistingFile= ExtractExistingFileAction.DoNotOverwrite;
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ZipErrorAction">
             <summary>
               The action to take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur within a call to <see cref="M:External.Zip.Internal.ZipFile.Save">ZipFile.Save</see>, as the various files contained
                 in a ZipFile are being saved into the zip archive.  During the
                 <c>Save</c>, DotNetZip will perform a <c>File.Open</c> on the file
                 associated to the ZipEntry, and then will read the entire contents of
                 the file as it is zipped. Either the open or the Read may fail, because
                 of lock conflicts or other reasons.  Using this property, you can
                 specify the action to take when such errors occur.
              </para>
            
              <para>
                 Typically you will NOT set this property on individual ZipEntry
                 instances.  Instead, you will set the <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction">ZipFile.ZipErrorAction</see> property on
                 the ZipFile instance, before adding any entries to the
                 <c>ZipFile</c>. If you do this, errors encountered on behalf of any of
                 the entries in the ZipFile will be handled the same way.
              </para>
            
              <para>
                 But, if you use a <see cref="E:External.Zip.Internal.ZipFile.ZipError"/> handler, you will want
                 to set this property on the <c>ZipEntry</c> within the handler, to
                 communicate back to DotNetZip what you would like to do with the
                 particular error.
              </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ZipError"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IncludedInMostRecentSave">
            <summary>
            Indicates whether the entry was included in the most recent save.
            </summary>
            <remarks>
            An entry can be excluded or skipped from a save if there is an error
            opening or reading the entry.
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.SetCompression">
             <summary>
               A callback that allows the application to specify the compression to use
               for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               See <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.UseUnicodeAsNecessary">
             <summary>
               Set to indicate whether to use UTF-8 encoding for filenames and comments.
             </summary>
            
             <remarks>
            
             <para>
               If this flag is set, the comment and filename for the entry will be
               encoded with UTF-8, as described in <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
               specification</see>, if necessary. "Necessary" means, the filename or
               entry comment (if any) cannot be reflexively encoded and decoded using the
               default code page, IBM437.
             </para>
            
             <para>
               Setting this flag to true is equivalent to setting <see cref="P:External.Zip.Internal.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>.
             </para>
            
             <para>
               This flag has no effect or relation to the text encoding used within the
               file itself.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use for the FileName and Comment on this ZipEntry,
               when the default encoding is insufficient.
             </summary>
            
             <remarks>
            
             <para>
               Don't use this property.  See <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncoding"/>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AlternateEncoding">
            <summary>
              Specifies the alternate text encoding used by this ZipEntry
            </summary>
            <remarks>
              <para>
                The default text encoding used in Zip files for encoding filenames and
                comments is IBM437, which is something like a superset of ASCII.  In
                cases where this is insufficient, applications can specify an
                alternate encoding.
              </para>
              <para>
                When creating a zip file, the usage of the alternate encoding is
                governed by the <see cref="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage"/> property.
                Typically you would set both properties to tell DotNetZip to employ an
                encoding that is not IBM437 in the zipfile you are creating.
              </para>
              <para>
                Keep in mind that because the ZIP specification states that the only
                valid encodings to use are IBM437 and UTF-8, if you use something
                other than that, then zip tools and libraries may not be able to
                successfully read the zip archive you generate.
              </para>
              <para>
                The zip specification states that applications should presume that
                IBM437 is in use, except when a special bit is set, which indicates
                UTF-8. There is no way to specify an arbitrary code page, within the
                zip file itself. When you create a zip file encoded with gb2312 or
                ibm861 or anything other than IBM437 or UTF-8, then the application
                that reads the zip file needs to "know" which code page to use. In
                some cases, the code page used when reading is chosen implicitly. For
                example, WinRar uses the ambient code page for the host desktop
                operating system. The pitfall here is that if you create a zip in
                Copenhagen and send it to Tokyo, the reader of the zipfile may not be
                able to decode successfully.
              </para>
            </remarks>
            <example>
              This example shows how to create a zipfile encoded with a
              language-specific encoding:
            <code>
              using (var zip = new ZipFile())
              {
                 zip.AlternateEnoding = System.Text.Encoding.GetEncoding("ibm861");
                 zip.AlternateEnodingUsage = ZipOption.Always;
                 zip.AddFileS(arrayOfFiles);
                 zip.Save("Myarchive-Encoded-in-IBM861.zip");
              }
            </code>
            </example>
            <seealso cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.AlternateEncodingUsage">
            <summary>
              Describes if and when this instance should apply
              AlternateEncoding to encode the FileName and Comment, when
              saving.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipEntry.IsText">
             <summary>
               Indicates whether an entry is marked as a text file. Be careful when
               using on this property. Unless you have a good reason, you should
               probably ignore this property.
             </summary>
            
             <remarks>
             <para>
               The ZIP format includes a provision for specifying whether an entry in
               the zip archive is a text or binary file.  This property exposes that
               metadata item. Be careful when using this property: It's not clear
               that this property as a firm meaning, across tools and libraries.
             </para>
            
             <para>
               To be clear, when reading a zip file, the property value may or may
               not be set, and its value may or may not be valid.  Not all entries
               that you may think of as "text" entries will be so marked, and entries
               marked as "text" are not guaranteed in any way to be text entries.
               Whether the value is set and set correctly depends entirely on the
               application that produced the zip file.
             </para>
            
             <para>
               There are many zip tools available, and when creating zip files, some
               of them "respect" the IsText metadata field, and some of them do not.
               Unfortunately, even when an application tries to do "the right thing",
               it's not always clear what "the right thing" is.
             </para>
            
             <para>
               There's no firm definition of just what it means to be "a text file",
               and the zip specification does not help in this regard. Twenty years
               ago, text was ASCII, each byte was less than 127. IsText meant, all
               bytes in the file were less than 127.  These days, it is not the case
               that all text files have all bytes less than 127.  Any unicode file
               may have bytes that are above 0x7f.  The zip specification has nothing
               to say on this topic. Therefore, it's not clear what IsText really
               means.
             </para>
            
             <para>
               This property merely tells a reading application what is stored in the
               metadata for an entry, without guaranteeing its validity or its
               meaning.
             </para>
            
             <para>
               When DotNetZip is used to create a zipfile, it attempts to set this
               field "correctly." For example, if a file ends in ".txt", this field
               will be set. Your application may override that default setting.  When
               writing a zip file, you must set the property before calling
               <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
               When reading a zip file, a more general way to decide just what kind
               of file is contained in a particular entry is to use the file type
               database stored in the operating system.  The operating system stores
               a table that says, a file with .jpg extension is a JPG image file, a
               file with a .xml extension is an XML document, a file with a .txt is a
               pure ASCII text document, and so on.  To get this information on
               Windows, <see
               href="http://www.codeproject.com/KB/cs/GetFileTypeAndIcon.aspx"> you
               need to read and parse the registry.</see> </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.mme", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.mme", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="T:External.Zip.Internal.ZipEntryTimestamp">
             <summary>
               An enum that specifies the type of timestamp available on the ZipEntry.
             </summary>
            
             <remarks>
            
             <para>
               The last modified time of a file can be stored in multiple ways in
               a zip file, and they are not mutually exclusive:
             </para>
            
             <list type="bullet">
               <item>
                 In the so-called "DOS" format, which has a 2-second precision. Values
                 are rounded to the nearest even second. For example, if the time on the
                 file is 12:34:43, then it will be stored as 12:34:44. This first value
                 is accessible via the <c>LastModified</c> property. This value is always
                 present in the metadata for each zip entry.  In some cases the value is
                 invalid, or zero.
               </item>
            
               <item>
                 In the so-called "Windows" or "NTFS" format, as an 8-byte integer
                 quantity expressed as the number of 1/10 milliseconds (in other words
                 the number of 100 nanosecond units) since January 1, 1601 (UTC).  This
                 format is how Windows represents file times.  This time is accessible
                 via the <c>ModifiedTime</c> property.
               </item>
            
               <item>
                 In the "Unix" format, a 4-byte quantity specifying the number of seconds since
                 January 1, 1970 UTC.
               </item>
            
               <item>
                 In an older format, now deprecated but still used by some current
                 tools. This format is also a 4-byte quantity specifying the number of
                 seconds since January 1, 1970 UTC.
               </item>
            
             </list>
            
             <para>
               This bit field describes which of the formats were found in a <c>ZipEntry</c> that was read.
             </para>
            
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.None">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.CompressionMethod">
             <summary>
               The method of compression to use for a particular ZipEntry.
             </summary>
            
             <remarks>
               <see
               href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWare's
               ZIP Specification</see> describes a number of distinct
               cmopression methods that can be used within a zip
               file. DotNetZip supports a subset of them.
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.CompressionMethod.None">
            <summary>
            No compression at all. For COM environments, the value is 0 (zero).
            </summary>
        </member>
        <member name="F:External.Zip.Internal.CompressionMethod.Deflate">
            <summary>
              DEFLATE compression, as described in <see
              href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC
              1951</see>.  This is the "normal" compression used in zip
              files. For COM environments, the value is 8.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipEntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.FileSystem">
            <summary>
            The entry was instantiated by calling AddFile() or another method that 
            added an entry from the filesystem.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.Stream">
            <summary>
            The entry was instantiated via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)"/> or
            <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/> .
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.ZipFile">
            <summary>
            The ZipEntry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.WriteDelegate">
            <summary>
            The content for the ZipEntry will be or was provided by the WriteDelegate.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.JitStream">
            <summary>
            The content for the ZipEntry will be obtained from the stream dispensed by the <c>OpenDelegate</c>.
            The entry was instantiated via <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipEntrySource.ZipOutputStream">
            <summary>
            The content for the ZipEntry will be or was obtained from a <c>ZipOutputStream</c>.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipErrorAction">
             <summary>
             An enum providing the options when an error occurs during opening or reading
             of a file or directory that is being saved to a zip file. 
             </summary>
            
             <remarks>
              <para>
                This enum describes the actions that the library can take when an error occurs
                opening or reading a file, as it is being saved into a Zip archive. 
              </para>
            
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling AddDirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened by another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Throw">
            <summary>
            Throw an exception when an error occurs while zipping.  This is the default
            behavior.  (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Skip">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            skip the file causing the error, and continue zipping.  (For COM clients,
            this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.Retry">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            retry the operation that caused the error. Be careful with this option. If
            the error is not temporary, the library will retry forever.  (For COM
            clients, this is a 2.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipErrorAction.InvokeErrorEvent">
            <summary>
            When an error occurs, invoke the zipError event.  The event type used is
            <see cref="F:External.Zip.Internal.ZipProgressEventType.Error_Saving"/>.  A typical use of this option:
            a GUI application may wish to pop up a dialog to allow the user to view the
            error that occurred, and choose an appropriate action.  After your
            processing in the error event, if you want to skip the file, set <see cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/> on the
            <c>ZipProgressEventArgs.CurrentEntry</c> to <c>Skip</c>.  If you want the
            exception to be thrown, set <c>ZipErrorAction</c> on the <c>CurrentEntry</c>
            to <c>Throw</c>.  If you want to cancel the zip, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            Skip in that a cancel will not save any further entries, if there are any.
            (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipFile">
             <summary>
               The ZipFile type represents a zip archive file.
             </summary>
            
             <remarks>
             <para>
               This is the main type in the DotNetZip class library. This class reads and
               writes zip files, as defined in the <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides a general purpose zip file capability.  Use it to read,
               create, or update zip files.  When you want to create zip files using a
               <c>Stream</c> type to write the zip file, you may want to consider the <see cref="T:External.Zip.Internal.ZipOutputStream"/> class.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can
               be used to create zip files. Both of them support many of the common zip
               features, including Unicode, different compression methods and levels,
               and ZIP64. They provide very similar performance when creating zip
               files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:External.Zip.Internal.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipFile</c> class implements the <see cref="T:System.IDisposable"/> interface.  In order for <c>ZipFile</c> to
               produce a valid zip file, you use use it within a using clause (<c>Using</c>
               in VB), or call the <c>Dispose()</c> method explicitly.  See the examples
               for how to employ a using clause.
             </para>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddItem(System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method is handy if you are adding things to zip archive and don't
               want to bother distinguishing between directories or files.  Any files are
               added as single entries.  A directory added through this method is added
               recursively: all files and subdirectories contained within the directory
               are added to the <c>ZipFile</c>.
             </para>
            
             <para>
               The name of the item may be a relative path or a fully-qualified
               path. Remember, the items contained in <c>ZipFile</c> instance get written
               to the disk only when you call <see cref="M:External.Zip.Internal.ZipFile.Save"/> or a similar
               save method.
             </para>
            
             <para>
               The directory name used for the file within the archive is the same
               as the directory name (potentially a relative path) specified in the
               <paramref name="fileOrDirectoryName"/>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">
             the name of the file or directory to add.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)">
             <summary>
               Adds an item, either a file or a directory, to a zip file archive,
               explicitly specifying the directory path to be used in the archive.
             </summary>
            
             <remarks>
             <para>
               If adding a directory, the add is recursive on all files and
               subdirectories contained within it.
             </para>
             <para>
               The name of the item may be a relative path or a fully-qualified path.
               The item added by this call to the <c>ZipFile</c> is not read from the
               disk nor written to the zip file archive until the application calls
               Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive, which would override the
               "natural" path of the filesystem file.
             </para>
            
             <para>
               Encryption will be used on the file data if the <c>Password</c> has
               been set on the <c>ZipFile</c> object, prior to calling this method.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
               Thrown if the file or directory passed in does not exist.
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.
             </param>
            
             <param name="directoryPathInArchive">
               The name of the directory path to use within the zip archive.  This path
               need not refer to an extant directory in the current filesystem.  If the
               files within the zip are later extracted, this is the path used for the
               extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
               path on the fileOrDirectoryName.  Passing the empty string ("") will
               insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
               This example shows how to zip up a set of files into a flat hierarchy,
               regardless of where in the filesystem the files originated. The resulting
               zip archive will contain a toplevel directory named "flat", which itself
               will contain files Readme.txt, MyProposal.docx, and Image1.jpg.  A
               subdirectory under "flat" called SupportFiles will contain all the files
               in the "c:\SupportFiles" directory on disk.
            
             <code>
             String[] itemnames= {
               "c:\\fixedContent\\Readme.txt",
               "MyProposal.docx",
               "c:\\SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat");
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\fixedContent\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFile(System.String)">
             <summary>
               Adds a File to a Zip file archive.
             </summary>
             <remarks>
            
             <para>
               This call collects metadata for the named file in the filesystem,
               including the file attributes and the timestamp, and inserts that metadata
               into the resulting ZipEntry.  Only when the application calls Save() on
               the <c>ZipFile</c>, does DotNetZip read the file from the filesystem and
               then write the content to the zip file archive.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called photos\personal.  The pdf file
               will be included into a folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
            
             <code lang="VB">
              Try
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
            
             <overloads>This method has two overloads.</overloads>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
               The name of the file to add. It should refer to a file in the filesystem.
               The name of the file may be a relative path or a fully-qualified path.
             </param>
             <returns>The <c>ZipEntry</c> corresponding to the File added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">
             <summary>
               Adds a File to a Zip file archive, potentially overriding the path to be
               used within the zip archive.
             </summary>
            
             <remarks>
             <para>
               The file added by this call to the <c>ZipFile</c> is not written to the
               zip file archive until the application calls Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
               This method will throw an exception if an entry with the same name already
               exists in the <c>ZipFile</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this example, three files are added to a Zip archive. The ReadMe.txt
               file will be placed in the root of the archive. The .png file will be
               placed in a folder within the zip called images.  The pdf file will be
               included into a folder within the zip called files\docs, and will be
               encrypted with the given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Try
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add.  The name of the file may be a relative path
               or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the fileName.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on the fileName, if any.  Passing the empty string
               ("") will insert the item at the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> corresponding to the file added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{External.Zip.Internal.ZipEntry})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>.
             </summary>
            
             <param name="entriesToRemove">
               A collection of ZipEntry instances from this zip file to be removed. For
               example, you can pass in an array of ZipEntry instances; or you can call
               SelectEntries(), and then add or remove entries from that
               ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and pass
               that ICollection to this method.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{System.String})">
             <summary>
               This method removes a collection of entries from the <c>ZipFile</c>, by name.
             </summary>
            
             <param name="entriesToRemove">
               A collection of strings that refer to names of entries to be removed
               from the <c>ZipFile</c>.  For example, you can pass in an array or a
               List of Strings that provide the names of entries to be removed.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               This method adds a set of files to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Use this method to add a set of files to the zip archive, in one call.
               For example, a list of files received from
               <c>System.IO.Directory.GetFiles()</c> can be added to a zip archive in one
               call.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to add. Each string should refer to a
               file in the filesystem. The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <example>
               This example shows how to create a zip file, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
               Adds or updates a set of files in the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The collection of names of the files to update. Each string should refer to a file in
               the filesystem. The name of the file may be a relative path or a fully-qualified path.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the
               specified directory path in the archive.
             </summary>
            
             <remarks>
             <para>
               Any directory structure that may be present in the
               filenames contained in the list is "flattened" in the
               archive.  Each file in the list is added to the archive in
               the specified top-level directory.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>, <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their respective values at the
               time of this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to
               a file in the filesystem.  The name of the file may be a
               relative path or a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               Th is path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
               Adds a set of files to the <c>ZipFile</c>, using the specified directory
               path in the archive, and preserving the full directory structure in the
               filenames.
             </summary>
            
             <remarks>
            
             <para>
               Think of the <paramref name="directoryPathInArchive"/> as a "root" or
               base directory used in the archive for the files that get added.  when
               <paramref name="preserveDirHierarchy"/> is true, the hierarchy of files
               found in the filesystem will be placed, with the hierarchy intact,
               starting at that root in the archive. When <c>preserveDirHierarchy</c>
               is false, the path hierarchy of files is flattned, and the flattened
               set of files gets placed in the root within the archive as specified in
               <c>directoryPathInArchive</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <param name="fileNames">
               The names of the files to add. Each string should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use as a prefix for each entry name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="preserveDirHierarchy">
               whether the entries in the zip archive will reflect the directory
               hierarchy that is present in the various filenames.  For example, if
               <paramref name="fileNames"/> includes two paths,
               \Animalia\Chordata\Mammalia\Info.txt and
               \Plantae\Magnoliophyta\Dicotyledon\Info.txt, then calling this method
               with <paramref name="preserveDirHierarchy"/> = <c>false</c> will
               result in an exception because of a duplicate entry name, while
               calling this method with <paramref name="preserveDirHierarchy"/> =
               <c>true</c> will result in the full direcory paths being included in
               the entries added to the ZipFile.
             </param>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
               Adds or updates a set of files to the <c>ZipFile</c>, using the specified
               directory path in the archive.
             </summary>
            
             <remarks>
            
             <para>
               Any files that already exist in the archive are updated. Any files that
               don't yet exist in the archive are added.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
               The names of the files to add or update. Each string should refer to a
               file in the filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the file name.
               This path may, or may not, correspond to a real directory in the current
               filesystem.  If the files within the zip are later extracted, this is the
               path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
               VB) will use the path on each of the <c>fileNames</c>, if any.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.  The <c>UpdateFile</c> method might more accurately be
               called "AddOrUpdateFile".
             </para>
            
             <para>
               Upon success, there is no way for the application to learn whether the file
               was added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <example>
            
               This example shows how to Update an existing entry in a zipfile. The first
               call to UpdateFile adds the file to the newly-created zip archive.  The
               second call to UpdateFile updates the content for that file in the zip
               archive.
            
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt");
               zip1.UpdateFile("CustomerList.csv");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
            
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt")
                   zip1.UpdateFile("CustomerList.csv")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
               Adds or Updates a File in a Zip file archive.
             </summary>
            
             <remarks>
             <para>
               This method adds a file to a zip archive, or, if the file already exists
               in the zip archive, this method Updates the content of that given filename
               in the zip archive.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used in the archive.  The entry to be added or
               updated is found by using the specified directory path, combined with the
               basename of the specified filename.
             </para>
            
             <para>
               Upon success, there is no way for the application to learn if the file was
               added versus updated.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
               The name of the file to add or update. It should refer to a file in the
               filesystem.  The name of the file may be a relative path or a
               fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>fileName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>fileName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)">
             <summary>
               Add or update a directory in a zip archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated in
               the zip archive.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
               Add or update a directory in the zip archive at the specified root
               directory in the archive.
             </summary>
            
             <remarks>
               If the specified directory does not exist in the archive, then this method
               is equivalent to calling <c>AddDirectory()</c>.  If the specified
               directory already exists in the archive, then this method updates any
               existing entries, and adds any new entries. Any entries that are in the
               zip archive but not in the specified directory, are left alone.  In other
               words, the contents of the zip file will be a union of the previous
               contents and the new files.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">
               The path to the directory to be added to the zip archive, or updated
               in the zip archive.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>directoryName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>directoryName</c>, if any.  Passing the empty string ("") will insert
               the item at the root path within the archive.
             </param>
            
             <returns>
               The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateItem(System.String)">
             <summary>
               Add or update a file or directory in the zip archive.
             </summary>
            
             <remarks>
             <para>
               This is useful when the application is not sure or does not care if the
               item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c> if an entry by the same name
               already exists, followed calling by <c>AddItem()</c>.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">
              the path to the file or directory to be added or updated.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
               Add or update a file or directory.
             </summary>
            
             <remarks>
             <para>
               This method is useful when the application is not sure or does not care if
               the item to be added is a file or directory, and does not know or does not
               care if the item already exists in the <c>ZipFile</c>. Calling this method
               is equivalent to calling <c>RemoveEntry()</c>, if an entry by that name
               exists, and then calling <c>AddItem()</c>.
             </para>
            
             <para>
               This version of the method allows the caller to explicitly specify the
               directory path to be used for the item being added to the archive.  The
               entry or entries that are added or updated will use the specified
               <c>DirectoryPathInArchive</c>. Extracting the entry from the archive will
               result in a file stored in that directory path.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">
               The path for the File or Directory to be added or updated.
             </param>
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               <c>itemName</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               <c>null</c> (<c>Nothing</c> in VB) will use the path on the
               <c>itemName</c>, if any.  Passing the empty string ("") will insert the
               item at the root path within the archive.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string.
             </summary>
            
             <remarks>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only. The content for the entry is encoded using the default text
               encoding for the machine, or on Silverlight, using UTF-8.
             </remarks>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="entryName">
               The name, including any path, to use for the entry within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
             <example>
            
             This example shows how to add an entry to the zipfile, using a string as
             content for that entry.
            
             <code lang="C#">
             string Content = "This string will be the content of the Readme.txt file in the zip archive.";
             using (ZipFile zip1 = new ZipFile())
             {
               zip1.AddFile("MyDocuments\\Resume.doc", "files");
               zip1.AddEntry("Readme.txt", Content);
               zip1.Comment = "This zip file was created at " + System.DateTime.Now.ToString("G");
               zip1.Save("Content.zip");
             }
            
             </code>
             <code lang="VB">
             Public Sub Run()
               Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
               Using zip1 As ZipFile = New ZipFile
                 zip1.AddEntry("Readme.txt", Content)
                 zip1.AddFile("MyDocuments\Resume.doc", "files")
                 zip1.Comment = ("This zip file was created at " &amp; DateTime.Now.ToString("G"))
                 zip1.Save("Content.zip")
               End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Adds a named entry into the zip archive, taking content for the entry
               from a string, and using the specified text encoding.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method creates an entry using the given fileName and
               directory path within the archive.  There is no need for a file by the
               given name to exist in the filesystem; the name is used within the zip
               archive only.
             </para>
            
             <para>
               The content for the entry, a string value, is encoded using the given
               text encoding. A BOM (byte-order-mark) is emitted into the file, if the
               Encoding parameter is set for that.
             </para>
            
             <para>
               Most Encoding classes support a constructor that accepts a boolean,
               indicating whether to emit a BOM or not. For example see <see cref="M:System.Text.UTF8Encoding.#ctor(System.Boolean)"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the fileName, as specified
               in <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)">
             <summary>
               Create an entry in the <c>ZipFile</c> using the given <c>Stream</c>
               as input.  The entry will have the given filename.
             </summary>
            
             <remarks>
            
             <para>
               The application should provide an open, readable stream; in this case it
               will be read during the call to <see cref="M:External.Zip.Internal.ZipFile.Save"/> or one of
               its overloads.
             </para>
            
             <para>
               The passed stream will be read from its current position. If
               necessary, callers should set the position in the stream before
               calling AddEntry(). This might be appropriate when using this method
               with a MemoryStream, for example.
             </para>
            
             <para>
               In cases where a large number of streams will be added to the
               <c>ZipFile</c>, the application may wish to avoid maintaining all of the
               streams open simultaneously.  To handle this situation, the application
               should use the <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>
               overload.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example adds a single entry to a <c>ZipFile</c> via a <c>Stream</c>.
             </para>
            
             <code lang="C#">
             String zipToCreate = "Content.zip";
             String fileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream streamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(fileNameInArchive, streamToRead);
                 zip.AddFile("Readme.txt");
                 zip.Save(zipToCreate);  // the stream is read implicitly here
               }
             }
             </code>
            
             <code lang="VB">
             Dim zipToCreate As String = "Content.zip"
             Dim fileNameInArchive As String = "Content-From-Stream.bin"
             Using streamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(fileNameInArchive, streamToRead)
                 zip.AddFile("Readme.txt")
                 zip.Save(zipToCreate)  '' the stream is read implicitly, here
               End Using
             End Using
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.IO.Stream)"/>
            
             <param name="entryName">
               The name, including any path, which is shown in the zip file for the added
               entry.
             </param>
             <param name="stream">
               The input stream from which to grab content for the file
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)">
             <summary>
               Add a ZipEntry for which content is written directly by the application.
             </summary>
            
             <remarks>
             <para>
               When the application needs to write the zip entry data, use this
               method to add the ZipEntry. For example, in the case that the
               application wishes to write the XML representation of a DataSet into
               a ZipEntry, the application can use this method to do so.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             <para>
               About progress events: When using the WriteDelegate, DotNetZip does
               not issue any SaveProgress events with <c>EventType</c> = <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_EntryBytesRead">
               Saving_EntryBytesRead</see>. (This is because it is the
               application's code that runs in WriteDelegate - there's no way for
               DotNetZip to know when to issue a EntryBytesRead event.)
               Applications that want to update a progress bar or similar status
               indicator should do so from within the WriteDelegate
               itself. DotNetZip will issue the other SaveProgress events,
               including <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_Started">
               Saving_Started</see>,
               <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_BeforeWriteEntry">
               Saving_BeforeWriteEntry</see>, and <see cref="F:External.Zip.Internal.ZipProgressEventType.Saving_AfterWriteEntry">
               Saving_AfterWriteEntry</see>.
             </para>
            
             <para>
               Note: When you use PKZip encryption, it's normally necessary to
               compute the CRC of the content to be encrypted, before compressing or
               encrypting it. Therefore, when using PKZip encryption with a
               WriteDelegate, the WriteDelegate CAN BE called twice: once to compute
               the CRC, and the second time to potentially compress and
               encrypt. Surprising, but true. This is because PKWARE specified that
               the encryption initialization data depends on the CRC.
               If this happens, for each call of the delegate, your
               application must stream the same entry data in its entirety. If your
               application writes different data during the second call, it will
               result in a corrupt zip file.
             </para>
            
             <para>
               The double-read behavior happens with all types of entries, not only
               those that use WriteDelegate. It happens if you add an entry from a
               filesystem file, or using a string, or a stream, or an opener/closer
               pair. But in those cases, DotNetZip takes care of reading twice; in
               the case of the WriteDelegate, the application code gets invoked
               twice. Be aware.
             </para>
            
             <para>
               As you can imagine, this can cause performance problems for large
               streams, and it can lead to correctness problems when you use a
               <c>WriteDelegate</c>. This is a pretty big pitfall.  There are two
               ways to avoid it.  First, and most preferred: don't use PKZIP
               encryption.  If you use the WinZip AES encryption, this problem
               doesn't occur, because the encryption protocol doesn't require the CRC
               up front. Second: if you do choose to use PKZIP encryption, write out
               to a non-seekable stream (like standard output, or the
               Response.OutputStream in an ASP.NET application).  In this case,
               DotNetZip will use an alternative encryption protocol that does not
               rely on the CRC of the content.  This also implies setting bit 3 in
               the zip entry, which still presents problems for some zip tools.
             </para>
            
             <para>
               In the future I may modify DotNetZip to *always* use bit 3 when PKZIP
               encryption is in use.  This seems like a win overall, but there will
               be some work involved.  If you feel strongly about it, visit the
               DotNetZip forums and vote up <see href="http://dotnetzip.codeplex.com/workitem/13686">the Workitem
               tracking this issue</see>.
             </para>
            
             </remarks>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="writer">the delegate which will write the entry content</param>
             <returns>the ZipEntry added</returns>
            
             <example>
            
               This example shows an application filling a DataSet, then saving the
               contents of that DataSet as XML, into a ZipEntry in a ZipFile, using an
               anonymous delegate in C#. The DataSet XML is never saved to a disk file.
            
             <code lang="C#">
             var c1= new System.Data.SqlClient.SqlConnection(connstring1);
             var da = new System.Data.SqlClient.SqlDataAdapter()
                 {
                     SelectCommand=  new System.Data.SqlClient.SqlCommand(strSelect, c1)
                 };
            
             DataSet ds1 = new DataSet();
             da.Fill(ds1, "Invoices");
            
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName, (name,stream) =&gt; ds1.WriteXml(stream) );
                 zip.Save(zipFileName);
             }
             </code>
             </example>
            
             <example>
            
             This example uses an anonymous method in C# as the WriteDelegate to provide
             the data for the ZipEntry. The example is a bit contrived - the
             <c>AddFile()</c> method is a simpler way to insert the contents of a file
             into an entry in a zip file. On the other hand, if there is some sort of
             processing or transformation of the file contents required before writing,
             the application could use the <c>WriteDelegate</c> to do it, in this way.
            
             <code lang="C#">
             using (var input = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ))
             {
                 using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                 {
                     zip.AddEntry(zipEntryName, (name,output) =&gt;
                         {
                             byte[] buffer = new byte[BufferSize];
                             int n;
                             while ((n = input.Read(buffer, 0, buffer.Length)) != 0)
                             {
                                 // could transform the data here...
                                 output.Write(buffer, 0, n);
                                 // could update a progress bar here
                             }
                         });
            
                     zip.Save(zipFileName);
                 }
             }
             </code>
             </example>
            
             <example>
            
             This example uses a named delegate in VB to write data for the given
             ZipEntry (VB9 does not have anonymous delegates). The example here is a bit
             contrived - a simpler way to add the contents of a file to a ZipEntry is to
             simply use the appropriate <c>AddFile()</c> method.  The key scenario for
             which the <c>WriteDelegate</c> makes sense is saving a DataSet, in XML
             format, to the zip file. The DataSet can write XML to a stream, and the
             WriteDelegate is the perfect place to write into the zip file.  There may be
             other data structures that can write to a stream, but cannot be read as a
             stream.  The <c>WriteDelegate</c> would be appropriate for those cases as
             well.
            
             <code lang="VB">
             Private Sub WriteEntry (ByVal name As String, ByVal output As Stream)
                 Using input As FileStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                     Dim n As Integer = -1
                     Dim buffer As Byte() = New Byte(BufferSize){}
                     Do While n &lt;&gt; 0
                         n = input.Read(buffer, 0, buffer.Length)
                         output.Write(buffer, 0, n)
                     Loop
                 End Using
             End Sub
            
             Public Sub Run()
                 Using zip = New ZipFile
                     zip.AddEntry(zipEntryName, New WriteDelegate(AddressOf WriteEntry))
                     zip.Save(zipFileName)
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)">
             <summary>
               Add an entry, for which the application will provide a stream
               containing the entry data, on a just-in-time basis.
             </summary>
            
             <remarks>
             <para>
               In cases where the application wishes to open the stream that
               holds the content for the ZipEntry, on a just-in-time basis, the
               application can use this method.  The application provides an
               opener delegate that will be called by the DotNetZip library to
               obtain a readable stream that can be read to get the bytes for
               the given entry.  Typically, this delegate opens a stream.
               Optionally, the application can provide a closer delegate as
               well, which will be called by DotNetZip when all bytes have been
               read from the entry.
             </para>
            
             <para>
               These delegates are called from within the scope of the call to
               ZipFile.Save().
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses anonymous methods in C# to open and close the
               source stream for the content for a zip entry.
            
             <code lang="C#">
             using(Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
             {
                 zip.AddEntry(zipEntryName,
                              (name) =&gt;  File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite ),
                              (name, stream) =&gt;  stream.Close()
                              );
            
                 zip.Save(zipFileName);
             }
             </code>
            
             </example>
            
             <example>
            
               This example uses delegates in VB.NET to open and close the
               the source stream for the content for a zip entry.  VB 9.0 lacks
               support for "Sub" lambda expressions, and so the CloseDelegate must
               be an actual, named Sub.
            
             <code lang="VB">
            
             Function MyStreamOpener(ByVal entryName As String) As Stream
                 '' This simply opens a file.  You probably want to do somethinig
                 '' more involved here: open a stream to read from a database,
                 '' open a stream on an HTTP connection, and so on.
                 Return File.OpenRead(entryName)
             End Function
            
             Sub MyStreamCloser(entryName As String, stream As Stream)
                 stream.Close()
             End Sub
            
             Public Sub Run()
                 Dim dirToZip As String = "fodder"
                 Dim zipFileToCreate As String = "Archive.zip"
                 Dim opener As OpenDelegate = AddressOf MyStreamOpener
                 Dim closer As CloseDelegate = AddressOf MyStreamCloser
                 Dim numFilestoAdd As Int32 = 4
                 Using zip As ZipFile = New ZipFile
                     Dim i As Integer
                     For i = 0 To numFilesToAdd - 1
                         zip.AddEntry(String.Format("content-{0:000}.txt"), opener, closer)
                     Next i
                     zip.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <param name="entryName">the name of the entry to add</param>
             <param name="opener">
              the delegate that will be invoked by ZipFile.Save() to get the
              readable stream for the given entry. ZipFile.Save() will call
              read on this stream to obtain the data for the entry. This data
              will then be compressed and written to the newly created zip
              file.
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream. This may
              be null (Nothing in VB), in which case no call is makde to close
              the stream.
             </param>
             <returns>the ZipEntry added</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.String)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given
               string as content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
            
             <para>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for
               the given file name and directory path, if it exists, and then calling
               <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String)"/>.  See the documentation for
               that method for further explanation. The string content is encoded
               using the default encoding for the machine, or on Silverlight, using
               UTF-8. This encoding is distinct from the encoding used for the
               filename itself.  See <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>.
             </para>
            
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.String,System.Text.Encoding)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given string as
               content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.String,System.Text.Encoding)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="content">
               The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
               The text encoding to use when encoding the string. Be aware: This is
               distinct from the text encoding used to encode the filename. See <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,External.Zip.Internal.WriteDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegate
               as the source for content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.WriteDelegate)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="writer">the delegate which will write the entry content.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given delegates
               to open and close the stream that provides the content for the <c>ZipEntry</c>.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c> for the
               given file name and directory path, if it exists, and then calling <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,External.Zip.Internal.OpenDelegate,External.Zip.Internal.CloseDelegate)"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="opener">
              the delegate that will be invoked to open the stream
             </param>
             <param name="closer">
              the delegate that will be invoked to close the stream
             </param>
            
             <returns>The <c>ZipEntry</c> added or updated.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.IO.Stream)">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given stream as
               input, and the given filename and given directory Path.
             </summary>
            
             <remarks>
             <para>
               Calling the method is equivalent to calling <c>RemoveEntry()</c> if an
               entry by the same name already exists, and then calling <c>AddEntry()</c>
               with the given <c>fileName</c> and stream.
             </para>
            
             <para>
               The stream must be open and readable during the call to
               <c>ZipFile.Save</c>.  You can dispense the stream on a just-in-time basis
               using the <see cref="P:External.Zip.Internal.ZipEntry.InputStream"/> property. Check the
               documentation of that property for more information.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to the
               <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
             <seealso cref="P:External.Zip.Internal.ZipEntry.InputStream"/>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="stream">The input stream from which to read file data.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.Byte[])">
             <summary>
               Add an entry into the zip archive using the given filename and
               directory path within the archive, and the given content for the
               file. No file is created in the filesystem.
             </summary>
            
             <param name="byteContent">The data to use for the entry.</param>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateEntry(System.String,System.Byte[])">
             <summary>
               Updates the given entry in the <c>ZipFile</c>, using the given byte
               array as content for the entry.
             </summary>
            
             <remarks>
               Calling this method is equivalent to removing the <c>ZipEntry</c>
               for the given filename and directory path, if it exists, and then
               calling <see cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.Byte[])"/>.  See the
               documentation for that method for further explanation.
             </remarks>
            
             <param name="entryName">
               The name, including any path, to use within the archive for the entry.
             </param>
            
             <param name="byteContent">The content to use for the <c>ZipEntry</c>.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive.
             </summary>
            
             <remarks>
            
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. Any files within the named directory are added to the archive.  Any
               subdirectories within the named directory are also added to the archive,
               recursively.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               If you want the entries to appear in a containing directory in the zip
               archive itself, then you should call the AddDirectory() overload that
               allows you to explicitly specify a directory path for use in the archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
            
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
               Adds the contents of a filesystem directory to a Zip file archive,
               overriding the path to be used for entries in the archive.
             </summary>
            
             <remarks>
             <para>
               The name of the directory may be a relative path or a fully-qualified
               path. The add operation is recursive, so that any files or subdirectories
               within the name directory are also added to the archive.
             </para>
            
             <para>
               Top-level entries in the named directory will appear as top-level entries
               in the zip archive.  Entries in subdirectories in the named directory will
               result in entries in subdirectories in the zip archive.
             </para>
            
             <para>
               For <c>ZipFile</c> properties including <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.SetCompression"/>, <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>,
               <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, their
               respective values at the time of this call will be applied to each
               ZipEntry added.
             </para>
            
             </remarks>
            
             <example>
             <para>
               In this code, calling the ZipUp() method with a value of "c:\reports" for
               the directory parameter will result in a zip file structure in which all
               entries are contained in a toplevel "reports" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to override any path in the
               DirectoryName.  This path may, or may not, correspond to a real directory
               in the current filesystem.  If the zip is later extracted, this is the
               path used for the extracted file or directory.  Passing <c>null</c>
               (<c>Nothing</c> in VB) or the empty string ("") will insert the items at
               the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddDirectoryByName(System.String)">
             <summary>
               Creates a directory in the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               Use this when you want to create a directory in the archive but there is
               no corresponding filesystem representation for that directory.
             </para>
            
             <para>
               You will probably not need to do this in your code. One of the only times
               you will want to do this is if you want an empty directory in the zip
               archive.  The reason: if you add a file to a zip archive that is stored
               within a multi-level directory, all of the directory tree is implicitly
               created in the zip archive.
             </para>
            
             </remarks>
            
             <param name="directoryNameInArchive">
               The name of the directory to create in the archive.
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZip(System.String)">
             <summary>
               Checks a zip file to see if its directory is consistent.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out
               of synch with the entries in the zip file.  This method checks the
               given zip file and returns true if this has occurred.
             </para>
            
             <para> This method may take a long time to run for large zip files.  </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see cref="M:External.Zip.Internal.ComHelper.CheckZip(System.String)">ComHelper.CheckZip(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <returns>true if the named zip file checks OK. Otherwise, false. </returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)">
             <summary>
               Checks a zip file to see if its directory is consistent,
               and optionally fixes the directory if necessary.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory within a zip file can get out of
               synch with the entries in the zip file.  This method checks the given
               zip file, and returns true if this has occurred. It also optionally
               fixes the zipfile, saving the fixed copy in <em>Name</em>_Fixed.zip.
             </para>
            
             <para>
               This method may take a long time to run for large zip files.  It
               will take even longer if the file actually needs to be fixed, and if
               <c>fixIfNecessary</c> is true.
             </para>
            
             <para>
               This method is not supported in the Reduced or Compact
               Framework versions of DotNetZip.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to check.</param>
            
             <param name="fixIfNecessary">If true, the method will fix the zip file if
                 necessary.</param>
            
             <param name="writer">
             a TextWriter in which messages generated while checking will be written.
             </param>
            
             <returns>true if the named zip is OK; false if the file needs to be fixed.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.FixZipDirectory(System.String)">
             <summary>
               Rewrite the directory within a zipfile.
             </summary>
            
             <remarks>
            
             <para>
               In cases of data error, the directory in a zip file can get out of
               synch with the entries in the zip file.  This method attempts to fix
               the zip file if this has occurred.
             </para>
            
             <para> This can take a long time for large zip files. </para>
            
             <para> This won't work if the zip file uses a non-standard
             code page - neither IBM437 nor UTF-8. </para>
            
             <para>
               This method is not supported in the Reduced or Compact Framework
               versions of DotNetZip.
             </para>
            
             <para>
               Developers using COM can use the <see cref="M:External.Zip.Internal.ComHelper.FixZipDirectory(System.String)">ComHelper.FixZipDirectory(String)</see>
               method.
             </para>
            
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String)"/>
             <seealso cref="M:External.Zip.Internal.ZipFile.CheckZip(System.String,System.Boolean,System.IO.TextWriter)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.CheckZipPassword(System.String,System.String)">
             <summary>
               Verify the password on a zip file.
             </summary>
            
             <remarks>
               <para>
                 Keep in mind that passwords in zipfiles are applied to
                 zip entries, not to the entire zip file. So testing a
                 zipfile for a particular password doesn't work in the
                 general case. On the other hand, it's often the case
                 that a single password will be used on all entries in a
                 zip file. This method works for that case.
               </para>
               <para>
                 There is no way to check a password without doing the
                 decryption. So this code decrypts and extracts the given
                 zipfile into <see cref="F:System.IO.Stream.Null"/>
               </para>
             </remarks>
            
             <param name="zipFileName">The filename to of the zip file to fix.</param>
            
             <param name="password">The password to check.</param>
            
             <returns>a bool indicating whether the password matches.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name exists in the ZipFile.
             </summary>
            
             <param name='name'>the name of the entry to find</param>
             <returns>true if an entry with the given name exists; otherwise false.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified filename.
             </summary>
            
             <remarks>
             <para>
               Applications can use this constructor to create a new ZipFile for writing,
               or to slurp in an existing zip archive for read and update purposes.
             </para>
            
             <para>
               To create a new zip archive, an application can call this constructor,
               passing the name of a file that does not exist.  The name may be a fully
               qualified path. Then the application can add directories or files to the
               <c>ZipFile</c> via <c>AddDirectory()</c>, <c>AddFile()</c>, <c>AddItem()</c>
               and then write the zip archive to the disk by calling <c>Save()</c>. The
               zip file is not actually opened and written to the disk until the
               application calls <c>ZipFile.Save()</c>.  At that point the new zip file
               with the given name is created.
             </para>
            
             <para>
               If you won't know the name of the <c>Zipfile</c> until the time you call
               <c>ZipFile.Save()</c>, or if you plan to save to a stream (which has no
               name), then you should use the no-argument constructor.
             </para>
            
             <para>
               The application can also call this constructor to read an existing zip
               archive.  passing the name of a valid zip file that does exist. But, it's
               better form to use the static <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> method,
               passing the name of the zip file, because using <c>ZipFile.Read()</c> in
               your code communicates very clearly what you are doing.  In either case,
               the file is then read into the <c>ZipFile</c> instance.  The app can then
               enumerate the entries or can modify the zip file, for example adding
               entries, removing entries, changing comments, and so on.
             </para>
            
             <para>
               One advantage to this parameterized constructor: it allows applications to
               use the same code to add items to a zip archive, regardless of whether the
               zip file exists.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             <para>
               By the way, since DotNetZip is so easy to use, don't you think <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">you should
               donate $5 or $10</see>?
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it.
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip  = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               The Encoding is used as the default alternate encoding for entries with
               filenames or comments that cannot be encoded with the IBM437 code page.
               This is equivalent to setting the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate
             encoding for entries with filenames or comments that cannot be encoded
             with the IBM437 code page. </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor">
             <summary>
               Create a zip file, without specifying a target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               After instantiating with this constructor and adding entries to the
               archive, the application should call <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> or
               <see cref="M:External.Zip.Internal.ZipFile.Save(System.IO.Stream)"/> to save to a file or a
               stream, respectively.  The application can also set the <see cref="P:External.Zip.Internal.ZipFile.Name"/>
               property and then call the no-argument <see cref="M:External.Zip.Internal.ZipFile.Save"/> method.  (This
               is the preferred approach for applications that use the library through
               COM interop.)  If you call the no-argument <see cref="M:External.Zip.Internal.ZipFile.Save"/> method
               without having set the <c>Name</c> of the <c>ZipFile</c>, either through
               the parameterized constructor or through the explicit property , the
               Save() will throw, because there is no place to save the file.  </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               have multiple threads that each use a distinct <c>ZipFile</c> instance, or
               you can synchronize multi-thread access to a single instance.  </para>
            
             </remarks>
            
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
               Create a zip file, specifying a text Encoding, but without specifying a
               target filename or stream to save to.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, and the specified status message writer.
             </summary>
            
             <remarks>
             <para>
               See the documentation on the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument</see> for basic
               information on all the <c>ZipFile</c> constructors.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a TextWriter,
               to which verbose messages will be written during extraction or creation of
               the zip archive.  A console application may wish to pass
               System.Console.Out to get messages on the Console. A graphical or headless
               application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a TextBox, or generate an audit log of ZipFile operations.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the Password property after creating the <c>ZipFile</c> instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile("Backup.zip", Console.Out))
             {
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               // Status messages will be written to Console.Out
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile("Backup.zip", Console.Out)
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 ' Status messages will be written to Console.Out
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save()
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing
             verbose status messages.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
               Creates a new <c>ZipFile</c> instance, using the specified name for the
               filename, the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
               This constructor works like the <see cref="M:External.Zip.Internal.ZipFile.#ctor(System.String)">ZipFile
               constructor that accepts a single string argument.</see> See that
               reference for detail on what this constructor does.
             </para>
            
             <para>
               This version of the constructor allows the caller to pass in a
               <c>TextWriter</c>, and an Encoding.  The <c>TextWriter</c> will collect
               verbose messages that are generated by the library during extraction or
               creation of the zip archive.  A console application may wish to pass
               <c>System.Console.Out</c> to get messages on the Console. A graphical or
               headless application may wish to capture the messages in a different
               <c>TextWriter</c>, for example, a <c>StringWriter</c>, and then display
               the messages in a <c>TextBox</c>, or generate an audit log of
               <c>ZipFile</c> operations.
             </para>
            
             <para>
               The <c>Encoding</c> is used as the default alternate encoding for entries
               with filenames or comments that cannot be encoded with the IBM437 code
               page.  This is a equivalent to setting the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
               instance after construction.
             </para>
            
             <para>
               To encrypt the data for the files added to the <c>ZipFile</c> instance,
               set the <c>Password</c> property after creating the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
               Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
               not party on a single instance with multiple threads.  You may have
               multiple threads that each use a distinct <c>ZipFile</c> instance, or you
               can synchronize multi-thread access to a single instance.
             </para>
            
             </remarks>
            
             <exception cref="T:External.Zip.Internal.ZipException">
             Thrown if <c>fileName</c> refers to an existing file that is not a valid zip file.
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose
             status messages.</param>
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Initialize(System.String)">
             <summary>
               Initialize a <c>ZipFile</c> instance by reading in a zip file.
             </summary>
            
             <remarks>
            
             <para>
               This method is primarily useful from COM Automation environments, when
               reading or extracting zip files. In COM, it is not possible to invoke
               parameterized constructors for a class. A COM Automation application can
               update a zip file by using the <see cref="M:External.Zip.Internal.ZipFile.#ctor">default (no argument)
               constructor</see>, then calling <c>Initialize()</c> to read the contents
               of an on-disk zip archive into the <c>ZipFile</c> instance.
             </para>
            
             <para>
               .NET applications are encouraged to use the <c>ZipFile.Read()</c> methods
               for better clarity.
             </para>
            
             </remarks>
             <param name="fileName">the name of the existing zip file to read in.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntry(External.Zip.Internal.ZipEntry)">
             <summary>
               Removes the given <c>ZipEntry</c> from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the specified <c>ZipEntry</c> does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
               In this example, all entries in the zip archive dating from before
               December 31st, 2007, are removed from the archive.  This is actually much
               easier if you use the RemoveSelectedEntries method.  But I needed an
               example for RemoveEntry, so here it is.
             <code>
             String ZipFileToRead = "ArchiveToModify.zip";
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = ZipFile.Read(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
            
               // actually remove the doomed entries.
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
            
               zip.Comment= String.Format("This zip archive was updated at {0}.",
                                          System.DateTime.Now.ToString("G"));
            
               // save with a different name
               zip.Save("Archive-Updated.zip");
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToRead As String = "ArchiveToModify.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = ZipFile.Read(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
            
                   ' actually remove the doomed entries.
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.Now.ToString("G"))
                   'save as a different name
                   zip.Save("Archive-Updated.zip")
               End Using
             </code>
             </example>
            
             <param name="entry">
             The <c>ZipEntry</c> to remove from the zip.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the <c>ZipEntry</c> with the given filename from the zip archive.
             </summary>
            
             <remarks>
             <para>
               After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
               make the changes permanent.
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
               Thrown if the <c>ZipFile</c> is not updatable.
             </exception>
            
             <exception cref="T:System.ArgumentException">
               Thrown if a <c>ZipEntry</c> with the specified filename does not exist in
               the <c>ZipFile</c>.
             </exception>
            
             <example>
            
               This example shows one way to remove an entry with a given filename from
               an existing zip archive.
            
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = ZipFile.Read(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
               {
                 zip.RemoveEntry(candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.",
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = ZipFile.Read(zipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       zip.RemoveEntry(candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
            
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip.
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Dispose">
             <summary>
               Closes the read and write streams associated
               to the <c>ZipFile</c>, if necessary.
             </summary>
            
             <remarks>
               The Dispose() method is generally employed implicitly, via a <c>using(..) {..}</c>
               statement. (<c>Using...End Using</c> in VB) If you do not employ a using
               statement, insure that your application calls Dispose() explicitly.  For
               example, in a Powershell application, or an application that uses the COM
               interop interface, you must call Dispose() explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName))
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Dispose(System.Boolean)">
             <summary>
               Disposes any managed resources, if the flag is set, then marks the
               instance disposed.  This method is typically not called explicitly from
               application code.
             </summary>
            
             <remarks>
               Applications should call <see cref="M:External.Zip.Internal.ZipFile.Dispose">the no-arg Dispose method</see>.
             </remarks>
            
             <param name="disposeManagedResources">
               indicates whether the method should dispose streams or not.
             </param>
        </member>
        <member name="F:External.Zip.Internal.ZipFile.BufferSizeDefault">
            <summary>
              Default size of the buffer used for IO.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem.  The path can be relative or fully-qualified.
             </summary>
            
             <remarks>
             <para>
               This method will extract all entries in the <c>ZipFile</c> to the
               specified path.
             </para>
            
             <para>
               If an extraction of a file from the zip archive would overwrite an
               existing file in the filesystem, the action taken is dictated by the
               ExtractExistingFile property, which overrides any setting you may have
               made on individual ZipEntry instances.  By default, if you have not
               set that property on the <c>ZipFile</c> instance, the entry will not
               be extracted, the existing file will not be overwritten and an
               exception will be thrown. To change this, set the property, or use the
               ZipFile.ExtractAll(string, Ionic.Zip.ExtrExternal.ZipistingFileAction) overload that allows you to
               specify an ExtractExistingFileAction parameter.
             </para>
            
             <para>
               The action to take when an extract would overwrite an existing file
               applies to all entries.  If you want to set this on a per-entry basis,
               then you must use one of the <see cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract</see> methods.
             </para>
            
             <para>
               This method will send verbose output messages to the <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c>
               instance.
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             <para>
               About timestamps: When extracting a file entry from a zip archive, the
               extracted file gets the last modified time of the entry as stored in
               the archive. The archive may also store extended file timestamp
               information, including last accessed and created times. If these are
               present in the <c>ZipEntry</c>, then the extracted file will also get
               these times.
             </para>
            
             <para>
               A Directory entry is somewhat different. It will get the times as
               described for a file entry, but, if there are file entries in the zip
               archive that, when extracted, appear in the just-created directory,
               then when those file entries are extracted, the last modified and last
               accessed times of the directory will change, as a side effect.  The
               result is that after an extraction of a directory and a number of
               files within the directory, the last modified and last accessed
               timestamps on the directory will reflect the time that the last file
               was extracted into the directory, rather than the time stored in the
               zip archive for the directory.
             </para>
            
             <para>
               To compensate, when extracting an archive with <c>ExtractAll</c>,
               DotNetZip will extract all the file and directory entries as described
               above, but it will then make a second pass on the directories, and
               reset the times on the directories to reflect what is stored in the
               zip archive.
             </para>
            
             <para>
               This compensation is performed only within the context of an
               <c>ExtractAll</c>. If you call <c>ZipEntry.Extract</c> on a directory
               entry, the timestamps on directory in the filesystem will reflect the
               times stored in the zip.  If you then call <c>ZipEntry.Extract</c> on
               a file entry, which is extracted into the directory, the timestamps on
               the directory will be updated to the current time.
             </para>
             </remarks>
            
             <example>
               This example extracts all the entries in a zip archive file, to the
               specified target directory.  The extraction will overwrite any
               existing files silently.
            
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
                 zip.ExtractAll(TargetDirectory);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
                 zip.ExtractAll(TargetDirectory)
             End Using
             </code>
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/>
            
             <param name="path">
               The path to which the contents of the zipfile will be extracted.
               The path can be relative or fully-qualified.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractAll(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem, using the specified behavior when extraction would overwrite an
             existing file.
             </summary>
            
             <remarks>
            
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified
             path.  For an extraction that would overwrite an existing file, the behavior
             is dictated by <paramref name="extractExistingFile"/>, which overrides any
             setting you may have made on individual ZipEntry instances.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file
             applies to all entries.  If you want to set this on a per-entry basis,
             then you must use <see cref="M:External.Zip.Internal.ZipEntry.Extract(System.String,External.Zip.Internal.ExtractExistingFileAction)"/> or one of the similar methods.
             </para>
            
             <para>
             Calling this method is equivalent to setting the <see cref="P:External.Zip.Internal.ZipFile.ExtractExistingFile"/> property and then calling <see cref="M:External.Zip.Internal.ZipFile.ExtractAll(System.String)"/>.
             </para>
            
             <para>
             This method will send verbose output messages to the
             <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/>, if it is set on the <c>ZipFile</c> instance.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  It does not overwrite any existing files.
             <code>
             String TargetDirectory= "c:\\unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
               zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite);
             }
             </code>
            
             <code lang="VB">
             Dim TargetDirectory As String = "c:\unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite)
             End Using
             </code>
             </example>
            
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.
             </summary>
            
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the
             <c>IBM437</c> codepage.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if the <c>ZipFile</c> cannot be read. The implementation of this method
             relies on <c>System.IO.File.OpenRead</c>, which can throw a variety of exceptions,
             including specific exceptions if a file is not found, an unauthorized access
             exception, exceptions for poorly formatted filenames, and so on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.  This can be a fully-qualified or relative
             pathname.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>.
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">
             <summary>
               Reads a zip file archive from the named filesystem file using the
               specified options.
             </summary>
            
             <remarks>
             <para>
               This version of the <c>Read()</c> method allows the caller to pass
               in a <c>TextWriter</c> an <c>Encoding</c>, via an instance of the
               <c>ReadOptions</c> class.  The <c>ZipFile</c> is read in using the
               specified encoding for entries where UTF-8 encoding is not
               explicitly specified.
             </para>
             </remarks>
            
             <example>
            
             <para>
               This example shows how to read a zip file using the Big-5 Chinese
               code page (950), and extract each entry in the zip file, while
               sending status messages out to the Console.
             </para>
            
             <para>
               For this code to work as intended, the zipfile must have been
               created using the big5 code page (CP950). This is typical, for
               example, when using WinRar on a machine with CP950 set as the
               default code page.  In that case, the names of entries within the
               Zip archive will be stored in that code page, and reading the zip
               archive must be done using that code page.  If the application did
               not use the correct code page in ZipFile.Read(), then names of
               entries within the zip archive would not be correctly retrieved.
             </para>
            
             <code lang="C#">
             string zipToExtract = "MyArchive.zip";
             string extractDirectory = "extract";
             var options = new ReadOptions
             {
               StatusMessageWriter = System.Console.Out,
               Encoding = System.Text.Encoding.GetEncoding(950)
             };
             using (ZipFile zip = ZipFile.Read(zipToExtract, options))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
            
            
             <code lang="VB">
             Dim zipToExtract as String = "MyArchive.zip"
             Dim extractDirectory as String = "extract"
             Dim options as New ReadOptions
             options.Encoding = System.Text.Encoding.GetEncoding(950)
             options.StatusMessageWriter = System.Console.Out
             Using zip As ZipFile = ZipFile.Read(zipToExtract, options)
                 Dim e As ZipEntry
                 For Each e In zip
                  e.Extract(extractDirectory)
                 Next
             End Using
             </code>
             </example>
            
            
             <example>
            
             <para>
               This example shows how to read a zip file using the default
               code page, to remove entries that have a modified date before a given threshold,
               sending status messages out to a <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var options = new ReadOptions
             {
               StatusMessageWriter = new System.IO.StringWriter()
             };
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", options))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry.
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
             Dim options as New ReadOptions
             options.StatusMessageWriter = New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", options)
                 Dim Threshold As New DateTime(2007, 7, 4)
                 ' We cannot remove the entry from the list, within the context of
                 ' an enumeration of said list.
                 ' So we add the doomed entry to a list to be removed later.
                 ' pass 1: mark the entries for removal
                 Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.LastModified &lt; Threshold) Then
                         MarkedEntries.Add(e)
                     End If
                 Next
                 ' pass 2: actually remove the entry.
                 Dim zombie As ZipEntry
                 For Each zombie In MarkedEntries
                     zip.RemoveEntry(zombie)
                 Next
                 zip.Comment = "This archive has been updated."
                 zip.Save
             End Using
             ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
            
             <exception cref="T:System.Exception">
               Thrown if the zipfile cannot be read. The implementation of
               this method relies on <c>System.IO.File.OpenRead</c>, which
               can throw a variety of exceptions, including specific
               exceptions if a file is not found, an unauthorized access
               exception, exceptions for poorly formatted filenames, and so
               on.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="options">
             The set of options to use when reading the zip file.
             </param>
            
             <returns>The ZipFile instance read from the zip archive.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{External.Zip.Internal.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler,
             and returns the instance.
             </summary>
            
             <param name="fileName">
             The name of the zip archive to open.
             This can be a fully-qualified or relative pathname.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
            
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
            
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream)">
             <summary>
               Reads a zip archive from a stream.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Using this overload, the stream is read using the default
               <c>System.Text.Encoding</c>, which is the <c>IBM437</c>
               codepage. If you want to specify the encoding to use when
               reading the zipfile content, see
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)">ZipFile.Read(Stream, ReadOptions)</see>.  This
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream"/> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example shows how to Read zip content from a stream, and
               extract one entry into a different stream. In this example,
               the filename "NameOfEntryInArchive.doc", refers only to the
               name of the entry within the zip archive.  A file by that
               name is not created in the filesystem.  The I/O is done
               strictly with the given streams.
             </para>
            
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
            
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>The ZipFile instance read from the stream</returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)">
             <summary>
               Reads a zip file archive from the given stream using the
               specified options.
             </summary>
            
             <remarks>
            
             <para>
               When reading from a file, it's probably easier to just use
               <see cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)">ZipFile.Read(String, ReadOptions)</see>.  This
               overload is useful when when the zip archive content is
               available from an already-open stream. The stream must be
               open and readable and seekable when calling this method.  The
               stream is left open when the reading is completed.
             </para>
            
             <para>
               Reading of zip content begins at the current position in the
               stream.  This means if you have a stream that concatenates
               regular data and zip data, if you position the open, readable
               stream at the start of the zip data, you will be able to read
               the zip archive using this constructor, or any of the ZipFile
               constructors that accept a <see cref="T:System.IO.Stream"/> as
               input. Some examples of where this might be useful: the zip
               content is concatenated at the end of a regular EXE file, as
               some self-extracting archives do.  (Note: SFX files produced
               by DotNetZip do not work this way; they can be read as normal
               ZIP files). Another example might be a stream being read from
               a database, where the zip content is embedded within an
               aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="options">
               The set of options to use when reading the zip file.
             </param>
            
             <exception cref="T:System.Exception">
               Thrown if the zip archive cannot be read.
             </exception>
            
             <returns>The ZipFile instance read from the stream.</returns>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{External.Zip.Internal.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the
             specified TextWriter for status messages,
             and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream"/> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.String)">
             <summary>
             Checks the given file to see if it appears to be a valid zip file.
             </summary>
             <remarks>
            
             <para>
               Calling this method is equivalent to calling <see cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
             </para>
             </remarks>
            
             <param name="fileName">The file to check.</param>
             <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a file to see if it is a valid zip file.
             </summary>
            
             <remarks>
             <para>
               This method opens the specified zip file, reads in the zip archive,
               verifying the ZIP metadata as it reads.
             </para>
            
             <para>
               If everything succeeds, then the method returns true.  If anything fails -
               for example if an incorrect signature or CRC is found, indicating a
               corrupt file, the the method returns false.  This method also returns
               false for a file that does not exist.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, as part of its check, this
               method reads in the content for each entry, expands it, and checks CRCs.
               This provides an additional check beyond verifying the zip header and
               directory data.
             </para>
            
             <para>
               If <paramref name="testExtract"/> is true, and if any of the zip entries
               are protected with a password, this method will return false.  If you want
               to verify a <c>ZipFile</c> that has entries which are protected with a
               password, you will need to do that manually.
             </para>
            
             </remarks>
            
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
            
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.DeleteFileWithRetry(System.String)">
             <summary>
               Delete file with retry on UnauthorizedAccessException.
             </summary>
            
             <remarks>
               <para>
                 When calling File.Delete() on a file that has been "recently"
                 created, the call sometimes fails with
                 UnauthorizedAccessException. This method simply retries the Delete 3
                 times with a sleep between tries.
               </para>
             </remarks>
            
             <param name='filename'>the name of the file to be deleted</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save">
             <summary>
               Saves the Zip archive to a file, specified by the Name property of the
               <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage, typically a zip file
               in a filesystem, only when the caller calls <c>Save</c>.  In the typical
               case, the Save operation writes the zip content to a temporary file, and
               then renames the temporary file to the desired name. If necessary, this
               method will delete a pre-existing file before the rename.
             </para>
            
             <para>
               The <see cref="P:External.Zip.Internal.ZipFile.Name"/> property is specified either explicitly,
               or implicitly using one of the parameterized ZipFile constructors.  For
               COM Automation clients, the <c>Name</c> property must be set explicitly,
               because COM Automation clients cannot call parameterized constructors.
             </para>
            
             <para>
               When using a filesystem file for the Zip output, it is possible to call
               <c>Save</c> multiple times on the <c>ZipFile</c> instance. With each
               call the zip content is re-written to the same output file.
             </para>
            
             <para>
               Data for entries that have been added to the <c>ZipFile</c> instance is
               written to the output when the <c>Save</c> method is called. This means
               that the input streams for those entries must be available at the time
               the application calls <c>Save</c>.  If, for example, the application
               adds entries with <c>AddEntry</c> using a dynamically-allocated
               <c>MemoryStream</c>, the memory stream must not have been disposed
               before the call to <c>Save</c>. See the <see cref="P:External.Zip.Internal.ZipEntry.InputStream"/> property for more discussion of the
               availability requirements of the input stream for an entry, and an
               approach for providing just-in-time stream lifecycle management.
             </para>
            
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddEntry(System.String,System.IO.Stream)"/>
            
             <exception cref="T:External.Zip.Internal.BadStateException">
               Thrown if you haven't specified a location or stream for saving the zip,
               either in the constructor or by setting the Name property, or if you try
               to save a regular zip archive to a filename with a .exe extension.
             </exception>
            
             <exception cref="T:System.OverflowException">
               Thrown if <see cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/> is non-zero, and the number
               of segments that would be generated for the spanned zip file during the
               save operation exceeds 99.  If this happens, you need to increase the
               segment size.
             </exception>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name.
             </summary>
            
             <remarks>
             <para>
             This method allows the application to explicitly specify the name of the zip
             file when saving. Use this when creating a new zip file, or when
             updating a zip archive.
             </para>
            
             <para>
             An application can also save a zip archive in several places by calling this
             method multiple times in succession, with different filenames.
             </para>
            
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to save to. Existing files will
             be overwritten with great prejudice.
             </param>
            
             <example>
             This example shows how to create and Save a zip file.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.AddDirectory(@"c:\reports\January");
               zip.Save("January.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.AddDirectory("c:\reports\January")
               zip.Save("January.zip")
             End Using
             </code>
            
             </example>
            
             <example>
             This example shows how to update a zip file.
             <code>
             using (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))
             {
               zip.AddFile("NewData.csv");
               zip.Save("UpdatedArchive.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read("ExistingArchive.zip")
               zip.AddFile("NewData.csv")
               zip.Save("UpdatedArchive.zip")
             End Using
             </code>
            
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.Save(System.IO.Stream)">
             <summary>
               Save the zip archive to the specified stream.
             </summary>
            
             <remarks>
             <para>
               The <c>ZipFile</c> instance is written to storage - typically a zip file
               in a filesystem, but using this overload, the storage can be anything
               accessible via a writable stream - only when the caller calls <c>Save</c>.
             </para>
            
             <para>
               Use this method to save the zip content to a stream directly.  A common
               scenario is an ASP.NET application that dynamically generates a zip file
               and allows the browser to download it. The application can call
               <c>Save(Response.OutputStream)</c> to write a zipfile directly to the
               output stream, without creating a zip file on the disk on the ASP.NET
               server.
             </para>
            
             <para>
               Be careful when saving a file to a non-seekable stream, including
               <c>Response.OutputStream</c>. When DotNetZip writes to a non-seekable
               stream, the zip archive is formatted in such a way that may not be
               compatible with all zip tools on all platforms.  It's a perfectly legal
               and compliant zip file, but some people have reported problems opening
               files produced this way using the Mac OS archive utility.
             </para>
            
             </remarks>
            
             <example>
            
               This example saves the zipfile content into a MemoryStream, and
               then gets the array of bytes from that MemoryStream.
            
             <code lang="C#">
             using (var zip = new Ionic.Zip.ZipFile())
             {
                 zip.CompressionLevel= Ionic.Zlib.CompressionLevel.BestCompression;
                 zip.Password = "VerySecret.";
                 zip.Encryption = EncryptionAlgorithm.WinZipAes128;
                 zip.AddFile(sourceFileName);
                 MemoryStream output = new MemoryStream();
                 zip.Save(output);
            
                 byte[] zipbytes = output.ToArray();
             }
             </code>
             </example>
            
             <example>
             <para>
               This example shows a pitfall you should avoid. DO NOT read
               from a stream, then try to save to the same stream.  DO
               NOT DO THIS:
             </para>
            
             <code lang="C#">
             using (var fs = new FileSteeam(filename, FileMode.Open))
             {
               using (var zip = Ionic.Zip.ZipFile.Read(inputStream))
               {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save(inputStream);  // NO NO NO!!
               }
             }
             </code>
            
             <para>
               Better like this:
             </para>
            
             <code lang="C#">
             using (var zip = Ionic.Zip.ZipFile.Read(filename))
             {
                 zip.AddEntry("Name1.txt", "this is the content");
                 zip.Save();  // YES!
             }
             </code>
            
             </example>
            
             <param name="outputStream">
               The <c>System.IO.Stream</c> to write to. It must be
               writable. If you created the ZipFile instanct by calling
               ZipFile.Read(), this stream must not be the same stream
               you passed to ZipFile.Read().
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorFlavor)">
             <summary>
             Saves the ZipFile instance to a self-extracting zip archive.
             </summary>
            
             <remarks>
            
             <para>
             The generated exe image will execute on any machine that has the .NET
             Framework 2.0 installed on it.  The generated exe image is also a
             valid ZIP file, readable with DotNetZip or another Zip library or tool
             such as WinZip.
             </para>
            
             <para>
             There are two "flavors" of self-extracting archive.  The
             <c>WinFormsApplication</c> version will pop up a GUI and allow the
             user to select a target directory into which to extract. There's also
             a checkbox allowing the user to specify to overwrite existing files,
             and another checkbox to allow the user to request that Explorer be
             opened to see the extracted files after extraction.  The other flavor
             is <c>ConsoleApplication</c>.  A self-extractor generated with that
             flavor setting will run from the command line. It accepts command-line
             options to set the overwrite behavior, and to specify the target
             extraction directory.
             </para>
            
             <para>
             There are a few temporary files created during the saving to a
             self-extracting zip.  These files are created in the directory pointed
             to by <see cref="P:External.Zip.Internal.ZipFile.TempFileFolder"/>, which defaults to <see cref="M:System.IO.Path.GetTempPath"/>.  These temporary files are
             removed upon successful completion of this method.
             </para>
            
             <para>
             When a user runs the WinForms SFX, the user's personal directory (<see cref="F:System.Environment.SpecialFolder.Personal">Environment.SpecialFolder.Personal</see>)
             will be used as the default extract location.  If you want to set the
             default extract location, you should use the other overload of
             <c>SaveSelfExtractor()</c>/ The user who runs the SFX will have the
             opportunity to change the extract directory before extracting. When
             the user runs the Command-Line SFX, the user must explicitly specify
             the directory to which to extract.  The .NET Framework 2.0 is required
             on the computer when the self-extracting archive is run.
             </para>
            
             <para>
             NB: This method is not available in the version of DotNetZip build for
             the .NET Compact Framework, nor in the "Reduced" DotNetZip library.
             </para>
            
             </remarks>
            
             <example>
             <code>
             string DirectoryPath = "c:\\Documents\\Project7";
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath));
                 zip.Comment = "This will be embedded into a self-extracting console-based exe";
                 zip.SaveSelfExtractor("archive.exe", SelfExtractorFlavor.ConsoleApplication);
             }
             </code>
             <code lang="VB">
             Dim DirectoryPath As String = "c:\Documents\Project7"
             Using zip As New ZipFile()
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath))
                 zip.Comment = "This will be embedded into a self-extracting console-based exe"
                 zip.SaveSelfExtractor("archive.exe", SelfExtractorFlavor.ConsoleApplication)
             End Using
             </code>
             </example>
            
             <param name="exeToGenerate">
               a pathname, possibly fully qualified, to be created. Typically it
               will end in an .exe extension.</param>
             <param name="flavor">
               Indicates whether a Winforms or Console self-extractor is
               desired. </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorSaveOptions)">
             <summary>
               Saves the ZipFile instance to a self-extracting zip archive, using
               the specified save options.
             </summary>
            
             <remarks>
             <para>
               This method saves a self extracting archive, using the specified save
               options. These options include the flavor of the SFX, the default extract
               directory, the icon file, and so on.  See the documentation
               for <see cref="M:External.Zip.Internal.ZipFile.SaveSelfExtractor(System.String,External.Zip.Internal.SelfExtractorFlavor)"/> for more
               details.
             </para>
            
             <para>
               The user who runs the SFX will have the opportunity to change the extract
               directory before extracting. If at the time of extraction, the specified
               directory does not exist, the SFX will create the directory before
               extracting the files.
             </para>
            
             </remarks>
            
             <example>
               This example saves a WinForms-based self-extracting archive EXE that
               will use c:\ExtractHere as the default extract location. The C# code
               shows syntax for .NET 3.0, which uses an object initializer for
               the SelfExtractorOptions object.
             <code>
             string DirectoryPath = "c:\\Documents\\Project7";
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath));
                 zip.Comment = "This will be embedded into a self-extracting WinForms-based exe";
                 var options = new SelfExtractorOptions
                 {
                   Flavor = SelfExtractorFlavor.WinFormsApplication,
                   DefaultExtractDirectory = "%USERPROFILE%\\ExtractHere",
                   PostExtractCommandLine = ExeToRunAfterExtract,
                   SfxExeWindowTitle = "My Custom Window Title",
                   RemoveUnpackedFilesAfterExecute = true
                 };
                 zip.SaveSelfExtractor("archive.exe", options);
             }
             </code>
             <code lang="VB">
             Dim DirectoryPath As String = "c:\Documents\Project7"
             Using zip As New ZipFile()
                 zip.AddDirectory(DirectoryPath, System.IO.Path.GetFileName(DirectoryPath))
                 zip.Comment = "This will be embedded into a self-extracting console-based exe"
                 Dim options As New SelfExtractorOptions()
                 options.Flavor = SelfExtractorFlavor.WinFormsApplication
                 options.DefaultExtractDirectory = "%USERPROFILE%\\ExtractHere"
                 options.PostExtractCommandLine = ExeToRunAfterExtract
                 options.SfxExeWindowTitle = "My Custom Window Title"
                 options.RemoveUnpackedFilesAfterExecute = True
                 zip.SaveSelfExtractor("archive.exe", options)
             End Using
             </code>
             </example>
            
             <param name="exeToGenerate">The name of the EXE to generate.</param>
             <param name="options">provides the options for creating the
             Self-extracting archive.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)">
             <summary>
               Adds to the ZipFile a set of files from the current working directory on
               disk, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.
             </para>
            
             <para>
               Specify the criteria in statements of 3 elements: a noun, an operator, and
               a value.  Consider the string "name != *.doc" .  The noun is "name".  The
               operator is "!=", implying "Not Equal".  The value is "*.doc".  That
               criterion, in English, says "all files with a name that does not end in
               the .doc extension."
             </para>
            
             <para>
               Supported nouns include "name" (or "filename") for the filename; "atime",
               "mtime", and "ctime" for last access time, last modfied time, and created
               time of the file, respectively; "attributes" (or "attrs") for the file
               attributes; "size" (or "length") for the file length (uncompressed), and
               "type" for the type of object, either a file or a directory.  The
               "attributes", "name" and "type" nouns both support = and != as operators.
               The "size", "atime", "mtime", and "ctime" nouns support = and !=, and
               &gt;, &gt;=, &lt;, &lt;= as well. The times are taken to be expressed in
               local time.
             </para>
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A,I,L in any order, implying file attributes of Hidden,
             ReadOnly, System, Archive, NotContextIndexed, and ReparsePoint (symbolic
             link) respectively.
             </para>
            
             <para>
             To specify a time, use YYYY-MM-DD-HH:mm:ss or YYYY/MM/DD-HH:mm:ss as the
             format.  If you omit the HH:mm:ss portion, it is assumed to be 00:00:00
             (midnight).
             </para>
            
             <para>
             The value for a size criterion is expressed in integer quantities of bytes,
             kilobytes (use k or kb after the number), megabytes (m or mb), or gigabytes
             (g or gb).
             </para>
            
             <para>
             The value for a name is a pattern to match against the filename, potentially
             including wildcards.  The pattern follows CMD.exe glob rules: * implies one
             or more of any character, while ?  implies one character.  If the name
             pattern contains any slashes, it is matched to the entire filename,
             including the path; otherwise, it is matched against only the filename
             without the path.  This means a pattern of "*\*.*" matches all files one
             directory level deep, while a pattern of "*.*" matches all files in all
             directories.
             </para>
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the
             pattern.  A pattern of "'* *.*'" will match all files that have spaces in
             the filename.  The full criteria string for that would be "name = '* *.*'" .
             </para>
            
             <para>
             The value for a type criterion is either F (implying a file) or D (implying
             a directory).
             </para>
            
             <para>
             Some examples:
             </para>
            
             <list type="table">
               <listheader>
                 <term>criteria</term>
                 <description>Files retrieved</description>
               </listheader>
            
               <item>
                 <term>name != *.xls </term>
                 <description>any file with an extension that is not .xls
                 </description>
               </item>
            
               <item>
                 <term>name = *.mp3 </term>
                 <description>any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>*.mp3</term>
                 <description>(same as above) any file with a .mp3 extension.
                 </description>
               </item>
            
               <item>
                 <term>attributes = A </term>
                 <description>all files whose attributes include the Archive bit.
                 </description>
               </item>
            
               <item>
                 <term>attributes != H </term>
                 <description>all files whose attributes do not include the Hidden bit.
                 </description>
               </item>
            
               <item>
                 <term>mtime > 2009-01-01</term>
                 <description>all files with a last modified time after January 1st, 2009.
                 </description>
               </item>
            
               <item>
                 <term>size > 2gb</term>
                 <description>all files whose uncompressed size is greater than 2gb.
                 </description>
               </item>
            
               <item>
                 <term>type = D</term>
                 <description>all directories in the filesystem. </description>
               </item>
            
             </list>
            
             <para>
             You can combine criteria with the conjunctions AND or OR. Using a string
             like "name = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves
             entries whose names end in .txt, and whose uncompressed size is greater than
             or equal to 100 kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group
             clauses in the boolean logic.  Without parenthesis, the precedence of the
             criterion atoms is determined by order of appearance.  Unlike the C#
             language, the AND conjunction does not take precendence over the logical OR.
             This is important only in strings that contain 3 or more criterion atoms.
             In other words, "name = *.txt and size &gt; 1000 or attributes = H" implies
             "((name = *.txt AND size &gt; 1000) OR attributes = H)" while "attributes =
             H OR name = *.txt and size &gt; 1000" evaluates to "((attributes = H OR name
             = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all
             entries that were last updated on 2009 February 14, specify a time range
             like so:"mtime &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this to
             say: all files updated after 12:00am on February 14th, until 12:00am on
             February 15th.  You can use the same bracketing approach to specify any time
             period - a year, a month, a week, and so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is
             treated as a pattern to match for the filename.  Therefore a string like "*.xls"
             will be equivalent to specifying "name = *.xls".
             </para>
            
             <para>
             There is no logic in this method that insures that the file inclusion
             criteria are internally consistent.  For example, it's possible to specify
             criteria that says the file must have a size of less than 100 bytes, as well
             as a size that is greater than 1000 bytes. Obviously no file will ever
             satisfy such criteria, but this method does not detect such logical
             inconsistencies. The caller is responsible for insuring the criteria are
             sensible.
             </para>
            
             <para>
               Using this method, the file selection does not recurse into
               subdirectories, and the full path of the selected files is included in the
               entries added into the zip archive.  If you don't like these behaviors,
               see the other overloads of this method.
             </para>
             </remarks>
            
             <example>
             This example zips up all *.csv files in the current working directory.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // To just match on filename wildcards,
                 // use the shorthand form of the selectionCriteria string.
                 zip.AddSelectedFiles("*.csv");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 zip.AddSelectedFiles("*.csv")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the disk that conform to the
               specified criteria, optionally recursing into subdirectories.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the the current working directory matching
               the specified criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the current working directory.
             </para>
            
             <para>
               Using this method, the full path of the selected files is included in the
               entries added into the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files in the current working directory, or any
               subdirectory, that are larger than 1mb.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String)">
             <summary>
               Adds to the ZipFile a set of files from a specified directory in the
               filesystem, that conform to the specified criteria.
             </summary>
            
             <remarks>
             <para>
               This method selects files that conform to the specified criteria, from the
               the specified directory on disk, and adds them to the ZipFile.  The search
               does not recurse into subdirectores.
             </para>
            
             <para>
               Using this method, the full filesystem path of the files on disk is
               reproduced on the entries added to the zip file.  If you don't want this
               behavior, use one of the other overloads of this method.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.xml files larger than 1mb in the directory
               given by "d:\rawdata".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", "d:\\rawdata");
                 zip.Save(PathToZipArchive);
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size &gt; 1024kb", "d:\rawdata)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a set of files from the specified directory on disk,
               that conform to the specified criteria.
             </summary>
            
             <remarks>
            
             <para>
               This method selects files from the the specified disk directory matching
               the specified selection criteria, and adds them to the ZipFile.  If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories.
             </para>
            
             <para>
               The full directory structure in the filesystem is reproduced on the
               entries added to the zip archive.  If you don't want this behavior, use
               one of the overloads of this method that allows the specification of a
               <c>directoryInArchive</c>.
             </para>
            
             <para>
               For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
            
               This example zips up all *.csv files in the "files" directory, or any
               subdirectory, that have been saved since 2009 February 14th.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime &gt; 2009-02-14", "files", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime &gt; 2009-02-14", "files", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <example>
               This example zips up all files in the current working
               directory, and all its child directories, except those in
               the <c>excludethis</c> subdirectory.
             <code lang="VB">
             Using Zip As ZipFile = New ZipFile(zipfile)
               Zip.AddSelectedFfiles("name != 'excludethis\*.*'", datapath, True)
               Zip.Save()
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
               The filesystem path from which to select files.
             </param>
            
             <param name="recurseDirectories">
               If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, and using a specified root
               path for entries added to the zip archive.
             </summary>
            
             <remarks>
             <para>
               This method selects files from the specified disk directory matching the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive.  The search does not recurse
               into subdirectories.  For details on the syntax for the selectionCriteria
               parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             </remarks>
            
             <example>
            
               This example zips up all *.psd files in the "photos" directory that have
               been saved since 2009 February 14th, and puts them all in a zip file,
               using the directory name of "content" in the zip archive itself. When the
               zip archive is unzipped, the folder containing the .psd files will be
               named "content".
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.psd  and  mtime &gt; 2009-02-14", "photos", "content");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name = *.psd  and  mtime &gt; 2009-02-14", "photos", "content")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Adds to the ZipFile a selection of files from the specified directory on
               disk, that conform to the specified criteria, optionally recursing through
               subdirectories, and using a specified root path for entries added to the
               zip archive.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and adds those files to the ZipFile, using
               the specified directory path in the archive. If <c>recurseDirectories</c>
               is true, files are also selected from subdirectories, and the directory
               structure in the filesystem is reproduced in the zip archive, rooted at
               the directory specified by <c>directoryOnDisk</c>.  For details on the
               syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </remarks>
            
             <example>
            
               This example zips up all files that are NOT *.pst files, in the current
               working directory and any subdirectories.
            
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>.  This path may, or may not, correspond to a real
               directory in the current filesystem.  If the files within the zip are
               later extracted, this is the path used for the extracted file.  Passing
               null (nothing in VB) will use the path on the file name, if any; in other
               words it would use <c>directoryOnDisk</c>, plus any subdirectory.  Passing
               the empty string ("") will insert the item at the root path within the
               archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the
               criteria.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.UpdateSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
               Updates the ZipFile with a selection of files from the disk that conform
               to the specified criteria.
             </summary>
            
             <remarks>
               This method selects files from the specified disk directory that match the
               specified selection criteria, and Updates the <c>ZipFile</c> with those
               files, using the specified directory path in the archive. If
               <c>recurseDirectories</c> is true, files are also selected from
               subdirectories, and the directory structure in the filesystem is
               reproduced in the zip archive, rooted at the directory specified by
               <c>directoryOnDisk</c>.  For details on the syntax for the
               selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </remarks>
            
             <param name="selectionCriteria">
               The criteria for selection of files to add to the <c>ZipFile</c>.
             </param>
            
             <param name="directoryOnDisk">
               The path to the directory in the filesystem from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
               Specifies a directory path to use to in place of the
               <c>directoryOnDisk</c>. This path may, or may not, correspond to a
               real directory in the current filesystem. If the files within the zip
               are later extracted, this is the path used for the extracted file.
               Passing null (nothing in VB) will use the path on the file name, if
               any; in other words it would use <c>directoryOnDisk</c>, plus any
               subdirectory.  Passing the empty string ("") will insert the item at
               the root path within the archive.
             </param>
            
             <param name="recurseDirectories">
               If true, the method also scans subdirectories for files matching the criteria.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SelectEntries(System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example selects all the PhotoShop files from within an archive, and extracts them
             to the current working directory.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var PhotoShopFiles = zip1.SelectEntries("*.psd");
                 foreach (ZipEntry psd in PhotoShopFiles)
                 {
                     psd.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim PhotoShopFiles as ICollection(Of ZipEntry)
                 PhotoShopFiles = zip1.SelectEntries("*.psd")
                 Dim psd As ZipEntry
                 For Each psd In PhotoShopFiles
                     psd.Extract
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.SelectEntries(System.String,System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var UpdatedPhotoShopFiles = zip1.SelectEntries("*.psd", "UpdatedFiles");
                 foreach (ZipEntry e in UpdatedPhotoShopFiles)
                 {
                     // prompt for extract here
                     if (WantExtract(e.FileName))
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim UpdatedPhotoShopFiles As ICollection(Of ZipEntry) = zip1.SelectEntries("*.psd", "UpdatedFiles")
                 Dim e As ZipEntry
                 For Each e In UpdatedPhotoShopFiles
                     ' prompt for extract here
                     If Me.WantExtract(e.FileName) Then
                         e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             This example removes all entries in a zip file that were modified prior to January 1st, 2008.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01");
                 // don't forget to save the archive!
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01")
                 ' do not forget to save the archive!
                 zip1.Save
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.RemoveSelectedEntries(System.String,System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria, and within the specified
             path in the archive.
             </summary>
            
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
            
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
            
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents");
                 // a call to ZipFile.Save will make the modifications permanent
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents")
                 ' a call to ZipFile.Save will make the modifications permanent
                 zip1.Save
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the selectionCriteria string,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15");
             }
             </code>
             </example>
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             overwriting any existing files.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15",
                                          ExtractExistingFileAction.OverwriteSilently);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are selected from the specified directory within the archive, and then
             extracted into the current working directory.
             </para>
            
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009,
             and writes them to the "unpack" directory.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15","unpack");
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,External.Zip.Internal.ExtractExistingFileAction)"/>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. If any of the files to be
             extracted already exist, an exception will be thrown.
             </para>
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryInArchive">
             the directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractDirectory">
             the directory on the disk into which to extract. It will be created
             if it does not exist.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,External.Zip.Internal.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             <paramref name="extractExistingFile"/> parameter.
             </para>
            
             <para>
             For information on the syntax of the string describing the entry selection criteria,
             see <see cref="M:External.Zip.Internal.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all files  with an XML extension or with  a size larger than 100,000 bytes,
             and puts them in the unpack directory.  For any files that already exist in
             that destination directory, they will not be overwritten.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  or  size &gt; 100000",
                                          null,
                                          "unpack",
                                          ExtractExistingFileAction.DontOverwrite);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractDirectory">
             The directory on the disk into which to extract. It will be created if it does not exist.
             </param>
            
             <param name="directoryPathInArchive">
             The directory in the archive from which to select entries. If null, then
             all directories in the archive are used.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
            
        </member>
        <member name="M:External.Zip.Internal.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in an enumeration.
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead
             it is implicitly called when you use a <see langword="foreach"/> loop in C#, or a
             <c>For Each</c> loop in VB.NET.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the
             entries in that zip file, and displays the information about each
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
            
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipFile.GetNewEnum">
             <summary>
             An IEnumerator, for use of a ZipFile in a foreach construct.
             </summary>
            
             <remarks>
             This method is included for COM support.  An application generally does not call
             this method directly.  It is called implicitly by COM clients when enumerating
             the entries in the ZipFile instance.  In VBScript, this is done with a <c>For Each</c>
             statement.  In Javascript, this is done with <c>new Enumerator(zipfile)</c>.
             </remarks>
            
             <returns>
             The IEnumerator over the entries in the ZipFile.
             </returns>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Info">
             <summary>
               Provides a human-readable string with information about the ZipFile.
             </summary>
            
             <remarks>
               <para>
                 The information string contains 10 lines or so, about each ZipEntry,
                 describing whether encryption is in use, the compressed and uncompressed
                 length of the entry, the offset of the entry, and so on. As a result the
                 information string can be very long for zip files that contain many
                 entries.
               </para>
               <para>
                 This information is mostly useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.FullScan">
             <summary>
             Indicates whether to perform a full scan of the zip file when reading it.
             </summary>
            
             <remarks>
            
             <para>
               You almost never want to use this property.
             </para>
            
             <para>
               When reading a zip file, if this flag is <c>true</c> (<c>True</c> in
               VB), the entire zip archive will be scanned and searched for entries.
               For large archives, this can take a very, long time. The much more
               efficient default behavior is to read the zip directory, which is
               stored at the end of the zip file. But, in some cases the directory is
               corrupted and you need to perform a full scan of the zip file to
               determine the contents of the zip file. This property lets you do
               that, when necessary.
             </para>
            
             <para>
               This flag is effective only when calling <see cref="M:External.Zip.Internal.ZipFile.Initialize(System.String)"/>. Normally you would read a ZipFile with the
               static <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)">ZipFile.Read</see>
               method. But you can't set the <c>FullScan</c> property on the
               <c>ZipFile</c> instance when you use a static factory method like
               <c>ZipFile.Read</c>.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to read a zip file using the full scan approach,
               and then save it, thereby producing a corrected zip file.
            
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.FullScan = true;
                 zip.Initialize(zipFileName);
                 zip.Save(newName);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.FullScan = True
                 zip.Initialize(zipFileName)
                 zip.Save(newName)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.SortEntriesBeforeSaving">
             <summary>
               Whether to sort the ZipEntries before saving the file.
             </summary>
            
             <remarks>
               The default is false.  If you have a large number of zip entries, the sort
               alone can consume significant time.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddFiles(filesToAdd);
                 zip.SortEntriesBeforeSaving = true;
                 zip.Save(name);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFiles(filesToAdd)
                 zip.SortEntriesBeforeSaving = True
                 zip.Save(name)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AddDirectoryWillTraverseReparsePoints">
             <summary>
               Indicates whether NTFS Reparse Points, like junctions, should be
               traversed during calls to <c>AddDirectory()</c>.
             </summary>
            
             <remarks>
               By default, calls to AddDirectory() will traverse NTFS reparse
               points, like mounted volumes, and directory junctions.  An example
               of a junction is the "My Music" directory in Windows Vista.  In some
               cases you may not want DotNetZip to traverse those directories.  In
               that case, set this property to false.
             </remarks>
            
             <example>
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.AddDirectoryWillTraverseReparsePoints = false;
                 zip.AddDirectory(dirToZip,"fodder");
                 zip.Save(zipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.BufferSize">
             <summary>
               Size of the IO buffer used while saving.
             </summary>
            
             <remarks>
            
             <para>
               First, let me say that you really don't need to bother with this.  It is
               here to allow for optimizations that you probably won't make! It will work
               fine if you don't set or get this property at all. Ok?
             </para>
            
             <para>
               Now that we have <em>that</em> out of the way, the fine print: This
               property affects the size of the buffer that is used for I/O for each
               entry contained in the zip file. When a file is read in to be compressed,
               it uses a buffer given by the size here.  When you update a zip file, the
               data for unmodified entries is copied from the first zip file to the
               other, through a buffer given by the size here.
             </para>
            
             <para>
               Changing the buffer size affects a few things: first, for larger buffer
               sizes, the memory used by the <c>ZipFile</c>, obviously, will be larger
               during I/O operations.  This may make operations faster for very much
               larger files.  Last, for any given entry, when you use a larger buffer
               there will be fewer progress events during I/O operations, because there's
               one progress event generated for each time the buffer is filled and then
               emptied.
             </para>
            
             <para>
               The default buffer size is 8k.  Increasing the buffer size may speed
               things up as you compress larger files.  But there are no hard-and-fast
               rules here, eh?  You won't know til you test it.  And there will be a
               limit where ever larger buffers actually slow things down.  So as I said
               in the beginning, it's probably best if you don't set or get this property
               at all.
             </para>
            
             </remarks>
            
             <example>
             This example shows how you might set a large buffer size for efficiency when
             dealing with zip entries that are larger than 1gb.
             <code lang="C#">
             using (ZipFile zip = new ZipFile())
             {
                 zip.SaveProgress += this.zip1_SaveProgress;
                 zip.AddDirectory(directoryToZip, "");
                 zip.UseZip64WhenSaving = Zip64Option.Always;
                 zip.BufferSize = 65536*8; // 65536 * 8 = 512k
                 zip.Save(ZipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               <para>
                 When doing ZLIB or Deflate compression, the library fills a buffer,
                 then passes it to the compressor for compression. Then the library
                 reads out the compressed bytes. This happens repeatedly until there
                 is no more uncompressed data to compress. This property sets the
                 size of the buffer that will be used for chunk-wise compression. In
                 order for the setting to take effect, your application needs to set
                 this property before calling one of the <c>ZipFile.Save()</c>
                 overloads.
               </para>
               <para>
                 Setting this affects the performance and memory efficiency of
                 compression and decompression. For larger files, setting this to a
                 larger size may improve compression performance, but the exact
                 numbers vary depending on available memory, the size of the streams
                 you are compressing, and a bunch of other variables. I don't have
                 good firm recommendations on how to set it.  You'll have to test it
                 yourself. Or just leave it alone and accept the default.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.FlattenFoldersOnExtract">
             <summary>
               Indicates whether extracted files should keep their paths as
               stored in the zip archive.
             </summary>
            
             <remarks>
              <para>
                This property affects Extraction.  It is not used when creating zip
                archives.
              </para>
            
              <para>
                With this property set to <c>false</c>, the default, extracting entries
                from a zip file will create files in the filesystem that have the full
                path associated to the entry within the zip file.  With this property set
                to <c>true</c>, extracting entries from the zip file results in files
                with no path: the folders are "flattened."
              </para>
            
              <para>
                An example: suppose the zip file contains entries /directory1/file1.txt and
                /directory2/file2.txt.  With <c>FlattenFoldersOnExtract</c> set to false,
                the files created will be \directory1\file1.txt and \directory2\file2.txt.
                With the property set to true, the files created are file1.txt and file2.txt.
              </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when
               compressing entries using the DEFLATE method. Different compression
               strategies work better on different sorts of data. The strategy
               parameter can affect the compression ratio and the speed of
               compression but not the correctness of the compresssion.  For more
               information see <see cref="T:External.Zip.Internal.Zlib.CompressionStrategy">Ionic.Zlib.CompressionStrategy</see>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Name">
             <summary>
               The name of the <c>ZipFile</c>, on disk.
             </summary>
            
             <remarks>
            
             <para>
               When the <c>ZipFile</c> instance was created by reading an archive using
               one of the <c>ZipFile.Read</c> methods, this property represents the name
               of the zip file that was read.  When the <c>ZipFile</c> instance was
               created by using the no-argument constructor, this value is <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
            
             <para>
               If you use the no-argument constructor, and you then explicitly set this
               property, when you call <see cref="M:External.Zip.Internal.ZipFile.Save"/>, this name will
               specify the name of the zip file created.  Doing so is equivalent to
               calling <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/>.  When instantiating a
               <c>ZipFile</c> by reading from a stream or byte array, the <c>Name</c>
               property remains <c>null</c>.  When saving to a stream, the <c>Name</c>
               property is implicitly set to <c>null</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, and <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified compression level.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CompressionMethod">
            <summary>
              The compression method for the zipfile.
            </summary>
            <remarks>
              <para>
                By default, the compression method is <c>CompressionMethod.Deflate.</c>
              </para>
            </remarks>
            <seealso cref="T:External.Zip.Internal.CompressionMethod"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               This property is read/write. It allows the application to specify a
               comment for the <c>ZipFile</c>, or read the comment for the
               <c>ZipFile</c>.  After setting this property, changes are only made
               permanent when you call a <c>Save()</c> method.
             </para>
            
             <para>
               According to <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/>). (c) if <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this.  It will likely result in a zip file that is
               not readable by any tool or application.  For best interoperability, leave
               <see cref="P:External.Zip.Internal.ZipFile.AlternateEncoding"/> alone, or specify it only
               once, before adding any entries to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving">
             <summary>
               Specifies whether the Creation, Access, and Modified times for entries
               added to the zip file will be emitted in Windows format
               when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Windows. By default this flag is
               <c>true</c>, meaning the Windows-format times are stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to
               <c>DateTime.Now</c>.  Applications can also explicitly set those times by
               calling <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications typically
               use: seconds since January 1, 1970 UTC.  Each format can be stored in an
               "extra field" in the zip entry when saving the zip archive. The former
               uses an extra field with a Header Id of 0x000A, while the latter uses a
               header ID of 0x5455, although you probably don't need to know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe <see href="http://www.info-zip.org/">the Infozip
               tools</see> can read the Unix format timestamps. Some tools and libraries
               may be able to read only one or the other. DotNetZip can read or write
               times in either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               The value set here applies to all entries subsequently added to the
               <c>ZipFile</c>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving"/> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see cref="P:External.Zip.Internal.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the archive, a time that is always stored in "DOS format". And,
               notwithstanding the names PKWare uses for these time formats, any of them
               can be read and written by any computer, on any operating system.  But,
               there are no guarantees that a program running on Mac or Linux will
               gracefully handle a zip file with "Windows" formatted times, or that an
               application that does not use DotNetZip but runs on Windows will be able to
               handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <example>
               This example shows how to save a zip file that contains file timestamps
               in a format normally used by Unix.
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 // produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = false;
                 zip.EmitTimesInUnixFormatWhenSaving = true;
                 zip.AddDirectory(directoryToZip, "files");
                 zip.Save(outputFile);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 '' produce a zip file the Mac will like
                 zip.EmitTimesInWindowsFormatWhenSaving = False
                 zip.EmitTimesInUnixFormatWhenSaving = True
                 zip.AddDirectory(directoryToZip, "files")
                 zip.Save(outputFile)
             End Using
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EmitTimesInUnixFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times
             for entries added to the zip file will be emitted in "Unix(tm)
             format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
               An application creating a zip archive can use this flag to explicitly
               specify that the file times for the entries should or should not be stored
               in the zip archive in the format used by Unix. By default this flag is
               <c>false</c>, meaning the Unix-format times are not stored in the zip
               archive.
             </para>
            
             <para>
               When adding an entry from a file or directory, the Creation (<see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>), Access (<see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>), and Modified (<see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>) times for the given entry are
               automatically set from the filesystem values. When adding an entry from a
               stream or string, all three values are implicitly set to DateTime.Now.
               Applications can also explicitly set those times by calling <see cref="M:External.Zip.Internal.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see> describes multiple ways to format these times in a
               zip file. One is the format Windows applications normally use: 100ns ticks
               since January 1, 1601 UTC.  The other is a format Unix applications
               typically use: seconds since January 1, 1970 UTC.  Each format can be
               stored in an "extra field" in the zip entry when saving the zip
               archive. The former uses an extra field with a Header Id of 0x000A, while
               the latter uses a header ID of 0x5455, although you probably don't need to
               know that.
             </para>
            
             <para>
               Not all tools and libraries can interpret these fields.  Windows
               compressed folders is one that can read the Windows Format timestamps,
               while I believe the <see href="http://www.info-zip.org/">Infozip</see>
               tools can read the Unix format timestamps. Some tools and libraries may be
               able to read only one or the other.  DotNetZip can read or write times in
               either or both formats.
             </para>
            
             <para>
               The times stored are taken from <see cref="P:External.Zip.Internal.ZipEntry.ModifiedTime"/>, <see cref="P:External.Zip.Internal.ZipEntry.AccessedTime"/>, and <see cref="P:External.Zip.Internal.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
               This property is not mutually exclusive of the <see cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving"/> property. It is possible and
               legal and valid to produce a zip file that contains timestamps encoded in
               the Unix format as well as in the Windows format, in addition to the <see cref="P:External.Zip.Internal.ZipEntry.LastModified">LastModified</see> time attached to each
               entry in the zip archive, a time that is always stored in "DOS
               format". And, notwithstanding the names PKWare uses for these time
               formats, any of them can be read and written by any computer, on any
               operating system.  But, there are no guarantees that a program running on
               Mac or Linux will gracefully handle a zip file with "Windows" formatted
               times, or that an application that does not use DotNetZip but runs on
               Windows will be able to handle file times in Unix format.
             </para>
            
             <para>
               When in doubt, test.  Sorry, I haven't got a complete list of tools and
               which sort of timestamps they can use and will tolerate.  If you get any
               good information and would like to pass it on, please do so and I will
               include that information in this documentation.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.EmitTimesInWindowsFormatWhenSaving"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Verbose">
             <summary>
               Indicates whether verbose output is sent to the <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/> during <c>AddXxx()</c> and
               <c>ReadXxx()</c> operations.
             </summary>
            
             <remarks>
               This is a <em>synthetic</em> property.  It returns true if the <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/> is non-null.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval">
             <summary>
               Indicates whether to perform case-sensitive matching on the filename when
               retrieving entries in the zipfile via the string-based indexer.
             </summary>
            
             <remarks>
               The default value is <c>false</c>, which means don't do case-sensitive
               matching. In other words, retrieving zip["ReadMe.Txt"] is the same as
               zip["readme.txt"].  It really makes sense to set this to <c>true</c> only
               if you are not running on Windows, which has case-insensitive
               filenames. But since this library is not built for non-Windows platforms,
               in most cases you should just leave this property alone.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using Unicode
               (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               your <c>ZipFile</c> will encode all filenames and comments using the
               IBM437 codepage.  This can cause "loss of information" on some filenames,
               but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipFile</c>, then adds two files, each with
               names of four Chinese characters each, this will result in a duplicate
               filename exception.  In the case where you add a single file with a name
               containing four Chinese characters, calling Extract() on the entry that
               has question marks in the filename will result in an exception, because
               the question mark is not legal for use within filenames on Windows.  These
               are just a few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
            
             <para>
               When creating a zip file, the default value for the property is <see cref="F:External.Zip.Internal.Zip64Option.Never"/>. <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a pre-ZIP64
               limit is exceeded.
             </para>
            
             <para>
               You may set the property at any time before calling Save().
             </para>
            
             <para>
               When reading a zip file via the <c>Zipfile.Read()</c> method, DotNetZip
               will properly read ZIP64-endowed zip archives, regardless of the value of
               this property.  DotNetZip will always read ZIP64 archives.  This property
               governs only whether DotNetZip will write them. Therefore, when updating
               archives, be careful about setting this property after reading an archive
               that may use ZIP64 extensions.
             </para>
            
             <para>
               An interesting question is, if you have set this property to
               <c>AsNecessary</c>, and then successfully saved, does the resulting
               archive use ZIP64 extensions or not?  To learn this, check the <see cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/> property, after calling <c>Save()</c>.
             </para>
            
             <para>
               Have you thought about
               <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">donating</see>?
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.RequiresZip64">
             <summary>
               Indicates whether the archive requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para>
               This property is <c>null</c> (or <c>Nothing</c> in VB) if the archive has
               not been saved, and there are fewer than 65334 <c>ZipEntry</c> items
               contained in the archive.
             </para>
            
             <para>
               The <c>Value</c> is true if any of the following four conditions holds:
               the uncompressed size of any entry is larger than 0xFFFFFFFF; the
               compressed size of any entry is larger than 0xFFFFFFFF; the relative
               offset of any entry within the zip archive is larger than 0xFFFFFFFF; or
               there are more than 65534 entries in the archive.  (0xFFFFFFFF =
               4,294,967,295).  The result may not be known until a <c>Save()</c> is attempted
               on the zip archive.  The Value of this <see cref="T:System.Nullable"/>
               property may be set only AFTER one of the Save() methods has been called.
             </para>
            
             <para>
               If none of the four conditions holds, and the archive has been saved, then
               the <c>Value</c> is false.
             </para>
            
             <para>
               A <c>Value</c> of false does not indicate that the zip archive, as saved,
               does not use ZIP64.  It merely indicates that ZIP64 is not required.  An
               archive may use ZIP64 even when not required if the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property is set to <see cref="F:External.Zip.Internal.Zip64Option.Always"/>, or if the <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property is set to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> and the output stream was not
               seekable. Use the <see cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/> property to determine if
               the most recent <c>Save()</c> method resulted in an archive that utilized
               the ZIP64 extensions.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.OutputUsedZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.OutputUsedZip64">
             <summary>
               Indicates whether the most recent <c>Save()</c> operation used ZIP64 extensions.
             </summary>
            
             <remarks>
             <para>
               The use of ZIP64 extensions within an archive is not always necessary, and
               for interoperability concerns, it may be desired to NOT use ZIP64 if
               possible.  The <see cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/> property can be
               set to use ZIP64 extensions only when necessary.  In those cases,
               Sometimes applications want to know whether a Save() actually used ZIP64
               extensions.  Applications can query this read-only property to learn
               whether ZIP64 has been used in a just-saved <c>ZipFile</c>.
             </para>
            
             <para>
               The value is <c>null</c> (or <c>Nothing</c> in VB) if the archive has not
               been saved.
             </para>
            
             <para>
               Non-null values (<c>HasValue</c> is true) indicate whether ZIP64
               extensions were used during the most recent <c>Save()</c> operation.  The
               ZIP64 extensions may have been used as required by any particular entry
               because of its uncompressed or compressed size, or because the archive is
               larger than 4294967295 bytes, or because there are more than 65534 entries
               in the archive, or because the <c>UseZip64WhenSaving</c> property was set
               to <see cref="F:External.Zip.Internal.Zip64Option.Always"/>, or because the
               <c>UseZip64WhenSaving</c> property was set to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> and the output stream was not seekable.
               The value of this property does not indicate the reason the ZIP64
               extensions were used.
             </para>
            
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:External.Zip.Internal.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.InputUsesZip64">
             <summary>
               Indicates whether the most recent <c>Read()</c> operation read a zip file that uses
               ZIP64 extensions.
             </summary>
            
             <remarks>
               This property will return null (Nothing in VB) if you've added an entry after reading
               the zip file.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when writing new entries to the <c>ZipFile</c>,
               for those entries that cannot be encoded with the default (IBM437)
               encoding; or, the text encoding that was used when reading the entries
               from the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:External.Zip.Internal.ZipEntry.FileName"/> and <see cref="P:External.Zip.Internal.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> between each
               entry you add, and between adding entries and the call to
               <c>Save()</c>. Don't do this. It will likely result in a zipfile that is
               not readable.  For best interoperability, either leave <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> alone, or specify it only once,
               before adding any entries to the <c>ZipFile</c> instance.  There is one
               exception to this recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  In other words, if you explicitly specify the codepage when you
               create the zipfile, you must explicitly specify the same codepage when
               reading the zipfile.
             </para>
            
             <para>
               The way you specify the code page to use when reading a zip file varies
               depending on the tool or library you use to read the zip.  In DotNetZip,
               you use a ZipFile.Read() method that accepts an encoding parameter.  It
               isn't possible with Windows Explorer, as far as I know, to specify an
               explicit codepage to use when reading a zip.  If you use an incorrect
               codepage when reading a zipfile, you will get entries with filenames that
               are incorrect, and the incorrect filenames may even contain characters
               that are not legal for use within filenames in Windows. Extracting entries
               with illegal characters in the filenames will lead to exceptions. It's too
               bad, but this is just the way things are with code pages in zip
               files. Caveat Emptor.
             </para>
            
             <para>
               Example: Suppose you create a zipfile that contains entries with
               filenames that have Danish characters.  If you use <see cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/> equal to "iso-8859-1" (cp 28591),
               the filenames will be correctly encoded in the zip.  But, to read that
               zipfile correctly, you have to specify the same codepage at the time you
               read it. If try to read that zip file with Windows Explorer or another
               application that is not flexible with respect to the codepage used to
               decode filenames in zipfiles, you will get a filename like "Inf°.txt".
             </para>
            
             <para>
               When using DotNetZip to read a zip archive, and the zip archive uses an
               arbitrary code page, you must specify the encoding to use before or when
               the <c>Zipfile</c> is READ.  This means you must use a <c>ZipFile.Read()</c>
               method that allows you to specify a System.Text.Encoding parameter.  Setting
               the ProvisionalAlternateEncoding property after your application has read in
               the zip archive will not affect the entry names of entries that have already
               been read in.
             </para>
            
             <para>
               And now, the exception to the rule described above.  One strategy for
               specifying the code page for a given zip file is to describe the code page
               in a human-readable form in the Zip comment. For example, the comment may
               read "Entries in this archive are encoded in the Big5 code page".  For
               maximum interoperability, the zip comment in this case should be encoded
               in the default, IBM437 code page.  In this case, the zip comment is
               encoded using a different page than the filenames.  To do this, Specify
               <c>ProvisionalAlternateEncoding</c> to your desired region-specific code
               page, once before adding any entries, and then reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before setting the <see cref="P:External.Zip.Internal.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
            
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file.  For this code to work as
             desired, the <c>Zipfile</c> must have been created using the big5 code page
             (CP950). This is typical, for example, when using WinRar on a machine with
             CP950 set as the default code page.  In that case, the names of entries
             within the Zip archive will be stored in that code page, and reading the zip
             archive must be done using that code page.  If the application did not use
             the correct code page in <c>ZipFile.Read()</c>, then names of entries within the
             zip archive would not be correctly retrieved.
             <code>
             using (var zip = ZipFile.Read(zipFileName, System.Text.Encoding.GetEncoding("big5")))
             {
                 // retrieve and extract an entry using a name encoded with CP950
                 zip[MyDesiredEntry].Extract("unpack");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipToExtract, System.Text.Encoding.GetEncoding("big5"))
                 ' retrieve and extract an entry using a name encoded with CP950
                 zip(MyDesiredEntry).Extract("unpack")
             End Using
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter">
             <summary>
             Gets or sets the <c>TextWriter</c> to which status messages are delivered
             for the instance.
             </summary>
            
             <remarks>
               If the TextWriter is set to a non-null value, then verbose output is sent
               to the <c>TextWriter</c> during <c>Add</c><c>, Read</c><c>, Save</c> and
               <c>Extract</c> operations.  Typically, console applications might use
               <c>Console.Out</c> and graphical or headless applications might use a
               <c>System.IO.StringWriter</c>. The output of this is suitable for viewing
               by humans.
             </remarks>
            
             <example>
             <para>
               In this example, a console application instantiates a <c>ZipFile</c>, then
               sets the <c>StatusMessageTextWriter</c> to <c>Console.Out</c>.  At that
               point, all verbose status messages for that <c>ZipFile</c> are sent to the
               console.
             </para>
            
             <code lang="C#">
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= System.Console.Out;
               // messages are sent to the console during extraction
               zip.ExtractAll();
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= System.Console.Out
               'Status Messages will be sent to the console during extraction
               zip.ExtractAll()
             End Using
             </code>
            
             <para>
               In this example, a Windows Forms application instantiates a
               <c>ZipFile</c>, then sets the <c>StatusMessageTextWriter</c> to a
               <c>StringWriter</c>.  At that point, all verbose status messages for that
               <c>ZipFile</c> are sent to the <c>StringWriter</c>.
             </para>
            
             <code lang="C#">
             var sw = new System.IO.StringWriter();
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= sw;
               zip.ExtractAll();
             }
             Console.WriteLine("{0}", sw.ToString());
             </code>
            
             <code lang="VB">
             Dim sw as New System.IO.StringWriter
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= sw
               zip.ExtractAll()
             End Using
             'Status Messages are now available in sw
            
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.TempFileFolder">
             <summary>
               Gets or sets the name for the folder to store the temporary file
               this library writes when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               This library will create a temporary file when saving a Zip archive to a
               file.  This file is written when calling one of the <c>Save()</c> methods
               that does not save to a stream, or one of the <c>SaveSelfExtractor()</c>
               methods.
             </para>
            
             <para>
               By default, the library will create the temporary file in the directory
               specified for the file itself, via the <see cref="P:External.Zip.Internal.ZipFile.Name"/> property or via
               the <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> method.
             </para>
            
             <para>
               Setting this property allows applications to override this default
               behavior, so that the library will create the temporary file in the
               specified folder. For example, to have the library create the temporary
               file in the current working directory, regardless where the <c>ZipFile</c>
               is saved, specfy ".".  To revert to the default behavior, set this
               property to <c>null</c> (<c>Nothing</c> in VB).
             </para>
            
             <para>
               When setting the property to a non-null value, the folder specified must
               exist; if it does not an exception is thrown.  The application should have
               write and delete permissions on the folder.  The permissions are not
               explicitly checked ahead of time; if the application does not have the
               appropriate rights, an exception will be thrown at the time <c>Save()</c>
               is called.
             </para>
            
             <para>
               There is no temporary file created when reading a zip archive.  When
               saving to a Stream, there is no temporary file created.  For example, if
               the application is an ASP.NET application and calls <c>Save()</c>
               specifying the <c>Response.OutputStream</c> as the output stream, there is
               no temporary file created.
             </para>
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown when setting the property if the directory does not exist.
             </exception>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Password">
             <summary>
             Sets the password to be used on the <c>ZipFile</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               added to the <c>ZipFile</c>, using one of the <c>AddFile</c>,
               <c>AddDirectory</c>, <c>AddEntry</c>, or <c>AddItem</c> methods, etc.
               When reading a zip archive, this property applies to any entry
               subsequently extracted from the <c>ZipFile</c> using one of the Extract
               methods on the <c>ZipFile</c> class.
             </para>
            
             <para>
               When writing a zip archive, keep this in mind: though the password is set
               on the ZipFile object, according to the Zip spec, the "directory" of the
               archive - in other words the list of entries or files contained in the archive - is
               not encrypted with the password, or protected in any way.  If you set the
               Password property, the password actually applies to individual entries
               that are added to the archive, subsequent to the setting of this property.
               The list of filenames in the archive that is eventually created will
               appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               One simple way around this limitation is to simply double-wrap sensitive
               filenames: Store the files in a zip file, and then store that zip file
               within a second, "outer" zip file.  If you apply a password to the outer
               zip file, then readers will be able to see that the outer zip file
               contains an inner zip file.  But readers will not be able to read the
               directory or file list of the inner zip file.
             </para>
            
             <para>
               If you set the password on the <c>ZipFile</c>, and then add a set of files
               to the archive, then each entry is encrypted with that password.  You may
               also want to change the password between adding different entries. If you
               set the password, add an entry, then set the password to <c>null</c>
               (<c>Nothing</c> in VB), and add another entry, the first entry is
               encrypted and the second is not.  If you call <c>AddFile()</c>, then set
               the <c>Password</c> property, then call <c>ZipFile.Save</c>, the file
               added will not be password-protected, and no warning will be generated.
             </para>
            
             <para>
               When setting the Password, you may also want to explicitly set the <see cref="P:External.Zip.Internal.ZipFile.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the Password to a non-null value and do not
               set <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If you set
               the password to a <c>null</c> value (<c>Nothing</c> in VB), Encryption is
               reset to None.
             </para>
            
             <para>
               All of the preceding applies to writing zip archives, in other words when
               you use one of the Save methods.  To use this property when reading or an
               existing ZipFile, do the following: set the Password property on the
               <c>ZipFile</c>, then call one of the Extract() overloads on the <see cref="T:External.Zip.Internal.ZipEntry"/>. In this case, the entry is extracted using the
               <c>Password</c> that is specified on the <c>ZipFile</c> instance. If you
               have not set the <c>Password</c> property, then the password is
               <c>null</c>, and the entry is extracted with no password.
             </para>
            
             <para>
               If you set the Password property on the <c>ZipFile</c>, then call
               <c>Extract()</c> an entry that has not been encrypted with a password, the
               password is not used for that entry, and the <c>ZipEntry</c> is extracted
               as normal. In other words, the password is used only if necessary.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.ZipEntry"/> class also has a <see cref="P:External.Zip.Internal.ZipEntry.Password">Password</see> property.  It takes precedence
               over this property on the <c>ZipFile</c>.  Typically, you would use the
               per-entry Password when most entries in the zip archive use one password,
               and a few entries use a different password.  If all entries in the zip
               file use the same password, then it is simpler to just set this property
               on the <c>ZipFile</c> itself, whether creating a zip archive or extracting
               a zip archive.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip file, using password protection for the
               entries, and then extracts the entries from the zip file.  When creating
               the zip file, the Readme.txt file is not protected with a password, but
               the other two are password-protected as they are saved. During extraction,
               each file is extracted with the appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Password= "!Secret1";
                 zip.AddFile("MapToTheSite-7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
            
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFile("ReadMe.txt")
                 zip.Password = "123456!"
                 zip.AddFile("MapToTheSite-7440-N49th.png")
                 zip.Password= "!Secret1";
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
            
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Encryption">ZipFile.Encryption</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ExtractExistingFile">
             <summary>
               The action the library should take when extracting a file that already
               exists.
             </summary>
            
             <remarks>
             <para>
               This property affects the behavior of the Extract methods (one of the
               <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
               extraction would would overwrite an existing filesystem file. If you do
               not set this property, the library throws an exception when extracting an
               entry would overwrite an existing file.
             </para>
            
             <para>
               This property has no effect when extracting to a stream, or when the file
               to be extracted does not already exist.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipEntry.ExtractExistingFile"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ZipErrorAction">
             <summary>
               The action the library should take when an error is encountered while
               opening or reading files as they are saved into a zip archive.
             </summary>
            
             <remarks>
              <para>
                Errors can occur as a file is being saved to the zip archive.  For
                example, the File.Open may fail, or a File.Read may fail, because of
                lock conflicts or other reasons.
              </para>
            
              <para>
                The first problem might occur after having called AddDirectory() on a
                directory that contains a Clipper .dbf file; the file is locked by
                Clipper and cannot be opened for read by another process. An example of
                the second problem might occur when trying to zip a .pst file that is in
                use by Microsoft Outlook. Outlook locks a range on the file, which allows
                other processes to open the file, but not read it in its entirety.
              </para>
            
              <para>
                This property tells DotNetZip what you would like to do in the case of
                these errors.  The primary options are: <c>ZipErrorAction.Throw</c> to
                throw an exception (this is the default behavior if you don't set this
                property); <c>ZipErrorAction.Skip</c> to Skip the file for which there
                was an error and continue saving; <c>ZipErrorAction.Retry</c> to Retry
                the entry that caused the problem; or
                <c>ZipErrorAction.InvokeErrorEvent</c> to invoke an event handler.
              </para>
            
              <para>
                This property is implicitly set to <c>ZipErrorAction.InvokeErrorEvent</c>
                if you add a handler to the <see cref="E:External.Zip.Internal.ZipFile.ZipError"/> event.  If you set
                this property to something other than
                <c>ZipErrorAction.InvokeErrorEvent</c>, then the <c>ZipError</c>
                event is implicitly cleared.  What it means is you can set one or the
                other (or neither), depending on what you want, but you never need to set
                both.
              </para>
            
              <para>
                As with some other properties on the <c>ZipFile</c> class, like <see cref="P:External.Zip.Internal.ZipFile.Password"/>, <see cref="P:External.Zip.Internal.ZipFile.Encryption"/>, and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, setting this property on a <c>ZipFile</c>
                instance will cause the specified <c>ZipErrorAction</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipFile</c> instance. If you set this property after you have added
                items to the <c>ZipFile</c>, but before you have called <c>Save()</c>,
                those items will not use the specified error handling action.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file in the same way, then set this property once, before adding any
                entries to the zip archive.
              </para>
            
              <para>
                If you set this property to <c>ZipErrorAction.Skip</c> and you'd like to
                learn which files may have been skipped after a <c>Save()</c>, you can
                set the <see cref="P:External.Zip.Internal.ZipFile.StatusMessageTextWriter"/> on the ZipFile before
                calling <c>Save()</c>. A message will be emitted into that writer for
                each skipped file, if any.
              </para>
            
             </remarks>
            
             <example>
               This example shows how to tell DotNetZip to skip any files for which an
               error is generated during the Save().
             <code lang="VB">
             Public Sub SaveZipFile()
                 Dim SourceFolder As String = "fodder"
                 Dim DestFile As String =  "eHandler.zip"
                 Dim sw as New StringWriter
                 Using zipArchive As ZipFile = New ZipFile
                     ' Tell DotNetZip to skip any files for which it encounters an error
                     zipArchive.ZipErrorAction = ZipErrorAction.Skip
                     zipArchive.StatusMessageTextWriter = sw
                     zipArchive.AddDirectory(SourceFolder)
                     zipArchive.Save(DestFile)
                 End Using
                 ' examine sw here to see any messages
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ZipError"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
               Set this when creating a zip archive, or when updating a zip archive. The
               specified Encryption is applied to the entries subsequently added to the
               <c>ZipFile</c> instance.  Applications do not need to set the
               <c>Encryption</c> property when reading or extracting a zip archive.
             </para>
            
             <para>
               If you set this to something other than EncryptionAlgorithm.None, you
               will also need to set the <see cref="P:External.Zip.Internal.ZipFile.Password"/>.
             </para>
            
             <para>
               As with some other properties on the <c>ZipFile</c> class, like <see cref="P:External.Zip.Internal.ZipFile.Password"/> and <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/>, setting this
               property on a <c>ZipFile</c> instance will cause the specified
               <c>EncryptionAlgorithm</c> to be used on all <see cref="T:External.Zip.Internal.ZipEntry"/> items
               that are subsequently added to the <c>ZipFile</c> instance. In other
               words, if you set this property after you have added items to the
               <c>ZipFile</c>, but before you have called <c>Save()</c>, those items will
               not be encrypted or protected with a password in the resulting zip
               archive. To get a zip archive with encrypted entries, set this property,
               along with the <see cref="P:External.Zip.Internal.ZipFile.Password"/> property, before calling
               <c>AddFile</c>, <c>AddItem</c>, or <c>AddDirectory</c> (etc.) on the
               <c>ZipFile</c> instance.
             </para>
            
             <para>
               If you read a <c>ZipFile</c>, you can modify the <c>Encryption</c> on an
               encrypted entry, only by setting the <c>Encryption</c> property on the
               <c>ZipEntry</c> itself.  Setting the <c>Encryption</c> property on the
               <c>ZipFile</c>, once it has been created via a call to
               <c>ZipFile.Read()</c>, does not affect entries that were previously read.
             </para>
            
             <para>
               For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> used for the entries in the archive.  Neither is an
               exception thrown. Instead, what happens during the <c>Save()</c> is that
               all previously existing entries are copied through to the new zip archive,
               with whatever encryption and password that was used when originally
               creating the zip archive. Upon re-reading that archive, to extract
               entries, applications should use the original password or passwords, if
               any.
             </para>
            
             <para>
               Suppose an application reads a <c>ZipFile</c>, and there is an encrypted
               entry.  Setting the <c>Encryption</c> property on that <c>ZipFile</c> and
               then adding new entries (via <c>AddFile()</c>, <c>AddEntry()</c>, etc)
               and then calling <c>Save()</c> on the <c>ZipFile</c> does not update the
               <c>Encryption</c> on any of the entries that had previously been in the
               <c>ZipFile</c>.  The <c>Encryption</c> property applies only to the
               newly-added entries.
             </para>
            
             </remarks>
            
             <example>
             <para>
               This example creates a zip archive that uses encryption, and then extracts
               entries from the archive.  When creating the zip archive, the ReadMe.txt
               file is zipped without using a password or encryption.  The other files
               use encryption.
             </para>
            
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.AddFile("7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
            
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.AddFile("ReadMe.txt")
                 zip.AddFile("7440-N49th.png")
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Password">ZipFile.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.SetCompression">
             <summary>
               A callback that allows the application to specify the compression level
               to use for entries subsequently added to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               With this callback, the DotNetZip library allows the application to
               determine whether compression will be used, at the time of the
               <c>Save</c>. This may be useful if the application wants to favor
               speed over size, and wants to defer the decision until the time of
               <c>Save</c>.
             </para>
            
             <para>
               Typically applications set the <see cref="P:External.Zip.Internal.ZipFile.CompressionLevel"/> property on
               the <c>ZipFile</c> or on each <c>ZipEntry</c> to determine the level of
               compression used. This is done at the time the entry is added to the
               <c>ZipFile</c>. Setting the property to
               <c>Ionic.Zlib.CompressionLevel.None</c> means no compression will be used.
             </para>
            
             <para>
               This callback allows the application to defer the decision on the
               <c>CompressionLevel</c> to use, until the time of the call to
               <c>ZipFile.Save()</c>. The callback is invoked once per <c>ZipEntry</c>,
               at the time the data for the entry is being written out as part of a
               <c>Save()</c> operation. The application can use whatever criteria it
               likes in determining the level to return.  For example, an application may
               wish that no .mp3 files should be compressed, because they are already
               compressed and the extra compression is not worth the CPU time incurred,
               and so can return <c>None</c> for all .mp3 entries.
             </para>
            
             <para>
               The library determines whether compression will be attempted for an entry
               this way: If the entry is a zero length file, or a directory, no
               compression is used.  Otherwise, if this callback is set, it is invoked
               and the <c>CompressionLevel</c> is set to the return value. If this
               callback has not been set, then the previously set value for
               <c>CompressionLevel</c> is used.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize">
             <summary>
             The maximum size of an output segment, when saving a split Zip file.
             </summary>
             <remarks>
               <para>
                 Set this to a non-zero value before calling <see cref="M:External.Zip.Internal.ZipFile.Save"/> or <see cref="M:External.Zip.Internal.ZipFile.Save(System.String)"/> to specify that the ZipFile should be saved as a
                 split archive, also sometimes called a spanned archive. Some also
                 call them multi-file archives.
               </para>
            
               <para>
                 A split zip archive is saved in a set of discrete filesystem files,
                 rather than in a single file. This is handy when transmitting the
                 archive in email or some other mechanism that has a limit to the size of
                 each file.  The first file in a split archive will be named
                 <c>basename.z01</c>, the second will be named <c>basename.z02</c>, and
                 so on. The final file is named <c>basename.zip</c>. According to the zip
                 specification from PKWare, the minimum value is 65536, for a 64k segment
                 size. The maximum number of segments allows in a split archive is 99.
               </para>
            
               <para>
                 The value of this property determines the maximum size of a split
                 segment when writing a split archive.  For example, suppose you have a
                 <c>ZipFile</c> that would save to a single file of 200k. If you set the
                 <c>MaxOutputSegmentSize</c> to 65536 before calling <c>Save()</c>, you
                 will get four distinct output files. On the other hand if you set this
                 property to 256k, then you will get a single-file archive for that
                 <c>ZipFile</c>.
               </para>
            
               <para>
                 The size of each split output file will be as large as possible, up to
                 the maximum size set here. The zip specification requires that some data
                 fields in a zip archive may not span a split boundary, and an output
                 segment may be smaller than the maximum if necessary to avoid that
                 problem. Also, obviously the final segment of the archive may be smaller
                 than the maximum segment size. Segments will never be larger than the
                 value set with this property.
               </para>
            
               <para>
                 You can save a split Zip file only when saving to a regular filesystem
                 file. It's not possible to save a split zip file as a self-extracting
                 archive, nor is it possible to save a split zip file to a stream. When
                 saving to a SFX or to a Stream, this property is ignored.
               </para>
            
               <para>
                 About interoperability: Split or spanned zip files produced by DotNetZip
                 can be read by WinZip or PKZip, and vice-versa. Segmented zip files may
                 not be readable by other tools, if those other tools don't support zip
                 spanning or splitting.  When in doubt, test.  I don't believe Windows
                 Explorer can extract a split archive.
               </para>
            
               <para>
                 This property has no effect when reading a split archive. You can read
                 a split archive in the normal way with DotNetZip.
               </para>
            
               <para>
                 When saving a zip file, if you want a regular zip file rather than a
                 split zip file, don't set this property, or set it to Zero.
               </para>
            
               <para>
                 If you read a split archive, with <see cref="M:External.Zip.Internal.ZipFile.Read(System.String)"/> and
                 then subsequently call <c>ZipFile.Save()</c>, unless you set this
                 property before calling <c>Save()</c>, you will get a normal,
                 single-file archive.
               </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.NumberOfSegmentsForMostRecentSave"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.NumberOfSegmentsForMostRecentSave">
            <summary>
              Returns the number of segments used in the most recent Save() operation.
            </summary>
            <remarks>
              <para>
                This is normally zero, unless you have set the <see cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/> property.  If you have set <see cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/>, and then you save a file, after the call to
                Save() completes, you can read this value to learn the number of segments that
                were created.
              </para>
              <para>
                If you call Save("Archive.zip"), and it creates 5 segments, then you
                will have filesystem files named Archive.z01, Archive.z02, Archive.z03,
                Archive.z04, and Archive.zip, and the value of this property will be 5.
              </para>
            </remarks>
            <seealso cref="P:External.Zip.Internal.ZipFile.MaxOutputSegmentSize"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry,
                 if the entry is larger than the given size.  Zero means "always
                 use parallel deflate", while -1 means "never use parallel
                 deflate". The default value for this property is 512k. Aside
                 from the special values of 0 and 1, the minimum value is 65536.
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with a
                 read-forward stream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is not as effective.
               </para>
            
               <para>
                 Parallel deflate tends to yield slightly less compression when
                 compared to as single-threaded deflate; this is because the original
                 data stream is split into multiple independent buffers, each of which
                 is compressed in parallel.  But because they are treated
                 independently, there is no opportunity to share compression
                 dictionaries.  For that reason, a deflated stream may be slightly
                 larger when compressed using parallel deflate, as compared to a
                 traditional single-threaded deflate. Sometimes the increase over the
                 normal deflate is as much as 5% of the total compressed size. For
                 larger files it can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when
                 using Encryption. This is primarily because encryption tends to slow
                 down the entire pipeline. Also, multi-threaded compression gives less
                 of an advantage when using lower compression levels, for example <see cref="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed"/>.  You may have to
                 perform some tests to determine the best approach for your situation.
               </para>
            
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ParallelDeflateMaxBufferPairs"/>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see cref="P:External.Zip.Internal.ZipFile.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time
               before calling <c>ZipFile.Save()</c>.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ParallelDeflateThreshold"/>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.LibraryVersion">
             <summary>
             Returns the version number on the DotNetZip assembly.
             </summary>
            
             <remarks>
               <para>
                 This property is exposed as a convenience.  Callers could also get the
                 version value by retrieving GetName().Version on the
                 System.Reflection.Assembly object pointing to the DotNetZip
                 assembly. But sometimes it is not clear which assembly is being loaded.
                 This property makes it clear.
               </para>
               <para>
                 This static property is primarily useful for diagnostic purposes.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Item(System.Int32)">
             <summary>
               This is an integer indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               Internally, the <c>ZipEntry</c> instances that belong to the
               <c>ZipFile</c> are stored in a Dictionary.  When you use this
               indexer the first time, it creates a read-only
               <c>List&lt;ZipEntry&gt;</c> from the Dictionary.Values Collection.
               If at any time you modify the set of entries in the <c>ZipFile</c>,
               either by adding an entry, removing an entry, or renaming an
               entry, a new List will be created, and the numeric indexes for the
               remaining entries may be different.
             </para>
            
             <para>
               This means you cannot rename any ZipEntry from
               inside an enumeration of the zip file.
             </para>
            
             <param name="ix">
               The index value.
             </param>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive at the specified index. If the
               entry does not exist in the archive, this indexer throws.
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Item(System.String)">
             <summary>
               This is a name-based indexer into the Zip archive.
             </summary>
            
             <remarks>
             <para>
               This property is read-only.
             </para>
            
             <para>
               The <see cref="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval"/> property on the <c>ZipFile</c>
               determines whether retrieval via this indexer is done via case-sensitive
               comparisons. By default, retrieval is not case sensitive.  This makes
               sense on Windows, in which filesystems are not case sensitive.
             </para>
            
             <para>
               Regardless of case-sensitivity, it is not always the case that
               <c>this[value].FileName == value</c>. In other words, the <c>FileName</c>
               property of the <c>ZipEntry</c> retrieved with this indexer, may or may
               not be equal to the index value.
             </para>
            
             <para>
               This is because DotNetZip performs a normalization of filenames passed to
               this indexer, before attempting to retrieve the item.  That normalization
               includes: removal of a volume letter and colon, swapping backward slashes
               for forward slashes.  So, <c>zip["dir1\\entry1.txt"].FileName ==
               "dir1/entry.txt"</c>.
             </para>
            
             <para>
               Directory entries in the zip file may be retrieved via this indexer only
               with names that have a trailing slash. DotNetZip automatically appends a
               trailing slash to the names of any directory entries added to a zip.
             </para>
            
             </remarks>
            
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <seealso cref="M:External.Zip.Internal.ZipFile.RemoveEntry(System.String)"/>
            
             <exception cref="T:System.ArgumentException">
               Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
               The name of the file, including any directory path, to retrieve from the
               zip.  The filename match is not case-sensitive by default; you can use the
               <see cref="P:External.Zip.Internal.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
               pathname can use forward-slashes or backward slashes.
             </param>
            
             <returns>
               The <c>ZipEntry</c> within the Zip archive, given by the specified
               filename. If the named entry does not exist in the archive, this indexer
               returns <c>null</c> (<c>Nothing</c> in VB).
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EntryFileNames">
             <summary>
               The list of filenames for the entries contained within the zip archive.
             </summary>
            
             <remarks>
               According to the ZIP specification, the names of the entries use forward
               slashes in pathnames.  If you are scanning through the list, you may have
               to swap forward slashes for backslashes.
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Item(System.String)"/>
            
             <example>
               This example shows one way to test if a filename is already contained
               within a zip archive.
             <code>
             String zipFileToRead= "PackedDocuments.zip";
             string candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(zipFileToRead))
             {
               if (zip.EntryFilenames.Contains(candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   candidate,
                                   zipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim zipFileToRead As String = "PackedDocuments.zip"
               Dim candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile.Read(ZipFileToRead)
                   If zip.EntryFilenames.Contains(candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   candidate, _
                                   zipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
               The list of strings for the filenames contained within the Zip archive.
             </returns>
            
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Entries">
             <summary>
               Returns the readonly collection of entries in the Zip archive.
             </summary>
            
             <remarks>
            
             <para>
               If there are no entries in the current <c>ZipFile</c>, the value returned is a
               non-null zero-element collection.  If there are entries in the zip file,
               the elements are returned in no particular order.
             </para>
             <para>
               This is the implied enumerator on the <c>ZipFile</c> class.  If you use a
               <c>ZipFile</c> instance in a context that expects an enumerator, you will
               get this collection.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipFile.EntriesSorted"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.EntriesSorted">
             <summary>
               Returns a readonly collection of entries in the Zip archive, sorted by FileName.
             </summary>
            
             <remarks>
               If there are no entries in the current <c>ZipFile</c>, the value returned
               is a non-null zero-element collection.  If there are entries in the zip
               file, the elements are returned sorted by the name of the entry.
             </remarks>
            
             <example>
            
               This example fills a Windows Forms ListView with the entries in a zip file.
            
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(zipFile))
             {
                 foreach (ZipEntry entry in zip.EntriesSorted)
                 {
                     ListViewItem item = new ListViewItem(n.ToString());
                     n++;
                     string[] subitems = new string[] {
                         entry.FileName.Replace("/","\\"),
                         entry.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                         entry.UncompressedSize.ToString(),
                         String.Format("{0,5:F0}%", entry.CompressionRatio),
                         entry.CompressedSize.ToString(),
                         (entry.UsesEncryption) ? "Y" : "N",
                         String.Format("{0:X8}", entry.Crc)};
            
                     foreach (String s in subitems)
                     {
                         ListViewItem.ListViewSubItem subitem = new ListViewItem.ListViewSubItem();
                         subitem.Text = s;
                         item.SubItems.Add(subitem);
                     }
            
                     this.listView1.Items.Add(item);
                 }
             }
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.Entries"/>
        </member>
        <member name="P:External.Zip.Internal.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.SaveProgress">
             <summary>
               An event handler invoked when a Save() starts, before and after each
               entry has been written to the archive, when a Save() completes, and
               during other Save events.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see cref="T:External.Zip.Internal.SaveProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>SaveProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Saving_Started</term>
             <description>Fired when ZipFile.Save() begins.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just before writing data for each
               particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveEntry</term>
             <description>
               Fired within ZipFile.Save(), just after having finished writing data
               for each particular entry.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_Completed</term>
             <description>Fired when ZipFile.Save() has completed.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveTempArchive</term>
             <description>
               Fired after the temporary file has been created.  This happens only
               when saving to a disk file.  This event will not be invoked when
               saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BeforeRenameTempArchive</term>
             <description>
               Fired just before renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterRenameTempArchive</term>
             <description>
               Fired just after renaming the temporary file to the permanent
               location.  This happens only when saving to a disk file.  This event
               will not be invoked when saving to a stream.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_AfterCompileSelfExtractor</term>
             <description>
               Fired after a self-extracting archive has finished compiling.  This
               EventType is used only within SaveSelfExtractor().
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Saving_BytesRead</term>
             <description>
               Set during the save of a particular entry, to update progress of the
               Save().  When this EventType is set, the BytesTransferred is the
               number of bytes that have been read from the source stream.  The
               TotalBytesToTransfer is the number of bytes in the uncompressed
               file.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <example>
            
                This example uses an anonymous method to handle the
                SaveProgress event, by updating a progress bar.
            
             <code lang="C#">
             progressBar1.Value = 0;
             progressBar1.Max = listbox1.Items.Count;
             using (ZipFile zip = new ZipFile())
             {
                // listbox1 contains a list of filenames
                zip.AddFiles(listbox1.Items);
            
                // do the progress bar:
                zip.SaveProgress += (sender, e) =&gt; {
                   if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry) {
                      progressBar1.PerformStep();
                   }
                };
            
                zip.Save(fs);
             }
             </code>
             </example>
            
             <example>
               This example uses a named method as the
               <c>SaveProgress</c> event handler, to update the user, in a
               console-based application.
            
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
            
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false;
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate)
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",
                                       e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
            
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                                   e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                     justHadByteUpdate= true;
                 }
             }
            
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress;
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
                 Using zip As ZipFile = New ZipFile
                     AddHandler zip.SaveProgress, AddressOf MySaveProgress
                     zip.AddDirectory(directory)
                     zip.Save(targetZip)
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
                     justHadByteUpdate = False
            
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesRead) Then
                     If justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, _
                                   e.TotalBytesToTransfer, _
                                   (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     justHadByteUpdate = True
                 End If
             End Sub
             </code>
             </example>
            
             <example>
            
             This is a more complete example of using the SaveProgress
             events in a Windows Forms application, with a
             Thread object.
            
             <code lang="C#">
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             public class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." +
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text),
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         _entriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max &gt; System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, _entriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred &gt;&gt; _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred &gt;= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
            
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ReadProgress">
             <summary>
             An event handler invoked before, during, and after the reading of a zip archive.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event being signaled, different properties on the
             <see cref="T:External.Zip.Internal.ReadProgressEventArgs"/> parameter are set.  The following table
             summarizes the available EventTypes and the conditions under which this
             event handler is invoked with a <c>ReadProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Reading_Started</term>
             <description>Fired just as ZipFile.Read() begins. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_Completed</term>
             <description>Fired when ZipFile.Read() has completed. Meaningful properties: ArchiveName.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_ArchiveBytesRead</term>
             <description>Fired while reading, updates the number of bytes read for the entire archive.
             Meaningful properties: ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_BeforeReadEntry</term>
             <description>Indicates an entry is about to be read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Reading_AfterReadEntry</term>
             <description>Indicates an entry has just been read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal, CurrentEntry.
             </description>
             </item>
            
             </list>
             </remarks>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ExtractProgress">
             <summary>
               An event handler invoked before, during, and after extraction of
               entries in the zip archive.
             </summary>
            
             <remarks>
             <para>
               Depending on the particular event, different properties on the <see cref="T:External.Zip.Internal.ExtractProgressEventArgs"/> parameter are set.  The following
               table summarizes the available EventTypes and the conditions under
               which this event handler is invoked with a
               <c>ExtractProgressEventArgs</c> with the given EventType.
             </para>
            
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractAll</term>
             <description>
               Set when ExtractAll() begins. The ArchiveName, Overwrite, and
               ExtractLocation properties are meaningful.</description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractAll</term>
             <description>
               Set when ExtractAll() has completed.  The ArchiveName, Overwrite,
               and ExtractLocation properties are meaningful.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has begun.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractEntry</term>
             <description>
               Set when an Extract() on an entry in the ZipFile has completed.
               Properties that are meaningful: ArchiveName, EntriesTotal,
               CurrentEntry, Overwrite, ExtractLocation, EntriesExtracted.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_EntryBytesWritten</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, as data
               is extracted for the entry.  Properties that are meaningful:
               ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite</term>
             <description>
               Set within a call to Extract() on an entry in the ZipFile, when the
               extraction would overwrite an existing file. This event type is used
               only when <c>ExtractExistingFileAction</c> on the <c>ZipFile</c> or
               <c>ZipEntry</c> is set to <c>InvokeExtractProgressEvent</c>.
             </description>
             </item>
            
             </list>
            
             </remarks>
            
             <example>
             <code>
             private static bool justHadByteUpdate = false;
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
               if(e.EventType == ZipProgressEventType.Extracting_EntryBytesWritten)
               {
                 if (justHadByteUpdate)
                   Console.SetCursorPosition(0, Console.CursorTop);
            
                 Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                               e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                 justHadByteUpdate = true;
               }
               else if(e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
               {
                 if (justHadByteUpdate)
                   Console.WriteLine();
                 Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName);
                 justHadByteUpdate= false;
               }
             }
            
             public static ExtractZip(string zipToExtract, string directory)
             {
               string TargetDirectory= "extract";
               using (var zip = ZipFile.Read(zipToExtract)) {
                 zip.ExtractProgress += ExtractProgress;
                 foreach (var e in zip1)
                 {
                   e.Extract(TargetDirectory, true);
                 }
               }
             }
            
             </code>
             <code lang="VB">
             Public Shared Sub Main(ByVal args As String())
                 Dim ZipToUnpack As String = "C1P3SML.zip"
                 Dim TargetDir As String = "ExtractTest_Extract"
                 Console.WriteLine("Extracting file {0} to {1}", ZipToUnpack, TargetDir)
                 Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)
                     AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress
                     Dim e As ZipEntry
                     For Each e In zip1
                         e.Extract(TargetDir, True)
                     Next
                 End Using
             End Sub
            
             Private Shared justHadByteUpdate As Boolean = False
            
             Public Shared Sub MyExtractProgress(ByVal sender As Object, ByVal e As ExtractProgressEventArgs)
                 If (e.EventType = ZipProgressEventType.Extracting_EntryBytesWritten) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer, (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     ExtractTest.justHadByteUpdate = True
                 ElseIf (e.EventType = ZipProgressEventType.Extracting_BeforeExtractEntry) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName)
                     ExtractTest.justHadByteUpdate = False
                 End If
             End Sub
             </code>
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.AddProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.AddProgress">
             <summary>
             An event handler invoked before, during, and after Adding entries to a zip archive.
             </summary>
            
             <remarks>
                 Adding a large number of entries to a zip file can take a long
                 time.  For example, when calling <see cref="M:External.Zip.Internal.ZipFile.AddDirectory(System.String)"/> on a
                 directory that contains 50,000 files, it could take 3 minutes or so.
                 This event handler allws an application to track the progress of the Add
                 operation, and to optionally cancel a lengthy Add operation.
             </remarks>
            
             <example>
             <code lang="C#">
            
             int _numEntriesToAdd= 0;
             int _numEntriesAdded= 0;
             void AddProgressHandler(object sender, AddProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Adding_Started:
                         Console.WriteLine("Adding files to the zip...");
                         break;
                     case ZipProgressEventType.Adding_AfterAddEntry:
                         _numEntriesAdded++;
                         Console.WriteLine(String.Format("Adding file {0}/{1} :: {2}",
                                                  _numEntriesAdded, _numEntriesToAdd, e.CurrentEntry.FileName));
                         break;
                     case ZipProgressEventType.Adding_Completed:
                         Console.WriteLine("Added all files");
                         break;
                 }
             }
            
             void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     zip.AddProgress += AddProgressHandler;
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip));
                     zip.Save(ZipFileToCreate);
                 }
             }
            
             </code>
            
             <code lang="VB">
            
             Private Sub AddProgressHandler(ByVal sender As Object, ByVal e As AddProgressEventArgs)
                 Select Case e.EventType
                     Case ZipProgressEventType.Adding_Started
                         Console.WriteLine("Adding files to the zip...")
                         Exit Select
                     Case ZipProgressEventType.Adding_AfterAddEntry
                         Console.WriteLine(String.Format("Adding file {0}", e.CurrentEntry.FileName))
                         Exit Select
                     Case ZipProgressEventType.Adding_Completed
                         Console.WriteLine("Added all files")
                         Exit Select
                 End Select
             End Sub
            
             Sub CreateTheZip()
                 Using zip as ZipFile = New ZipFile
                     AddHandler zip.AddProgress, AddressOf AddProgressHandler
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip))
                     zip.Save(ZipFileToCreate);
                 End Using
             End Sub
            
             </code>
            
             </example>
            
             <seealso cref="E:External.Zip.Internal.ZipFile.SaveProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ReadProgress"/>
             <seealso cref="E:External.Zip.Internal.ZipFile.ExtractProgress"/>
        </member>
        <member name="E:External.Zip.Internal.ZipFile.ZipError">
             <summary>
             An event that is raised when an error occurs during open or read of files
             while saving a zip archive.
             </summary>
            
             <remarks>
              <para>
                 Errors can occur as a file is being saved to the zip archive.  For
                 example, the File.Open may fail, or a File.Read may fail, because of
                 lock conflicts or other reasons.  If you add a handler to this event,
                 you can handle such errors in your own code.  If you don't add a
                 handler, the library will throw an exception if it encounters an I/O
                 error during a call to <c>Save()</c>.
              </para>
            
              <para>
                Setting a handler implicitly sets <see cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/> to
                <c>ZipErrorAction.InvokeErrorEvent</c>.
              </para>
            
              <para>
                The handler you add applies to all <see cref="T:External.Zip.Internal.ZipEntry"/> items that are
                subsequently added to the <c>ZipFile</c> instance. If you set this
                property after you have added items to the <c>ZipFile</c>, but before you
                have called <c>Save()</c>, errors that occur while saving those items
                will not cause the error handler to be invoked.
              </para>
            
              <para>
                If you want to handle any errors that occur with any entry in the zip
                file using the same error handler, then add your error handler once,
                before adding any entries to the zip archive.
              </para>
            
              <para>
                In the error handler method, you need to set the <see cref="P:External.Zip.Internal.ZipEntry.ZipErrorAction"/> property on the
                <c>ZipErrorEventArgs.CurrentEntry</c>.  This communicates back to
                DotNetZip what you would like to do with this particular error.  Within
                an error handler, if you set the <c>ZipEntry.ZipErrorAction</c> property
                on the <c>ZipEntry</c> to <c>ZipErrorAction.InvokeErrorEvent</c> or if
                you don't set it at all, the library will throw the exception. (It is the
                same as if you had set the <c>ZipEntry.ZipErrorAction</c> property on the
                <c>ZipEntry</c> to <c>ZipErrorAction.Throw</c>.) If you set the
                <c>ZipErrorEventArgs.Cancel</c> to true, the entire <c>Save()</c> will be
                canceled.
              </para>
            
              <para>
                In the case that you use <c>ZipErrorAction.Skip</c>, implying that
                you want to skip the entry for which there's been an error, DotNetZip
                tries to seek backwards in the output stream, and truncate all bytes
                written on behalf of that particular entry. This works only if the
                output stream is seekable.  It will not work, for example, when using
                ASPNET's Response.OutputStream.
              </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use an event handler to handle
             errors during save of the zip file.
             <code lang="C#">
            
             public static void MyZipError(object sender, ZipErrorEventArgs e)
             {
                 Console.WriteLine("Error saving {0}...", e.FileName);
                 Console.WriteLine("   Exception: {0}", e.exception);
                 ZipEntry entry = e.CurrentEntry;
                 string response = null;
                 // Ask the user whether he wants to skip this error or not
                 do
                 {
                     Console.Write("Retry, Skip, Throw, or Cancel ? (R/S/T/C) ");
                     response = Console.ReadLine();
                     Console.WriteLine();
            
                 } while (response != null &amp;&amp;
                          response[0]!='S' &amp;&amp; response[0]!='s' &amp;&amp;
                          response[0]!='R' &amp;&amp; response[0]!='r' &amp;&amp;
                          response[0]!='T' &amp;&amp; response[0]!='t' &amp;&amp;
                          response[0]!='C' &amp;&amp; response[0]!='c');
            
                 e.Cancel = (response[0]=='C' || response[0]=='c');
            
                 if (response[0]=='S' || response[0]=='s')
                     entry.ZipErrorAction = ZipErrorAction.Skip;
                 else if (response[0]=='R' || response[0]=='r')
                     entry.ZipErrorAction = ZipErrorAction.Retry;
                 else if (response[0]=='T' || response[0]=='t')
                     entry.ZipErrorAction = ZipErrorAction.Throw;
             }
            
             public void SaveTheFile()
             {
               string directoryToZip = "fodder";
               string directoryInArchive = "files";
               string zipFileToCreate = "Archive.zip";
               using (var zip = new ZipFile())
               {
                 // set the event handler before adding any entries
                 zip.ZipError += MyZipError;
                 zip.AddDirectory(directoryToZip, directoryInArchive);
                 zip.Save(zipFileToCreate);
               }
             }
             </code>
            
             <code lang="VB">
             Private Sub MyZipError(ByVal sender As Object, ByVal e As Ionic.Zip.ZipErrorEventArgs)
                 ' At this point, the application could prompt the user for an action to take.
                 ' But in this case, this application will simply automatically skip the file, in case of error.
                 Console.WriteLine("Zip Error,  entry {0}", e.CurrentEntry.FileName)
                 Console.WriteLine("   Exception: {0}", e.exception)
                 ' set the desired ZipErrorAction on the CurrentEntry to communicate that to DotNetZip
                 e.CurrentEntry.ZipErrorAction = Zip.ZipErrorAction.Skip
             End Sub
            
             Public Sub SaveTheFile()
                 Dim directoryToZip As String = "fodder"
                 Dim directoryInArchive As String = "files"
                 Dim zipFileToCreate as String = "Archive.zip"
                 Using zipArchive As ZipFile = New ZipFile
                     ' set the event handler before adding any entries
                     AddHandler zipArchive.ZipError, AddressOf MyZipError
                     zipArchive.AddDirectory(directoryToZip, directoryInArchive)
                     zipArchive.Save(zipFileToCreate)
                 End Using
             End Sub
            
             </code>
             </example>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ZipErrorAction"/>
        </member>
        <member name="T:External.Zip.Internal.Zip64Option">
             <summary>
               Options for using ZIP64 extensions when saving zip archives.
             </summary>
            
             <remarks>
            
             <para>
               Designed many years ago, the <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">original zip
               specification from PKWARE</see> allowed for 32-bit quantities for the
               compressed and uncompressed sizes of zip entries, as well as a 32-bit quantity
               for specifying the length of the zip archive itself, and a maximum of 65535
               entries.  These limits are now regularly exceeded in many backup and archival
               scenarios.  Recently, PKWare added extensions to the original zip spec, called
               "ZIP64 extensions", to raise those limitations.  This property governs whether
               DotNetZip will use those extensions when writing zip archives. The use of
               these extensions is optional and explicit in DotNetZip because, despite the
               status of ZIP64 as a bona fide standard, many other zip tools and libraries do
               not support ZIP64, and therefore a zip file with ZIP64 extensions may be
               unreadable by some of those other tools.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.Always"/> to always use ZIP64
               extensions when saving, regardless of whether your zip archive needs it.
               Suppose you add 5 files, each under 100k, to a ZipFile. If you specify Always
               for this flag, you will get a ZIP64 archive, though the archive does not need
               to use ZIP64 because none of the original zip limits had been exceeded.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.Never"/> to tell the DotNetZip
               library to never use ZIP64 extensions.  This is useful for maximum
               compatibility and interoperability, at the expense of the capability of
               handling large files or large archives.  NB: Windows Explorer in Windows XP
               and Windows Vista cannot currently extract files from a zip64 archive, so if
               you want to guarantee that a zip archive produced by this library will work in
               Windows Explorer, use <c>Never</c>. If you set this property to <see cref="F:External.Zip.Internal.Zip64Option.Never"/>, and your application creates a zip that would
               exceed one of the Zip limits, the library will throw an exception while saving
               the zip file.
             </para>
            
             <para>
               Set this property to <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> to tell the
               DotNetZip library to use the ZIP64 extensions when required by the
               entry. After the file is compressed, the original and compressed sizes are
               checked, and if they exceed the limits described above, then zip64 can be
               used. That is the general idea, but there is an additional wrinkle when saving
               to a non-seekable device, like the ASP.NET <c>Response.OutputStream</c>, or
               <c>Console.Out</c>.  When using non-seekable streams for output, the entry
               header - which indicates whether zip64 is in use - is emitted before it is
               known if zip64 is necessary.  It is only after all entries have been saved
               that it can be known if ZIP64 will be required.  On seekable output streams,
               after saving all entries, the library can seek backward and re-emit the zip
               file header to be consistent with the actual ZIP64 requirement.  But using a
               non-seekable output stream, the library cannot seek backward, so the header
               can never be changed. In other words, the archive's use of ZIP64 extensions is
               not alterable after the header is emitted.  Therefore, when saving to
               non-seekable streams, using <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is the same
               as using <see cref="F:External.Zip.Internal.Zip64Option.Always"/>: it will always produce a zip
               archive that uses ZIP64 extensions.
             </para>
            
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary.
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ZipOption">
            <summary>
             An enum representing the values on a three-way toggle switch
             for various options in the library. This might be used to
             specify whether to employ a particular text encoding, or to use
             ZIP64 extensions, or some other option.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Default">
            <summary>
            The default behavior. This is the same as "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Never">
            <summary>
            Never use the associated option.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.AsNecessary">
            <summary>
            Use the associated behavior "as necessary."
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:External.Zip.Internal.ZipOption.Always">
            <summary>
            Use the associated behavior Always, whether necessary or not.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:External.Zip.Internal.ReadOptions">
             <summary>
               A class for collecting the various options that can be used when
               Reading zip files for extraction or update.
             </summary>
            
             <remarks>
               <para>
                 When reading a zip file, there are several options an
                 application can set, to modify how the file is read, or what
                 the library does while reading.  This class collects those
                 options into one container.
               </para>
            
               <para>
                 Pass an instance of the <c>ReadOptions</c> class into the
                 <c>ZipFile.Read()</c> method.
               </para>
            
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.String,External.Zip.Internal.ReadOptions)"/>.
             <seealso cref="M:External.Zip.Internal.ZipFile.Read(System.IO.Stream,External.Zip.Internal.ReadOptions)"/>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.ReadProgress">
            <summary>
            An event handler for Read operations.  When opening large zip
            archives, you may want to display a progress bar or other
            indicator of status progress while reading.  This parameter
            allows you to specify a ReadProgress Event Handler directly.
            When you call <c>Read()</c>, the progress event is invoked as
            necessary.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.StatusMessageWriter">
            <summary>
            The <c>System.IO.TextWriter</c> to use for writing verbose status messages
            during operations on the zip archive.  A console application may wish to
            pass <c>System.Console.Out</c> to get messages on the Console. A graphical
            or headless application may wish to capture the messages in a different
            <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ReadOptions.Encoding">
             <summary>
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </summary>
            
             <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
            
        </member>
        <member name="T:External.Zip.Internal.SelfExtractorFlavor">
            <summary>
            An enum that provides the different self-extractor flavors
            </summary>
        </member>
        <member name="F:External.Zip.Internal.SelfExtractorFlavor.ConsoleApplication">
            <summary>
            A self-extracting zip archive that runs from the console or
            command line.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.SelfExtractorFlavor.WinFormsApplication">
            <summary>
            A self-extracting zip archive that presents a graphical user
            interface when it is executed.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.SelfExtractorSaveOptions">
            <summary>
            The options for generating a self-extracting archive.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Flavor">
            <summary>
              The type of SFX to create.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.PostExtractCommandLine">
             <summary>
               The command to run after extraction.
             </summary>
            
             <remarks>
             <para>
               This is optional. Leave it empty (<c>null</c> in C# or <c>Nothing</c> in
               VB) to run no command after extraction.
             </para>
            
             <para>
               If it is non-empty, the SFX will execute the command specified in this
               string on the user's machine, and using the extract directory as the
               working directory for the process, after unpacking the archive. The
               program to execute can include a path, if you like. If you want to execute
               a program that accepts arguments, specify the program name, followed by a
               space, and then the arguments for the program, each separated by a space,
               just as you would on a normal command line. Example: <c>program.exe arg1
               arg2</c>.  The string prior to the first space will be taken as the
               program name, and the string following the first space specifies the
               arguments to the program.
             </para>
            
             <para>
               If you want to execute a program that has a space in the name or path of
               the file, surround the program name in double-quotes. The first character
               of the command line should be a double-quote character, and there must be
               a matching double-quote following the end of the program file name. Any
               optional arguments to the program follow that, separated by
               spaces. Example: <c>"c:\project files\program name.exe" arg1 arg2</c>.
             </para>
            
             <para>
               If the flavor of the SFX is <c>SelfExtractorFlavor.ConsoleApplication</c>,
               then the SFX starts a new process, using this string as the post-extract
               command line.  The SFX waits for the process to exit.  The exit code of
               the post-extract command line is returned as the exit code of the
               command-line self-extractor exe. A non-zero exit code is typically used to
               indicated a failure by the program. In the case of an SFX, a non-zero exit
               code may indicate a failure during extraction, OR, it may indicate a
               failure of the run-after-extract program if specified, OR, it may indicate
               the run-after-extract program could not be fuond. There is no way to
               distinguish these conditions from the calling shell, aside from parsing
               the output of the SFX. If you have Quiet set to <c>true</c>, you may not
               see error messages, if a problem occurs.
             </para>
            
             <para>
               If the flavor of the SFX is
               <c>SelfExtractorFlavor.WinFormsApplication</c>, then the SFX starts a new
               process, using this string as the post-extract command line, and using the
               extract directory as the working directory for the process. The SFX does
               not wait for the command to complete, and does not check the exit code of
               the program. If the run-after-extract program cannot be fuond, a message
               box is displayed indicating that fact.
             </para>
            
             <para>
               You can specify environment variables within this string, with a format like
               <c>%NAME%</c>. The value of these variables will be expanded at the time
               the SFX is run. Example: <c>%WINDIR%\system32\xcopy.exe</c> may expand at
               runtime to <c>c:\Windows\System32\xcopy.exe</c>.
             </para>
            
             <para>
               By combining this with the <c>RemoveUnpackedFilesAfterExecute</c>
               flag, you can create an SFX that extracts itself, runs a file that
               was extracted, then deletes all the files that were extracted. If
               you want it to run "invisibly" then set <c>Flavor</c> to
               <c>SelfExtractorFlavor.ConsoleApplication</c>, and set <c>Quiet</c>
               to true.  The user running such an EXE will see a console window
               appear, then disappear quickly.  You may also want to specify the
               default extract location, with <c>DefaultExtractDirectory</c>.
             </para>
            
             <para>
               If you set <c>Flavor</c> to
               <c>SelfExtractorFlavor.WinFormsApplication</c>, and set <c>Quiet</c> to
               true, then a GUI with progressbars is displayed, but it is
               "non-interactive" - it accepts no input from the user.  Instead the SFX
               just automatically unpacks and exits.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.DefaultExtractDirectory">
             <summary>
               The default extract directory the user will see when
               running the self-extracting archive.
             </summary>
            
             <remarks>
             <para>
               Passing null (or Nothing in VB) here will cause the Self Extractor to use
               the the user's personal directory (<see cref="F:System.Environment.SpecialFolder.Personal"/>) for the default extract
               location.
             </para>
            
             <para>
               This is only a default location.  The actual extract location will be
               settable on the command line when the SFX is executed.
             </para>
            
             <para>
               You can specify environment variables within this string,
               with <c>%NAME%</c>. The value of these variables will be
               expanded at the time the SFX is run. Example:
               <c>%USERPROFILE%\Documents\unpack</c> may expand at runtime to
               <c>c:\users\melvin\Documents\unpack</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.IconFile">
             <summary>
               The name of an .ico file in the filesystem to use for the application icon
               for the generated SFX.
             </summary>
            
             <remarks>
             <para>
               Normally, DotNetZip will embed an "zipped folder" icon into the generated
               SFX.  If you prefer to use a different icon, you can specify it here. It
               should be a .ico file.  This file is passed as the <c>/win32icon</c>
               option to the csc.exe compiler when constructing the SFX file.
             </para>
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Quiet">
             <summary>
               Whether the ConsoleApplication SFX will be quiet during extraction.
             </summary>
            
             <remarks>
             <para>
               This option affects the way the generated SFX runs. By default it is
               false.  When you set it to true,...
             </para>
            
             <list type="table">
               <listheader>
                 <term>Flavor</term>
                 <description>Behavior</description>
               </listheader>
            
             <item>
               <term><c>ConsoleApplication</c></term>
               <description><para>no messages will be emitted during successful
                 operation.</para> <para> Double-clicking the SFX in Windows
                 Explorer or as an attachment in an email will cause a console
                 window to appear briefly, before it disappears. If you run the
                 ConsoleApplication SFX from the cmd.exe prompt, it runs as a
                 normal console app; by default, because it is quiet, it displays
                 no messages to the console.  If you pass the -v+ command line
                 argument to the Console SFX when you run it, you will get verbose
                 messages to the console. </para>
               </description>
             </item>
            
             <item>
               <term><c>WinFormsApplication</c></term>
               <description>the SFX extracts automatically when the application
                    is launched, with no additional user input.
               </description>
             </item>
            
             </list>
            
             <para>
               When you set it to false,...
             </para>
            
             <list type="table">
               <listheader>
                 <term>Flavor</term>
                 <description>Behavior</description>
               </listheader>
            
             <item>
               <term><c>ConsoleApplication</c></term>
               <description><para>the extractor will emit a
                 message to the console for each entry extracted.</para>
                 <para>
                   When double-clicking to launch the SFX, the console window will
                   remain, and the SFX will emit a message for each file as it
                   extracts. The messages fly by quickly, they won't be easily
                   readable, unless the extracted files are fairly large.
                 </para>
               </description>
             </item>
            
             <item>
               <term><c>WinFormsApplication</c></term>
               <description>the SFX presents a forms UI and allows the user to select
                 options before extracting.
               </description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ExtractExistingFile">
            <summary>
              Specify what the self-extractor will do when extracting an entry
              would overwrite an existing file.
            </summary>
            <remarks>
            <para>
              The default behavvior is to Throw.
            </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.RemoveUnpackedFilesAfterExecute">
             <summary>
               Whether to remove the files that have been unpacked, after executing the
               PostExtractCommandLine.
             </summary>
            
             <remarks>
             <para>
               If true, and if there is a <see cref="P:External.Zip.Internal.SelfExtractorSaveOptions.PostExtractCommandLine">
               PostExtractCommandLine</see>, and if the command runs successfully,
               then the files that the SFX unpacked will be removed, afterwards.  If
               the command does not complete successfully (non-zero return code),
               that is interpreted as a failure, and the extracted files will not be
               removed.
             </para>
            
             <para>
               Setting this flag, and setting <c>Flavor</c> to
               <c>SelfExtractorFlavor.ConsoleApplication</c>, and setting <c>Quiet</c> to
               true, results in an SFX that extracts itself, runs a file that was
               extracted, then deletes all the files that were extracted, with no
               intervention by the user.  You may also want to specify the default
               extract location, with <c>DefaultExtractDirectory</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.FileVersion">
             <summary>
               The file version number to embed into the generated EXE. It will show up, for
               example, during a mouseover in Windows Explorer.
             </summary>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ProductVersion">
             <summary>
               The product version to embed into the generated EXE. It will show up, for
               example, during a mouseover in Windows Explorer.
             </summary>
            
             <remarks>
               You can use any arbitrary string, but a human-readable version number is
               recommended. For example "v1.2 alpha" or "v4.2 RC2".  If you specify nothing,
               then there is no product version embedded into the EXE.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Copyright">
             <summary>
               The copyright notice, if any, to embed into the generated EXE.
             </summary>
            
             <remarks>
               It will show up, for example, while viewing properties of the file in
               Windows Explorer.  You can use any arbitrary string, but typically you
               want something like "Copyright © Dino Chiesa 2011".
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.Description">
             <summary>
               The description to embed into the generated EXE.
             </summary>
            
             <remarks>
               Use any arbitrary string.  This text will be displayed during a
               mouseover in Windows Explorer.  If you specify nothing, then the string
               "DotNetZip SFX Archive" is embedded into the EXE as the description.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.ProductName">
             <summary>
               The product name to embed into the generated EXE.
             </summary>
            
             <remarks>
               Use any arbitrary string. This text will be displayed
               while viewing properties of the EXE file in
               Windows Explorer.
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.SfxExeWindowTitle">
             <summary>
               The title to display in the Window of a GUI SFX, while it extracts.
             </summary>
            
             <remarks>
               <para>
                 By default the title show in the GUI window of a self-extractor
                 is "DotNetZip Self-extractor (http://DotNetZip.codeplex.com/)".
                 You can change that by setting this property before saving the SFX.
               </para>
            
               <para>
                 This property has an effect only when producing a Self-extractor
                 of flavor <c>SelfExtractorFlavor.WinFormsApplication</c>.
               </para>
             </remarks>
            
        </member>
        <member name="P:External.Zip.Internal.SelfExtractorSaveOptions.AdditionalCompilerSwitches">
            <summary>
              Additional options for the csc.exe compiler, when producing the SFX
              EXE.
            </summary>
            <exclude/>
        </member>
        <member name="T:External.Zip.Internal.ZipInputStream">
             <summary>
               Provides a stream metaphor for reading zip files.
             </summary>
            
             <remarks>
             <para>
               This class provides an alternative programming model for reading zip files to
               the one enabled by the <see cref="T:External.Zip.Internal.ZipFile"/> class.  Use this when reading zip
               files, as an alternative to the <see cref="T:External.Zip.Internal.ZipFile"/> class, when you would
               like to use a Stream class to read the file.
             </para>
            
             <para>
               Some application designs require a readable stream for input. This stream can
               be used to read a zip file, and extract entries.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to create or update zip files, or read and
                 extract zip files. <c>ZipInputStream</c> can be used only to read and
                 extract zip files. If you want to use a stream to create zip files, check
                 out the <see cref="T:External.Zip.Internal.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a <c>ZipInputStream</c>, wrapping it around an existing stream.
             </summary>
            
             <remarks>
            
             <para>
               While the <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             <para>
               Both the <c>ZipInputStream</c> class and the <c>ZipFile</c> class can be used
               to read and extract zip files.  Both of them support many of the common zip
               features, including Unicode, different compression levels, and ZIP64.  The
               programming models differ. For example, when extracting entries via calls to
               the <c>GetNextEntry()</c> and <c>Read()</c> methods on the
               <c>ZipInputStream</c> class, the caller is responsible for creating the file,
               writing the bytes into the file, setting the attributes on the file, and
               setting the created, last modified, and last accessed timestamps on the
               file. All of these things are done automatically by a call to <see cref="M:External.Zip.Internal.ZipEntry.Extract">ZipEntry.Extract()</see>.  For this reason, the
               <c>ZipInputStream</c> is generally recommended for when your application wants
               to extract the data, without storing that data into a file.
             </para>
            
             <para>
               Aside from the obvious differences in programming model, there are some
               differences in capability between the <c>ZipFile</c> class and the
               <c>ZipInputStream</c> class.
             </para>
            
             <list type="bullet">
               <item>
               <c>ZipFile</c> can be used to create or update zip files, or read and extract
               zip files. <c>ZipInputStream</c> can be used only to read and extract zip
                 files. If you want to use a stream to create zip files, check out the <see cref="T:External.Zip.Internal.ZipOutputStream"/>.
               </item>
            
               <item>
                 <c>ZipInputStream</c> cannot read segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipInputStream</c> will not read Zip file comments.
               </item>
            
               <item>
                 When reading larger files, <c>ZipInputStream</c> will always underperform
                 <c>ZipFile</c>. This is because the <c>ZipInputStream</c> does a full scan on the
                 zip file, while the <c>ZipFile</c> class reads the central directory of the
                 zip file.
               </item>
            
             </list>
            
             </remarks>
            
             <param name="stream">
               The stream to read. It must be readable. This stream will be closed at
               the time the <c>ZipInputStream</c> is closed.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var raw = File.Open(inputFileName, FileMode.Open, FileAccess.Read))
                 {
                     using (var input= new ZipInputStream(raw))
                     {
                         ZipEntry e;
                         while (( e = input.GetNextEntry()) != null)
                         {
                             if (e.IsDirectory) continue;
                             string outputPath = Path.Combine(extractDir, e.FileName);
                             using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                             {
                                 while ((n= input.Read(buffer, 0, buffer.Length)) &gt; 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using raw As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read)
                     Using input As ZipInputStream = New ZipInputStream(raw)
                         Dim e As ZipEntry
                         Do While (Not e = input.GetNextEntry Is Nothing)
                             If Not e.IsDirectory Then
                                 Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                        FileMode.Create, FileAccess.ReadWrite)
                                     Dim n As Integer
                                     Do While (n = input.Read(buffer, 0, buffer.Length) &gt; 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             End If
                         Loop
                     End Using
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.String)">
             <summary>
               Create a <c>ZipInputStream</c>, given the name of an existing zip file.
             </summary>
            
             <remarks>
            
             <para>
               This constructor opens a <c>FileStream</c> for the given zipfile, and
               wraps a <c>ZipInputStream</c> around that.  See the documentation for the
               <see cref="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)"/> constructor for full details.
             </para>
            
             <para>
               While the <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier
               to use, this class provides an alternative to those
               applications that want to read from a zipfile directly,
               using a <see cref="T:System.IO.Stream"/>.
             </para>
            
             </remarks>
            
             <param name="fileName">
               The name of the filesystem file to read.
             </param>
            
             <example>
            
               This example shows how to read a zip file, and extract entries, using the
               <c>ZipInputStream</c> class.
            
             <code lang="C#">
             private void Unzip()
             {
                 byte[] buffer= new byte[2048];
                 int n;
                 using (var input= new ZipInputStream(inputFileName))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer, 0, buffer.Length)) &gt; 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub UnZip()
                 Dim inputFileName As String = "MyArchive.zip"
                 Dim extractDir As String = "extract"
                 Dim buffer As Byte() = New Byte(2048) {}
                 Using input As ZipInputStream = New ZipInputStream(inputFileName)
                     Dim e As ZipEntry
                     Do While (Not e = input.GetNextEntry Is Nothing)
                         If Not e.IsDirectory Then
                             Using output As FileStream = File.Open(Path.Combine(extractDir, e.FileName), _
                                                                    FileMode.Create, FileAccess.ReadWrite)
                                 Dim n As Integer
                                 Do While (n = input.Read(buffer, 0, buffer.Length) &gt; 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         End If
                     Loop
                 End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a <c>ZipInputStream</c>, explicitly specifying whether to
               keep the underlying stream open.
             </summary>
            
             <remarks>
               See the documentation for the <see cref="M:External.Zip.Internal.ZipInputStream.#ctor(System.IO.Stream)">ZipInputStream(Stream)</see>
               constructor for a discussion of the class, and an example of how to use the class.
             </remarks>
            
             <param name="stream">
               The stream to read from. It must be readable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipInputStream</c> has been closed.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read the data from the stream into the buffer.
             </summary>
            
             <remarks>
             <para>
               The data for the zipentry will be decrypted and uncompressed, as
               necessary, before being copied into the buffer.
             </para>
            
             <para>
               You must set the <see cref="P:External.Zip.Internal.ZipInputStream.Password"/> property before calling
               <c>Read()</c> the first time for an encrypted entry.  To determine if an
               entry is encrypted and requires a password, check the <see cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</see> property.
             </para>
             </remarks>
            
             <param name="buffer">The buffer to hold the data read from the stream.</param>
             <param name="offset">the offset within the buffer to copy the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes read, after decryption and decompression.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.GetNextEntry">
             <summary>
               Read the next entry from the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:External.Zip.Internal.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)"/>,
               to position the pointer in the zip file to the next entry that can be
               read.  Subsequent calls to <c>Read()</c>, will decrypt and decompress the
               data in the zip file, until <c>Read()</c> returns 0.
             </para>
            
             <para>
               Each time you call <c>GetNextEntry()</c>, the pointer in the wrapped
               stream is moved to the next entry in the zip file.  If you call <see cref="M:External.Zip.Internal.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)"/>, and thus re-position the pointer within
               the file, you will need to call <c>GetNextEntry()</c> again, to insure
               that the file pointer is positioned at the beginning of a zip entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>. Using a stream approach, you will
               read the raw bytes for an entry in a zip file via calls to <c>Read()</c>.
               Alternatively, you can extract an entry into a file, or a stream, by
               calling <see cref="M:External.Zip.Internal.ZipEntry.Extract"/>, or one of its siblings.
             </para>
            
             </remarks>
            
             <returns>
               The <c>ZipEntry</c> read. Returns null (or Nothing in VB) if there are no more
               entries in the zip file.
             </returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Dispose(System.Boolean)">
             <summary>
               Dispose the stream.
             </summary>
            
             <remarks>
             <para>
               This method disposes the ZipInputStream.  It may also close the
               underlying stream, depending on which constructor was used.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via
               a <c>using</c> statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
               <para>
                 Application code won't call this code directly.  This method may
                 be invoked in two distinct scenarios.  If disposing == true, the
                 method has been called directly or indirectly by a user's code,
                 for example via the public Dispose() method. In this case, both
                 managed and unmanaged resources can be referenced and disposed.
                 If disposing == false, the method has been called by the runtime
                 from inside the object finalizer and this method should not
                 reference other objects; in that case only unmanaged resources
                 must be referenced or disposed.
               </para>
             </remarks>
            
             <param name="disposing">
               true if the Dispose method was invoked by user code.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
               This method seeks in the underlying stream.
             </summary>
            
             <remarks>
             <para>
               Call this method if you want to seek around within the zip file for random access.
             </para>
            
             <para>
               Applications can intermix calls to <c>Seek()</c> with calls to <see cref="M:External.Zip.Internal.ZipInputStream.GetNextEntry"/>.  After a call to <c>Seek()</c>,
               <c>GetNextEntry()</c> will get the next <c>ZipEntry</c> that falls after
               the current position in the input stream. You're on your own for finding
               out just where to seek in the stream, to get to the various entries.
             </para>
            
             </remarks>
            
             <param name="offset">the offset point to seek to</param>
             <param name="origin">the reference point from which to seek</param>
             <returns>The new position</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipInputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when reading entries into the zip archive, for
               those entries whose filenames or comments cannot be encoded with the
               default (IBM437) encoding.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to read zip archives that use something other than
               UTF-8 or IBM437, set this property to specify the code page to use when
               reading encoded filenames and comments for each <c>ZipEntry</c> in the zip
               file.
             </para>
            
             <para>
               This property is "provisional". When the entry in the zip archive is not
               explicitly marked as using UTF-8, then IBM437 is used to decode filenames
               and comments. If a loss of data would result from using IBM436 -
               specifically when encoding and decoding is not reflexive - the codepage
               specified here is used. It is possible, therefore, to have a given entry
               with a <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with
               the specified "provisional" codepage.
             </para>
            
             <para>
               When a zip file uses an arbitrary, non-UTF8 code page for encoding, there
               is no standard way for the reader application - whether DotNetZip, WinZip,
               WinRar, or something else - to know which codepage has been used for the
               entries. Readers of zip files are not able to inspect the zip file and
               determine the codepage that was used for the entries contained within it.
               It is left to the application or user to determine the necessary codepage
               when reading zip files encoded this way.  If you use an incorrect codepage
               when reading a zipfile, you will get entries with filenames that are
               incorrect, and the incorrect filenames may even contain characters that
               are not legal for use within filenames in Windows. Extracting entries with
               illegal characters in the filenames will lead to exceptions. It's too bad,
               but this is just the way things are with code pages in zip files. Caveat
               Emptor.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during decompression.
             </summary>
            
             <remarks>
               Setting this affects the performance and memory efficiency of compression
               and decompression.  For larger files, setting this to a larger size may
               improve performance, but the exact numbers vary depending on available
               memory, and a bunch of other variables. I don't have good firm
               recommendations on how to set it.  You'll have to test it yourself. Or
               just leave it alone and accept the default.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipInputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When reading a zip archive, this password is used to read and decrypt the
               entries that are encrypted within the zip file. When entries within a zip
               file use different passwords, set the appropriate password for the entry
               before the first call to <c>Read()</c> for each entry.
             </para>
            
             <para>
               When reading an entry that is not encrypted, the value of this property is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses the ZipInputStream to read and extract entries from a
               zip file, using a potentially different password for each entry.
            
             <code lang="C#">
             byte[] buffer= new byte[2048];
             int n;
             using (var raw = File.Open(_inputFileName, FileMode.Open, FileAccess.Read ))
             {
                 using (var input= new ZipInputStream(raw))
                 {
                     ZipEntry e;
                     while (( e = input.GetNextEntry()) != null)
                     {
                         input.Password = PasswordForEntry(e.FileName);
                         if (e.IsDirectory) continue;
                         string outputPath = Path.Combine(_extractDir, e.FileName);
                         using (var output = File.Open(outputPath, FileMode.Create, FileAccess.ReadWrite))
                         {
                             while ((n= input.Read(buffer,0,buffer.Length)) > 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanRead">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanSeek">
            <summary>
            Returns the value of <c>CanSeek</c> for the underlying (wrapped) stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.CanWrite">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Length">
            <summary>
            Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipInputStream.Position">
            <summary>
            Gets or sets the position of the underlying stream.
            </summary>
            <remarks>
            Setting the position is equivalent to calling <c>Seek(value, SeekOrigin.Begin)</c>.
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.ZipOutputStream">
             <summary>
               Provides a stream metaphor for generating zip files.
             </summary>
            
             <remarks>
             <para>
               This class writes zip files, as defined in the <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specification
               for zip files described by PKWare</see>.  The compression for this
               implementation is provided by a managed-code version of Zlib, included with
               DotNetZip in the classes in the Ionic.Zlib namespace.
             </para>
            
             <para>
               This class provides an alternative programming model to the one enabled by the
               <see cref="T:External.Zip.Internal.ZipFile"/> class. Use this when creating zip files, as an
               alternative to the <see cref="T:External.Zip.Internal.ZipFile"/> class, when you would like to use a
               <c>Stream</c> type to write the zip file.
             </para>
            
             <para>
               Both the <c>ZipOutputStream</c> class and the <c>ZipFile</c> class can be used
               to create zip files. Both of them support many of the common zip features,
               including Unicode, different compression levels, and ZIP64.   They provide
               very similar performance when creating zip files.
             </para>
            
             <para>
               The <c>ZipFile</c> class is generally easier to use than
               <c>ZipOutputStream</c> and should be considered a higher-level interface.  For
               example, when creating a zip file via calls to the <c>PutNextEntry()</c> and
               <c>Write()</c> methods on the <c>ZipOutputStream</c> class, the caller is
               responsible for opening the file, reading the bytes from the file, writing
               those bytes into the <c>ZipOutputStream</c>, setting the attributes on the
               <c>ZipEntry</c>, and setting the created, last modified, and last accessed
               timestamps on the zip entry. All of these things are done automatically by a
               call to <see cref="M:External.Zip.Internal.ZipFile.AddFile(System.String,System.String)">ZipFile.AddFile()</see>.
               For this reason, the <c>ZipOutputStream</c> is generally recommended for use
               only when your application emits arbitrary data, not necessarily data from a
               filesystem file, directly into a zip file, and does so using a <c>Stream</c>
               metaphor.
             </para>
            
             <para>
               Aside from the differences in programming model, there are other
               differences in capability between the two classes.
             </para>
            
             <list type="bullet">
               <item>
                 <c>ZipFile</c> can be used to read and extract zip files, in addition to
                 creating zip files. <c>ZipOutputStream</c> cannot read zip files. If you want
                 to use a stream to read zip files, check out the <see cref="T:External.Zip.Internal.ZipInputStream"/> class.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> does not support the creation of segmented or spanned
                 zip files.
               </item>
            
               <item>
                 <c>ZipOutputStream</c> cannot produce a self-extracting archive.
               </item>
             </list>
            
             <para>
               Be aware that the <c>ZipOutputStream</c> class implements the <see cref="T:System.IDisposable"/> interface.  In order for
               <c>ZipOutputStream</c> to produce a valid zip file, you use use it within
               a using clause (<c>Using</c> in VB), or call the <c>Dispose()</c> method
               explicitly.  See the examples for how to employ a using clause.
             </para>
            
             <para>
               Also, a note regarding compression performance: On the desktop .NET
               Framework, DotNetZip can use a multi-threaded compression implementation
               that provides significant speed increases on large files, over 300k or so,
               at the cost of increased memory use at runtime.  (The output of the
               compression is almost exactly the same size).  But, the multi-threaded
               approach incurs a performance hit on smaller files. There's no way for the
               ZipOutputStream to know whether parallel compression will be beneficial,
               because the ZipOutputStream does not know how much data you will write
               through the stream.  You may wish to set the <see cref="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold"/> property to zero, if you are compressing
               large files through <c>ZipOutputStream</c>.  This will cause parallel
               compression to be used, always.
             </para>
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream)">
             <summary>
               Create a ZipOutputStream, wrapping an existing stream.
             </summary>
            
             <remarks>
             <para>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </para>
            
             </remarks>
            
             <param name="stream">
             The stream to wrap. It must be writable. This stream will be closed at
             the time the ZipOutputStream is closed.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(raw))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                         foreach (string inputFileName in filesToZip)
                         {
                             System.Console.WriteLine("file: {0}", inputFileName);
            
                             output.PutNextEntry(inputFileName);
                             using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Write ))
                             {
                                 byte[] buffer= new byte[2048];
                                 int n;
                                 while ((n= input.Read(buffer,0,buffer.Length)) &gt; 0)
                                 {
                                     output.Write(buffer,0,n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using raw As FileStream = File.Open(outputFileName, FileMode.Create, FileAccess.ReadWrite)
                         Using output As ZipOutputStream = New ZipOutputStream(raw)
                             output.Password = "VerySecret!"
                             output.Encryption = EncryptionAlgorithm.WinZipAes256
                             Dim inputFileName As String
                             For Each inputFileName In filesToZip
                                 Console.WriteLine("file: {0}", inputFileName)
                                 output.PutNextEntry(inputFileName)
                                 Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                     Dim n As Integer
                                     Dim buffer As Byte() = New Byte(2048) {}
                                     Do While (n = input.Read(buffer, 0, buffer.Length) &gt; 0)
                                         output.Write(buffer, 0, n)
                                     Loop
                                 End Using
                             Next
                         End Using
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.String)">
             <summary>
               Create a ZipOutputStream that writes to a filesystem file.
             </summary>
            
             <remarks>
               The <see cref="T:External.Zip.Internal.ZipFile"/> class is generally easier to use when creating
               zip files. The ZipOutputStream offers a different metaphor for creating a
               zip file, based on the <see cref="T:System.IO.Stream"/> class.
             </remarks>
            
             <param name="fileName">
               The name of the zip file to create.
             </param>
            
             <example>
            
               This example shows how to create a zip file, using the
               ZipOutputStream class.
            
             <code lang="C#">
             private void Zipup()
             {
                 if (filesToZip.Count == 0)
                 {
                     System.Console.WriteLine("Nothing to do.");
                     return;
                 }
            
                 using (var output= new ZipOutputStream(outputFileName))
                 {
                     output.Password = "VerySecret!";
                     output.Encryption = EncryptionAlgorithm.WinZipAes256;
            
                     foreach (string inputFileName in filesToZip)
                     {
                         System.Console.WriteLine("file: {0}", inputFileName);
            
                         output.PutNextEntry(inputFileName);
                         using (var input = File.Open(inputFileName, FileMode.Open, FileAccess.Read,
                                                      FileShare.Read | FileShare.Write ))
                         {
                             byte[] buffer= new byte[2048];
                             int n;
                             while ((n= input.Read(buffer,0,buffer.Length)) &gt; 0)
                             {
                                 output.Write(buffer,0,n);
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub Zipup()
                 Dim outputFileName As String = "XmlData.zip"
                 Dim filesToZip As String() = Directory.GetFiles(".", "*.xml")
                 If (filesToZip.Length = 0) Then
                     Console.WriteLine("Nothing to do.")
                 Else
                     Using output As ZipOutputStream = New ZipOutputStream(outputFileName)
                         output.Password = "VerySecret!"
                         output.Encryption = EncryptionAlgorithm.WinZipAes256
                         Dim inputFileName As String
                         For Each inputFileName In filesToZip
                             Console.WriteLine("file: {0}", inputFileName)
                             output.PutNextEntry(inputFileName)
                             Using input As FileStream = File.Open(inputFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                                 Dim n As Integer
                                 Dim buffer As Byte() = New Byte(2048) {}
                                 Do While (n = input.Read(buffer, 0, buffer.Length) &gt; 0)
                                     output.Write(buffer, 0, n)
                                 Loop
                             End Using
                         Next
                     End Using
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream,System.Boolean)">
             <summary>
               Create a ZipOutputStream.
             </summary>
            
             <remarks>
               See the documentation for the <see cref="M:External.Zip.Internal.ZipOutputStream.#ctor(System.IO.Stream)">ZipOutputStream(Stream)</see>
               constructor for an example.
             </remarks>
            
             <param name="stream">
               The stream to wrap. It must be writable.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the stream
               to remain open after the <c>ZipOutputStream</c> has been closed.
             </param>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <remarks>
              <para>
                This can be useful for debugging purposes.
              </para>
            </remarks>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.ContainsEntry(System.String)">
             <summary>
               Returns true if an entry by the given name has already been written
               to the ZipOutputStream.
             </summary>
            
             <param name="name">
               The name of the entry to scan for.
             </param>
            
             <returns>
             true if an entry by the given name has already been written.
             </returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write the data from the buffer to the stream.
             </summary>
            
             <remarks>
               As the application writes data into this stream, the data may be
               compressed and encrypted before being written out to the underlying
               stream, depending on the settings of the <see cref="P:External.Zip.Internal.ZipOutputStream.CompressionLevel"/>
               and the <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/> properties.
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.PutNextEntry(System.String)">
             <summary>
               Specify the name of the next entry that will be written to the zip file.
             </summary>
            
             <remarks>
             <para>
               Call this method just before calling <see cref="M:External.Zip.Internal.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)"/>, to
               specify the name of the entry that the next set of bytes written to
               the <c>ZipOutputStream</c> belongs to. All subsequent calls to <c>Write</c>,
               until the next call to <c>PutNextEntry</c>,
               will be inserted into the named entry in the zip file.
             </para>
            
             <para>
               If the <paramref name="entryName"/> used in <c>PutNextEntry()</c> ends in
               a slash, then the entry added is marked as a directory. Because directory
               entries do not contain data, a call to <c>Write()</c>, before an
               intervening additional call to <c>PutNextEntry()</c>, will throw an
               exception.
             </para>
            
             <para>
               If you don't call <c>Write()</c> between two calls to
               <c>PutNextEntry()</c>, the first entry is inserted into the zip file as a
               file of zero size.  This may be what you want.
             </para>
            
             <para>
               Because <c>PutNextEntry()</c> closes out the prior entry, if any, this
               method may throw if there is a problem with the prior entry.
             </para>
            
             <para>
               This method returns the <c>ZipEntry</c>.  You can modify public properties
               on the <c>ZipEntry</c>, such as <see cref="P:External.Zip.Internal.ZipEntry.Encryption"/>, <see cref="P:External.Zip.Internal.ZipEntry.Password"/>, and so on, until the first call to
               <c>ZipOutputStream.Write()</c>, or until the next call to
               <c>PutNextEntry()</c>.  If you modify the <c>ZipEntry</c> <em>after</em>
               having called <c>Write()</c>, you may get a runtime exception, or you may
               silently get an invalid zip archive.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to create a zip file, using the
               <c>ZipOutputStream</c> class.
            
             <code>
             private void Zipup()
             {
                 using (FileStream fs raw = File.Open(_outputFileName, FileMode.Create, FileAccess.ReadWrite ))
                 {
                     using (var output= new ZipOutputStream(fs))
                     {
                         output.Password = "VerySecret!";
                         output.Encryption = EncryptionAlgorithm.WinZipAes256;
                         output.PutNextEntry("entry1.txt");
                         byte[] buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #1.");
                         output.Write(buffer,0,buffer.Length);
                         output.PutNextEntry("entry2.txt");  // this will be zero length
                         output.PutNextEntry("entry3.txt");
                         buffer= System.Text.Encoding.ASCII.GetBytes("This is the content for entry #3.");
                         output.Write(buffer,0,buffer.Length);
                     }
                 }
             }
             </code>
             </example>
            
             <param name="entryName">
               The name of the entry to be added, including any path to be used
               within the zip file.
             </param>
            
             <returns>
               The ZipEntry created.
             </returns>
            
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Dispose(System.Boolean)">
             <summary>
             Dispose the stream
             </summary>
            
             <remarks>
             <para>
               This method writes the Zip Central directory, then closes the stream.  The
               application must call Dispose() (or Close) in order to produce a valid zip file.
             </para>
            
             <para>
               Typically the application will call <c>Dispose()</c> implicitly, via a <c>using</c>
               statement in C#, or a <c>Using</c> statement in VB.
             </para>
            
             </remarks>
            
             <param name="disposing">set this to true, always.</param>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Flush">
            <summary>
            This is a no-op.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">ignored</param>
            <param name="offset">ignored</param>
            <param name="count">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">ignored</param>
            <param name="origin">ignored</param>
            <returns>nothing</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">ignored</param>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Password">
             <summary>
               Sets the password to be used on the <c>ZipOutputStream</c> instance.
             </summary>
            
             <remarks>
            
             <para>
               When writing a zip archive, this password is applied to the entries, not
               to the zip archive itself. It applies to any <c>ZipEntry</c> subsequently
               written to the <c>ZipOutputStream</c>.
             </para>
            
             <para>
               Using a password does not encrypt or protect the "directory" of the
               archive - the list of entries contained in the archive.  If you set the
               <c>Password</c> property, the password actually applies to individual
               entries that are added to the archive, subsequent to the setting of this
               property.  The list of filenames in the archive that is eventually created
               will appear in clear text, but the contents of the individual files are
               encrypted.  This is how Zip encryption works.
             </para>
            
             <para>
               If you set this property, and then add a set of entries to the archive via
               calls to <c>PutNextEntry</c>, then each entry is encrypted with that
               password.  You may also want to change the password between adding
               different entries. If you set the password, add an entry, then set the
               password to <c>null</c> (<c>Nothing</c> in VB), and add another entry, the
               first entry is encrypted and the second is not.
             </para>
            
             <para>
               When setting the <c>Password</c>, you may also want to explicitly set the <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/> property, to specify how to encrypt the entries added
               to the ZipFile.  If you set the <c>Password</c> to a non-null value and do not
               set <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.
               This encryption is relatively weak but is very interoperable. If
               you set the password to a <c>null</c> value (<c>Nothing</c> in VB),
               <c>Encryption</c> is reset to None.
             </para>
            
             <para>
               Special case: if you wrap a ZipOutputStream around a non-seekable stream,
               and use encryption, and emit an entry of zero bytes, the <c>Close()</c> or
               <c>PutNextEntry()</c> following the entry will throw an exception.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Encryption">
             <summary>
               The Encryption to use for entries added to the <c>ZipOutputStream</c>.
             </summary>
            
             <remarks>
             <para>
               The specified Encryption is applied to the entries subsequently
               written to the <c>ZipOutputStream</c> instance.
             </para>
            
             <para>
               If you set this to something other than
               EncryptionAlgorithm.None, you will also need to set the
               <see cref="P:External.Zip.Internal.ZipOutputStream.Password"/> to a non-null, non-empty value in
               order to actually get encryption on the entry.
             </para>
            
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.Password">ZipOutputStream.Password</seealso>
             <seealso cref="P:External.Zip.Internal.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CodecBufferSize">
             <summary>
               Size of the work buffer to use for the ZLIB codec during compression.
             </summary>
            
             <remarks>
               Setting this may affect performance.  For larger files, setting this to a
               larger size may improve performance, but I'm not sure.  Sorry, I don't
               currently have good recommendations on how to set it.  You can test it if
               you like.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Strategy">
             <summary>
               The compression strategy to use for all entries.
             </summary>
            
             <remarks>
               Set the Strategy used by the ZLIB-compatible compressor, when compressing
               data for the entries in the zip archive. Different compression strategies
               work better on different sorts of data. The strategy parameter can affect
               the compression ratio and the speed of compression but not the correctness
               of the compresssion.  For more information see <see cref="T:External.Zip.Internal.Zlib.CompressionStrategy"/>.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Timestamp">
             <summary>
               The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
               Set this in order to specify the kind of timestamp that should be emitted
               into the zip file for each entry.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CompressionLevel">
             <summary>
               Sets the compression level to be used for entries subsequently added to
               the zip archive.
             </summary>
            
             <remarks>
              <para>
                Varying the compression level used on entries can affect the
                size-vs-speed tradeoff when compression and decompressing data streams
                or files.
              </para>
            
              <para>
                As with some other properties on the <c>ZipOutputStream</c> class, like <see cref="P:External.Zip.Internal.ZipOutputStream.Password"/>, and <see cref="P:External.Zip.Internal.ZipOutputStream.Encryption"/>,
                setting this property on a <c>ZipOutputStream</c>
                instance will cause the specified <c>CompressionLevel</c> to be used on all
                <see cref="T:External.Zip.Internal.ZipEntry"/> items that are subsequently added to the
                <c>ZipOutputStream</c> instance.
              </para>
            
              <para>
                If you do not set this property, the default compression level is used,
                which normally gives a good balance of compression efficiency and
                compression speed.  In some tests, using <c>BestCompression</c> can
                double the time it takes to compress, while delivering just a small
                increase in compression efficiency.  This behavior will vary with the
                type of data you compress.  If you are in doubt, just leave this setting
                alone, and accept the default.
              </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CompressionMethod">
            <summary>
              The compression method used on each entry added to the ZipOutputStream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Comment">
             <summary>
               A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
               The application sets this property to specify a comment to be embedded
               into the generated zip archive.
             </para>
            
             <para>
               According to <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
               zip specification</see>, the comment is not encrypted, even if there is a
               password set on the zip file.
             </para>
            
             <para>
               The specification does not describe how to indicate the encoding used
               on a comment string. Many "compliant" zip tools and libraries use
               IBM437 as the code page for comments; DotNetZip, too, follows that
               practice.  On the other hand, there are situations where you want a
               Comment to be encoded with something else, for example using code page
               950 "Big-5 Chinese". To fill that need, DotNetZip will encode the
               comment following the same procedure it follows for encoding
               filenames: (a) if <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is
               <c>Never</c>, it uses the default encoding (IBM437). (b) if <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is <c>Always</c>, it always uses the
               alternate encoding (<see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncoding"/>). (c) if <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/> is <c>AsNecessary</c>, it uses the
               alternate encoding only if the default encoding is not sufficient for
               encoding the comment - in other words if decoding the result does not
               produce the original string.  This decision is taken at the time of
               the call to <c>ZipFile.Save()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.EnableZip64">
             <summary>
               Specify whether to use ZIP64 extensions when saving a zip archive.
             </summary>
            
             <remarks>
             <para>
               The default value for the property is <see cref="F:External.Zip.Internal.Zip64Option.Never"/>. <see cref="F:External.Zip.Internal.Zip64Option.AsNecessary"/> is
               safest, in the sense that you will not get an Exception if a
               pre-ZIP64 limit is exceeded.
             </para>
            
             <para>
               You must set this property before calling <c>Write()</c>.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.OutputUsedZip64">
             <summary>
               Indicates whether ZIP64 extensions were used when saving the zip archive.
             </summary>
            
             <remarks>
               The value is defined only after the <c>ZipOutputStream</c> has been closed.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.IgnoreCase">
             <summary>
               Whether the ZipOutputStream should use case-insensitive comparisons when
               checking for uniqueness of zip entries.
             </summary>
            
             <remarks>
               <para>
               Though the zip specification doesn't prohibit zipfiles with duplicate
               entries, Sane zip files have no duplicates, and the DotNetZip library
               cannot create zip files with duplicate entries. If an application attempts
               to call <see cref="M:External.Zip.Internal.ZipOutputStream.PutNextEntry(System.String)"/> with a name that duplicates one
               already used within the archive, the library will throw an Exception.
               </para>
               <para>
               This property allows the application to specify whether the
               ZipOutputStream instance considers ordinal case when checking for
               uniqueness of zip entries.
               </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.UseUnicodeAsNecessary">
             <summary>
               Indicates whether to encode entry filenames and entry comments using
               Unicode (UTF-8).
             </summary>
            
             <remarks>
             <para>
               <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
               PKWare zip specification</see> provides for encoding file names and file
               comments in either the IBM437 code page, or in UTF-8.  This flag selects
               the encoding according to that specification.  By default, this flag is
               false, and filenames and comments are encoded into the zip file in the
               IBM437 codepage.  Setting this flag to true will specify that filenames
               and comments that cannot be encoded with IBM437 will be encoded with
               UTF-8.
             </para>
            
             <para>
               Zip files created with strict adherence to the PKWare specification with
               respect to UTF-8 encoding can contain entries with filenames containing
               any combination of Unicode characters, including the full range of
               characters from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other
               alphabets.  However, because at this time, the UTF-8 portion of the PKWare
               specification is not broadly supported by other zip libraries and
               utilities, such zip files may not be readable by your favorite zip tool or
               archiver. In other words, interoperability will decrease if you set this
               flag to true.
             </para>
            
             <para>
               In particular, Zip files created with strict adherence to the PKWare
               specification with respect to UTF-8 encoding will not work well with
               Explorer in Windows XP or Windows Vista, because Windows compressed
               folders, as far as I know, do not support UTF-8 in zip files.  Vista can
               read the zip files, but shows the filenames incorrectly. Unpacking from
               Windows Vista Explorer will result in filenames that have rubbish
               characters in place of the high-order UTF-8 bytes.
             </para>
            
             <para>
               Also, zip files that use UTF-8 encoding will not work well with Java
               applications that use the java.util.zip classes, as of v5.0 of the Java
               runtime. The Java runtime does not correctly implement the PKWare
               specification in this regard.
             </para>
            
             <para>
               As a result, we have the unfortunate situation that "correct" behavior by
               the DotNetZip library with regard to Unicode encoding of filenames during
               zip creation will result in zip files that are readable by strictly
               compliant and current tools (for example the most recent release of the
               commercial WinZip tool); but these zip files will not be readable by
               various other tools or libraries, including Windows Explorer.
             </para>
            
             <para>
               The DotNetZip library can read and write zip files with UTF8-encoded
               entries, according to the PKware spec.  If you use DotNetZip for both
               creating and reading the zip file, and you use UTF-8, there will be no
               loss of information in the filenames. For example, using a self-extractor
               created by this library will allow you to unpack files correctly with no
               loss of information in the filenames.
             </para>
            
             <para>
               If you do not set this flag, it will remain false.  If this flag is false,
               the <c>ZipOutputStream</c> will encode all filenames and comments using
               the IBM437 codepage.  This can cause "loss of information" on some
               filenames, but the resulting zipfile will be more interoperable with other
               utilities. As an example of the loss of information, diacritics can be
               lost.  The o-tilde character will be down-coded to plain o.  The c with a
               cedilla (Unicode 0xE7) used in Portugese will be downcoded to a c.
               Likewise, the O-stroke character (Unicode 248), used in Danish and
               Norwegian, will be down-coded to plain o. Chinese characters cannot be
               represented in codepage IBM437; when using the default encoding, Chinese
               characters in filenames will be represented as ?. These are all examples
               of "information loss".
             </para>
            
             <para>
               The loss of information associated to the use of the IBM437 encoding is
               inconvenient, and can also lead to runtime errors. For example, using
               IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
               your application creates a <c>ZipOutputStream</c>, does not set the
               encoding, then adds two files, each with names of four Chinese characters
               each, this will result in a duplicate filename exception.  In the case
               where you add a single file with a name containing four Chinese
               characters, the zipfile will save properly, but extracting that file
               later, with any zip tool, will result in an error, because the question
               mark is not legal for use within filenames on Windows.  These are just a
               few examples of the problems associated to loss of information.
             </para>
            
             <para>
               This flag is independent of the encoding of the content within the entries
               in the zip file. Think of the zip file as a container - it supports an
               encoding.  Within the container are other "containers" - the file entries
               themselves.  The encoding within those entries is independent of the
               encoding of the zip archive container for those entries.
             </para>
            
             <para>
               Rather than specify the encoding in a binary fashion using this flag, an
               application can specify an arbitrary encoding via the <see cref="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding"/> property.  Setting the encoding
               explicitly when creating zip archives will result in non-compliant zip
               files that, curiously, are fairly interoperable.  The challenge is, the
               PKWare specification does not provide for a way to specify that an entry
               in a zip archive uses a code page that is neither IBM437 nor UTF-8.
               Therefore if you set the encoding explicitly when creating a zip archive,
               you must take care upon reading the zip archive to use the same code page.
               If you get it wrong, the behavior is undefined and may result in incorrect
               filenames, exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ProvisionalAlternateEncoding">
             <summary>
               The text encoding to use when emitting entries into the zip archive, for
               those entries whose filenames or comments cannot be encoded with the
               default (IBM437) encoding.
             </summary>
            
             <remarks>
             <para>
               In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
               zip specification</see>, PKWare describes two options for encoding
               filenames and comments: using IBM437 or UTF-8.  But, some archiving tools
               or libraries do not follow the specification, and instead encode
               characters using the system default code page.  For example, WinRAR when
               run on a machine in Shanghai may encode filenames with the Big-5 Chinese
               (950) code page.  This behavior is contrary to the Zip specification, but
               it occurs anyway.
             </para>
            
             <para>
               When using DotNetZip to write zip archives that will be read by one of
               these other archivers, set this property to specify the code page to use
               when encoding the <see cref="P:External.Zip.Internal.ZipEntry.FileName"/> and <see cref="P:External.Zip.Internal.ZipEntry.Comment"/> for each <c>ZipEntry</c> in the zip file, for
               values that cannot be encoded with the default codepage for zip files,
               IBM437.  This is why this property is "provisional".  In all cases, IBM437
               is used where possible, in other words, where no loss of data would
               result. It is possible, therefore, to have a given entry with a
               <c>Comment</c> encoded in IBM437 and a <c>FileName</c> encoded with the
               specified "provisional" codepage.
             </para>
            
             <para>
               Be aware that a zip file created after you've explicitly set the
               <c>ProvisionalAlternateEncoding</c> property to a value other than
               IBM437 may not be compliant to the PKWare specification, and may not be
               readable by compliant archivers.  On the other hand, many (most?)
               archivers are non-compliant and can read zip files created in arbitrary
               code pages.  The trick is to use or specify the proper codepage when
               reading the zip.
             </para>
            
             <para>
               When creating a zip archive using this library, it is possible to change
               the value of <c>ProvisionalAlternateEncoding</c> between each entry you
               add, and between adding entries and the call to <c>Close()</c>. Don't do
               this. It will likely result in a zipfile that is not readable.  For best
               interoperability, either leave <c>ProvisionalAlternateEncoding</c>
               alone, or specify it only once, before adding any entries to the
               <c>ZipOutputStream</c> instance.  There is one exception to this
               recommendation, described later.
             </para>
            
             <para>
               When using an arbitrary, non-UTF8 code page for encoding, there is no
               standard way for the creator application - whether DotNetZip, WinZip,
               WinRar, or something else - to formally specify in the zip file which
               codepage has been used for the entries. As a result, readers of zip files
               are not able to inspect the zip file and determine the codepage that was
               used for the entries contained within it.  It is left to the application
               or user to determine the necessary codepage when reading zip files encoded
               this way.  If you use an incorrect codepage when reading a zipfile, you
               will get entries with filenames that are incorrect, and the incorrect
               filenames may even contain characters that are not legal for use within
               filenames in Windows. Extracting entries with illegal characters in the
               filenames will lead to exceptions. It's too bad, but this is just the way
               things are with code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
               One possible approach for specifying the code page for a given zip file is
               to describe the code page in a human-readable form in the Zip comment. For
               example, the comment may read "Entries in this archive are encoded in the
               Big5 code page".  For maximum interoperability, the zip comment in this
               case should be encoded in the default, IBM437 code page.  In this case,
               the zip comment is encoded using a different page than the filenames.  To
               do this, Specify <c>ProvisionalAlternateEncoding</c> to your desired
               region-specific code page, once before adding any entries, and then set
               the <see cref="P:External.Zip.Internal.ZipOutputStream.Comment"/> property and reset
               <c>ProvisionalAlternateEncoding</c> to IBM437 before calling <c>Close()</c>.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.AlternateEncoding">
            <summary>
              A Text Encoding to use when encoding the filenames and comments for
              all the ZipEntry items, during a ZipFile.Save() operation.
            </summary>
            <remarks>
              <para>
                Whether the encoding specified here is used during the save depends
                on <see cref="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage"/>.
              </para>
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.AlternateEncodingUsage">
            <summary>
              A flag that tells if and when this instance should apply
              AlternateEncoding to encode the filenames and comments associated to
              of ZipEntry objects contained within this instance.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also
            known as IBM437.
            </summary>
            <seealso cref="P:External.Zip.Internal.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold">
             <summary>
               The size threshold for an entry, above which a parallel deflate is used.
             </summary>
            
             <remarks>
            
               <para>
                 DotNetZip will use multiple threads to compress any ZipEntry, when
                 the <c>CompressionMethod</c> is Deflate, and if the entry is
                 larger than the given size.  Zero means "always use parallel
                 deflate", while -1 means "never use parallel deflate".
               </para>
            
               <para>
                 If the entry size cannot be known before compression, as with any entry
                 added via a ZipOutputStream, then Parallel deflate will never be
                 performed, unless the value of this property is zero.
               </para>
            
               <para>
                 A parallel deflate operations will speed up the compression of
                 large files, on computers with multiple CPUs or multiple CPU
                 cores.  For files above 1mb, on a dual core or dual-cpu (2p)
                 machine, the time required to compress the file can be 70% of the
                 single-threaded deflate.  For very large files on 4p machines the
                 compression can be done in 30% of the normal time.  The downside
                 is that parallel deflate consumes extra memory during the deflate,
                 and the deflation is slightly less effective.
               </para>
            
               <para>
                 Parallel deflate tends to not be as effective as single-threaded deflate
                 because the original data stream is split into multiple independent
                 buffers, each of which is compressed in parallel.  But because they are
                 treated independently, there is no opportunity to share compression
                 dictionaries, and additional framing bytes must be added to the output
                 stream.  For that reason, a deflated stream may be slightly larger when
                 compressed using parallel deflate, as compared to a traditional
                 single-threaded deflate. For files of about 512k, the increase over the
                 normal deflate is as much as 5% of the total compressed size. For larger
                 files, the difference can be as small as 0.1%.
               </para>
            
               <para>
                 Multi-threaded compression does not give as much an advantage when using
                 Encryption. This is primarily because encryption tends to slow down
                 the entire pipeline. Also, multi-threaded compression gives less of an
                 advantage when using lower compression levels, for example <see cref="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed"/>.  You may have to perform
                 some tests to determine the best approach for your situation.
               </para>
            
               <para>
                 The default value for this property is -1, which means parallel
                 compression will not be performed unless you set it to zero.
               </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateMaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use when performing
               parallel compression.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory
               buffer pairs to create when performing parallel
               compression.  The implementation of the parallel
               compression stream allocates multiple buffers to
               facilitate parallel compression.  As each buffer fills up,
               the stream uses <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see> to compress those
               buffers in a background threadpool thread. After a buffer
               is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see cref="P:External.Zip.Internal.ZipOutputStream.CodecBufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is
               effective only if set before calling
               <c>ZipOutputStream.Write()</c> for the first time.
             </para>
             </remarks>
            
             <seealso cref="P:External.Zip.Internal.ZipOutputStream.ParallelDeflateThreshold"/>
            
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanRead">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanSeek">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.CanWrite">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Length">
            <summary>
            Always returns a NotSupportedException.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.ZipOutputStream.Position">
            <summary>
            Setting this property always returns a NotSupportedException. Getting it
            returns the value of the Position on the underlying stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.ForUpdate(System.String,System.UInt32)">
            <summary>
              Sort-of like a factory method, ForUpdate is used only when
              the application needs to update the zip entry metadata for
              a segmented zip file, when the starting segment is earlier
              than the ending segment, for a particular entry.
            </summary>
            <remarks>
              <para>
                The update is always contiguous, never rolls over.  As a
                result, this method doesn't need to return a ZSS; it can
                simply return a FileStream.  That's why it's "sort of"
                like a Factory method.
              </para>
              <para>
                Caller must Close/Dispose the stream object returned by
                this method.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.ZipSegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:External.Zip.Internal.ZipSegmentedStream.CurrentName">
            <summary>
              Name of the filesystem file corresponding to the current segment.
            </summary>
            <remarks>
              <para>
                The name is not always the name currently being used in the
                filesystem.  When rwMode is RwMode.Write, the filesystem file has a
                temporary name until the stream is closed or until the next segment is
                started.
              </para>
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:External.Zip.Internal.Zlib.ZlibStream"/>
             <seealso cref="T:External.Zip.Internal.Zlib.GZipStream"/>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:External.Zip.Internal.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.ZlibStream"/> and <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream"/>
             <seealso cref="T:External.Zip.Internal.Zlib.ZlibStream"/>
        </member>
        <member name="F:External.Zip.Internal.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:External.Zip.Internal.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class performs DEFLATE compression through writing.  For
               more information on the Deflate algorithm, see IETF RFC 1951,
               "DEFLATE Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>, except
               that this class is for compression only, and this implementation uses an
               approach that employs multiple worker threads to perform the DEFLATE.  On
               a multi-cpu or multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream, particularly
               for larger streams.  How large?  Anything over 10mb is a good candidate
               for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower than
               the default value.  Your mileage may vary. Finally, for small files, the
               ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead associated to using the thread
               pool.
             </para>
            
             </remarks>
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream"/>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionLevel,External.Zip.Internal.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <param name="stream">
               The new output stream for this era.
             </param>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">
              The buffer into which data would be read, IF THIS METHOD
              ACTUALLY DID ANYTHING.
            </param>
            <param name="offset">
              The offset within that data array at which to insert the
              data that is read, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <param name="count">
              The number of bytes to write, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <returns>nothing.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">
              The offset to seek to....
              IF THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <param name="origin">
              The reference specifying how to apply the offset....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <returns>nothing. It always throws.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.MaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory buffer
               pairs to create.  The implementation of this stream allocates
               multiple buffers to facilitate parallel compression.  As each buffer
               fills up, this stream uses <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>
               to compress those buffers in a background threadpool thread. After a
               buffer is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see cref="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value
               at any time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but may result in less effective compression.  For example,
               using the default buffer size of 128k, the compression delivered is
               within 1% of the compression delivered by the single-threaded <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (N*S*2), where N is the number of buffer pairs, and S is the size of
               each buffer (this property). There are 2 buffers used by the
               compressor, one for input and one for output.  By default, DotNetZip
               allocates 4 buffer pairs per CPU core, so if your machine has 4
               cores, then the number of buffer pairs used will be 16. If you
               accept the default value of this property, 128k, then the
               ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory
               in total, or 4mb, in blocks of 128kb.  If you set this property to
               64kb, then the number will be 16 * 2 * 64kb of buffer memory, or
               2mb.
             </para>
            
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Returns the current position of the output stream.
            </summary>
            <remarks>
              <para>
                Because the output gets written by a background thread,
                the value may change asynchronously.  Setting this
                property always throws a NotSupportedException.
              </para>
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:External.Zip.Internal.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:External.Zip.Internal.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:External.Zip.Internal.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.#ctor(External.Zip.Internal.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.Inflate(External.Zip.Internal.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.InitializeDeflate(External.Zip.Internal.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.Deflate(External.Zip.Internal.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SetDeflateParams(External.Zip.Internal.Zlib.CompressionLevel,External.Zip.Internal.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:External.Zip.Internal.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:External.Zip.Internal.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:External.Zip.Internal.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:External.Zip.Internal.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:External.Zip.Internal.Zlib.DeflateStream"/>
             <seealso cref="T:External.Zip.Internal.Zlib.GZipStream"/>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.#ctor(System.IO.Stream,External.Zip.Internal.Zlib.CompressionMode,External.Zip.Internal.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:External.Zip.Internal.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:External.Zip.Internal.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:External.Zip.Internal.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:External.Zip.ZipFactory">
            <summary>
            ZipFactory provides instances of ZipReader and ZipWriter.
            </summary>
        </member>
        <member name="T:External.Html.Internal.DynaString">
             <summary>
             Class for fast dynamic string building - it is faster than StringBuilder
             </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.DynaString.sText">
            <summary>
            Finalised text will be available in this string
            </summary>
        </member>
        <member name="F:External.Html.Internal.DynaString.TEXT_CAPACITY">
            <summary>
            CRITICAL: that much capacity will be allocated (once) for this object -- for performance reasons
            we do NOT have range checks because we make reasonably safe assumption that accumulated string will
            fit into the buffer. If you have very abnormal strings then you should increase buffer accordingly.
            </summary>
        </member>
        <member name="M:External.Html.Internal.DynaString.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="sString">Initial string</param>
        </member>
        <member name="M:External.Html.Internal.DynaString.Clear">
            <summary>
            Resets object to zero length string
            </summary>
        </member>
        <member name="M:External.Html.Internal.DynaString.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding to be used for conversion of binary data into string
            </summary>
            <param name="p_oEnc">Encoding object</param>
        </member>
        <member name="M:External.Html.Internal.DynaString.Append(System.Char)">
            <summary>
            Appends proper char with smart handling of Unicode chars
            </summary>
            <param name="cChar">Char to append</param>
        </member>
        <member name="M:External.Html.Internal.DynaString.SetToString">
            <summary>
            Creates string from buffer using set encoder
            </summary>
        </member>
        <member name="M:External.Html.Internal.DynaString.SetToStringASCII">
            <summary>
            Creates string from buffer using default encoder
            </summary>
        </member>
        <member name="T:External.Html.Internal.FastHash">
             <summary>
             FastHash: class provides fast look ups at the expense of memory (at least 128k per object).
             Its designed primarily for those hashes where majority of lookups are unsuccessful 
             (ie object is not present)
             
             Status of this work is EXPERIMENTAL, do not make any untested assumptions.
             
             History:	15/12/06 Added range check in GetXY
            				sometime in 2005: initial imlpementation
             
             </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.FastHash.MAX_CHARS">
            <summary>
            Maximum number of chars to be taken into account
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.MAX_KEYS">
            <summary>
            Maximum number of keys to be stored
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.MULTIPLE_KEYS">
            <summary>
            Value indicating there are multiple keys stored in a given position
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.oHash">
            <summary>
            Hash that will contain keys and will be used at the last resort as looksup are too slow
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.iMinLen">
            <summary>
            Minimum key length 
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.iMaxLen">
            <summary>
            Maximum key length
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.usChars">
            <summary>
            Array in which we will keep char hints
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.sKeys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.iValues">
            <summary>
            Values of keys
            </summary>
        </member>
        <member name="F:External.Html.Internal.FastHash.usCount">
            <summary>
            Number of keys stored
            </summary>
        </member>
        <member name="M:External.Html.Internal.FastHash.Add(System.String)">
            <summary>
            Adds key to the fast hash
            </summary>
            <param name="sKey">Key</param>
        </member>
        <member name="M:External.Html.Internal.FastHash.Add(System.String,System.Object)">
            <summary>
            Adds key and its value to the fast hash
            </summary>
            <param name="sKey">Key</param>
            <param name="iValue">Value</param>
        </member>
        <member name="M:External.Html.Internal.FastHash.Contains(System.String)">
            <summary>
            Checks if given key is present in the hash
            </summary>
            <param name="sKey">Key</param>
            <returns>True if key is present</returns>
        </member>
        <member name="M:External.Html.Internal.FastHash.GetValue(System.String)">
            <summary>
            Returns value associated with the key or null if key not present
            </summary>
            <param name="sKey">Key</param>
            <returns>Null or object convertable to integer as value</returns>
        </member>
        <member name="M:External.Html.Internal.FastHash.GetLikelyPresentValue(System.String)">
            <summary>
            Returns value of a key that is VERY likely to be present - this avoids doing some checks that
            are most likely to be pointless thus making overall faster function
            </summary>
            <param name="sKey">Key</param>
            <returns>Null if no value or value itself</returns>
        </member>
        <member name="M:External.Html.Internal.FastHash.GetLikelyPresentValue(System.Byte,System.Byte)">
            <summary>
            Returns value for likely present keys using first chars (byte)
            </summary>
            <param name="iX">Byte 1 denoting char 1</param>
            <param name="iY">Byte 2 denoting char 2 (0 if not present)</param>
            <returns>Non-null value if it was found, or null if full search for key is required</returns>
        </member>
        <member name="M:External.Html.Internal.FastHash.PossiblyContains(System.Char,System.Char,System.Int32)">
            <summary>
            Quickly checks if given chars POSSIBLY refer to a stored key.
            </summary>
            <param name="cChar1">Char 1</param>
            <param name="cChar2">Char 2</param>
            <param name="iLength">Length of string</param>
            <returns>False is string is DEFINATELY NOT present, or true if it MAY be present</returns>
        </member>
        <member name="P:External.Html.Internal.FastHash.Keys">
            <summary>
            Gets keys in this hash
            </summary>
        </member>
        <member name="P:External.Html.Internal.FastHash.Item(System.String)">
            <summary>
            Access to values via indexer
            </summary>
        </member>
        <member name="T:External.Html.Internal.HTMLchunkType">
            <summary>
            Type of parsed HTML chunk (token), each non-null returned chunk from HTMLparser will have oType set to 
            one of these values
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunkType.Text">
            <summary>
            Text data from HTML
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunkType.OpenTag">
            <summary>
            Open tag, possibly with attributes
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunkType.CloseTag">
            <summary>
            Closed tag (it may still have attributes)
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunkType.Comment">
            <summary>
            Comment tag (<!-- -->)depending on HTMLparser boolean flags you may have:
            a) nothing to oHTML variable - for faster performance, call SetRawHTML function in parser
            b) data BETWEEN tags (but not including comment tags themselves) - DEFAULT
            c) complete RAW HTML representing data between tags and tags themselves (same as you get in a) when
            you call SetRawHTML function)
            
            Note: this can also be CDATA part of XML document - see sTag value to determine if its proper comment
            or CDATA or (in the future) something else
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunkType.Script">
            <summary>
            Script tag (<!-- -->) depending on HTMLparser boolean flags
            a) nothing to oHTML variable - for faster performance, call SetRawHTML function in parser
            b) data BETWEEN tags (but not including comment tags themselves) - DEFAULT
            c) complete RAW HTML representing data between tags and tags themselves (same as you get in a) when
            you call SetRawHTML function)
            </summary>
        </member>
        <member name="T:External.Html.Internal.HTMLchunk">
            <summary>
            Parsed HTML token that is either text, comment, script, open or closed tag as indicated by the oType variable.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.TEXT_CAPACITY">
            <summary>
            Maximum default capacity of buffer that will keep data
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.MAX_PARAMS">
            <summary>
            Maximum number of parameters in a tag - should be high enough to fit most sensible cases
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.oType">
            <summary>
            Chunk type showing whether its text, open or close tag, comments or script.
            WARNING: if type is comments or script then you have to manually call Finalise(); method
            in order to have actual text of comments/scripts in oHTML variable
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bHashMode">
            <summary>
            If true then tag params will be kept in a hash rather than in a fixed size arrays. 
            This will be slow down parsing, but make it easier to use.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.oHTML">
            <summary>
            For TAGS: it stores raw HTML that was parsed to generate thus chunk will be here UNLESS
            HTMLparser was configured not to store it there as it can improve performance
            <p>
            For TEXT or COMMENTS: actual text or comments - you MUST call Finalise(); first.
            </p>
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.iChunkOffset">
            <summary>
            Offset in bHTML data array at which this chunk starts
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.iChunkLength">
            <summary>
            Length of the chunk in bHTML data array
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.sTag">
            <summary>
            If its open/close tag type then this is where lowercased Tag will be kept
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bClosure">
            <summary>
            If true then it must be closed tag
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bEndClosure">
            <summary>
            If true then it must be closed tag and closure sign / was at the END of tag, ie this is a SOLO
            tag 
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bComments">
            <summary>
            If true then it must be comments tag
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bEntities">
            <summary>
            True if entities were present (and transformed) in the original HTML
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.bLtEntity">
            <summary>
            Set to true if &lt; entity (tag start) was found 
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.oParams">
            <summary>
            Hashtable with tag parameters: keys are param names and values are param values.
            ONLY used if bHashMode is set to TRUE.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.iParams">
            <summary>
            Number of parameters and values stored in sParams array, OR in oParams hashtable if
            bHashMode is true
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.sParams">
            <summary>
            Param names will be stored here - actual number is in iParams.
            ONLY used if bHashMode is set to FALSE.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.sValues">
            <summary>
            Param values will be stored here - actual number is in iParams.
            ONLY used if bHashMode is set to FALSE.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.cParamChars">
            <summary>
            Character used to quote param's value: it is taken actually from parsed HTML
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLchunk.oEnc">
            <summary>
            Encoder to be used for conversion of binary data into strings, Encoding.Default is used by default,
            but it can be changed if top level user of the parser detects that encoding was different
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.ConvertParamsToHash">
            <summary>
            This function will convert parameters stored in sParams/sValues arrays into oParams hash
            Useful if generally parsing is done when bHashMode is FALSE. Hash operations are not the fastest, so
            its best not to use this function.
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding to be used for conversion of binary data into string
            </summary>
            <param name="p_oEnc">Encoding object</param>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.GenerateHTML">
            <summary>
            Generates HTML based on current chunk's data 
            Note: this is not a high performance method and if you want ORIGINAL HTML that was parsed to create
            this chunk then use relevant HTMLparser method to obtain such HTML then you should use
            function of parser: SetRawHTML
            
            </summary>
            <returns>HTML equivalent of this chunk</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.GetParamValue(System.String)">
            <summary>
            Returns value of a parameter
            </summary>
            <param name="sParam">Parameter</param>
            <returns>Parameter value or empty string</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.GenerateParamsHTML">
            <summary>
            Generates HTML for params in this chunk
            </summary>
            <returns>String with HTML corresponding to params</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.GenerateParamHTML(System.String,System.String,System.Char)">
            <summary>
            Generates HTML for param/value pair
            </summary>
            <param name="sParam">Param</param>
            <param name="sValue">Value (empty if not specified)</param>
            <param name="cParamChar"></param>
            <returns>String with HTML</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.MakeSafeParamValue(System.String,System.Char)">
            <summary>
            Makes parameter value safe to be used in param - this will check for any conflicting quote chars,
            but not full entity-encoding
            </summary>
            <param name="sLine">Line of text</param>
            <param name="cQuoteChar">Quote char used in param - any such chars in text will be entity-encoded</param>
            <returns>Safe text to be used as param's value</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.AddParam(System.String,System.String,System.Byte)">
            <summary>
            Adds tag parameter to the chunk
            </summary>
            <param name="sParam">Parameter name (ie color)</param>
            <param name="sValue">Value of the parameter (ie white)</param>
            <param name="cParamChar"></param>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.Clear">
            <summary>
            Clears chunk preparing it for 
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLchunk.#ctor(System.Boolean)">
            <summary>
            Initialises new HTMLchunk
            </summary>
            <param name="p_bHashMode">Sets <seealso cref="F:External.Html.Internal.HTMLchunk.bHashMode"/></param>
        </member>
        <member name="T:External.Html.Internal.HTMLentities">
            <summary>
            Implements parsing of entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.oEntities">
            <summary>
            Supported HTML entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.oAllEntities">
            <summary>
            Supported HTML entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.iMinEntityLen">
            <summary>
            Internal heuristics for entiries: these will be set to min and max string lengths of known HTML entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.iMaxEntityLen">
            <summary>
            Internal heuristics for entiries: these will be set to min and max string lengths of known HTML entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.sEntityReverseLookup">
            <summary>
            Array to provide reverse lookup for entities
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.bMiniEntities">
            <summary>
            If true then only minimal set of entities will be parsed, everything else including numbers based
            entities will be returned as is. This is useful for when HTML content needs to be extracted with subsequent parsing, in this case resolution of entities will be a problem
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.bDecodeEntities">
            <summary>
            If false then HTML entities (like "nbsp") will not be decoded
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.CheckForEntity(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            This function will be called when <![CDATA[&]]> is found, and it will
            peek forward to check if its entity, should there be a success
            indicated by non-zero returned, the pointer will be left at the new byte
            after entity
            </summary>
            <returns>Char (not byte) that corresponds to the entity or 0 if it was not entity</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.DecodeEntities(System.String)">
            <summary>
            This function will decode any entities found in a string - not fast!
            </summary>
            <returns>Possibly decoded string</returns>
        </member>
        <member name="F:External.Html.Internal.HTMLentities.iDecMultipliers">
            <summary>
            Multipliers for base 10 
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.ParseUInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an unsigned integer number from byte buffer
            </summary>
            <param name="bBuf">Buffer to parse from</param>
            <param name="iFrom">Start parsing from this point</param>
            <param name="iLength">Length of data to parse</param>
            <returns>Unsigned integer number</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.InitEntities(System.Int32@,System.Int32@,System.String[]@)">
            <summary>
            Initialises list of entities
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.ChangeToEntities(System.String,System.Int32,System.Boolean)">
            <summary>
            Parses line and changes known entiry characters into proper HTML entiries
            </summary>
            <param name="sLine">Line of text</param>
            <param name="iFrom">Char from which scanning should start</param>
            <param name="bChangeDangerousCharsOnly"></param>
            <returns>Line of text with proper HTML entities</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLentities.InitMiniEntities">
            <summary>
            Inits mini-entities mode: only "nbsp" will be converted into space, all other entities 
            will be left as is
            </summary>
        </member>
        <member name="T:External.Html.Internal.HTMLheuristics">
             <summary>
             This class will control HTML tag heuristics that will allow faster matching of tags
             to avoid long cycles as well as creation of same strings over and over again.
             
             This is effectively a fancy hash lookup table with attributes being hashed in context of tag
             </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.MAX_STRINGS">
            <summary>
            Maximum number of strings allowed to be set (all lower-cased)
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.MAX_CHARS">
            <summary>
            Maximum number of chars to be taken into account
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.sChars">
            <summary>
            Array in which we will keep char hints to quickly match	ID (if non-zero) of tag
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.sStrings">
            <summary>
            Strings used, once matched they will be returned to avoid creation of a brand new string
            and all associated costs with it
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.bTagData">
            <summary>
            Binary data represending tag strings is here: case sensitive: lower case for even even value, and odd for each odd
            for the same string
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.oAddedTags">
            <summary>
            List of added tags to avoid dups
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.bAttributes">
            <summary>
            Hash that will contain single char mapping hash
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.bAttrData">
            <summary>
            Binary data represending attribute strings is here: case sensitive: lower case for even even value, and odd for each odd
            for the same string
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.oAddedAttributes">
            <summary>
            List of added attributes to avoid dups
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLheuristics.sAllTwoCharStrings">
            <summary>
            This array will contain all double char strings 
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLheuristics.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLheuristics.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLheuristics.AddTag(System.String,System.String)">
            <summary>
            Adds tag to list of tracked tags (don't add too many, if you have got multiple same first
            2 chars then duplicates won't be added, so make sure the first added tags are the MOST LIKELY to be found)
            </summary>
            <param name="p_sTag">Tag: strictly ASCII only</param>
            <param name="sAttributeNames">Comma delimited list of attributed</param>
            <returns>True if tag was added, false otherwise (it may already be added, or leads to hash clash)</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLheuristics.GetString(System.Int32)">
            <summary>
            Returns string for ID returned by GetMatch
            </summary>
            <param name="iID">ID</param>
            <returns>string</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLheuristics.Dispose">
            <summary>
            Disposes of resources
            </summary>
        </member>
        <member name="T:External.Html.Internal.HTMLparser">
            <summary>
            Allows to parse HTML by splitting it into small token (HTMLchunks) such as tags, text, comments etc.
            
            Do NOT create multiple instances of this class - REUSE single instance
            Do NOT call same instance from multiple threads - it is NOT thread safe
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bThrowExceptionOnEncodingSetFailure">
            <summary>
            If true then exception will be thrown in case of inability to set encoding taken
            from HTML - this is possible if encoding was incorrect or not supported, this would lead
            to abort in processing. Default behavior is to use Default encoding that should keep symbols as
            is - most likely garbage looking things if encoding was not supported.
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bKeepRawHTML">
            <summary>
            If true (default: false) then parsed tag chunks will contain raw HTML, otherwise only comments will have it set
            <p>
            Performance hint: keep it as false, you can always get to original HTML as each chunk contains
            offset from which parsing started and finished, thus allowing to set exact HTML that was parsed
            </p>
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bAutoKeepComments">
            <summary>
            If true (default) then HTML for comments tags themselves AND between them will be set to oHTML variable, otherwise it will be empty
            but you can always set it later 
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bAutoKeepScripts">
            <summary>
            If true (default: false) then HTML for script tags themselves AND between them will be set to oHTML variable, otherwise it will be empty
            but you can always set it later
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bAutoExtractBetweenTagsOnly">
            <summary>
            If true (and either bAutoKeepComments or bAutoKeepScripts is true), then oHTML will be set
            to data BETWEEN tags excluding those tags themselves, as otherwise FULL HTML will be set, ie:
            '<!-- comments -->' but if this is set to true then only ' comments ' will be returned
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bAutoMarkClosedTagsWithParamsAsOpen">
            <summary>
            Long winded name... by default if tag is closed BUT it has got parameters then we will consider it
            open tag, this is not right for proper XML parsing
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bCompressWhiteSpaceBeforeTag">
            <summary>
            If true (default), then all whitespace before TAG starts will be compressed to single space char (32 or 0x20)
            this makes parser run a bit faster, if you need exact whitespace before tags then change this flag to FALSE
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.oHE">
            <summary>
            Heuristics engine used by Tag Parser to quickly match known tags and attribute names, can be disabled
            or you can add more tags to it to fit your most likely cases, it is currently tuned for HTML
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.sText">
            <summary>
            Internal -- dynamic string for text accumulation
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.oChunk">
            <summary>
            This chunk will be returned when it was parsed
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.oTP">
            <summary>
            Tag parser object
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.oEnc">
            <summary>
            Encoding used to convert binary data into string
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bHTML">
            <summary>
            Byte array with HTML will be kept here
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.iCurPos">
            <summary>
            Current position pointing to byte in bHTML
            </summary>
            <exclude/>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.iDataLength">
            <summary>
            Length of bHTML -- it appears to be faster to use it than bHTML.Length
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.bWhiteSpace">
            <summary>
            Whitespace lookup table - 0 is not whitespace, otherwise it is
            </summary>
        </member>
        <member name="F:External.Html.Internal.HTMLparser.oE">
            <summary>
            Entities manager
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.SetChunkHashMode(System.Boolean)">
            <summary>
            Sets chunk param hash mode
            </summary>
            <param name="bHashMode">If true then tag's params will be kept in Chunk's hashtable (slower), otherwise kept in arrays (sParams/sValues)</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.SetRawHTML(External.Html.Internal.HTMLchunk)">
            <summary>
            Sets oHTML variable in a chunk to the raw HTML that was parsed for that chunk.
            </summary>
            <param name="oChunk">Chunk returned by ParseNext function, it must belong to the same HTMLparser that
            was initiated with the same HTML data that this chunk belongs to</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.Close">
            <summary>
            Closes object and releases all allocated resources
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.SetEncoding(System.Text.Encoding)">
            <summary>
            Sets encoding 
            </summary>
            <param name="p_oEnc">Encoding object</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.SetEncoding(System.String)">
            <summary>
            Sets current encoding in format used in HTTP headers and HTML META tags
            </summary>
            <param name="p_sCharSet">Charset as </param>
            <returns>True if encoding was set, false otherwise (in which case Default encoding will be used)</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.GetCharSet(System.String)">
            <summary>
            Retrieves charset information from format used in HTTP headers and META descriptions
            </summary>
            <param name="sData">Data to find charset info from</param>
            <returns>Charset</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.InitMiniEntities">
            <summary>
            Inits mini-entities mode: only "nbsp" will be converted into space, all other entities 
            will be left as is
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.ChangeToEntities(System.String,System.Boolean)">
            <summary>
            Parses line and changes known entiry characters into proper HTML entiries
            </summary>
            <param name="sLine">Line of text</param>
            <param name="bChangeDangerousCharsOnly"></param>
            <returns>Line of text with proper HTML entities</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.#ctor(System.String)">
            <summary>
            Constructs parser object using provided HTML as source for parsing
            </summary>
            <param name="p_oHTML"></param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.Init(System.String)">
            <summary>
            Initialises parses with HTML to be parsed from provided string
            </summary>
            <param name="p_oHTML">String with HTML in it</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.Init(System.Byte[])">
            <summary>
            Initialises parses with HTML to be parsed from provided data buffer: this is best in terms of
            correctness of parsing of various encodings that can be used in HTML
            </summary>
            <param name="p_bHTML">Data buffer with HTML in it</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.Init(System.Byte[],System.Int32)">
            <summary>
            Inits parsing
            </summary>
            <param name="p_bHTML">Data buffer</param>
            <param name="p_iHtmlLength">Length of data (buffer itself can be longer) - start offset assumed to be 0</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.CleanUp">
            <summary>
            Cleans up parser in preparation for next parsing
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.Reset">
            <summary>
            Resets current parsed data to start
            </summary>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.IsBiggerFont(External.Html.Internal.HTMLparser.FontSize,External.Html.Internal.HTMLparser.FontSize)">
            <summary>
            Checks if first font is bigger than the second
            </summary>
            <param name="oFont1">Font #1</param>
            <param name="oFont2">Font #2</param>
            <returns>True if Font #1 bigger than the second, false otherwise</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.IsEqualOrBiggerFont(External.Html.Internal.HTMLparser.FontSize,External.Html.Internal.HTMLparser.FontSize)">
            <summary>
            Checks if first font is equal or bigger than the second
            </summary>
            <param name="oFont1">Font #1</param>
            <param name="oFont2">Font #2</param>
            <returns>True if Font #1 equal or bigger than the second, false otherwise</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.ParseFontSize(System.String,External.Html.Internal.HTMLparser.FontSize)">
            <summary>
            Parses font's tag size param 
            </summary>
            <param name="sSize">String value of the size param</param>
            <param name="oCurSize"></param>
            <returns>Relative size of the font size or Unknown if it was not determined</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.ParseNextTag">
            <summary>
            Returns next tag or null if end of document, text will be ignored completely
            </summary>
            <returns>Tag chunk or null</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.ParseNext">
            <summary>
            Parses next chunk and returns it with 
            </summary>
            <returns>HTMLchunk or null if end of data reached</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.GetNextTag">
            <summary>
            Internally parses tag and returns it from point when '<![CDATA[<]]>' was found
            </summary>
            <returns>Chunk</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.CalculateWidth(System.String,System.Int32,System.Boolean@)">
            <summary>
            Parses WIDTH param and calculates width
            </summary>
            <param name="sWidth">WIDTH param from tag</param>
            <param name="iAvailWidth">Currently available width for relative calculations, if negative width will be returned as is</param>
            <param name="bRelative">Flag that will be set to true if width was relative</param>
            <returns>Width in pixels</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.DecodeEntities(System.String)">
            <summary>
            This function will decode any entities found in a string - not fast!
            </summary>
            <returns>Possibly decoded string</returns>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.LoadFromFile(System.String)">
            <summary>
            Loads HTML from file
            </summary>
            <param name="sFileName">Full filename</param>
        </member>
        <member name="M:External.Html.Internal.HTMLparser.HandleMetaEncoding(External.Html.Internal.HTMLparser,External.Html.Internal.HTMLchunk,System.Boolean@)">
            <summary>
            Handles META tags that set page encoding
            </summary>
            <param name="oP">HTML parser object that is used for parsing</param>
            <param name="oChunk">Parsed chunk that should contain tag META</param>
            <param name="bEncodingSet">Your own flag that shows whether encoding was already set or not, if set
            once then it should not be changed - this is the logic applied by major browsers</param>
            <returns>True if this was META tag setting Encoding, false otherwise</returns>
        </member>
        <member name="P:External.Html.Internal.HTMLparser.bDecodeEntities">
            <summary>
            If false (default) then HTML entities (like "<![CDATA[&nbsp;]]>") will not be decoded, otherwise they will
            be decoded: this should be set if you deal with unicode data that takes advantage of entities
            and in cases when you need to deal with final string representation
            </summary>
        </member>
        <member name="P:External.Html.Internal.HTMLparser.bDecodeMiniEntities">
            <summary>
            If false (default) then mini entity set (<![CDATA[&nbsp;]]>) will be decoded, but not all of them
            </summary>
        </member>
        <member name="P:External.Html.Internal.HTMLparser.bEnableHeuristics">
            <summary>
            If true (default) then heuristics engine will be used to match tags and attributes quicker, it is
            possible to add new tags to it, <see cref="F:External.Html.Internal.HTMLparser.oHE"/>
            </summary>
        </member>
        <member name="T:External.Html.Internal.HTMLparser.FontSize">
            <summary>
            Font sizes as described by W3C: http://www.w3.org/TR/REC-CSS2/fonts.html#propdef-font-size
            </summary>
            <exclude/>
        </member>
        <member name="T:External.Html.Internal.TagParser">
            <summary>
            Internal class used to parse tag itself from the point it was found in HTML
            The main reason for this class is to split very long HTMLparser file into parts that are reasonably
            self-contained
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.MIN_DATA_SIZE_FOR_HEURISTICS">
            <summary>
            Minimum data size for heuristics engine to kick in
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.iMaxHeuDataLength">
            <summary>
            Max data length for heuristical checks
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.bTagCharTypes">
            <summary>
            Tag char types lookup table: allows one off lookup to determine if char used in tag is acceptable
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.bEnableHeuristics">
            <summary>
            If true then heuristics engine will be used to match tags quicker
            </summary>
        </member>
        <member name="M:External.Html.Internal.TagParser.Init(External.Html.Internal.HTMLparser,External.Html.Internal.HTMLchunk,External.Html.Internal.DynaString,System.Byte[],System.Int32,External.Html.Internal.HTMLentities,External.Html.Internal.HTMLheuristics)">
            <summary>
            Inits tag parser
            </summary>
            <param name="p_oP"></param>
            <param name="p_oChunk"></param>
            <param name="p_sText"></param>
            <param name="p_bHTML"></param>
            <param name="p_iDataLength"></param>
            <param name="p_oE"></param>
            <param name="p_oHE"></param>
        </member>
        <member name="M:External.Html.Internal.TagParser.CleanUp">
            <summary>
            Cleans up tag parser
            </summary>
        </member>
        <member name="M:External.Html.Internal.TagParser.ParseTag(System.Int32@)">
            <summary>
            Internal: parses tag that started from current position
            </summary>
            <returns>HTMLchunk with tag information</returns>
        </member>
        <member name="M:External.Html.Internal.TagParser.ParseComments(System.Int32@,System.Boolean@)">
            <summary>
            Finishes parsing of comments tag
            </summary>
            <returns>HTMLchunk object</returns>
        </member>
        <member name="M:External.Html.Internal.TagParser.ParseCDATA(System.Int32@,System.Boolean@)">
            <summary>
            Finishes parsing of CDATA component
            </summary>
            <param name="iCurPos"></param>
            <param name="bFullTag"></param>
            <returns></returns>
        </member>
        <member name="F:External.Html.Internal.TagParser.bClosedScriptTag">
            <summary>
            /script sequence indicating end of script tag
            </summary>
        </member>
        <member name="M:External.Html.Internal.TagParser.ParseScript(System.Int32@)">
            <summary>
            Finishes parsing of data after scripts tag - makes extra checks to avoid being broken
            with >'s used to denote comparison
            </summary>
            <returns>HTMLchunk object</returns>
        </member>
        <member name="F:External.Html.Internal.TagParser.TagCharType.Unknown">
            <summary>
            Unclassified
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.TagCharType.WhiteSpace">
            <summary>
            Whitespace
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.TagCharType.LowerCasedASCIIorDigit">
            <summary>
            Lower case or digit 
            </summary>
        </member>
        <member name="F:External.Html.Internal.TagParser.TagCharType.NameSpaceColon">
            <summary>
            semicolon - used for namespaces, ie: <![CDATA[<namespace:a>]]>
            </summary>
        </member>
        <member name="T:External.Rendering.Area">
            <summary>
            Abstract base class for all areas to render in.
            </summary>
        </member>
        <member name="M:External.Rendering.Area.GetFittingRect(External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Gets the largest fitting rect with the given y position and height.
            </summary>
            <param name="yPosition">Top bound of the searched rectangle.</param>
            <param name="height">Height of the searched rectangle.</param>
            <returns>
            The largest fitting rect with the given y position and height.
            Null if yPosition exceeds the area.
            </returns>
        </member>
        <member name="M:External.Rendering.Area.Unite(External.Rendering.Area)">
            <summary>
            Returns the union of this area snd the given one.
            </summary>
            <param name="area">The area to unite with.</param>
            <returns>The union of the two areas.</returns>
        </member>
        <member name="M:External.Rendering.Area.Lower(External.Drawing.XUnit)">
            <summary>
            Lowers the area and makes it smaller.
            </summary>
            <param name="verticalOffset">The measure of lowering.</param>
            <returns>The lowered Area.</returns>
        </member>
        <member name="P:External.Rendering.Area.X">
            <summary>
            Gets the left boundary of the area.
            </summary>
        </member>
        <member name="P:External.Rendering.Area.Y">
            <summary>
            Gets the top boundary of the area.
            </summary>
        </member>
        <member name="P:External.Rendering.Area.Height">
            <summary>
            Gets or sets the height of the smallest rectangle containing the area. 
            </summary>
        </member>
        <member name="P:External.Rendering.Area.Width">
            <summary>
            Gets or sets the width of the smallest rectangle containing the area. 
            </summary>
        </member>
        <member name="M:External.Rendering.Rectangle.#ctor(External.Drawing.XUnit,External.Drawing.XUnit,External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Initializes a new rectangle object.
            </summary>
            <param name="x">Left bound of the rectangle.</param>
            <param name="y">Upper bound of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:External.Rendering.Rectangle.#ctor(External.Rendering.Rectangle)">
            <summary>
            Initializes a new Rectangle by copying its values.
            </summary>
            <param name="rect">The rectangle to copy.</param>
        </member>
        <member name="M:External.Rendering.Rectangle.GetFittingRect(External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Gets the largest fitting rect with the given y position and height.
            </summary>
            <param name="yPosition">Top bound of the searched rectangle.</param>
            <param name="height">Height of the searched rectangle.</param>
            <returns>The largest fitting rect with the given y position and height</returns>
        </member>
        <member name="M:External.Rendering.Rectangle.Unite(External.Rendering.Area)">
            <summary>
            Returns the union of the rectangle and the given area.
            </summary>
            <param name="area">The area to unite with.</param>
            <returns>The union of the two areas.</returns>
        </member>
        <member name="P:External.Rendering.Rectangle.X">
            <summary>
            Gets or sets the left boundary of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Rendering.Rectangle.Y">
            <summary>
            Gets or sets the top boundary of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Rendering.Rectangle.Width">
            <summary>
            Gets or sets the top boundary of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Rendering.Rectangle.Height">
            <summary>
            Gets or sets the height of the rectangle. 
            </summary>
        </member>
        <member name="T:External.Rendering.BordersRenderer">
            <summary>
            Renders a single Border.
            </summary>
        </member>
        <member name="M:External.Rendering.BordersRenderer.RenderVertically(External.Rendering.DocumentObjectModel.BorderType,External.Drawing.XUnit,External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Renders the border top down.
            </summary>
            <param name="type">The type of the border.</param>
            <param name="left">The left position of the border.</param>
            <param name="top">The top position of the border.</param>
            <param name="height">The height on which to render the border.</param>
        </member>
        <member name="M:External.Rendering.BordersRenderer.RenderHorizontally(External.Rendering.DocumentObjectModel.BorderType,External.Drawing.XUnit,External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Renders the border top down.
            </summary>
            <param name="type">The type of the border.</param>
            <param name="left">The left position of the border.</param>
            <param name="top">The top position of the border.</param>
            <param name="width">The width on which to render the border.</param>
        </member>
        <member name="T:External.Rendering.BreakRenderer">
            <summary>
            Renders a page break to an XGraphics object.
            </summary>
        </member>
        <member name="T:External.Rendering.Renderer">
            <summary>
            Abstract base class for all renderers.
            </summary>
        </member>
        <member name="M:External.Rendering.Renderer.RenderByInfos(External.Drawing.XUnit,External.Drawing.XUnit,External.Rendering.RenderInfo[])">
            <summary>
            Renders the contents shifted to the given Coordinates.
            </summary>
            <param name="xShift">The x shift.</param>
            <param name="yShift">The y shift.</param>
            <param name="renderInfos">The render infos.</param>
        </member>
        <member name="M:External.Rendering.Renderer.Render">
            <summary>
            Renders (draws) the object to the Graphics object.
            </summary>
        </member>
        <member name="M:External.Rendering.Renderer.Format(External.Rendering.Area,External.Rendering.FormatInfo)">
            <summary>
            Formats the object by calculating distances and linebreaks and stopping when the area is filled.
            </summary>
            <param name="area">The area to render into.</param>
            <param name="previousFormatInfo">An information object received from a previous call of Format().
            Null for the first call.</param>
        </member>
        <member name="M:External.Rendering.Renderer.Create(External.Drawing.XGraphics,External.Rendering.DocumentRenderer,External.Rendering.DocumentObjectModel.DocumentObject,External.Rendering.FieldInfos)">
            <summary>
            Creates a fitting renderer for the given document object for formatting.
            </summary>
            <param name="gfx">The XGraphics object to do measurements on.</param>
            <param name="documentRenderer">The document renderer.</param>
            <param name="documentObject">the document object to format.</param>
            <param name="fieldInfos">The field infos.</param>
            <returns>The fitting Renderer.</returns>
        </member>
        <member name="M:External.Rendering.Renderer.Create(External.Drawing.XGraphics,External.Rendering.DocumentRenderer,External.Rendering.RenderInfo,External.Rendering.FieldInfos)">
            <summary>
            Creates a fitting renderer for the render info to render and layout with.
            </summary>
            <param name="gfx">The XGraphics object to render on.</param>
            <param name="documentRenderer">The document renderer.</param>
            <param name="renderInfo">The RenderInfo object stored after a previous call of Format().</param>
            <param name="fieldInfos">The field infos.</param>
            <returns>The fitting Renderer.</returns>
        </member>
        <member name="P:External.Rendering.Renderer.MaxElementHeight">
            <summary>
            Determines the maximum height a single element may have.
            </summary>
        </member>
        <member name="P:External.Rendering.Renderer.InitialLayoutInfo">
            <summary>
            In inherited classes, gets a layout info with only margin and break information set.
            It can be taken before the documen object is formatted.
            </summary>
            <remarks>
            In inherited classes, the following parts are set properly:
            MarginTop, MarginLeft, MarginRight, MarginBottom, 
            KeepTogether, KeepWithNext, PagebreakBefore, Floating,
            VerticalReference, HorizontalReference.
            </remarks>
        </member>
        <member name="P:External.Rendering.Renderer.RenderInfo">
            <summary>
            Gets the render information necessary to render and position the object.
            </summary>
        </member>
        <member name="P:External.Rendering.Renderer.FieldInfos">
            <summary>
            Sets the field infos object.
            </summary>
            <remarks>This property is set by the AreaProvider.</remarks>
        </member>
        <member name="M:External.Rendering.BreakRenderer.#ctor(External.Drawing.XGraphics,External.Rendering.DocumentObjectModel.Break,External.Rendering.FieldInfos)">
            <summary>
            Initializes a ParagraphRenderer object for formatting.
            </summary>
            <param name="gfx">The XGraphics object to do measurements on.</param>
            <param name="pageBreak">The page break.</param>
            <param name="fieldInfos">The field infos.</param>
        </member>
        <member name="M:External.Rendering.BreakRenderer.#ctor(External.Drawing.XGraphics,External.Rendering.RenderInfo,External.Rendering.FieldInfos)">
            <summary>
            Initializes a ParagraphRenderer object for rendering.
            </summary>
            <param name="gfx">The XGraphics object to render on.</param>
            <param name="renderInfo">The render info object containing information necessary for rendering.</param>
            <param name="fieldInfos">The field infos.</param>
        </member>
        <member name="T:External.Rendering.BreakRenderInfo">
            <summary>
            Rendering information for page breaks.
            </summary>
        </member>
        <member name="T:External.Rendering.RenderInfo">
            <summary>
            Abstract base class for all classes that store rendering information.
            </summary>
        </member>
        <member name="M:External.Rendering.ColorHelper.ToXColor(External.Rendering.DocumentObjectModel.Color)">
            <summary>
            Converts Color to XColor.
            </summary>
        </member>
        <member name="T:External.Rendering.IAreaProvider">
            <summary>
            Represents a class that provides a series of Areas to render into.
            </summary>
        </member>
        <member name="M:External.Rendering.IAreaProvider.GetNextArea">
            <summary>
            Gets the next area to render into.
            </summary>
        </member>
        <member name="M:External.Rendering.IAreaProvider.ProbeNextArea">
            <summary>
            Probes the next area to render into like GetNextArea, but doesn't change the provider state. 
            </summary>
            <returns>The area for the next rendering act.</returns>
        </member>
        <member name="M:External.Rendering.IAreaProvider.IsAreaBreakBefore(External.Rendering.LayoutInfo)">
            <summary>
            Determines whether the element requires an area break before.
            </summary>
        </member>
        <member name="M:External.Rendering.IAreaProvider.StoreRenderInfos(System.Collections.ArrayList)">
            <summary>
            Stores the RenderInfos of elements on the current area.
            </summary>
            <param name="renderInfos"></param>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Border">
            <summary>
            Represents one border in a borders collection. The type determines its position in a cell,
            paragraph etc.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Break">
            <summary>
            A Break is used to put following elements on a new page/new column.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.DocumentObject">
            <summary>
            Base class of all objects of the External.Rendering Object Model.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentObject.#ctor">
            <summary>
            Initializes a new instance of the DocumentObject class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentObject.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the DocumentObject class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentObject.SetParent(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Sets the parent of the specified value.
            If a parent is already set, an ArgumentException will be thrown.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.DocumentObject.Parent">
            <summary>
            Gets the parent object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.DocumentObject.Document">
            <summary>
            Gets the document of the object, or null, if the object is not associated with a document.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.DocumentObject.Section">
            <summary>
            Gets the section of the object, or null, if the object is not associated with a section.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Break.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PageBreak class.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Break.IsPageBreak">
            <summary>
            False for column break
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Character">
            <summary>
            Represents a special character in paragraph text.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Color">
            <summary>
            The Color class represents an ARGB color value.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Color class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Color class.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Color.IsEmpty">
            <summary>
            Determines whether this color is empty.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Color.Argb">
            <summary>
            Gets the ARGB value.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Document">
            <summary>
            Represents a document.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Document.#ctor">
            <summary>
            Initializes a new instance of the Document class.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Document.DefaultTabStop">
            <summary>
            Gets or sets the default tab stop position.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Document.Sections">
            <summary>
            Gets the sections of the document.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.DocumentElements">
            <summary>
            Represents a collection of document elements.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.DocumentObjectCollection`1">
            <summary>
            Base class of all collections of the External Document Object Model.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the DocumentObjectCollection class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentObjectCollection`1.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the DocumentObjectCollection class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentElements.#ctor">
            <summary>
            Initializes a new instance of the DocumentElements class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentElements.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the DocumentElements class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.DocumentRelations">
            <summary>
            Provides relational information between document objects.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentRelations.GetParent(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Gets the direct parent of the given document object.
            </summary>
            <param name="documentObject">The document object the parent is searched for.</param>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.DocumentRelations.GetParentOfType(External.Rendering.DocumentObjectModel.DocumentObject,System.Type)">
            <summary>
            Gets a parent of the document object with the given type somewhere within the document hierarchy.
            Returns null if none exists.
            </summary>
            <param name="documentObject">The document object the parent is searched for.</param>
            <param name="type">The parent type to search for.</param>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.BorderStyle">
            <summary>
            Specifies the style of the line of the Border object.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.Empty">
            <summary>
            Represents uninitialized <see cref="T:External.Rendering.DocumentObjectModel.Border"/>.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.Single">
            <summary>
            A single solid line.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.Dot">
            <summary>
            A dotted line.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.DashSmallGap">
            <summary>
            A dashed line (small gaps).
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.DashLargeGap">
            <summary>
            A dashed line (large gaps).
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.DashDot">
            <summary>
            Alternating dashes and dots.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.DashDotDot">
            <summary>
            A dash followed by two dots.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BorderStyle.Double">
            <summary>
            A double line border.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.BorderType">
            <summary>
            Specifies the type of the Border object and therefore its position.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.BreakType">
            <summary>
            Specifies the page break in a new section.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BreakType.BreakNextPage">
            <summary>
            Breaks at the next page.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BreakType.BreakEvenPage">
            <summary>
            Breaks at the next even page.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.BreakType.BreakOddPage">
            <summary>
            Breaks at the next odd page.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.HyperlinkType">
            <summary>
            Specifies the target of the hyperlink.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.HyperlinkType.Local">
            <summary>
            Targets a position in the document. Same as 'Bookmark'.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.HyperlinkType.Bookmark">
            <summary>
            Targets a position in the document. Same as 'Local'.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.HyperlinkType.Web">
            <summary>
            Targets a resource on the Internet or network. Same as 'Url'.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.HyperlinkType.Url">
            <summary>
            Targets a resource on the Internet or network. Same as 'Web'.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.HyperlinkType.File">
            <summary>
            Targets a physical file.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.LineSpacingRule">
            <summary>
            Specifies the space between lines in a paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.OutlineLevel">
            <summary>
            Specifies the level of a paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.ParagraphAlignment">
            <summary>
            Specifies the alignment of a paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.SymbolName">
            <summary>
            Represents the type of the special character.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TabAlignment">
            <summary>
            Determines the alignment of the tab.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabAlignment.Left">
            <summary>
            Tab will be left aligned.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabAlignment.Center">
            <summary>
            Tab will be centered.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabAlignment.Right">
            <summary>
            Tab will be right aligned.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabAlignment.Decimal">
            <summary>
            Positioned at the last dot or comma.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TabLeader">
            <summary>
            Used to determine the leader for the tab.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.Spaces">
            <summary>
            Blanks are used as leader.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.Dots">
            <summary>
            Dots at the baseline.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.Dashes">
            <summary>
            Dashes are used as leader.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.Lines">
            <summary>
            Same as Heavy.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.Heavy">
            <summary>
            Leader will be underlined.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabLeader.MiddleDot">
            <summary>
            Dots in the middle (vertical) of the line.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Underline">
            <summary>
            Specifies the underline type for the font.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.UnitType">
            <summary>
            Specifies the measure of an Unit object.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Empty">
            <summary>
            Represents uninitialized <see cref="T:External.Rendering.DocumentObjectModel.Unit"/>.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Point">
            <summary>
            Measure is in points. A point represents 1/72 of an inch. 
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Centimeter">
            <summary>
            Measure is in centimeter. 
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Inch">
            <summary>
            Measure is in inch. 
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Millimeter">
            <summary>
            Measure is in millimeter. 
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.UnitType.Pica">
            <summary>
            Measure is in picas. A pica represents 12 points, i.e. 6 pica are one inch.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.BookmarkField">
            <summary>
            BookmarkField is used as target for Hyperlinks or PageRefs.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.BookmarkField.#ctor">
            <summary>
            Initializes a new instance of the BookmarkField class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.BookmarkField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the BookmarkField class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.BookmarkField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BookmarkField class with the necessary bookmark name.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Fields.BookmarkField.Name">
            <summary>
            Gets or sets the name of the bookmark.
            Used to reference the bookmark from a Hyperlink or PageRef.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.NumericFieldBase">
            <summary>
            NumericFieldBase serves as a base for Numeric fields, which are: 
            NumPagesField, PageField, PageRefField, SectionField, SectionPagesField
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.NumericFieldBase.#ctor">
            <summary>
            Initializes a new instance of the NumericFieldBase class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.NumericFieldBase.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the NumericFieldBase class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.NumericFieldBase.IsValidFormat(System.String)">
            <summary>
            Determines whether the format is valid for numeric fields.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Fields.NumericFieldBase.Format">
            <summary>
            Gets or sets the format of the number.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.NumPagesField">
            <summary>
            NumPagesField is used to reference the number of all pages in the document.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.NumPagesField.#ctor">
            <summary>
            Initializes a new instance of the NumPagesField class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.NumPagesField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the NumPagesField class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.PageField">
            <summary>
            PageField is used to reference the number of the current page.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.PageField.#ctor">
            <summary>
            Initializes a new instance of the PageField class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.PageField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the PageField class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.PageRefField">
            <summary>
            PageRefField is used to reference the page number of a bookmark in the document.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.PageRefField.#ctor">
            <summary>
            Initializes a new instance of the PageRefField class.
            </summary>    
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.PageRefField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PageRefField class with the necessary bookmark name.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.PageRefField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the PageRefField class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Fields.PageRefField.Name">
            <summary>
            Gets or sets the bookmark name whose page is to be shown.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.SectionField">
            <summary>
            SectionField is used to reference the number of the current section.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.SectionField.#ctor">
            <summary>
            Initializes a new instance of the SectionField class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.SectionField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the SectionField class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Fields.SectionPagesField">
            <summary>
            SectionPagesField is used to reference the number of all pages of the current section.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.SectionPagesField.#ctor">
            <summary>
            Initializes a new instance of the SectionPagesField class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Fields.SectionPagesField.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the SectionPagesField class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Font">
            <summary>
            Font represents the formatting of characters in a paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.FormattedText">
            <summary>
            Represents the format of a text.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.FormattedText.#ctor">
            <summary>
            Initializes a new instance of the FormattedText class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.FormattedText.Add(System.String)">
            <summary>
            Adds a text phrase to the formatted text.
            </summary>
            <param name="text">Content of the new text object.</param>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.FormattedText.Font">
            <summary>
            Gets or sets the font object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.FormattedText.Elements">
            <summary>
            Gets the collection of paragraph elements that defines the FormattedText.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.HeaderFooter">
            <summary>
            Represents a header or footer object in a section.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.HeaderFooter.#ctor">
            <summary>
            Initializes a new instance of the HeaderFooter class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.HeaderFooter.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the HeaderFooter class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.IsHeader">
            <summary>
            Returns true if this is a headers, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.IsFooter">
            <summary>
            Returns true if this is a footer, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.IsFirstPage">
            <summary>
            Returns true if this is a first page header or footer, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.IsEvenPage">
            <summary>
            Returns true if this is an even page header or footer, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.IsPrimary">
            <summary>
            Returns true if this is a primary header or footer, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeaderFooter.Elements">
            <summary>
            Gets the collection of document objects that defines the header or footer.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.HeadersFooters">
            <summary>
            Represents the collection of HeaderFooter objects.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.HeadersFooters.#ctor">
            <summary>
            Initializes a new instance of the HeadersFooters class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.HeadersFooters.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the HeadersFooters class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeadersFooters.IsHeader">
            <summary>
            Returns true if this collection contains headers, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeadersFooters.IsFooter">
            <summary>
            Returns true if this collection contains footers, false otherwise.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeadersFooters.EvenPage">
            <summary>
            Gets or sets the even page HeaderFooter of the HeadersFooters object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeadersFooters.FirstPage">
            <summary>
            Gets or sets the first page HeaderFooter of the HeadersFooters object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.HeadersFooters.Primary">
            <summary>
            Gets or sets the primary HeaderFooter of the HeadersFooters object.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Hyperlink">
            <summary>
            A Hyperlink is used to reference targets in the document (Local), on a drive (File) or a network (Web).
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Hyperlink.#ctor">
            <summary>
            Initializes a new instance of the Hyperlink class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Hyperlink.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Hyperlink class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Hyperlink.Name">
            <summary>
            Gets or sets the target name of the Hyperlink, e.g. an URL or a bookmark's name.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Hyperlink.Type">
            <summary>
            Gets or sets the target type of the Hyperlink.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Hyperlink.Elements">
            <summary>
            Gets the ParagraphElements of the Hyperlink specifying its 'clickable area'.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.ListInfo">
            <summary>
            A ListInfo is the representation of a series of paragraphs as a list.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.ListInfo.#ctor">
            <summary>
            Initializes a new instance of the ListInfo class.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.PageSetup">
            <summary>
            Represents the page setup of a section.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.PageSetup.#ctor">
            <summary>
            Initializes a new instance of the PageSetup class.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.SectionStart">
            <summary>
            Gets or sets a value which defines whether the section starts on next, odd or even page.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.PageWidth">
            <summary>
            Gets or sets the page width.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.PageHeight">
            <summary>
            Gets or sets the page height.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.StartingNumber">
            <summary>
            Gets or sets the starting number for the first section page.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.TopMargin">
            <summary>
            Gets or sets the top margin of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.BottomMargin">
            <summary>
            Gets or sets the bottom margin of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.LeftMargin">
            <summary>
            Gets or sets the left margin of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.RightMargin">
            <summary>
            Gets or sets the right margin of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.OddAndEvenPagesHeaderFooter">
            <summary>
            Gets or sets a value which defines whether the odd and even pages
            of the section have different header and footer.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.DifferentFirstPageHeaderFooter">
            <summary>
            Gets or sets a value which define whether the section has a different
            first page header and footer.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.HeaderDistance">
            <summary>
            Gets or sets the distance between the header and the page top
            of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.FooterDistance">
            <summary>
            Gets or sets the distance between the footer and the page bottom
            of the pages in the section.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.PageSetup.MirrorMargins">
            <summary>
            Gets or sets a value which defines whether the odd and even pages
            of the section should change left and right margin.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Paragraph">
            <summary>
            Represents a paragraph which is used to build up a document with text.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Paragraph.#ctor">
            <summary>
            Initializes a new instance of the Paragraph class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Paragraph.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Paragraph class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Paragraph.Format">
            <summary>
            Gets or sets the ParagraphFormat object of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Paragraph.Elements">
            <summary>
            Gets the collection of document objects that defines the paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.ParagraphElements">
            <summary>
            A ParagraphElements collection contains the individual objects of a paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.ParagraphElements.#ctor">
            <summary>
            Initializes a new instance of the ParagraphElements class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.ParagraphElements.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the ParagraphElements class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.ParagraphFormat">
            <summary>
            A ParagraphFormat represents the formatting of a paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.Alignment">
            <summary>
            Gets or sets the Alignment of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.Borders">
            <summary>
            Gets the Borders object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.FirstLineIndent">
            <summary>
            Gets or sets the indent of the first line in the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.Font">
            <summary>
            Gets or sets the Font object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.KeepTogether">
            <summary>
            Gets or sets a value indicating whether to keep all the paragraph's lines on the same page.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.KeepWithNext">
            <summary>
            Gets or sets a value indicating whether this and the next paragraph stay on the same page.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.LeftIndent">
            <summary>
            Gets or sets the left indent of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.LineSpacing">
            <summary>
            Gets or sets the space between lines on the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.LineSpacingRule">
            <summary>
            Gets or sets the rule which is used to define the line spacing.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.ListInfo">
            <summary>
            Gets or sets the ListInfo object of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.OutlineLevel">
            <summary>
            Gets or sets the out line level of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.PageBreakBefore">
            <summary>
            Gets or sets a value indicating whether a page break is inserted before the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.RightIndent">
            <summary>
            Gets or sets the right indent of the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.Shading">
            <summary>
            Gets the shading object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.SpaceAfter">
            <summary>
            Gets or sets the space that's inserted after the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.SpaceBefore">
            <summary>
            Gets or sets the space that's inserted before the paragraph.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.TabStops">
            <summary>
            Get the TabStops collection.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.ParagraphFormat.WidowControl">
            <summary>
            Gets or sets a value indicating whether a line from the paragraph stays alone in a page.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Section">
            <summary>
            A Section is a collection of document objects sharing the same header, footer, 
            and page setup.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Section.#ctor">
            <summary>
            Initializes a new instance of the Section class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Section.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Section class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Section.PageSetup">
            <summary>
            Gets the PageSetup object
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Section.Headers">
            <summary>
            Gets the HeadersFooters collection containing the headers.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Section.Footers">
            <summary>
            Gets the HeadersFooters collection containing the footers.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Section.Elements">
            <summary>
            Gets the document elements that build the section's content.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Sections">
            <summary>
            Represents the collection of document sections.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Sections.#ctor">
            <summary>
            Initializes a new instance of the Sections class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Sections.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Sections class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.RelativeHorizontal">
            <summary>
            Reference point of the Left attribute.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeHorizontal.Character">
            <summary>
            Alignment relative to the right side of the previous element.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeHorizontal.Column">
            <summary>
            Alignment relative to the right side of the previous element.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeHorizontal.Margin">
            <summary>
            Alignment relative to page margin.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeHorizontal.Page">
            <summary>
            Alignment relative to page edge.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.RelativeVertical">
            <summary>
            Reference point of the Top attribute.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeVertical.Line">
            <summary>
            Alignment relative to the bottom side of the previous element.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeVertical.Margin">
            <summary>
            Alignment relative to page margin.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeVertical.Page">
            <summary>
            Alignment relative to page edge.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.RelativeVertical.Paragraph">
            <summary>
            Alignment relative to the bottom line of the previous element.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.ShapePosition">
            <summary>
            Specifies the position of a shape. Values are used for both LeftPositon and TopPosition.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Undefined">
            <summary>
            Undefined position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Left">
            <summary>
            Left-aligned position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Right">
            <summary>
            Right-aligned position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Center">
            <summary>
            Centered position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Top">
            <summary>
            Top-aligned position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Bottom">
            <summary>
            Bottom-aligned position.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Inside">
            <summary>
            Used with mirrored margins: left-aligned on right page and right-aligned on left page.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.ShapePosition.Outside">
            <summary>
            Used with mirrored margins: left-aligned on left page and right-aligned on right page.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.WrapStyle">
            <summary>
            Specifies how the shape object should be placed between the other elements.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.WrapStyle.TopBottom">
            <summary>
            The object will be placed between its predecessor and its successor.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.Shapes.WrapStyle.None">
            <summary>
            The object will be ignored when the other elements are placed.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.Image">
            <summary>
            Represents an image in the document or paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.Shape">
            <summary>
            Base Class for all positionable Classes.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.Shape.#ctor">
            <summary>
            Initializes a new instance of the Shape class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.Shape.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Shape class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.WrapStyle">
            <summary>
            Gets or sets the wrapping style of the shape.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.RelativeVertical">
            <summary>
            Gets or sets the reference point of the Top property.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.RelativeHorizontal">
            <summary>
            Gets or sets the reference point of the Left property.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.Top">
            <summary>
            Gets or sets the position of the top side of the shape.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.Left">
            <summary>
            Gets or sets the position of the left side of the shape.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.Height">
            <summary>
            Gets or sets the height of the shape.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.Shape.Width">
            <summary>
            Gets or sets the width of the shape.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.Image.#ctor">
            <summary>
            Initializes a new instance of the Image class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.Image.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Image class with the specified parent.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.LeftPosition">
            <summary>
            Represents the left position in a shape.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.IsValid(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)">
            <summary>
            Indicates the given shapePosition is valid for LeftPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.#ctor(External.Rendering.DocumentObjectModel.Unit)">
            <summary>
            Initializes a new instance of the LeftPosition class from Unit.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.#ctor(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)">
            <summary>
            Initializes a new instance of the LeftPosition class from ShapePosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.op_Implicit(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)~External.Rendering.DocumentObjectModel.Shapes.LeftPosition">
            <summary>
            Converts a ShapePosition to a LeftPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.op_Implicit(External.Rendering.DocumentObjectModel.Unit)~External.Rendering.DocumentObjectModel.Shapes.LeftPosition">
            <summary>
            Converts a Unit to a LeftPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.op_Implicit(System.Double)~External.Rendering.DocumentObjectModel.Shapes.LeftPosition">
            <summary>
            Converts a double to a LeftPosition.
            The double is interpreted as a Unit in Point.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.Position">
            <summary>
            Gets the value of the position in unit.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.LeftPosition.ShapePosition">
            <summary>
            Gets the value of the position.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.TextFrame">
            <summary>
            Represents a text frame that can be freely placed.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TextFrame.#ctor">
            <summary>
            Initializes a new instance of the TextFrame class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TextFrame.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the TextFrame class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.TextFrame.Elements">
            <summary>
            The document elements that build the textframe's content.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Shapes.TopPosition">
            <summary>
            Represents the top position in a shape.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.IsValid(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)">
            <summary>
            Indicates the given shapePosition is valid for TopPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.#ctor(External.Rendering.DocumentObjectModel.Unit)">
            <summary>
            Initializes a new instance of TopPosition from Unit.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.#ctor(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)">
            <summary>
            Initializes a new instance of TopPosition from ShapePosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.op_Implicit(External.Rendering.DocumentObjectModel.Shapes.ShapePosition)~External.Rendering.DocumentObjectModel.Shapes.TopPosition">
            <summary>
            Converts a ShapePosition to a TopPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.op_Implicit(External.Rendering.DocumentObjectModel.Unit)~External.Rendering.DocumentObjectModel.Shapes.TopPosition">
            <summary>
            Converts a Unit to a TopPosition.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Shapes.TopPosition.op_Implicit(System.Double)~External.Rendering.DocumentObjectModel.Shapes.TopPosition">
            <summary>
            Converts a double to a TopPosition.
            The double is interpreted as a Unit in Point.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.TopPosition.Position">
            <summary>
            Gets the value of the position in unit.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.Shapes.TopPosition.ShapePosition">
            <summary>
            Gets the value of the position.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Cell">
            <summary>
            Represents a cell of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Cell.#ctor">
            <summary>
            Initializes a new instance of the Cell class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Cell.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Cell class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Table">
            <summary>
            Gets the table the cell belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.LeftPadding">
            <summary>
            Gets or sets the default left padding for all cells of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.RightPadding">
            <summary>
            Gets or sets the default right padding for all cells of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Column">
            <summary>
            Gets the column the cell belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Row">
            <summary>
            Gets the row the cell belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the cell.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Borders">
            <summary>
            Gets the Borders object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Shading">
            <summary>
            Gets the shading object.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.MergeRight">
            <summary>
            Gets or sets the number of cells to be merged right.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.MergeDown">
            <summary>
            Gets or sets the number of cells to be merged down.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cell.Elements">
            <summary>
            Gets the collection of document objects that defines the cell.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Cells">
            <summary>
            Represents the collection of all cells of a row.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Cells.#ctor">
            <summary>
            Initializes a new instance of the Cells class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Cells.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Cells class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Cells.Resize(System.Int32)">
            <summary>
            Resizes this cells' list if necessary.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cells.Table">
            <summary>
            Gets the table the cells collection belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cells.Row">
            <summary>
            Gets the row the cells collection belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Cells.Item(System.Int32)">
            <summary>
            Gets a cell by its index. The first cell has the index 0.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Column">
            <summary>
            Represents a column of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Column.#ctor">
            <summary>
            Initializes a new instance of the Column class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Column.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Column class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.Table">
            <summary>
            Gets the table the Column belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.Index">
            <summary>
            Gets the index of the column. First column has index 0.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.Item(System.Int32)">
            <summary>
            Gets a cell by its row index. The first cell has index 0.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.Width">
            <summary>
            Gets or sets the width of a column.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.LeftPadding">
            <summary>
            Gets or sets the default left padding for all cells of the column.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.KeepWith">
            <summary>
            Gets or sets the number of columns that should be kept together with
            current column in case of a page break.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Column.HeadingFormat">
            <summary>
            Gets or sets a value which define whether the column is a header.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Columns">
            <summary>
            Represents the columns of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Columns.#ctor">
            <summary>
            Initializes a new instance of the Columns class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Columns.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Columns class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Columns.PopulateItemIndexes">
            <summary>
            Set column.Index for each column in collection.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Edge">
            <summary>
            Combinable flags to set Borders using the SetEdge function.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.RowAlignment">
            <summary>
            Specifies the horizontal alignment of the table.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.RowHeightRule">
            <summary>
            Specifies the calculation rule of the row height.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Row">
            <summary>
            Represents a row of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Row.#ctor">
            <summary>
            Initializes a new instance of the Row class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Row.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Row class with the specified parent.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.Table">
            <summary>
            Gets the table the row belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.Index">
            <summary>
            Gets the index of the row. First row has index 0.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.Item(System.Int32)">
            <summary>
            Gets a cell by its column index. The first cell has index 0.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.Height">
            <summary>
            Gets or sets the height of the row.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.HeightRule">
            <summary>
            Gets or sets the rule which is used to determine the height of the row.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.TopPadding">
            <summary>
            Gets or sets the default value for all cells of the row.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.BottomPadding">
            <summary>
            Gets or sets the default value for all cells of the row.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.HeadingFormat">
            <summary>
            Gets or sets a value which define whether the row is a header.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.KeepWith">
            <summary>
            Gets or sets the number of rows that should be
            kept together with the current row in case of a page break.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Row.Cells">
            <summary>
            Gets the Cells collection of the table.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Rows">
            <summary>
            Represents the collection of all rows of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Rows.#ctor">
            <summary>
            Initializes a new instance of the Rows class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Rows.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Rows class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Rows.PopulateItemIndexes">
            <summary>
            Set row.Index for each row in collection
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Rows.Table">
            <summary>
            Gets the table the rows collection belongs to.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Rows.Alignment">
            <summary>
            Gets or sets the row alignment of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Rows.LeftIndent">
            <summary>
            Gets or sets the left indent of the table. If row alignment is not Left, 
            the value is ignored.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TablesOld.Table">
            <summary>
            Represents a table in a document.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Table.#ctor">
            <summary>
            Initializes a new instance of the Table class.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Table.#ctor(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Initializes a new instance of the Table class with the specified parent.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TablesOld.Table.SetEdge(System.Int32,System.Int32,System.Int32,System.Int32,External.Rendering.DocumentObjectModel.TablesOld.Edge,External.Rendering.DocumentObjectModel.Border)">
            <summary>
            Sets the borders surrounding the specified range of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Table.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell with the given row and column indices.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Table.Columns">
            <summary>
            Gets or sets the Columns collection of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Table.Rows">
            <summary>
            Gets the Rows collection of the table.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TablesOld.Table.KeepTogether">
            <summary>
            Gets or sets a value indicating whether
            to keep all the table rows on the same page.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TabStop">
            <summary>
            Represents a tab inside a paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.TabStop.#ctor(External.Rendering.DocumentObjectModel.Unit,External.Rendering.DocumentObjectModel.TabAlignment,External.Rendering.DocumentObjectModel.TabLeader)">
            <summary>
            Initializes a new instance of the TabStop struct.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TabStop.Position">
            <summary>
            Gets the tab stop position.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TabStop.Alignment">
            <summary>
            Gets or sets the alignment of the tabstop.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentObjectModel.TabStop.Leader">
            <summary>
            Gets or sets the character which is used as a leader for the tabstop.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.TabStops">
            <summary>
            A TabStops collection represents all TabStop objects in a paragraph.
            </summary>
        </member>
        <member name="F:External.Rendering.DocumentObjectModel.TabStops.TabStopPrecision">
            <summary>
            Specifies the minimal spacing between two TabStop positions.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Text">
            <summary>
            Represents text in a paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentObjectModel.Text.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Text class with a string as paragraph content.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentObjectModel.Unit">
            <summary>
            An Unit consist of a numerical value and an UnitType like Centimeter, Millimeter or Inch.
            Several conversion between different measures are supported.
            </summary>
        </member>
        <member name="T:External.Rendering.DocumentRenderer">
            <summary>
            Provides methods to render the document or single parts of it to a XGraphics object.
            </summary>
            <remarks>
            One prepared instance of this class can serve to render several output formats.
            </remarks>
        </member>
        <member name="M:External.Rendering.DocumentRenderer.PrepareDocument">
            <summary>
            Prepares this instance for rendering.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentRenderer.RenderPage(External.Drawing.XGraphics,System.Int32)">
            <summary>
            Renders a document to the specified graphics object.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentRenderer.RenderPage(External.Drawing.XGraphics,System.Int32,External.Rendering.PageRenderOptions)">
            <summary>
            Renders a document to the specified graphics object.
            </summary>
        </member>
        <member name="M:External.Rendering.DocumentRenderer.GetDocumentObjectsFromPage(System.Int32)">
            <summary>
            Gets the document objects that get rendered on the specified page.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentRenderer.FormattedDocument">
            <summary>
            Gets the formatted document of this instance.
            </summary>
        </member>
        <member name="P:External.Rendering.DocumentRenderer.TypefaceCache">
            <summary>
            Gets or sets the typeface cache of the document.
            </summary>
        </member>
        <member name="T:External.Rendering.Floating">
            <summary>
            Floating behavior of layout elements.
            </summary>
        </member>
        <member name="T:External.Rendering.PageRenderOptions">
            <summary>
            Determines the parts of a page to be rendered.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.None">
            <summary>
            Renders nothing (creates an empty page).
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RenderHeader">
            <summary>
            Renders Headers.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RenderFooter">
            <summary>
            Renders Footers.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RenderContent">
            <summary>
            Renders Content.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RenderPdfBackground">
            <summary>
            Renders PDF Background pages.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RenderPdfContent">
            <summary>
            Renders PDF content pages.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.All">
            <summary>
            Renders all.
            </summary>
        </member>
        <member name="F:External.Rendering.PageRenderOptions.RemovePage">
            <summary>
            Creates not even an empty page.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.BarCode">
            <summary>
            Represents the base class of all bar codes.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.CodeBase">
            <summary>
            Represents the base class of all codes.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeBase.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.BarCodes.CodeBase"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeBase.CheckCode(System.String)">
            <summary>
            When implemented in a derived class, determines whether the specified string can be used as Text
            for this bar code type.
            </summary>
            <param name="text">The code string to check.</param>
            <returns>True if the text can be used for the actual barcode.</returns>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeBase.CalcDistance(External.Drawing.BarCodes.AnchorType,External.Drawing.BarCodes.AnchorType,External.Drawing.XSize)">
            <summary>
            Calculates the distance between an old anchor point and a new anchor point.
            </summary>
            <param name="oldType"></param>
            <param name="newType"></param>
            <param name="size"></param>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeBase.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeBase.Text">
            <summary>
            Gets or sets the text the bar code shall represent.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeBase.Anchor">
            <summary>
            Always MiddleCenter.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeBase.Direction">
            <summary>
            Gets or sets the drawing direction.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.BarCodes.BarCode"/> class.
            </summary>
            <param name="text"></param>
            <param name="size"></param>
            <param name="direction"></param>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.FromType(External.Drawing.BarCodes.CodeType,System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.FromType(External.Drawing.BarCodes.CodeType,System.String,External.Drawing.XSize)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.FromType(External.Drawing.BarCodes.CodeType,System.String)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.FromType(External.Drawing.BarCodes.CodeType)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.BarCode.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XFont,External.Drawing.XPoint)">
            <summary>
            When defined in a derived class renders the code.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.WideNarrowRatio">
            <summary>
            When overridden in a derived class gets or sets the wide narrow ratio.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.TextLocation">
            <summary>
            Gets or sets the location of the text next to the bar code.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.DataLength">
            <summary>
            Gets or sets the length of the data that defines the bar code.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.StartChar">
            <summary>
            Gets or sets the optional start character.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.EndChar">
            <summary>
            Gets or sets the optional end character.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.BarCode.TurboBit">
            <summary>
            Gets or sets a value indicating whether the turbo bit is to be drawn.
            (A turbo bit is something special to Kern (computer output processing) company (as far as I know))
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.BarCodeRenderInfo">
            <summary>
            Holds all temporary information needed during rendering.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.Code2of5Interleaved">
            <summary>
            Implementation of the Code 2 of 5 bar code.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.ThickThinBarCode">
            <summary>
            Internal base class for several bar code types.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.ThickThinBarCode.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.BarCodes.ThickThinBarCode"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.ThickThinBarCode.RenderBar(External.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick or thin line for the bar code.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick or a thin line is about to be rendered.</param>
        </member>
        <member name="M:External.Drawing.BarCodes.ThickThinBarCode.RenderGap(External.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick or thin gap for the bar code.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick or a thin gap is about to be rendered.</param>
        </member>
        <member name="M:External.Drawing.BarCodes.ThickThinBarCode.RenderTurboBit(External.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick bar before or behind the code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.ThickThinBarCode.GetBarWidth(External.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Gets the width of a thick or a thin line (or gap). CalcLineWidth must have been called before.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick line's with shall be returned.</param>
        </member>
        <member name="P:External.Drawing.BarCodes.ThickThinBarCode.WideNarrowRatio">
            <summary>
            Gets or sets the ration between thick an thin lines. Must be between 2 and 3.
            Optimal and also default value is 2.6.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.#ctor">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.ThickAndThinLines(System.Int32)">
            <summary>
            Returns an array of size 5 that represents the thick (true) and thin (false) lines or spaces
            representing the specified digit.
            </summary>
            <param name="digit">The digit to represent.</param>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XFont,External.Drawing.XPoint)">
            <summary>
            Renders the bar code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.CalcThinBarWidth(External.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Calculates the thick and thin line widths,
            taking into account the required rendering size.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.RenderNextPair(External.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Renders the next digit pair as bar code element.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code2of5Interleaved.CheckCode(System.String)">
            <summary>
            Checks the code to be convertible into an interleaved 2 of 5 bar code.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="T:External.Drawing.BarCodes.Code3of9Standard">
            <summary>
            Imlpementation of the Code 3 of 9 bar code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.#ctor">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.#ctor(System.String)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.ThickThinLines(System.Char)">
            <summary>
            Returns an array of size 9 that represents the thick (true) and thin (false) lines and spaces
            representing the specified digit.
            </summary>
            <param name="ch">The character to represent.</param>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.CalcThinBarWidth(External.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Calculates the thick and thin line widths,
            taking into account the required rendering size.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.CheckCode(System.String)">
            <summary>
            Checks the code to be convertible into an standard 3 of 9 bar code.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="M:External.Drawing.BarCodes.Code3of9Standard.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XFont,External.Drawing.XPoint)">
            <summary>
            Renders the bar code.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.CodeDataMatrix">
            <summary>
            Defines the DataMatrix 2D barcode. THIS IS AN EMPIRA INTERNAL IMPLEMENTATION. THE CODE IN
            THE OPEN SOURCE VERSION IS A FAKE.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.MatrixCode">
            <summary>
            Represents the base class of all 2D codes.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.MatrixCode.#ctor(System.String,System.String,System.Int32,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.BarCodes.MatrixCode"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.MatrixCode.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XPoint)">
            <summary>
            When implemented in a derived class renders the 2D code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.MatrixCode.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as Text for this matrix code type.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.MatrixCode.Encoding">
            <summary>
            Gets or sets the encoding. docDaSt
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.MatrixCode.Columns">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.MatrixCode.Rows">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.MatrixCode.Text">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,External.Drawing.BarCodes.DataMatrixEncoding,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,External.Drawing.BarCodes.DataMatrixEncoding,System.Int32,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.SetEncoding(External.Drawing.BarCodes.DataMatrixEncoding)">
            <summary>
            Sets the encoding of the DataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XPoint)">
            <summary>
            Renders the matrix code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeDataMatrix.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as data in the DataMatrix.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeDataMatrix.QuietZone">
            <summary>
            Gets or sets the size of the Matrix' Quiet Zone.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.CodeOmr">
            <summary>
            Represents an OMR code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeOmr.#ctor(System.String,External.Drawing.XSize,External.Drawing.BarCodes.CodeDirection)">
            <summary>
            initializes a new OmrCode with the given data.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeOmr.Render(External.Drawing.XGraphics,External.Drawing.XBrush,External.Drawing.XFont,External.Drawing.XPoint)">
            <summary>
            Renders the OMR code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.CodeOmr.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as Text for the OMR code.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeOmr.SynchronizeCode">
            <summary>
            Gets or sets a value indicating whether a synchronize mark is rendered.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeOmr.MakerDistance">
            <summary>
            Gets or sets the distance of the markers.
            </summary>
        </member>
        <member name="P:External.Drawing.BarCodes.CodeOmr.MakerThickness">
            <summary>
            Gets or sets the thickness of the makers.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.DataMatrixImage">
            <summary>
            Creates the XImage object for a DataMatrix.
            Important note for OpenSource version of PDFsharp:
              The generated image object only contains random data.
              If you need the correct implementation as defined in the ISO/IEC 16022:2000 specification,
              please contact empira Software GmbH via www.pdfsharp.com.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixImage.ecc200Sizes">
            <summary>
            Possible ECC200 Matrixes
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.DataMatrixImage.DataMatrix">
            <summary>
            Creates the DataMatrix code.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.DataMatrixImage.Iec16022Ecc200(System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes the DataMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
            <param name="code">A hex string like "AB 08 C3...".</param>
            <param name="size">I.e. 26 for a 26x26 matrix</param>
        </member>
        <member name="M:External.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32,System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
        </member>
        <member name="M:External.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.AnchorType">
            <summary>
            Specifies whether and how the text is displayed at the code area.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.TopLeft">
            <summary>
            The anchor is located top left.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.TopCenter">
            <summary>
            The anchor is located top center.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.TopRight">
            <summary>
            The anchor is located top right.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.MiddleLeft">
            <summary>
            The anchor is located middle left.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.MiddleCenter">
            <summary>
            The anchor is located middle center.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.MiddleRight">
            <summary>
            The anchor is located middle right.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.BottomLeft">
            <summary>
            The anchor is located bottom left.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.BottomCenter">
            <summary>
            The anchor is located bottom center.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.AnchorType.BottomRight">
            <summary>
            The anchor is located bottom right.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.CodeDirection">
            <summary>
            Specifies the drawing direction of the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeDirection.LeftToRight">
            <summary>
            Does not rotate the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeDirection.BottomToTop">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeDirection.RightToLeft">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeDirection.TopToBottom">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.CodeType">
            <summary>
            Specifies the type of the bar code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeType.Code2of5Interleaved">
            <summary>
            The standard 2 of 5 interleaved bar code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeType.Code3of9Standard">
            <summary>
            The standard 3 of 9 bar code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeType.Omr">
            <summary>
            The OMR code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.CodeType.DataMatrix">
            <summary>
            The data matrix code.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.DataMatrixEncoding">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.Ascii">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.C40">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.Text">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.X12">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.EDIFACT">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.DataMatrixEncoding.Base256">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.TextLocation">
            <summary>
            Specifies whether and how the text is displayed at the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.TextLocation.None">
            <summary>
            No text is drawn.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.TextLocation.Above">
            <summary>
            The text is located above the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.TextLocation.Below">
            <summary>
            The text is located below the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.TextLocation.AboveEmbedded">
            <summary>
            The text is located above within the code.
            </summary>
        </member>
        <member name="F:External.Drawing.BarCodes.TextLocation.BelowEmbedded">
            <summary>
            The text is located below within the code.
            </summary>
        </member>
        <member name="T:External.Drawing.BarCodes.StringLiterals">
            <summary>
            String resources for the empira barcode renderer.
            </summary>
        </member>
        <member name="T:External.Drawing.PathStart">
            <summary>
            Indicates how to handle the first point of a path.
            </summary>
        </member>
        <member name="F:External.Drawing.PathStart.MoveTo1st">
            <summary>
            Set the current position to the first point.
            </summary>
        </member>
        <member name="F:External.Drawing.PathStart.LineTo1st">
            <summary>
            Draws a line to the first point.
            </summary>
        </member>
        <member name="F:External.Drawing.PathStart.Ignore1st">
            <summary>
            Ignores the first point.
            </summary>
        </member>
        <member name="T:External.Drawing.XColorSpace">
            <summary>
             Currently not used. Only DeviceRGB is rendered in PDF.
             </summary>
        </member>
        <member name="F:External.Drawing.XColorSpace.Rgb">
            <summary>
            Identifies the RGB color space.
            </summary>
        </member>
        <member name="F:External.Drawing.XColorSpace.Cmyk">
            <summary>
            Identifies the CMYK color space.
            </summary>
        </member>
        <member name="F:External.Drawing.XColorSpace.GrayScale">
            <summary>
            Identifies the gray scale color space.
            </summary>
        </member>
        <member name="T:External.Drawing.XCombineMode">
            <summary>
            Specifies how different clipping regions can be combined.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Replace">
            <summary>
            One clipping region is replaced by another.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Intersect">
            <summary>
            Two clipping regions are combined by taking their intersection.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Union">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Xor">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Exclude">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="F:External.Drawing.XCombineMode.Complement">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="T:External.Drawing.XDashStyle">
            <summary>
            Specifies the style of dashed lines drawn with an XPen object.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:External.Drawing.XDashStyle.Custom">
            <summary>
            Specifies a user-defined custom dash style.
            </summary>
        </member>
        <member name="T:External.Drawing.XFillMode">
            <summary>
            Specifies how the interior of a closed path is filled.
            </summary>
        </member>
        <member name="F:External.Drawing.XFillMode.Alternate">
            <summary>
            Specifies the alternate fill mode. Called the 'odd-even rule' in PDF terminology.
            </summary>
        </member>
        <member name="F:External.Drawing.XFillMode.Winding">
            <summary>
            Specifies the winding fill mode. Called the 'nonzero winding number rule' in PDF terminology.
            </summary>
        </member>
        <member name="T:External.Drawing.XFontStyle">
            <summary>
            Specifies style information applied to text.
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.BoldItalic">
            <summary>
            Bold and italic text. 
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.Underline">
            <summary>
            Underlined text.
            </summary>
        </member>
        <member name="F:External.Drawing.XFontStyle.Strikeout">
            <summary>
            Text with a line through the middle.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicTargetContext">
            <summary>
             Determines whether rendering based on GDI+ or WPF. For internal use only.
             </summary>
        </member>
        <member name="F:External.Drawing.XGraphicTargetContext.GDI">
            <summary>
            Renders using GDI+.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicTargetContext.WPF">
            <summary>
            Renders using WPF (including Silverlight).
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsPathItemType">
            <summary>
            Type of the path data.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsPdfPageOptions">
            <summary>
            Specifies how the content of an existing PDF page and new content is combined.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsPdfPageOptions.Append">
            <summary>
            The new content is inserted behind the old content and any subsequent drawing in done above the existing graphic.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsPdfPageOptions.Prepend">
            <summary>
            The new content is inserted before the old content and any subsequent drawing in done beneath the existing graphic.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsPdfPageOptions.Replace">
            <summary>
            The new content entirely replaces the old content and any subsequent drawing in done on a blank page.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsUnit">
            <summary>
            Specifies the unit of measure.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsUnit.Inch">
            <summary>
            Specifies the inch (2.54 cm) as the unit of measure.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsUnit.Millimeter">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsUnit.Centimeter">
            <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsUnit.Presentation">
            <summary>
            Specifies a presentation point (1/96 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:External.Drawing.XKnownColor">
            <summary>
             Specifies all pre-defined colors. Used to identify the pre-defined colors and to 
             localize their names.
             </summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.AliceBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.AntiqueWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Aqua">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Aquamarine">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Azure">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Beige">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Bisque">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Black">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.BlanchedAlmond">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Blue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.BlueViolet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Brown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.BurlyWood">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.CadetBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Chartreuse">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Chocolate">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Coral">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.CornflowerBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Cornsilk">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Crimson">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Cyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkCyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkGoldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkKhaki">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkMagenta">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkOliveGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkOrange">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkOrchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkSalmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkSlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkSlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DarkViolet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DeepPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DeepSkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DimGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.DodgerBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Firebrick">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.FloralWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.ForestGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Fuchsia">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Gainsboro">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.GhostWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Gold">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Goldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Gray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Green">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.GreenYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Honeydew">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.HotPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.IndianRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Indigo">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Ivory">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Khaki">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Lavender">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LavenderBlush">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LawnGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LemonChiffon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightCoral">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightCyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightGoldenrodYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightSalmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightSkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightSlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightSteelBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LightYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Lime">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.LimeGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Linen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Magenta">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Maroon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumAquamarine">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumOrchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumPurple">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumSlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumSpringGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MediumVioletRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MidnightBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MintCream">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.MistyRose">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Moccasin">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.NavajoWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Navy">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.OldLace">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Olive">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.OliveDrab">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Orange">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.OrangeRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Orchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PaleGoldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PaleGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PaleTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PaleVioletRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PapayaWhip">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PeachPuff">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Peru">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Pink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Plum">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.PowderBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Purple">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Red">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.RosyBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.RoyalBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SaddleBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Salmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SandyBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SeaShell">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Sienna">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Silver">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Snow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SpringGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.SteelBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Tan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Teal">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Thistle">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Tomato">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Transparent">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Turquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Violet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Wheat">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.White">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.WhiteSmoke">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.Yellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:External.Drawing.XKnownColor.YellowGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="T:External.Drawing.XLineAlignment">
            <summary>
            Specifies the alignment of a text string relative to its layout rectangle
            </summary>
        </member>
        <member name="F:External.Drawing.XLineAlignment.Near">
            <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
        </member>
        <member name="F:External.Drawing.XLineAlignment.BaseLine">
            <summary>
            Specifies that text is aligned relative to its base line.
            With this option the layout rectangle must have a height of 0.
            </summary>
        </member>
        <member name="T:External.Drawing.XLinearGradientMode">
            <summary>
            Specifies the direction of a linear gradient.
            </summary>
        </member>
        <member name="F:External.Drawing.XLinearGradientMode.Horizontal">
            <summary>
            Specifies a gradient from left to right.
            </summary>
        </member>
        <member name="F:External.Drawing.XLinearGradientMode.Vertical">
            <summary>
            Specifies a gradient from top to bottom.
            </summary>
        </member>
        <member name="F:External.Drawing.XLinearGradientMode.ForwardDiagonal">
            <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
        </member>
        <member name="F:External.Drawing.XLinearGradientMode.BackwardDiagonal">
            <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
        </member>
        <member name="T:External.Drawing.XLineCap">
            <summary>
            Specifies the available cap styles with which an XPen object can start and end a line.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineCap.Flat">
            <summary>
            Specifies a flat line cap.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineCap.Round">
            <summary>
            Specifies a round line cap.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineCap.Square">
            <summary>
            Specifies a square line cap.
            </summary>
        </member>
        <member name="T:External.Drawing.XLineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a figure or subpath.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineJoin.Miter">
            <summary>
            Specifies a mitered join. This produces a sharp corner or a clipped corner,
            depending on whether the length of the miter exceeds the miter limit
            </summary>
        </member>
        <member name="F:External.Drawing.XLineJoin.Round">
            <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="F:External.Drawing.XLineJoin.Bevel">
            <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
        </member>
        <member name="T:External.Drawing.XMatrixOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:External.Drawing.XMatrixOrder.Prepend">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="F:External.Drawing.XMatrixOrder.Append">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="T:External.Drawing.XPageDirection">
            <summary>
            Specifies the direction of the y-axis.
            </summary>
        </member>
        <member name="F:External.Drawing.XPageDirection.Downwards">
            <summary>
            Increasing Y values go downwards. This is the default.
            </summary>
        </member>
        <member name="F:External.Drawing.XPageDirection.Upwards">
            <summary>
            Increasing Y values go upwards. This is only possible when drawing on a PDF page.
            It is not implemented when drawing on a System.Drawing.Graphics object.
            </summary>
        </member>
        <member name="T:External.Drawing.XSmoothingMode">
            <summary>
            Specifies whether smoothing (or antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.Invalid">
            <summary>
            Specifies an invalid mode.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.Default">
            <summary>
            Specifies the default mode.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.HighSpeed">
            <summary>
            Specifies high speed, low quality rendering.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.HighQuality">
            <summary>
            Specifies high quality, low speed rendering.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.None">
            <summary>
            Specifies no antialiasing.
            </summary>
        </member>
        <member name="F:External.Drawing.XSmoothingMode.AntiAlias">
            <summary>
            Specifies antialiased rendering.
            </summary>
        </member>
        <member name="T:External.Drawing.XStringAlignment">
            <summary>
            Specifies the alignment of a text string relative to its layout rectangle.
            </summary>
        </member>
        <member name="F:External.Drawing.XStringAlignment.Near">
            <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
        </member>
        <member name="F:External.Drawing.XStringAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:External.Drawing.XStringAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
        </member>
        <member name="T:External.Drawing.GWV">
            <summary>
            The Get WPF Value flags.
            </summary>
        </member>
        <member name="T:External.Drawing.FontHelper">
            <summary>
            Helper class for fonts.
            </summary>
        </member>
        <member name="M:External.Drawing.FontHelper.CreateTypeface(System.Windows.Media.FontFamily,External.Drawing.XFontStyle)">
            <summary>
            Creates a typeface.
            </summary>
        </member>
        <member name="M:External.Drawing.FontHelper.CreateFormattedText(System.String,System.Windows.Media.Typeface,System.Double,System.Windows.Media.Brush)">
            <summary>
            Creates the formatted text.
            </summary>
        </member>
        <member name="M:External.Drawing.FontHelper.FontStyleFromStyle(External.Drawing.XFontStyle)">
            <summary>
            Simple hack to make it work...
            </summary>
        </member>
        <member name="M:External.Drawing.FontHelper.FontWeightFromStyle(External.Drawing.XFontStyle)">
            <summary>
            Simple hack to make it work...
            </summary>
        </member>
        <member name="T:External.Drawing.GeometryHelper">
            <summary>
            Helper class for Geometry paths.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.CreateCurveSegment(External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,System.Double)">
            <summary>
            Appends a Bézier segment from a curve.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.CreatePolygonGeometry(System.Windows.Point[],External.Drawing.XFillMode,System.Boolean)">
            <summary>
            Creates a path geometry from a polygon.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.CreateArcSegment(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Windows.Point@)">
            <summary>
            Creates the arc segment from parameters of the GDI+ DrawArc function.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.BezierCurveFromArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,External.Drawing.PathStart,External.Drawing.XMatrix@)">
            <summary>
            Creates between 1 and 5 Béziers curves from parameters specified like in GDI+.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.Quatrant(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Calculates the quadrant (0 through 3) of the specified angle. If the angle lies on an edge
            (0, 90, 180, etc.) the result depends on the details how the angle is used.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.AppendPartialArcQuadrant(System.Collections.Generic.List{External.Drawing.XPoint},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,External.Drawing.PathStart,External.Drawing.XMatrix)">
            <summary>
            Appends a Bézier curve for an arc within a full quadrant.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.BezierCurveFromArc(External.Drawing.XPoint,External.Drawing.XPoint,System.Double,External.Drawing.XSize,System.Boolean,System.Boolean,External.Drawing.PathStart)">
            <summary>
            Creates between 1 and 5 Béziers curves from parameters specified like in WPF.
            </summary>
        </member>
        <member name="M:External.Drawing.GeometryHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Gets a value indicating whether radius large enough compared to the chord length.
            </summary>
            <param name="halfChord2">(1/2 chord length)squared </param>
            <param name="fuzz2">Squared fuzz.</param>
            <param name="radius">The radius to accept (or not).</param>
        </member>
        <member name="T:External.Drawing.GraphicsStateStack">
            <summary>
            Represents a stack of XGraphicsState and XGraphicsContainer objects.
            </summary>
        </member>
        <member name="T:External.Drawing.InternalGraphicsState">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="P:External.Drawing.InternalGraphicsState.Transform">
            <summary>
            Gets or sets the current transformation matrix.
            </summary>
        </member>
        <member name="T:External.Drawing.Internal.Calc">
            <summary>
            Some static helper functions for calculations.
            </summary>
        </member>
        <member name="F:External.Drawing.Internal.Calc.Deg2Rad">
            <summary>
            Degree to radiant factor.
            </summary>
        </member>
        <member name="F:External.Drawing.Internal.Calc.πHalf">
            <summary>
            Half of pi.
            </summary>
        </member>
        <member name="T:External.Drawing.Internal.DoubleUtil">
            <summary>
            Some floating point utilities. Partially reflected from WPF, later equalized with original source code.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreRoughlyEqual(System.Double,System.Double,System.Int32)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreClose(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreClose(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreClose(External.Drawing.XSize,External.Drawing.XSize)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.AreClose(External.Drawing.XVector,External.Drawing.XVector)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is greater than value2 and the values are not close to each other.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is greater than value2 or the values are close to each other.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is less than value2 and the values are not close to each other.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is less than value2 or the values are close to each other.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.IsBetweenZeroAndOne(System.Double)">
            <summary>
            Indicates whether the value is between 0 and 1 or close to 0 or 1.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.IsNaN(System.Double)">
            <summary>
            Indicates whether the value is not a number.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.RectHasNaN(External.Drawing.XRect)">
            <summary>
            Indicates whether at least one of the four rectangle values is not a number.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.IsOne(System.Double)">
            <summary>
            Indicates whether the value is 1 or close to 1.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.IsZero(System.Double)">
            <summary>
            Indicates whether the value is 0 or close to 0.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.DoubleUtil.DoubleToInt(System.Double)">
            <summary>
            Converts a double to integer.
            </summary>
        </member>
        <member name="T:External.Drawing.Internal.FontHelper14">
            <summary>
            Helper class for fonts.
            </summary>
        </member>
        <member name="M:External.Drawing.Internal.FontHelper14.MeasureString(System.String,External.Drawing.XFont)">
            <summary>
            Simple measure string function.
            </summary>
        </member>
        <member name="T:External.Drawing.IXGraphicsRenderer">
            <summary>
            Represents an abstract drawing surface for PdfPages.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.Clear(External.Drawing.XColor)">
            <summary>
            Fills the entire drawing surface with the specified color.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawLine(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a straight line.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawLines(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a series of straight lines.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawBezier(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a Bézier spline.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawBeziers(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a series of Bézier splines.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawCurve(External.Drawing.XPen,External.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a cardinal spline.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawArc(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawRectangles(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawEllipse(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawPolygon(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode)">
            <summary>
            Draws a polygon.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawPie(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[],System.Double,External.Drawing.XFillMode)">
            <summary>
            Draws a cardinal spline.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawPath(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,External.Drawing.XRect,External.Drawing.XStringFormat)">
            <summary>
            Draws a series of glyphs identified by the specified text and font.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.DrawImage(External.Drawing.XImage,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an image.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.Save(External.Drawing.XGraphicsState)">
            <summary>
            Saves the current graphics state without changing it.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.Restore(External.Drawing.XGraphicsState)">
            <summary>
            Restores the specified graphics state.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.BeginContainer(External.Drawing.XGraphicsContainer,External.Drawing.XRect,External.Drawing.XRect,External.Drawing.XGraphicsUnit)">
            <summary>
            
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.EndContainer(External.Drawing.XGraphicsContainer)">
            <summary>
            
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.SetPageTransform(External.Drawing.XPageDirection,External.Drawing.XPoint,External.Drawing.XGraphicsUnit)">
            <summary>
            Sets all values that influence the page transformation.
            </summary>
        </member>
        <member name="M:External.Drawing.IXGraphicsRenderer.WriteComment(System.String)">
            <summary>
            Writes a comment to the output stream. Comments have no effect on the rendering of the output.
            </summary>
        </member>
        <member name="P:External.Drawing.IXGraphicsRenderer.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="T:External.Drawing.XPdfFontOptions">
            <summary>
            Specifies details about how the font is used in PDF creation.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfFontOptions.#ctor(External.Pdf.PdfFontEncoding,External.Pdf.PdfFontEmbedding)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfFontOptions.#ctor(External.Pdf.PdfFontEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfFontOptions.#ctor(External.Pdf.PdfFontEmbedding)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfFontOptions.FontEmbedding">
            <summary>
            Gets a value indicating the font embedding.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfFontOptions.FontEncoding">
            <summary>
            Gets a value indicating how the font is encoded.
            </summary>
        </member>
        <member name="T:External.Drawing.XBrush">
            <summary>
            Classes derived from this abstract base class define objects used to fill the 
            interiors of paths.
            </summary>
        </member>
        <member name="T:External.Drawing.XBrushes">
            <summary>
            Brushes for all the pre-defined colors.
            </summary>
        </member>
        <member name="P:External.Drawing.XBrushes.AliceBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.AntiqueWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Aqua">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Aquamarine">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Azure">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Beige">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Bisque">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Black">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.BlanchedAlmond">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Blue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.BlueViolet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Brown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.BurlyWood">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.CadetBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Chartreuse">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Chocolate">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Coral">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.CornflowerBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Cornsilk">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Crimson">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Cyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkCyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkGoldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkKhaki">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkMagenta">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkOliveGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkOrange">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkOrchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkSalmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkSlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkSlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DarkViolet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DeepPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DeepSkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DimGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.DodgerBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Firebrick">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.FloralWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.ForestGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Fuchsia">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Gainsboro">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.GhostWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Gold">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Goldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Gray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Green">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.GreenYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Honeydew">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.HotPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.IndianRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Indigo">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Ivory">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Khaki">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Lavender">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LavenderBlush">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LawnGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LemonChiffon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightCoral">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightCyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightGoldenrodYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightSalmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightSkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightSlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightSteelBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LightYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Lime">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.LimeGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Linen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Magenta">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Maroon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumAquamarine">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumOrchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumPurple">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumSlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumSpringGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MediumVioletRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MidnightBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MintCream">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.MistyRose">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Moccasin">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.NavajoWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Navy">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.OldLace">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Olive">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.OliveDrab">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Orange">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.OrangeRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Orchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PaleGoldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PaleGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PaleTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PaleVioletRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PapayaWhip">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PeachPuff">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Peru">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Pink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Plum">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.PowderBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Purple">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Red">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.RosyBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.RoyalBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SaddleBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Salmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SandyBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SeaShell">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Sienna">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Silver">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Snow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SpringGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.SteelBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Tan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Teal">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Thistle">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Tomato">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Transparent">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Turquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Violet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Wheat">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.White">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.WhiteSmoke">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.Yellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:External.Drawing.XBrushes.YellowGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="T:External.Drawing.XColor">
            <summary>
             Represents a RGB, CMYK, or gray scale color.
             </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Int32)">
            <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.UInt32)">
            <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an XColor structure from the specified 8-bit color values (red, green, and blue).
            The alpha value is implicitly 255 (fully opaque).
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an XColor structure from the four ARGB component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Windows.Media.Color)">
            <summary>
            Creates an XColor structure from the specified System.Drawing.Color.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Int32,External.Drawing.XColor)">
            <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromArgb(System.Int32,System.Windows.Media.Color)">
            <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromGrayScale(System.Double)">
            <summary>
            Creates an XColor structure from the specified gray value.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromKnownColor(External.Drawing.XKnownColor)">
            <summary>
            Creates an XColor from the specified pre-defined color.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.FromName(System.String)">
            <summary>
            Creates an XColor from the specified name of a pre-defined color.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.ToWpfColor">
            <summary>
             Creates a System.Windows.Media.Color object from this color.
             </summary>
        </member>
        <member name="M:External.Drawing.XColor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is a Color structure and is equivalent to this 
            Color structure.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.op_Equality(External.Drawing.XColor,External.Drawing.XColor)">
            <summary>
            Determines whether two colors are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.op_Inequality(External.Drawing.XColor,External.Drawing.XColor)">
            <summary>
            Determines whether two colors are not equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XColor.GetHue">
            <summary>
            Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this color.
            </summary>
            <returns>The hue, in degrees, of this color. The hue is measured in degrees, ranging from 0 through 360, in HSB color space.</returns>
        </member>
        <member name="M:External.Drawing.XColor.GetSaturation">
            <summary>
            Gets the hue-saturation-brightness (HSB) saturation value for this color.
            </summary>
            <returns>The saturation of this color. The saturation ranges from 0 through 1, where 0 is grayscale and 1 is the most saturated.</returns>
        </member>
        <member name="M:External.Drawing.XColor.GetBrightness">
            <summary>
            Gets the hue-saturation-brightness (HSB) brightness value for this color.
            </summary>
            <returns>The brightness of this color. The brightness ranges from 0 through 1, where 0 represents black and 1 represents white.</returns>
        </member>
        <member name="M:External.Drawing.XColor.RgbChanged">
            <summary>
             One of the RGB values changed; recalculate other color representations.
             </summary>
        </member>
        <member name="M:External.Drawing.XColor.CmykChanged">
            <summary>
             One of the CMYK values changed; recalculate other color representations.
             </summary>
        </member>
        <member name="M:External.Drawing.XColor.GrayChanged">
            <summary>
             The gray scale value changed; recalculate other color representations.
             </summary>
        </member>
        <member name="F:External.Drawing.XColor.Empty">
            <summary>
            Represents the null color.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.ColorSpace">
            <summary>
            Gets or sets the color space to be used for PDF generation.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.IsEmpty">
            <summary>
            Indicates whether this XColor structure is uninitialized.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.IsKnownColor">
            <summary>
            Gets a value indicating whether this color is a known color.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.A">
            <summary>
            Gets or sets the alpha value the specifies the transparency. 
            The value is in the range from 1 (opaque) to 0 (completely transparent).
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.R">
            <summary>
            Gets or sets the red value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.G">
            <summary>
            Gets or sets the green value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.B">
            <summary>
            Gets or sets the blue value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.Rgb">
            <summary>
            Gets the RGB part value of the color. Internal helper function.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.Argb">
            <summary>
            Gets the ARGB part value of the color. Internal helper function.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.C">
            <summary>
            Gets or sets the cyan value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.M">
            <summary>
            Gets or sets the magenta value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.Y">
            <summary>
            Gets or sets the yellow value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.K">
            <summary>
            Gets or sets the black (or key) value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.GS">
            <summary>
            Gets or sets the gray scale value.
            </summary>
        </member>
        <member name="P:External.Drawing.XColor.RgbCmykG">
            <summary>
             Special property for XmlSerializer only.
             </summary>
        </member>
        <member name="T:External.Drawing.XColors">
            <summary>
             Represents a set of 141 pre-defined RGB colors. Incidentally the values are the same
             as in System.Drawing.Color.
             </summary>
        </member>
        <member name="P:External.Drawing.XColors.AliceBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.AntiqueWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Aqua">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Aquamarine">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Azure">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Beige">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Bisque">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Black">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.BlanchedAlmond">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Blue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.BlueViolet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Brown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.BurlyWood">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.CadetBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Chartreuse">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Chocolate">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Coral">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.CornflowerBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Cornsilk">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Crimson">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Cyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkCyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkGoldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkKhaki">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkMagenta">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkOliveGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkOrange">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkOrchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkSalmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkSlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkSlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DarkViolet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DeepPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DeepSkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DimGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.DodgerBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Firebrick">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.FloralWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.ForestGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Fuchsia">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Gainsboro">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.GhostWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Gold">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Goldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Gray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Green">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.GreenYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Honeydew">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.HotPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.IndianRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Indigo">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Ivory">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Khaki">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Lavender">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LavenderBlush">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LawnGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LemonChiffon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightCoral">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightCyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightGoldenrodYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightSalmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightSkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightSlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightSteelBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LightYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Lime">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.LimeGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Linen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Magenta">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Maroon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumAquamarine">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumOrchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumPurple">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumSlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumSpringGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MediumVioletRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MidnightBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MintCream">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.MistyRose">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Moccasin">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.NavajoWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Navy">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.OldLace">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Olive">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.OliveDrab">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Orange">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.OrangeRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Orchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PaleGoldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PaleGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PaleTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PaleVioletRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PapayaWhip">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PeachPuff">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Peru">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Pink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Plum">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.PowderBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Purple">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Red">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.RosyBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.RoyalBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SaddleBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Salmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SandyBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SeaShell">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Sienna">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Silver">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Snow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SpringGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.SteelBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Tan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Teal">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Thistle">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Tomato">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Transparent">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Turquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Violet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Wheat">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.White">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.WhiteSmoke">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.Yellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:External.Drawing.XColors.YellowGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="T:External.Drawing.XConvert">
            <summary>
            Converts XGraphics enums to GDI+ enums.
            </summary>
        </member>
        <member name="M:External.Drawing.XConvert.ToPenLineJoin(External.Drawing.XLineJoin)">
            <summary>
            Converts XLineJoin to PenLineJoin.
            </summary>
        </member>
        <member name="M:External.Drawing.XConvert.ToPenLineCap(External.Drawing.XLineCap)">
            <summary>
            Converts XLineCap to PenLineCap.
            </summary>
        </member>
        <member name="T:External.Drawing.XFont">
            <summary>
            Defines an object used to draw text.
            </summary>
        </member>
        <member name="P:External.Drawing.XFont.Name">
            <summary>
            Gets the face name of this Font object.
            </summary>
        </member>
        <member name="P:External.Drawing.XFont.Size">
            <summary>
            Gets the em-size of this Font object measured in the unit of this Font object.
            </summary>
        </member>
        <member name="P:External.Drawing.XFont.Style">
            <summary>
            Gets style information for this Font object.
            </summary>
        </member>
        <member name="P:External.Drawing.XFont.PdfOptions">
            <summary>
            Gets the PDF options of the font.
            </summary>
        </member>
        <member name="P:External.Drawing.XFont.Unicode">
            <summary>
            Indicates whether this XFont is encoded as Unicode.
            </summary>
        </member>
        <member name="T:External.Drawing.XFontStretch">
            <summary>
            NYI. Reserved for future extensions.
            </summary>
        </member>
        <member name="T:External.Drawing.XFontWeight">
            <summary>
            Defines the density of a typeface, in terms of the lightness or heaviness of the strokes.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.Compare(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Compares the specified font weights.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_LessThan(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator &lt;.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_LessThanOrEqual(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator &lt;=.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_GreaterThan(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator &gt;.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_GreaterThanOrEqual(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator &gt;=.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_Equality(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.op_Inequality(External.Drawing.XFontWeight,External.Drawing.XFontWeight)">
            <summary>
            Implements the operator !=.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.Equals(External.Drawing.XFontWeight)">
            <summary>
            Determines whether the specified <see cref="T:External.Drawing.XFontWeight"/> is equal to the current <see cref="T:External.Drawing.XFontWeight"/>.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:External.Drawing.XFontWeight.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeight.Weight">
            <summary>
            Gets the weight of the font, a value between 1 and 999.
            </summary>
        </member>
        <member name="T:External.Drawing.XFontWeights">
            <summary>
            Defines a set of static predefined XFontWeight values.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Thin">
            <summary>
            Specifies a "Thin" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.ExtraLight">
            <summary>
            Specifies a "ExtraLight" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.UltraLight">
            <summary>
            Specifies a "UltraLight" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Light">
            <summary>
            Specifies a "Light" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Normal">
            <summary>
            Specifies a "Normal" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Regular">
            <summary>
            Specifies a "Regular" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Medium">
            <summary>
            Specifies a "Medium" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.SemiBold">
            <summary>
            Specifies a "SemiBold" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.DemiBold">
            <summary>
            Specifies a "DemiBold" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Bold">
            <summary>
            Specifies a "Bold" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.ExtraBold">
            <summary>
            Specifies a "ExtraBold" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.UltraBold">
            <summary>
            Specifies a "UltraBold" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Heavy">
            <summary>
            Specifies a "Heavy" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.Black">
            <summary>
            Specifies a "Black" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.ExtraBlack">
            <summary>
            Specifies a "ExtraBlack" font weight.
            </summary>
        </member>
        <member name="P:External.Drawing.XFontWeights.UltraBlack">
            <summary>
            Specifies a "UltraBlack" font weight.
            </summary>
        </member>
        <member name="T:External.Drawing.XForm">
            <summary>
            Represents a graphical object that can be used to render retained graphics on it.
            In GDI+ it is represented by a Metafile, in WPF by a DrawingVisual, and in PDF by a Form XObjects.
            </summary>
        </member>
        <member name="T:External.Drawing.XImage">
            <summary>
            Defines an object used to draw image files (bmp, png, jpeg, gif) and PDF forms.
            An abstract base class that provides functionality for the Bitmap and Metafile descended classes.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XImage"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.#ctor(System.Windows.Media.Imaging.BitmapSource,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XImage"/> class from a WPF image.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.FromBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.IO.MemoryStream,System.Boolean)">
            <summary>
            Conversion from BitmapSource to XImage.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.FromFile(System.String)">
            <summary>
            Creates an image from the specified file.
            </summary>
            <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
        </member>
        <member name="M:External.Drawing.XImage.ExistsFile(System.String)">
            <summary>
            Tests if a file exist. Supports PDF files with page number suffix.
            </summary>
            <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
        </member>
        <member name="M:External.Drawing.XImage.GetImageFilename(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Gets the image filename.
            </summary>
            <param name="bitmapSource">The bitmap source.</param>
        </member>
        <member name="M:External.Drawing.XImage.TestJpeg(System.String)">
            <summary>
            Tests if a file is a JPEG.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:External.Drawing.XImage.ReadJpegFile(System.String,System.Int32,System.Byte[]@)">
            <summary>
            Reads the JPEG file.
            </summary>
            <param name="filename">The filename.</param>
            <param name="maxRead">The maximum count of bytes to be read.</param>
            <param name="imageBits">The bytes read from the file.</param>
            <returns>False, if file could not be read or is not a JPEG file.</returns>
        </member>
        <member name="M:External.Drawing.XImage.Dispose">
            <summary>
            Under construction
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.Dispose(System.Boolean)">
            <summary>
            Disposes underlying GDI+ object.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.InitializeJpegQuickTest">
            <summary>
            Determines if an image is JPEG w/o creating an Image object.
            </summary>
        </member>
        <member name="M:External.Drawing.XImage.InitializeGdiHelper">
            <summary>
            Initializes the GDI helper.
            We use GDI+ to detect if image is JPEG.
            If so, we also determine if it's CMYK and we read the image bytes.
            </summary>
        </member>
        <member name="F:External.Drawing.XImage.path">
            <summary>
            If path starts with '*' the image is created from a stream and the path is a GUID.
            </summary>
        </member>
        <member name="F:External.Drawing.XImage.selector">
            <summary>
            Cache PdfImageTable.ImageSelector to speed up finding the right PdfImage
            if this image is used more than once.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.PointWidth">
            <summary>
            Gets the width of the image in point.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.PointHeight">
            <summary>
            Gets the height of the image in point.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.PixelWidth">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.PixelHeight">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.Size">
            <summary>
            Gets the size in point of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.VerticalResolution">
            <summary>
            Gets the vertical resolution of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.Interpolate">
            <summary>
            Gets or sets a flag indicating whether image interpolation is to be performed. 
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.Format">
            <summary>
            Gets the format of the image.
            </summary>
        </member>
        <member name="P:External.Drawing.XImage.IsJpeg">
            <summary>
            Gets a value indicating whether this image is JPEG.
            </summary>
            <value><c>true</c> if this image is JPEG; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:External.Drawing.XImage.IsCmyk">
            <summary>
            Gets a value indicating whether this image is cmyk.
            </summary>
            <value><c>true</c> if this image is cmyk; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:External.Drawing.XImage.Memory">
            <summary>
            Gets the JPEG memory stream (if IsJpeg returns true).
            </summary>
            <value>The memory.</value>
        </member>
        <member name="M:External.Drawing.XForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XForm"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.#ctor(External.Pdf.PdfDocument,External.Drawing.XRect)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="viewBox">The view box of the page.</param>
        </member>
        <member name="M:External.Drawing.XForm.#ctor(External.Pdf.PdfDocument,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="size">The size of the page.</param>
        </member>
        <member name="M:External.Drawing.XForm.#ctor(External.Pdf.PdfDocument,External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page</param>
        </member>
        <member name="M:External.Drawing.XForm.DrawingFinished">
            <summary>
            This function should be called when drawing the content of this form is finished.
            The XGraphics object used for drawing the content is disposed by this function and 
            cannot be used for any further drawing operations.
            This function is automatically called when this form is used the first time in a DrawImage function. 
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.AssociateGraphics(External.Drawing.XGraphics)">
            <summary>
            Called from XGraphics constructor that creates an instance that work on this form.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.Finish">
            <summary>
            Sets the form in the state FormState.Finished.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.GetFontName(External.Drawing.XFont,External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this form.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.TryGetFontName(System.String,External.Pdf.Advanced.PdfFont@)">
            <summary>
            Tries to get the resource name of the specified font data within this form.
            Returns null if no such font exists.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.GetFontName(System.String,System.Byte[],External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this form.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.GetImageName(External.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this form.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.External#Pdf#Advanced#IContentStream#GetImageName(External.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.GetFormName(External.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this form.
            </summary>
        </member>
        <member name="M:External.Drawing.XForm.External#Pdf#Advanced#IContentStream#GetFormName(External.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="F:External.Drawing.XForm.pdfForm">
            <summary>
            The PdfFormXObject gets invalid when PageNumber or transform changed. This is because a modification
            of an XPdfForm must not change objects that are already been drawn.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.Owner">
            <summary>
            Gets the owning document.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.ColorMode">
            <summary>
            Gets the color model used in the underlying PDF document.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.IsTemplate">
            <summary>
            Gets a value indicating whether this instance is a template.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.Width">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.Height">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.PointWidth">
            <summary>
            Get the width in point of this image.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.PointHeight">
            <summary>
            Get the height in point of this image.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.PixelWidth">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.PixelHeight">
            <summary>
            Get the height of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.Size">
            <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.ViewBox">
            <summary>
            Gets the view box of the form.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.HorizontalResolution">
            <summary>
            Gets 72, the horizontal resolution by design of a form object.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.VerticalResolution">
            <summary>
            Gets 72 always, the vertical resolution by design of a form object.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.BoundingBox">
            <summary>
            Gets or sets the bounding box.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.External#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="P:External.Drawing.XForm.IsCmyk">
            <summary>
            Gets a value indicating whether this image is cmyk.
            </summary>
            <value><c>true</c> if this image is cmyk; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:External.Drawing.XForm.Memory">
            <summary>
            Gets the JPEG memory stream (if IsJpeg returns true).
            </summary>
            <value>The memory.</value>
        </member>
        <member name="F:External.Drawing.XForm.FormState.NotATemplate">
            <summary>
            The form is an imported PDF page.
            </summary>
        </member>
        <member name="F:External.Drawing.XForm.FormState.Created">
            <summary>
            The template is just created.
            </summary>
        </member>
        <member name="F:External.Drawing.XForm.FormState.UnderConstruction">
            <summary>
            XGraphics.FromForm() was called.
            </summary>
        </member>
        <member name="F:External.Drawing.XForm.FormState.Finished">
            <summary>
            The form was drawn at least once and is 'frozen' now.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphics">
            <summary>
            Represents a drawing surface (or canvas) for a fixed size page.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.#ctor(External.Pdf.PdfPage,External.Drawing.XGraphicsPdfPageOptions,External.Drawing.XGraphicsUnit,External.Drawing.XPageDirection,External.Fonts.FontDescriptorStock)">
            <summary>
            Initializes a new instance of the XGraphics class for drawing on a PDF page.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.#ctor(External.Drawing.XForm)">
            <summary>
            Initializes a new instance of the XGraphics class used for drawing on a form.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.CreateMeasureContext(External.Drawing.XSize,External.Drawing.XGraphicsUnit,External.Drawing.XPageDirection)">
            <summary>
            Creates the measure context. This is a graphics context created only for querying measures of text.
            Drawing on a measure context has no effect.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.FromDrawingContext(System.Windows.Media.DrawingContext,External.Drawing.XSize,External.Drawing.XGraphicsUnit)">
            <summary>
            Creates a new instance of the XGraphics class from a System.Windows.Media.DrawingContext object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.FromPdfPage(External.Pdf.PdfPage,External.Fonts.FontDescriptorStock)">
            <summary>
            Creates a new instance of the XGraphics class from a External.Pdf.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.FromPdfForm(External.Drawing.XPdfForm)">
            <summary>
            Creates a new instance of the XGraphics class from a External.Pdf.Drawing.XPdfForm object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.FromForm(External.Drawing.XForm)">
            <summary>
            Creates a new instance of the XGraphics class from a External.Pdf.Drawing.XForm object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Initialize">
            <summary>
            Internal setup.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.targetContext">
            <summary>
            A value indicating whether GDI+ or WPF is used as context.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Clear(External.Drawing.XColor)">
            <summary>
            Fills the entire drawing surface with the specified color. The functions works only if
            the current transformation is identity, i.e. the function should be called only immediately
            after the XGraphics object was created.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLine(External.Drawing.XPen,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a line connecting two Point structures.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLine(External.Drawing.XPen,External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Draws a line connecting two XPoint structures.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLine(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLine(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLines(External.Drawing.XPen,System.Windows.Point[])">
            <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLines(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawLines(External.Drawing.XPen,System.Double,System.Double,System.Double[])">
            <summary>
            Draws a series of line segments that connect an array of x and y pairs.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBezier(External.Drawing.XPen,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a Bézier spline defined by four points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBezier(External.Drawing.XPen,External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Draws a Bézier spline defined by four points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBezier(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a Bézier spline defined by four points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBeziers(External.Drawing.XPen,System.Windows.Point[])">
            <summary>
            Draws a series of Bézier splines from an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBeziers(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a series of Bézier splines from an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawCurve(External.Drawing.XPen,System.Windows.Point[])">
            <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawCurve(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawCurve(External.Drawing.XPen,System.Windows.Point[],System.Double)">
            <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawCurve(External.Drawing.XPen,External.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawArc(External.Drawing.XPen,External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawArc(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawArc(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,External.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XBrush,External.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangles(External.Drawing.XPen,External.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangles(External.Drawing.XBrush,External.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRectangles(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,System.Windows.Rect,System.Windows.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XRect,External.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XBrush,System.Windows.Rect,System.Windows.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XBrush,External.Drawing.XRect,External.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Windows.Rect,System.Windows.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect,External.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawRoundedRectangle(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,External.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XBrush,External.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawEllipse(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XPen,System.Windows.Point[])">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XPen,External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPolygon(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XBrush,External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,External.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPie(External.Drawing.XPen,External.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,System.Windows.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,System.Windows.Point[],System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,System.Windows.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,External.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,System.Windows.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,System.Windows.Point[],External.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawClosedCurve(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XPoint[],External.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPath(External.Drawing.XPen,External.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPath(External.Drawing.XBrush,External.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawPath(External.Drawing.XPen,External.Drawing.XBrush,External.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,External.Drawing.XPoint)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,External.Drawing.XPoint,External.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,System.Double,System.Double)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,System.Double,System.Double,External.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,External.Drawing.XRect)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawString(System.String,External.Drawing.XFont,External.Drawing.XBrush,External.Drawing.XRect,External.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MeasureString(System.String,External.Drawing.XFont,External.Drawing.XStringFormat)">
            <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MeasureString(System.String,External.Drawing.XFont)">
            <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,System.Windows.Point)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,External.Drawing.XPoint)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,System.Int32,System.Int32)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,System.Double,System.Double)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,External.Drawing.XRect)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawImage(External.Drawing.XImage,External.Drawing.XRect,External.Drawing.XRect,External.Drawing.XGraphicsUnit)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.CheckXPdfFormConsistence(External.Drawing.XImage)">
            <summary>
            Checks whether drawing is allowed and disposes the XGraphics object, if necessary.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBarCode(External.Drawing.BarCodes.BarCode,External.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBarCode(External.Drawing.BarCodes.BarCode,External.Drawing.XBrush,External.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawBarCode(External.Drawing.BarCodes.BarCode,External.Drawing.XBrush,External.Drawing.XFont,External.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawMatrixCode(External.Drawing.BarCodes.MatrixCode,External.Drawing.XPoint)">
            <summary>
            Draws the specified data matrix code.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.DrawMatrixCode(External.Drawing.BarCodes.MatrixCode,External.Drawing.XBrush,External.Drawing.XPoint)">
            <summary>
            Draws the specified data matrix code.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Save">
            <summary>
            Saves the current state of this XGraphics object and identifies the saved state with the
            returned XGraphicsState object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Restore(External.Drawing.XGraphicsState)">
            <summary>
            Restores the state of this XGraphics object to the state represented by the specified 
            XGraphicsState object.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.Restore">
            <summary>
            Restores the state of this XGraphics object to the state before the most recently call of Save.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.BeginContainer">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.BeginContainer(System.Windows.Rect,System.Windows.Rect,External.Drawing.XGraphicsUnit)">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.BeginContainer(External.Drawing.XRect,External.Drawing.XRect,External.Drawing.XGraphicsUnit)">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.EndContainer(External.Drawing.XGraphicsContainer)">
            <summary>
            Closes the current graphics container and restores the state of this XGraphics 
            to the state saved by a call to the BeginContainer method.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.TranslateTransform(System.Double,System.Double)">
            <summary>
            Applies the specified translation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.TranslateTransform(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified translation operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ScaleTransform(System.Double,System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ScaleTransform(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ScaleTransform(System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ScaleTransform(System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.RotateTransform(System.Double)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.RotateTransform(System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object
            in the specified order. The angle unit of measure is degree.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.RotateAtTransform(System.Double,External.Drawing.XPoint)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.RotateAtTransform(System.Double,External.Drawing.XPoint,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ShearTransform(System.Double,System.Double)">
            <summary>
            Applies the specified shearing operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ShearTransform(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified shearing operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MultiplyTransform(External.Drawing.XMatrix)">
            <summary>
            Multiplies the transformation matrix of this object and specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MultiplyTransform(External.Drawing.XMatrix,External.Drawing.XMatrixOrder)">
            <summary>
            Multiplies the transformation matrix of this object and specified matrix in the specified order.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.AddTransform(External.Drawing.XMatrix,External.Drawing.XMatrixOrder)">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ResetTransform">
            <summary>
            Resets the transformation matrix of this object to the identity matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.SetClip(External.Drawing.XRect)">
            <summary>
            Sets the clipping region to the specified rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.SetClip(External.Drawing.XGraphicsPath)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.SetClip(External.Drawing.XRect,External.Drawing.XCombineMode)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.SetClip(External.Drawing.XGraphicsPath,External.Drawing.XCombineMode)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.IntersectClip(External.Drawing.XRect)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.IntersectClip(External.Drawing.XGraphicsPath)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified graphical path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.ResetClip">
            <summary>
            Resets the clip region of this XGraphics to an infinite region, 
            i.e. no clipping takes place.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.WriteComment(System.String)">
            <summary>
            Writes a comment to the output stream. Comments have no effect on the rendering of the output.
            They may be useful to mark a position in a content stream of a PDF document.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MakeXPointArray(System.Windows.Point[])">
            <summary>
            Converts a Point[] into a XPoint[].
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.MakePointArray(External.Drawing.XPoint[])">
            <summary>
            Converts an XPoint[] into a Point[].
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.dv">
            <summary>
            Always defined System.Drawing.Graphics object. Used as 'query context' for PDF pages.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.defaultViewMatrix">
            <summary>
            The transformation matrix from the XGraphics page space to the Graphics world space.
            (The name 'default view matrix' comes from Microsoft OS/2 Presentation Manager. I choose
            this name because I have no better one.)
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.drawGraphics">
            <summary>
            Indicates whether to send drawing operations to this.gfx or this.dc.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.renderer">
            <summary>
            Interface to an (optional) renderer. Currently it is the XGraphicsPdfRenderer, if defined.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.transform">
            <summary>
            The transformation matrix from XGraphics world space to page unit space.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphics.gsStack">
            <summary>
            The graphics state stack.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.MUH">
            <summary>
            Internal hack for External. Will be removed in further releases.
            Unicode support requires a global refactoring of External and will be done in further releases.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.MFEH">
            <summary>
            Internal hack for External. Will be removed in further releases.
            Font embedding support requires a global refactoring of External and will be done in further releases.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.PageUnit">
            <summary>
            Gets or sets the unit of measure used for page coordinates.
            CURRENTLY ONLY POINT IS IMPLEMENTED.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.PageDirection">
            <summary>
            Gets or sets the a value indicating in which direction y-value grow.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.PageOrigin">
            <summary>
            Gets the current page origin. Setting the origin is not yet implemented.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.PageSize">
            <summary>
            Gets the current size of the page.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.GraphicsStateLevel">
            <summary>
            Gets the current graphics state level. The default value is 0. Each call of Save or BeginContainer
            increased and each call of Restore or EndContainer decreased the value by 1.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.SmoothingMode">
            <summary>
            Gets or sets the smoothing mode.
            </summary>
            <value>The smoothing mode.</value>
        </member>
        <member name="P:External.Drawing.XGraphics.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.Internals">
            <summary>
            Permits access to internal data.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.Transformer">
            <summary>
            (Under construction. May change in future versions.)
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphics.PdfPage">
            <summary>
            Gets the PDF page that serves as drawing surface if PDF is rendered, otherwise null.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphics.XGraphicsInternals">
            <summary>
            Provides access to internal data structures of the XGraphics class.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.XGraphicsInternals.SetPdfTz(System.Double)">
            <summary>
            If PDF is rendered, sets the tz value.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphics.SpaceTransformer">
            <summary>
            (This class is under construction.)
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphics.SpaceTransformer.WorldToDefaultPage(External.Drawing.XRect)">
            <summary>
            Gets the smallest rectangle in default page space units that completely encloses the specified rect
            in world space units.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsContainer">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsPath">
            <summary>
            Represents a series of connected lines and curves.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XGraphicsPath"/> class.
            </summary>
        </member>
        <member name="F:External.Drawing.XGraphicsPath.pathGeometry">
            <summary>
            Gets access to underlying WPF path geometry.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLine(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds a line segment to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLine(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLines(System.Windows.Point[])">
            <summary>
            Adds a series of connected line segments to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddLines(External.Drawing.XPoint[])">
            <summary>
            Adds a series of connected line segments to current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBezier(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBezier(External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a cubic Bézier curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBeziers(System.Windows.Point[])">
            <summary>
            Adds a sequence of connected cubic Bézier curves to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddBeziers(External.Drawing.XPoint[])">
            <summary>
            Adds a sequence of connected cubic Bézier curves to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(System.Windows.Point[])">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(External.Drawing.XPoint[])">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(System.Windows.Point[],System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(External.Drawing.XPoint[],System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(System.Windows.Point[],System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddCurve(External.Drawing.XPoint[],System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddArc(External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddArc(External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XSize,System.Double,System.Boolean,System.Windows.Media.SweepDirection)">
            <summary>
            Adds an elliptical arc to the current figure. The arc is specified WPF like.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRectangle(External.Drawing.XRect)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRectangles(External.Drawing.XRect[])">
            <summary>
            Adds a series of rectangles to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRoundedRectangle(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddEllipse(External.Drawing.XRect)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPolygon(System.Windows.Point[])">
            <summary>
            Adds a polygon to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPolygon(External.Drawing.XPoint[])">
            <summary>
            Adds a polygon to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPie(External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPie(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddClosedCurve(System.Windows.Point[])">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddClosedCurve(External.Drawing.XPoint[])">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddClosedCurve(System.Windows.Point[],System.Double)">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddClosedCurve(External.Drawing.XPoint[],System.Double)">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.AddPath(External.Drawing.XGraphicsPath,System.Boolean)">
            <summary>
            Adds the specified path to this path.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.CloseFigure">
            <summary>
            Closes the current figure and starts a new figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.StartFigure">
            <summary>
            Starts a new figure without closing the current figure.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Flatten">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Flatten(External.Drawing.XMatrix)">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Flatten(External.Drawing.XMatrix,System.Double)">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Widen(External.Drawing.XPen)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Widen(External.Drawing.XPen,External.Drawing.XMatrix)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="M:External.Drawing.XGraphicsPath.Widen(External.Drawing.XPen,External.Drawing.XMatrix,System.Double)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphicsPath.CurrentPathFigure">
            <summary>
            Gets the current path figure.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphicsPath.FillMode">
            <summary>
            Gets or sets an XFillMode that determines how the interiors of shapes are filled.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphicsPath.Internals">
            <summary>
            Grants access to internal objects of this class.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsPathInternals">
            <summary>
            Provides access to the internal data structures of XGraphicsPath.
            This class prevents the public interface from pollution with internal functions.
            </summary>
        </member>
        <member name="P:External.Drawing.XGraphicsPathInternals.WpfPath">
            <summary>
            Gets the underlying WPF path geometry object.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsPathItem">
            <summary>
            Represents a segment of a path defined by a type and a set of points.
            </summary>
        </member>
        <member name="T:External.Drawing.XGraphicsState">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="T:External.Drawing.XImageFormat">
            <summary>
            Specifies the format of the image.
            </summary>
        </member>
        <member name="M:External.Drawing.XImageFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:External.Drawing.XImageFormat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Png">
            <summary>
            Gets the Portable Network Graphics (PNG) image format. 
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Gif">
            <summary>
            Gets the Graphics Interchange Format (GIF) image format.
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Jpeg">
            <summary>
            Gets the Joint Photographic Experts Group (JPEG) image format.
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Tiff">
            <summary>
            Gets the Tag Image File Format (TIFF) image format.
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Pdf">
            <summary>
            Gets the Portable Document Format (PDF) image format
            </summary>
        </member>
        <member name="P:External.Drawing.XImageFormat.Icon">
            <summary>
            Gets the Windows icon image format.
            </summary>
        </member>
        <member name="T:External.Drawing.XLinearGradientBrush">
            <summary>
            Defines a Brush with a linear gradient.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.#ctor(System.Windows.Point,System.Windows.Point,External.Drawing.XColor,External.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.#ctor(External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XColor,External.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.#ctor(System.Windows.Rect,External.Drawing.XColor,External.Drawing.XColor,External.Drawing.XLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.#ctor(External.Drawing.XRect,External.Drawing.XColor,External.Drawing.XColor,External.Drawing.XLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double)">
            <summary>
            Translates the brush with the specified offset.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Translates the brush with the specified offset.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double)">
            <summary>
            Scales the brush with the specified scalars.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Scales the brush with the specified scalars.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.RotateTransform(System.Double)">
            <summary>
            Rotates the brush with the specified angle.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.RotateTransform(System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Rotates the brush with the specified angle.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.MultiplyTransform(External.Drawing.XMatrix)">
            <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.MultiplyTransform(External.Drawing.XMatrix,External.Drawing.XMatrixOrder)">
            <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XLinearGradientBrush.ResetTransform">
            <summary>
            Resets the brush transformation matrix with identity matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XLinearGradientBrush.Transform">
            <summary>
            Gets or sets an XMatrix that defines a local geometric transform for this LinearGradientBrush.
            </summary>
        </member>
        <member name="T:External.Drawing.XMatrix">
            <summary>
            Represents a 3-by-3 matrix that represents an affine 2D transformation.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XMatrix struct.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.SetIdentity">
            <summary>
            Sets this matrix into an identity matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.InitIdentity">
            <summary>
            Fixes a bug that XMatrixTypes.Identity is not handled correctly in some cases.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.GetElements">
            <summary>
            Gets an array of double values that represents the elements of this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.op_Multiply(External.Drawing.XMatrix,External.Drawing.XMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Multiply(External.Drawing.XMatrix,External.Drawing.XMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Append(External.Drawing.XMatrix)">
            <summary>
            Appends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Prepend(External.Drawing.XMatrix)">
            <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Multiply(External.Drawing.XMatrix)">
            <summary>
            Appends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.MultiplyPrepend(External.Drawing.XMatrix)">
            <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Multiply(External.Drawing.XMatrix,External.Drawing.XMatrixOrder)">
            <summary>
            Multiplies this matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Translate(System.Double,System.Double)">
            <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.TranslateAppend(System.Double,System.Double)">
            <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.TranslatePrepend(System.Double,System.Double)">
            <summary>
            Prepends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Translate(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Translates the matrix with the specified offsets.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Scale(System.Double,System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScaleAppend(System.Double,System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScalePrepend(System.Double,System.Double)">
            <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Scale(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Scales the matrix with the specified scalars.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Scale(System.Double)">
            <summary>
            Scales the matrix with the specified scalar.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScaleAppend(System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScalePrepend(System.Double)">
            <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Scale(System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Scales the matrix with the specified scalar.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScaleAtAppend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Apppends the specified scale about the specified point of this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prepends the specified scale about the specified point of this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Rotate(System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAppend(System.Double)">
            <summary>
            Appends a rotation of the specified angle to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotatePrepend(System.Double)">
            <summary>
            Prepends a rotation of the specified angle to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Rotate(System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Rotates the matrix with the specified angle.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAt(System.Double,System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAtAppend(System.Double,System.Double,System.Double)">
            <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
            <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAt(System.Double,External.Drawing.XPoint)">
            <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAtAppend(System.Double,External.Drawing.XPoint)">
            <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAtPrepend(System.Double,External.Drawing.XPoint)">
            <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.RotateAt(System.Double,External.Drawing.XPoint,External.Drawing.XMatrixOrder)">
            <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Shear(System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ShearAppend(System.Double,System.Double)">
            <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ShearPrepend(System.Double,System.Double)">
            <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Shear(System.Double,System.Double,External.Drawing.XMatrixOrder)">
            <summary>
            Shears the matrix with the specified scalars.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Skew(System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.SkewAppend(System.Double,System.Double)">
            <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.SkewPrepend(System.Double,System.Double)">
            <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Transform(External.Drawing.XPoint)">
            <summary>
            Transforms the specified point by this matrix and returns the result.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Transform(External.Drawing.XPoint[])">
            <summary>
            Transforms the specified points by this matrix. 
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.TransformPoints(External.Drawing.XPoint[])">
            <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.TransformPoints(System.Windows.Point[])">
            <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Transform(External.Drawing.XVector)">
            <summary>
            Transforms the specified vector by this Matrix and returns the result.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Transform(External.Drawing.XVector[])">
            <summary>
            Transforms the specified vectors by this matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ToWpfMatrix">
            <summary>
            Converts this matrix to a System.Drawing.Drawing2D.Matrix object.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.op_Explicit(External.Drawing.XMatrix)~System.Windows.Media.Matrix">
            <summary>
            Explicitly converts an XMatrix to a Matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.op_Implicit(System.Windows.Media.Matrix)~External.Drawing.XMatrix">
            <summary>
            Implicitly converts a Matrix to an XMatrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.op_Equality(External.Drawing.XMatrix,External.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.op_Inequality(External.Drawing.XMatrix,External.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are not equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Equals(External.Drawing.XMatrix,External.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Equals(System.Object)">
            <summary>
            Determines whether this matrix is equal to the specified object.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Equals(External.Drawing.XMatrix)">
            <summary>
            Determines whether this matrix is equal to the specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.Parse(System.String)">
            <summary>
            Parses a matrix from a string.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ToString">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.ToString(System.IFormatProvider)">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XMatrix.SetMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,External.Drawing.XMatrix.XMatrixTypes)">
            <summary>
            Sets the matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.Identity">
            <summary>
            Gets a value that indicates whether this matrix is an identity matrix. 
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.IsIdentity">
            <summary>
            Gets a value indicating whether this matrix instance is the identity matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.Elements">
            <summary>
            Gets an array of double values that represents the elements of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.Determinant">
            <summary>
            Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.HasInverse">
            <summary>
            Gets a value that indicates whether this matrix is invertible.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.M11">
            <summary>
            Gets or sets the value of the first row and first column of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.M12">
            <summary>
            Gets or sets the value of the first row and second column of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.M21">
            <summary>
            Gets or sets the value of the second row and first column of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.M22">
            <summary>
            Gets or sets the value of the second row and second column of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.OffsetX">
            <summary>
            Gets or sets the value of the third row and first column of this matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XMatrix.OffsetY">
            <summary>
            Gets or sets the value of the third row and second  column of this matrix.
            </summary>
        </member>
        <member name="T:External.Drawing.XMatrix.MatrixHelper">
            <summary>
            Internal matrix helper.
            </summary>
        </member>
        <member name="T:External.Drawing.XPdfForm">
            <summary>
            Represents a so called 'PDF form external object', which is typically an imported page of an external
            PDF document. XPdfForm objects are used like images to draw an existing PDF page of an external
            document in the current document. XPdfForm objects can only be placed in PDF documents. If you try
            to draw them using a XGraphics based on an GDI+ context no action is taken if no placeholder image
            is specified. Otherwise the place holder is drawn.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XPdfForm class from the specified path to an external PDF document.
            Although XPdfForm objects are internally cached, it is recommended to reuse XPdfForm objects
            in your code and change the PageNumber property if more than one page is needed form the external
            document. Furthermore, because XPdfForm can occupy very much memory, it is recommended to
            dispose XPdfForm objects if not needed anymore.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPdfForm"/> class from a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:External.Drawing.XPdfForm.FromFile(System.String)">
            <summary>
            Creates an XPdfForm from a file.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.FromStream(System.IO.Stream)">
            <summary>
            Creates an XPdfForm from a stream.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.Finish">
            <summary>
            Sets the form in the state FormState.Finished.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.Dispose(System.Boolean)">
            <summary>
            Frees the memory occupied by the underlying imported PDF document, even if other XPdfForm objects
            refer to this document. A reuse of this object doesn't fail, because the underlying PDF document
            is re-imported if necessary.
            </summary>
        </member>
        <member name="M:External.Drawing.XPdfForm.ExtractPageNumber(System.String,System.Int32@)">
            <summary>
            Extracts the page number if the path has the form 'MyFile.pdf#123' and returns
            the actual path without the number sign and the following digits.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PlaceHolder">
            <summary>
            Gets or sets an image that is used for drawing if the current XGraphics object cannot handle
            PDF forms. A place holder is useful for showing a preview of a page on the display, because rendering native PDF objects is not supported.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.Page">
            <summary>
            Gets the underlying PdfPage (if one exists).
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PageCount">
            <summary>
            Gets the number of pages in the PDF form.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.Width">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.Height">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PointWidth">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PointHeight">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PixelWidth">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PixelHeight">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.Size">
            <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PageNumber">
            <summary>
            Gets or sets the page number in the external PDF document this object refers to. The page number
            is one-based, i.e. it is in the range from 1 to PageCount. The default value is 1.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.PageIndex">
            <summary>
            Gets or sets the page index in the external PDF document this object refers to. The page index
            is zero-based, i.e. it is in the range from 0 to PageCount - 1. The default value is 0.
            </summary>
        </member>
        <member name="P:External.Drawing.XPdfForm.ExternalDocument">
            <summary>
            Gets the underlying document from which pages are imported.
            </summary>
        </member>
        <member name="T:External.Drawing.XPen">
            <summary>
            Defines an object used to draw lines and curves.
            </summary>
        </member>
        <member name="M:External.Drawing.XPen.#ctor(External.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XPen.#ctor(External.Drawing.XColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XPen.#ctor(External.Drawing.XPen)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XPen.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.LineCap">
            <summary>
            Gets or sets the line cap.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.MiterLimit">
            <summary>
            Gets or sets the miter limit.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.DashStyle">
            <summary>
            Gets or sets the dash style.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.DashOffset">
            <summary>
            Gets or sets the dash offset.
            </summary>
        </member>
        <member name="P:External.Drawing.XPen.DashPattern">
            <summary>
            Gets or sets the dash pattern.
            </summary>
        </member>
        <member name="T:External.Drawing.XPoint">
            <summary>
            Represents a pair of floating point x- and y-coordinates that defines a point
            in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XPoint class with the specified coordinates.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the XPoint class with the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Equality(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Determines whether two points are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Inequality(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Determines whether two points are not equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Equals(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Indicates whether the specified points are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Equals(External.Drawing.XPoint)">
            <summary>
            Indicates whether this instance and a specified point are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Parse(System.String)">
            <summary>
            Parses the point from a string.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.ParsePoints(System.String)">
            <summary>
            Parses an array of points from a string.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.ToPoint">
            <summary>
            Converts this XPoint to a System.Windows.Point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.ToString">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.ToString(System.IFormatProvider)">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.ConvertToString(System.String,System.IFormatProvider)">
            <summary>
            Implements ToString.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Offset(System.Double,System.Double)">
            <summary>
            Offsets the x and y value of this point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Addition(External.Drawing.XPoint,External.Drawing.XVector)">
            <summary>
            Adds a point and a vector.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Addition(External.Drawing.XPoint,External.Drawing.XSize)">
            <summary>
            Adds a point and a size.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Add(External.Drawing.XPoint,External.Drawing.XVector)">
            <summary>
            Adds a point and a vector.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Subtraction(External.Drawing.XPoint,External.Drawing.XVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Subtract(External.Drawing.XPoint,External.Drawing.XVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Subtraction(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Subtracts a point from a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Subtraction(External.Drawing.XPoint,External.Drawing.XSize)">
            <summary>
            Subtracts a size from a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Subtract(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Subtracts a point from a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Multiply(External.Drawing.XPoint,External.Drawing.XMatrix)">
            <summary>
            Multiplies a point with a matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.Multiply(External.Drawing.XPoint,External.Drawing.XMatrix)">
            <summary>
            Multiplies a point with a matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Multiply(External.Drawing.XPoint,System.Double)">
            <summary>
            Multiplies a point with a scalar value.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Multiply(System.Double,External.Drawing.XPoint)">
            <summary>
            Multiplies a point with a scalar value.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Division(External.Drawing.XPoint,System.Double)">
            <summary>
            Divides a point by a scalar value.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Explicit(External.Drawing.XPoint)~External.Drawing.XSize">
            <summary>
            Performs an explicit conversion from XPoint to XSize.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Explicit(External.Drawing.XPoint)~External.Drawing.XVector">
            <summary>
            Performs an explicit conversion from XPoint to XVector.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Implicit(External.Drawing.XPoint)~System.Windows.Point">
            <summary>
            Performs an implicit conversion from XPoint to Point.
            </summary>
        </member>
        <member name="M:External.Drawing.XPoint.op_Implicit(System.Windows.Point)~External.Drawing.XPoint">
            <summary>
            Performs an implicit conversion from Point to XPoint.
            </summary>
        </member>
        <member name="F:External.Drawing.XPoint.Empty">
            <summary>
            For convergence with WPF use new XPoint(), not XPoint.Empty
            </summary>
        </member>
        <member name="P:External.Drawing.XPoint.X">
            <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
        </member>
        <member name="P:External.Drawing.XPoint.Y">
            <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
        </member>
        <member name="P:External.Drawing.XPoint.IsEmpty">
            <summary>
            Indicates whether this XPoint is empty.
            </summary>
        </member>
        <member name="T:External.Drawing.XRect">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(External.Drawing.XPoint,External.Drawing.XVector)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(External.Drawing.XPoint,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(External.Drawing.XSize)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.#ctor(System.Windows.Rect)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rectangle from for straight lines.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.op_Equality(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.op_Inequality(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are not equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Equals(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Equals(External.Drawing.XRect)">
            <summary>
            Determines whether this instance and the specified rect are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Parse(System.String)">
            <summary>
            Parses the rectangle from a string.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.ToString">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.ToString(System.IFormatProvider)">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Contains(External.Drawing.XPoint)">
            <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Contains(System.Double,System.Double)">
            <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Contains(External.Drawing.XRect)">
            <summary>
            Indicates whether the rectangle contains the specified rectangle. 
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.IntersectsWith(External.Drawing.XRect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Intersect(External.Drawing.XRect)">
            <summary>
            Sets current rectangle to the intersection of the current rectangle and the specified rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Intersect(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Returns the intersection of two rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Union(External.Drawing.XRect)">
            <summary>
            Sets current rectangle to the union of the current rectangle and the specified rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Union(External.Drawing.XRect,External.Drawing.XRect)">
            <summary>
            Returns the union of two rectangles.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Union(External.Drawing.XPoint)">
            <summary>
            Sets current rectangle to the union of the current rectangle and the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Union(External.Drawing.XRect,External.Drawing.XPoint)">
            <summary>
            Returns the intersection of a rectangle and a point.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Offset(External.Drawing.XVector)">
            <summary>
            Moves a rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Offset(System.Double,System.Double)">
            <summary>
            Moves a rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Offset(External.Drawing.XRect,External.Drawing.XVector)">
            <summary>
            Returns a rectangle that is offset from the specified rectangle by using the specified vector. 
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Offset(External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Returns a rectangle that is offset from the specified rectangle by using specified horizontal and vertical amounts. 
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.op_Addition(External.Drawing.XRect,External.Drawing.XPoint)">
            <summary>
            Translates the rectangle by adding the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.op_Subtraction(External.Drawing.XRect,External.Drawing.XPoint)">
            <summary>
            Translates the rectangle by subtracting the specified point.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Inflate(External.Drawing.XSize)">
            <summary>
            Expands the rectangle by using the specified Size, in all directions.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Inflate(System.Double,System.Double)">
            <summary>
            Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Inflate(External.Drawing.XRect,External.Drawing.XSize)">
            <summary>
            Returns the rectangle that results from expanding the specified rectangle by the specified Size, in all directions.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Inflate(External.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Transform(External.Drawing.XRect,External.Drawing.XMatrix)">
            <summary>
            Returns the rectangle that results from applying the specified matrix to the specified rectangle.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Transform(External.Drawing.XMatrix)">
            <summary>
            Transforms the rectangle by applying the specified matrix.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.Scale(System.Double,System.Double)">
            <summary>
            Multiplies the size of the current rectangle by the specified x and y values.
            </summary>
        </member>
        <member name="M:External.Drawing.XRect.op_Implicit(System.Windows.Rect)~External.Drawing.XRect">
            <summary>
            Performs an implicit conversion from System.Windows.Rect to XRect.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Empty">
            <summary>
            Gets the empty rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Location">
            <summary>
            Gets or sets the location of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Size">
            <summary>
            Gets or sets the size of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.X">
            <summary>
            Gets or sets the X value of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Y">
            <summary>
            Gets or sets the Y value of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Top">
            <summary>
            Gets the y-axis value of the top side of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Bottom">
            <summary>
            Gets the y-axis value of the bottom side of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.BottomLeft">
            <summary>
            Gets the position of the bottom-left corner of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.BottomRight">
            <summary>
            Gets the position of the bottom-right corner of the rectangle. 
            </summary>
        </member>
        <member name="P:External.Drawing.XRect.Center">
            <summary>
            Gets the center of the rectangle.
            </summary>
        </member>
        <member name="T:External.Drawing.XSize">
            <summary>
            Represents a pair of floating-point numbers, typically the width and height of a
            graphical object.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XPoint class with the specified values.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.#ctor(External.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XSize"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.op_Equality(External.Drawing.XSize,External.Drawing.XSize)">
            <summary>
            Determines whether two size objects are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.op_Inequality(External.Drawing.XSize,External.Drawing.XSize)">
            <summary>
            Determines whether two size objects are not equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.Equals(External.Drawing.XSize,External.Drawing.XSize)">
            <summary>
            Indicates whether this tow instance are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.Equals(External.Drawing.XSize)">
            <summary>
            Indicates whether this instance and a specified size are equal.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.Parse(System.String)">
            <summary>
            Parses the size from a string.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.ToXPoint">
            <summary>
            Converts this XSize to an XPoint.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.ToXVector">
            <summary>
            Converts this XSize to an XVector.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.ToSize">
            <summary>
            Converts this XSize to a System.Windows.Size.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.FromSize(System.Windows.Size)">
            <summary>
            Creates an XSize from a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.ToString">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.ToString(System.IFormatProvider)">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.op_Explicit(External.Drawing.XSize)~External.Drawing.XVector">
            <summary>
            Performs an explicit conversion from XSize to XVector.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.op_Explicit(External.Drawing.XSize)~External.Drawing.XPoint">
            <summary>
            Performs an explicit conversion from XSize to XPoint.
            </summary>
        </member>
        <member name="M:External.Drawing.XSize.op_Explicit(System.Windows.Size)~External.Drawing.XSize">
            <summary>
            Performs an explicit conversion from Size to XSize.
            </summary>
        </member>
        <member name="P:External.Drawing.XSize.Empty">
            <summary>
            Returns an empty size, i.e. a size with a width or height less than 0.
            </summary>
        </member>
        <member name="P:External.Drawing.XSize.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:External.Drawing.XSize.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:External.Drawing.XSize.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="T:External.Drawing.XSolidBrush">
            <summary>
            Defines a single color object used to fill shapes and draw text.
            </summary>
        </member>
        <member name="M:External.Drawing.XSolidBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XSolidBrush.#ctor(External.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:External.Drawing.XSolidBrush.#ctor(External.Drawing.XSolidBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="P:External.Drawing.XSolidBrush.Color">
            <summary>
            Gets or sets the color of this brush.
            </summary>
        </member>
        <member name="T:External.Drawing.XStringFormatFlags">
            <summary>
            Not used in this implementation.
            </summary>
        </member>
        <member name="F:External.Drawing.XStringFormatFlags.MeasureTrailingSpaces">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:External.Drawing.XStringFormat">
            <summary>
            Represents the text layout information.
            </summary>
        </member>
        <member name="M:External.Drawing.XStringFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Drawing.XStringFormat"/> class.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.Alignment">
            <summary>
            Gets or sets horizontal text alignment information.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.LineAlignment">
            <summary>
            Gets or sets the line alignment.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.Default">
            <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.TopLeft">
            <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.Center">
            <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.TopCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.BottomCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormat.FormatFlags">
            <summary>
            Gets or sets flags with format information.
            </summary>
        </member>
        <member name="T:External.Drawing.XStringFormats">
            <summary>
            Represents predefined text layouts.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormats.Default">
            <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormats.TopLeft">
            <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormats.Center">
            <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormats.TopCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
        </member>
        <member name="P:External.Drawing.XStringFormats.BottomCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
        </member>
        <member name="T:External.Drawing.XUnit">
            <summary>
            Represents a value and its unit of measure. The structure converts implicitly from and to
            double with a value measured in point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the XUnit class with type set to point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.ToString(System.IFormatProvider)">
            <summary>
            Returns the object as string using the format information.
            The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the object as string using the specified format and format information.
            The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.ToString">
            <summary>
            Returns the object as string. The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.GetSuffix">
            <summary>
            Returns the unit of measure of the object as a string like 'pt', 'cm', or 'in'.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.FromPoint(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.FromInch(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to inch.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.FromMillimeter(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to millimeters.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.FromCentimeter(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to centimeters.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.FromPresentation(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to Presentation.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.op_Implicit(System.Int32)~External.Drawing.XUnit">
            <summary>
            Converts an int to an XUnit object with type set to point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.op_Implicit(System.Double)~External.Drawing.XUnit">
            <summary>
            Converts a double to an XUnit object with type set to point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.op_Implicit(External.Drawing.XUnit)~System.Double">
            <summary>
            Returns a double value as point.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.op_Equality(External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e5.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.op_Inequality(External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e5.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.Equals(System.Object)">
            <summary>
            Calls base class Equals.
            </summary>
        </member>
        <member name="M:External.Drawing.XUnit.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Value">
            <summary>
            Gets the raw value of the object without any conversion.
            To determine the XGraphicsUnit use property <code>Type</code>.
            To get the value in point use the implicit conversion to double.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Point">
            <summary>
            Gets or sets the value in point.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Inch">
            <summary>
            Gets or sets the value in inch.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Millimeter">
            <summary>
            Gets or sets the value in millimeter.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Centimeter">
            <summary>
            Gets or sets the value in centimeter.
            </summary>
        </member>
        <member name="P:External.Drawing.XUnit.Presentation">
            <summary>
            Gets or sets the value in presentation units (1/96 inch).
            </summary>
        </member>
        <member name="T:External.Drawing.XVector">
            <summary>
            Represents a two-dimensional vector specified by x- and y-coordinates.
            </summary>
        </member>
        <member name="T:External.Fonts.CMapInfo">
            <summary>
            Helper class that determines the characters used in a particular font.
            </summary>
        </member>
        <member name="M:External.Fonts.CMapInfo.AddChars(System.String)">
            <summary>
            Adds the characters of the specified string to the hashtable.
            </summary>
        </member>
        <member name="M:External.Fonts.CMapInfo.AddGlyphIndices(System.String)">
            <summary>
            Adds the glyphIndices to the hashtable.
            </summary>
        </member>
        <member name="M:External.Fonts.CMapInfo.AddAnsiChars">
            <summary>
            Adds a ANSI characters.
            </summary>
        </member>
        <member name="T:External.Fonts.FontDescriptor">
            <summary>
            Base class for all font descriptors.
            </summary>
        </member>
        <member name="T:External.Fonts.FontDescriptorStock">
            <summary>
            Global table of TrueType fontdescriptor objects.
            </summary>
        </member>
        <member name="M:External.Fonts.FontDescriptorStock.FindDescriptor(External.Fonts.FontDescriptorStock.FontSelector)">
            <summary>
            Gets the FontDescriptor identified by the specified FontSelector. Returns null if no
            such objects exists.
            </summary>
        </member>
        <member name="M:External.Fonts.FontDescriptorStock.CreateDescriptor(External.Drawing.XFont)">
            <summary>
            Gets the FontDescriptor identified by the specified FontSelector. If no such objects 
            exists, a new FontDescriptor is created and added to the stock.
            </summary>
        </member>
        <member name="T:External.Fonts.FontDescriptorStock.FontSelector">
            <summary>
            A collection of information that uniquely identifies a particular font.
            Used to map XFont to PdfFont.
            There is a one to one relationship between a FontSelector and a TrueType/OpenType file.
            </summary>
        </member>
        <member name="M:External.Fonts.FontDescriptorStock.FontSelector.ToString">
            <summary>
            Returns a string for diagnostic purposes only.
            </summary>
        </member>
        <member name="T:External.Fonts.FontWriter">
            <summary>
            Represents a writer for generation of font file streams. 
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.FontWriter"/> class.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.Close(System.Boolean)">
            <summary>
            Closes the writer and, if specified, the underlying stream.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.Close">
            <summary>
            Closes the writer and the underlying stream.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteByte(System.Byte)">
            <summary>
            Writes the specified value to the font stream.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteByte(System.Int32)">
            <summary>
            Writes the specified value to the font stream.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteShort(System.Int16)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteShort(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteUShort(System.UInt16)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteUShort(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteInt(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:External.Fonts.FontWriter.WriteUInt(System.UInt32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="P:External.Fonts.FontWriter.Position">
            <summary>
            Gets or sets the position within the stream.
            </summary>
        </member>
        <member name="P:External.Fonts.FontWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.FontTechnology">
            <summary>
            Identifies the technology of an OpenType font file.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontTechnology.PostscriptOutlines">
            <summary>
            Font is Adobe Postscript font in CFF.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontTechnology.TrueTypeOutlines">
            <summary>
            Font is a TrueType font.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontTechnology.TrueTypeCollection">
            <summary>
            Font is a TrueType font collection.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.TableTagNames">
            <summary>
            TrueType font table names.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.CMap">
            <summary>
            Character to glyph mapping.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Head">
            <summary>
            Font header .
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.HHea">
            <summary>
            Horizontal header.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.HMtx">
            <summary>
            Horizontal metrics.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.MaxP">
            <summary>
            Maximum profile.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Name">
            <summary>
            Naming table.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.OS2">
            <summary>
            OS/2 and Windows specific metrics.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Post">
            <summary>
            PostScript information.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Cvt">
            <summary>
            Control Value Table.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Fpgm">
            <summary>
            Font program.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Glyf">
            <summary>
            Glyph data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Loca">
            <summary>
            Index to location.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Prep">
            <summary>
            CVT Program.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Cff">
            <summary>
            PostScript font program (compact font format).
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.VOrg">
            <summary>
            Vertical Origin.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.EBDT">
            <summary>
            Embedded bitmap data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.EBLC">
            <summary>
            Embedded bitmap location data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.EBSC">
            <summary>
            Embedded bitmap scaling data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.BASE">
            <summary>
            Baseline data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.GDEF">
            <summary>
            Glyph definition data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.GPOS">
            <summary>
            Glyph positioning data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.GSUB">
            <summary>
            Glyph substitution data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.JSTF">
            <summary>
            Justification data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.DSIG">
            <summary>
            Digital signature.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Gasp">
            <summary>
            Grid-fitting/Scan-conversion.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Hdmx">
            <summary>
            Horizontal device metrics.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.Kern">
            <summary>
            Kerning.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.LTSH">
            <summary>
            Linear threshold data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.PCLT">
            <summary>
            PCL 5 data.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.VDMX">
            <summary>
            Vertical device metrics.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.VHea">
            <summary>
            Vertical Header.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableTagNames.VMtx">
            <summary>
            Vertical Metrics.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.FontData">
            <summary>
            Represents an Open Type Font font in memory.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.#ctor(External.Fonts.OpenType.FontData)">
            <summary>
            Shallow copy for font subset.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.#ctor(External.Drawing.XFont)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.FontData"/> class.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.FontData"/> class.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.tableDictionary">
            <summary>
            The dictionary of all font tables.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.AddTable(External.Fonts.OpenType.OpenTypeFontTable)">
            <summary>
            Adds the specified table to this font image.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.Read">
            <summary>
            Reads all required tables from the font data.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.CreateFontSubSet(System.Collections.Generic.Dictionary{System.Int32,System.Object},System.Boolean)">
            <summary>
            Creates a new font image that is a subset of this font image containing only the specified glyphs.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.Compile">
            <summary>
            Compiles the font to its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadByte">
            <summary>
            Reads a System.Byte.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadShort">
            <summary>
            Reads a System.Int16.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadUShort">
            <summary>
            Reads a System.UInt16.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadLong">
            <summary>
            Reads a System.Int32.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadULong">
            <summary>
            Reads a System.UInt32.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadFixed">
            <summary>
            Reads a System.Int32.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadFWord">
            <summary>
            Reads a System.Int16.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadUFWord">
            <summary>
            Reads a System.UInt16.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadLongDate">
            <summary>
            Reads a System.Int64.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadString(System.Int32)">
            <summary>
            Reads a System.String with the specified size.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadBytes(System.Int32)">
            <summary>
            Reads a System.Byte[] with the specified size.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.Read(System.Byte[])">
            <summary>
            Reads the specified buffer.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified buffer.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.ReadTag">
            <summary>
            Reads a System.Char[4] as System.String.
            </summary>
        </member>
        <member name="P:External.Fonts.OpenType.FontData.Data">
            <summary>
            Gets the bytes that represents the font data.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.FontData.OffsetTable">
            <summary>
            Represents the font offset table.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.OffsetTable.Version">
            <summary>
            0x00010000 for version 1.0.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.OffsetTable.TableCount">
            <summary>
            Number of tables.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.OffsetTable.SearchRange">
            <summary>
            (Maximum power of 2 ≤ numTables) x 16.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.OffsetTable.EntrySelector">
            <summary>
            Log2(maximum power of 2 ≤ numTables).
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.FontData.OffsetTable.RangeShift">
            <summary>
            NumTables x 16-searchRange.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.FontData.OffsetTable.Write(External.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Writes the offset table.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.GlyphDataTable">
            <summary>
            This table contains information that describes the glyphs in the font in the TrueType outline format.
            Information regarding the rasterizer (scaler) refers to the TrueType rasterizer. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.OpenTypeFontTable">
            <summary>
            Base class for all OpenType fonts.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontTable.Clone">
            <summary>
            Creates a deep copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontTable.PrepareForCompilation">
            <summary>
            When overridden in a derived class, prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontTable.Write(External.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            When overridden in a derived class, converts the font into its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontTable.CalcChecksum(System.Byte[])">
            <summary>
            Calculates the checksum of a table represented by its bytes.
            </summary>
        </member>
        <member name="P:External.Fonts.OpenType.OpenTypeFontTable.FontData">
            <summary>
            Gets the font image the table belongs to.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.Read">
            <summary>
            Converts the bytes in a handy representation
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.GetGlyphData(System.Int32)">
            <summary>
            Gets the data of the specified glyph.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.GetGlyphSize(System.Int32)">
            <summary>
            Gets the size of the byte array that defines the glyph.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.GetOffset(System.Int32)">
            <summary>
            Gets the offset of the specified glyph relative to the first byte of the font image.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.CompleteGlyphClosure(System.Collections.Generic.Dictionary{System.Int32,System.Object})">
            <summary>
            Adds for all composite glyphs the glyphs the composite one is made of.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.AddCompositeGlyphs(System.Collections.Generic.Dictionary{System.Int32,System.Object},System.Int32)">
            <summary>
            If the specified glyph is a composite glyph add the glyphs it is made of to the glyph table.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.GlyphDataTable.Write(External.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.IndexToLocationTable">
            <summary>
            The indexToLoc table stores the offsets to the locations of the glyphs in the font,
            relative to the beginning of the glyphData table. In order to compute the length of
            the last glyph element, there is an extra entry after the last valid index. 
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.IndexToLocationTable.Read">
            <summary>
            Converts the bytes in a handy representation
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.IndexToLocationTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.IndexToLocationTable.Write(External.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.IRefFontTable">
            <summary>
            Represents an indirect reference to an existing font table in a font image.
            Used to create binary copies of an existing font table that is not modified.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.IRefFontTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.IRefFontTable.Write(External.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.OpenTypeDescriptor">
            <summary>
            The OpenType font descriptor.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeDescriptor.CharCodeToGlyphIndex(System.Char)">
            <summary>
            Maps a unicode to the index of the corresponding glyph.
            See OpenType spec "cmap - Character To Glyph Index Mapping Table / Format 4: Segment mapping to delta values"
            for details about this a little bit strange looking algorithm.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeDescriptor.GlyphIndexToPdfWidth(System.Int32)">
            <summary>
            Converts the width of a glyph identified by its index to PDF design units.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeDescriptor.GlyphIndexToWidth(System.Int32)">
            <summary>
              //Converts the width of a glyph identified by its index to PDF design units.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.OpenTypeFontWriter">
            <summary>
            Represents a writer for True Type font files. 
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.OpenTypeFontWriter"/> class.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.OpenTypeFontWriter.WriteTag(System.String)">
            <summary>
            Writes a table name.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.WinEncodingId">
            <summary>
            Only Symbol and Unicode is used.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.CMap4">
            <summary>
            CMap format 4: Segment mapping to delta values.
            The Windows standard format.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.CMapTable">
            <summary>
            This table defines the mapping of character codes to the glyph index values used in the font.
            It may contain more than one subtable, in order to support more than one character encoding scheme.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.CMapTable.symbol">
            <summary>
            Is true for symbol font encoding.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.CMapTable.#ctor(External.Fonts.OpenType.FontData)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.CMapTable"/> class.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.FontHeaderTable">
            <summary>
            This table gives global information about the font. The bounding box values should be computed using 
            only glyphs that have contours. Glyphs with no contours should be ignored for the purposes of these calculations.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.HorizontalHeaderTable">
            <summary>
            This table contains information for horizontal layout. The values in the minRightSidebearing, 
            minLeftSideBearing and xMaxExtent should be computed using only glyphs that have contours.
            Glyphs with no contours should be ignored for the purposes of these calculations.
            All reserved areas must be set to 0. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.HorizontalMetricsTable">
            <summary>
            The type longHorMetric is defined as an array where each element has two parts:
            the advance width, which is of type USHORT, and the left side bearing, which is of type SHORT.
            These fields are in font design units.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.VerticalMetricsTable">
            <summary>
            The vertical metrics table allows you to specify the vertical spacing for each glyph in a
            vertical font. This table consists of either one or two arrays that contain metric
            information (the advance heights and top sidebearings) for the vertical layout of each
            of the glyphs in the font.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.MaximumProfileTable">
            <summary>
            This table establishes the memory requirements for this font.
            Fonts with CFF data must use Version 0.5 of this table, specifying only the numGlyphs field.
            Fonts with TrueType outlines must use Version 1.0 of this table, where all data is required.
            Both formats of OpenType require a 'maxp' table because a number of applications call the 
            Windows GetFontData() API on the 'maxp' table to determine the number of glyphs in the font.
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.NameTable">
             <summary>
             The naming table allows multilingual strings to be associated with the OpenTypeTM font file.
             These strings can represent copyright notices, font names, family names, style names, and so on.
             To keep this table short, the font manufacturer may wish to make a limited set of entries in some
             small set of languages; later, the font can be "localized" and the strings translated or added.
             Other parts of the OpenType font file that require these strings can then refer to them simply by
             their index number. Clients that need a particular string can look it up by its platform ID, character
             encoding ID, language ID and name ID. Note that some platforms may require single byte character
             strings, while others may require double byte strings. 
            
             For historical reasons, some applications which install fonts perform version control using Macintosh
             platform (platform ID 1) strings from the 'name' table. Because of this, we strongly recommend that
             the 'name' table of all fonts include Macintosh platform strings and that the syntax of the version
             number (name id 5) follows the guidelines given in this document.
             </summary>
        </member>
        <member name="T:External.Fonts.OpenType.OS2Table">
            <summary>
            The OS/2 table consists of a set of metrics that are required in OpenType fonts. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.PostScriptTable">
            <summary>
            This table contains additional information needed to use TrueType or OpenTypeTM fonts
            on PostScript printers. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.ControlValueTable">
            <summary>
            This table contains a list of values that can be referenced by instructions.
            They can be used, among other things, to control characteristics for different glyphs.
            The length of the table must be an integral number of FWORD units. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.FontProgram">
            <summary>
            This table is similar to the CVT Program, except that it is only run once, when the font is first used.
            It is used only for FDEFs and IDEFs. Thus the CVT Program need not contain function definitions.
            However, the CVT Program may redefine existing FDEFs or IDEFs. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.ControlValueProgram">
            <summary>
            The Control Value Program consists of a set of TrueType instructions that will be executed whenever the font or 
            point size or transformation matrix change and before each glyph is interpreted. Any instruction is legal in the
            CVT Program but since no glyph is associated with it, instructions intended to move points within a particular
            glyph outline cannot be used in the CVT Program. The name 'prep' is anachronistic. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.GlyphSubstitutionTable">
            <summary>
            This table contains information that describes the glyphs in the font in the TrueType outline format.
            Information regarding the rasterizer (scaler) refers to the TrueType rasterizer. 
            </summary>
        </member>
        <member name="T:External.Fonts.OpenType.TableDirectoryEntry">
            <summary>
            Represents an entry in the fonts table dictionary.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.TableDirectoryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.TableDirectoryEntry"/> class.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.TableDirectoryEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Fonts.OpenType.TableDirectoryEntry"/> class.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableDirectoryEntry.Tag">
            <summary>
            4 -byte identifier.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableDirectoryEntry.CheckSum">
            <summary>
            CheckSum for this table.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableDirectoryEntry.Offset">
            <summary>
            Offset from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableDirectoryEntry.Length">
            <summary>
            Actual length of this table in bytes.
            </summary>
        </member>
        <member name="F:External.Fonts.OpenType.TableDirectoryEntry.FontTable">
            <summary>
            Associated font table.
            </summary>
        </member>
        <member name="M:External.Fonts.OpenType.TableDirectoryEntry.ReadFrom(External.Fonts.OpenType.FontData)">
            <summary>
            Creates and reads a TableDirectoryEntry from the font image.
            </summary>
        </member>
        <member name="P:External.Fonts.OpenType.TableDirectoryEntry.PaddedLength">
            <summary>
            Gets the length rounded up to a multiple of four bytes.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroFieldFlags">
            <summary>
            Specifies the flags of AcroForm fields.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.ReadOnly">
            <summary>
            If set, the user may not change the value of the field. Any associated widget
            annotations will not interact with the user; that is, they will not respond to 
            mouse clicks or change their appearance in response to mouse motions. This
            flag is useful for fields whose values are computed or imported from a database.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Required">
            <summary>
            If set, the field must have a value at the time it is exported by a submit-form action.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.NoExport">
            <summary>
            If set, the field must not be exported by a submit-form action.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Pushbutton">
            <summary>
            If set, the field is a pushbutton that does not retain a permanent value.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Radio">
            <summary>
            If set, the field is a set of radio buttons; if clear, the field is a checkbox.
            This flag is meaningful only if the Pushbutton flag is clear.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.NoToggleToOff">
            <summary>
            (Radio buttons only) If set, exactly one radio button must be selected at all times;
            clicking the currently selected button has no effect. If clear, clicking
            the selected button deselects it, leaving no button selected.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Multiline">
            <summary>
            If set, the field may contain multiple lines of text; if clear, the field’s text
            is restricted to a single line.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Password">
            <summary>
            If set, the field is intended for entering a secure password that should
            not be echoed visibly to the screen. Characters typed from the keyboard
            should instead be echoed in some unreadable form, such as
            asterisks or bullet characters.
            To protect password confidentiality, viewer applications should never
            store the value of the text field in the PDF file if this flag is set.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.FileSelect">
            <summary>
            (PDF 1.4) If set, the text entered in the field represents the pathname of
            a file whose contents are to be submitted as the value of the field.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckTextField">
            <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.DoNotScroll">
            <summary>
            (PDF 1.4) If set, the field will not scroll (horizontally for single-line
            fields, vertically for multiple-line fields) to accommodate more text
            than will fit within its annotation rectangle. Once the field is full, no
            further text will be accepted.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Combo">
            <summary>
            If set, the field is a combo box; if clear, the field is a list box.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Edit">
            <summary>
            If set, the combo box includes an editable text box as well as a drop list;
            if clear, it includes only a drop list. This flag is meaningful only if the
            Combo flag is set.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.Sort">
            <summary>
            If set, the field’s option items should be sorted alphabetically. This flag is
            intended for use by form authoring tools, not by PDF viewer applications;
            viewers should simply display the options in the order in which they occur 
            in the Opt array.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.MultiSelect">
            <summary>
            (PDF 1.4) If set, more than one of the field’s option items may be selected
            simultaneously; if clear, no more than one item at a time may be selected.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckChoiseField">
            <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            This flag is meaningful only if the Combo and Edit flags are both set.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroField">
            <summary>
            Represents the base class for all interactive field dictionaries.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDictionary">
            <summary>
            Represents a PDF dictionary object.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfObject">
            <summary>
            Base class of all composite PDF objects.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfItem">
            <summary>
            The base class of all PDF objects and simple types.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfItem.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfItem.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfItem.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            When overridden in a derived class, appends a raw string representation of this object
            to the specified PdfWriter.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.#ctor(External.Pdf.PdfObject)">
            <summary>
            Initializes a new instance from an existing object. Used for object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.Clone">
            <summary>
            Creates a copy of this object. The clone does not belong to a document, i.e. its owner and its iref are null.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.SetObjectID(System.Int32,System.Int32)">
            <summary>
            Sets the object and generation number
            Setting the object identifier makes this object an indirect object, i.e. the object gets
            a PdfReference entry in the PdfReferenceTable.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.PrepareForSave">
            <summary>
            When overridden in a derived class, prepares the object to get saved.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Saves the stream position. 2nd Edition.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObject.DeepCopyClosure(External.Pdf.PdfDocument,External.Pdf.PdfObject)">
            <param name="owner">The document that owns the cloned objects.</param>
            <param name="externalObject">The root object to be cloned.</param>
            <returns>The clone of the root object</returns>
        </member>
        <member name="M:External.Pdf.PdfObject.ImportClosure(External.Pdf.Advanced.PdfImportedObjectTable,External.Pdf.PdfDocument,External.Pdf.PdfObject)">
            <param name="importedObjectTable">The imported object table of the owner for the external document.</param>
            <param name="owner">The document that owns the cloned objects.</param>
            <param name="externalObject">The root object to be cloned.</param>
            <returns>The clone of the root object</returns>
        </member>
        <member name="M:External.Pdf.PdfObject.FixUpObject(External.Pdf.Advanced.PdfImportedObjectTable,External.Pdf.PdfDocument,External.Pdf.PdfObject)">
            <summary>
            Replace all indirect references to external objects by their cloned counterparts
            owned by the importer document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.Owner">
            <summary>
            Gets the PdfDocument this object belongs to.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.Document">
            <summary>
            Gets or sets the PdfDocument this object belongs to.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.IsIndirect">
            <summary>
            Indicates whether the object is an indirect object.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.Internals">
            <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.ObjectID">
            <summary>
            Gets the object identifier. Returns PdfObjectID.Empty for direct objects.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.GenerationNumber">
            <summary>
            Gets the generation number.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObject.Reference">
            <summary>
            Gets the indirect reference of this object. If the value is null, this object is a direct object.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.elements">
            <summary>
            The elements of the dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDictionary"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDictionary"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfDictionary.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.Clone">
            <summary>
            Creates a copy of this dictionary. Direct values are deep copied. Indirect references are not
            modified.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.Copy">
            <summary>
            This function is useful for importing objects from external documents. The returned object is not
            yet complete. irefs refer to external objects and directed objects are cloned but their document
            property is null. A cloned dictionary or array needs a 'fix-up' to be a valid object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.ToString">
            <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.WriteDictionaryElement(External.Pdf.IO.PdfWriter,External.Pdf.PdfName)">
            <summary>
            Writes a key/value pair of this dictionary. This function is intended to be overridden
            in derived classes.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.WriteDictionaryStream(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the stream of this dictionary. This function is intended to be overridden
            in a derived class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.CreateStream(System.Byte[])">
            <summary>
            Creates the stream of this dictionary and initializes it with the specified byte array.
            The function must not be called if the dictionary already has a stream.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.Elements">
            <summary>
            Gets the hashtable containing the elements of this dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.Stream">
            <summary>
            Gets or sets the PDF stream belonging to this dictionary. Returns null if the dictionary has
            no stream. To create the stream, call the CreateStream function.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.Meta">
            <summary>
            When overridden in a derived class, gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDictionary.DictionaryElements">
            <summary>
            Represents the interface to the elements of a PDF dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Clone">
            <summary>
            Creates a shallow copy of this object. The clone is not owned by a dictionary anymore.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.ChangeOwner(External.Pdf.PdfDictionary)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String,System.Boolean)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets the entry to a direct boolean value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String,System.Boolean)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetInteger(System.String,System.Int32)">
            <summary>
            Sets the entry to a direct integer value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String,System.Boolean)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetReal(System.String,System.Double)">
            <summary>
            Sets the entry to a direct double value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetString(System.String,System.Boolean)">
            <summary>
            Converts the specified value to String.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetString(System.String)">
            <summary>
            Converts the specified value to String.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetString(System.String,System.String)">
            <summary>
            Sets the entry to a direct string value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetName(System.String)">
            <summary>
            Converts the specified value to a name.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetName(System.String,System.String)">
            <summary>
            Sets the specified name value.
            If the value doesn't start with a slash, it is added automatically.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String,System.Boolean)">
            <summary>
            Converts the specified value to PdfRectangle.
            If the value not exists, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String)">
            <summary>
            Converts the specified value to PdfRectangle.
            If the value not exists, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetRectangle(System.String,External.Pdf.PdfRectangle)">
            <summary>
            Sets the entry to a direct rectangle value, represented by an array with four values.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String,System.Boolean)">
            Converts the specified value to XMatrix.
            If the value not exists, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String)">
            Converts the specified value to XMatrix.
            If the value not exists, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetMatrix(System.String,External.Drawing.XMatrix)">
            <summary>
            Sets the entry to a direct matrix value, represented by an array with six values.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetDateTime(System.String,System.DateTime)">
            <summary>
            Converts the specified value to DateTime.
            If the value not exists, the function returns the specified default value.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetDateTime(System.String,System.DateTime)">
            <summary>
            Sets the entry to a direct datetime value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String,External.Pdf.VCF)">
            <summary>
            Gets the value for the specified key. If the value does not exist, it is optionally created.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String)">
            <summary>
            Short cut for GetValue(key, VCF.None).
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetValueType(System.String)">
            <summary>
            Returns the type of the object to be created as value of the specified key.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetValue(System.String,External.Pdf.PdfItem)">
            <summary>
            Sets the entry with the specified value. DON'T USE THIS FUNCTION - IT MAY BE REMOVED.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetIndirectObject(System.String)">
            <summary>
            Returns the indirect object if the value of the specified key is a PdfReference.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetObject(System.String)">
            <summary>
            Gets the PdfObject with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfObject is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetDictionary(System.String)">
            <summary>
            Gets the PdfArray with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfDictionary is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetArray(System.String)">
            <summary>
            Gets the PdfArray with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetReference(System.String)">
            <summary>
            Gets the PdfReference with the specified key, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetObject(System.String,External.Pdf.PdfObject)">
            <summary>
            Sets the entry to the specified object. The object must not be an indirect object,
            otherwise an exception is raised.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.SetReference(System.String,External.Pdf.PdfObject)">
            <summary>
            Sets the entry as a reference to the specified object. The object must be an indirect object,
            otherwise an exception is raised.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Remove(System.Collections.Generic.KeyValuePair{System.String,External.Pdf.PdfItem})">
            <summary>
            Removes the value with the specified key.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Contains(System.String)">
            <summary>
            Determines whether the dictionary contains the specified name.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified name.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Contains(System.Collections.Generic.KeyValuePair{System.String,External.Pdf.PdfItem})">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Add(System.String,External.Pdf.PdfItem)">
            <summary>
            Adds the specified value to the dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.Add(System.Collections.Generic.KeyValuePair{System.String,External.Pdf.PdfItem})">
            <summary>
            Adds an item to the dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.TryGetValue(System.String,External.Pdf.PdfItem@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.DictionaryElements.CopyTo(System.Collections.Generic.KeyValuePair{System.String,External.Pdf.PdfItem}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an array, starting at a particular index.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Owner">
            <summary>
            Gets the dictionary that this elements object belongs to.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Item(System.String)">
            <summary>
            Gets or sets an entry in the dictionary. The specified key must be a valid PDF name
            starting with a slash '/'. This property provides full access to the elements of the
            PDF dictionary. Wrong use can lead to errors or corrupt PDF files.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Item(External.Pdf.PdfName)">
            <summary>
            Gets or sets an entry in the dictionary identified by a PdfName object.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.KeyNames">
            <summary>
            Gets all keys currently in use in this dictionary as an array of PdfName objects.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Keys">
            <summary>
            Get all keys currently in use in this dictionary as an array of string objects.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Values">
            <summary>
            Gets all values currently in use in this dictionary as an array of PdfItem objects.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.IsFixedSize">
            <summary>
            Return false.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.IsSynchronized">
            <summary>
            Return false.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.DictionaryElements.SyncRoot">
            <summary>
            The current implementation returns null.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDictionary.PdfStream">
            <summary>
            The PDF stream objects.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.owner">
            <summary>
            The dictionary the stream belongs to.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.#ctor(System.Byte[],External.Pdf.PdfDictionary)">
            <summary>
            A .NET string can contain char(0) as a valid character.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.Clone">
            <summary>
            Clones this stream by creating a deep copy.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.SetOwner(External.Pdf.PdfDictionary)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.TryUnfilter">
            <summary>
            Tries to unfilter the bytes of the stream. If the stream is filtered and PDF component knows the filter
            algorithm, the stream content is replaced by its unfiltered value and the function returns true.
            Otherwise the content remains untouched and the function returns false.
            The function is useful for analyzing existing PDF files.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.Zip">
            <summary>
            Compresses the stream with the FlateDecode filter.
            If a filter is already defined, the function has no effect.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.ToString">
            <summary>
            Returns the stream content as a raw string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDictionary.PdfStream.RawEncode(System.String)">
            <summary>
            Converts a raw encoded string into a byte array.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.PdfStream.Length">
            <summary>
            Gets the length of the stream, i.e. the actual number of bytes in the stream.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.PdfStream.Value">
            <summary>
            Get or sets the bytes of the stream as they are, i.e. if one or more filters exists the bytes are
            not unfiltered.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDictionary.PdfStream.UnfilteredValue">
            <summary>
            Gets the value of the stream unfiltered. The stream content is not modified by this operation.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDictionary.PdfStream.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="T:External.Pdf.KeysBase">
            <summary>
            Base class for all dictionary Keys classes.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.Length">
            <summary>
            (Required) The number of bytes from the beginning of the line following the keyword
            stream to the last byte just before the keyword endstream. (There may be an additional
            EOL marker, preceding endstream, that is not included in the count and is not logically
            part of the stream data.)
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.Filter">
            <summary>
            (Optional) The name of a filter to be applied in processing the stream data found between
            the keywords stream and endstream, or an array of such names. Multiple filters should be
            specified in the order in which they are to be applied.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.DecodeParms">
            <summary>
            (Optional) A parameter dictionary or an array of such dictionaries, used by the filters
            specified by Filter. If there is only one filter and that filter has parameters, DecodeParms
            must be set to the filter’s parameter dictionary unless all the filter’s parameters have
            their default values, in which case the DecodeParms entry may be omitted. If there are 
            multiple filters and any of the filters has parameters set to nondefault values, DecodeParms
            must be an array with one entry for each filter: either the parameter dictionary for that
            filter, or the null object if that filter has no parameters (or if all of its parameters have
            their default values). If none of the filters have parameters, or if all their parameters
            have default values, the DecodeParms entry may be omitted.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.F">
            <summary>
            (Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes
            between stream and endstream are ignored, the filters are specified by FFilter rather than
            Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms.
            However, the Length entry should still specify the number of those bytes. (Usually, there are
            no bytes and Length is 0.)
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.FFilter">
            <summary>
            (Optional; PDF 1.2) The name of a filter to be applied in processing the data found in the
            stream’s external file, or an array of such names. The same rules apply as for Filter.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.FDecodeParms">
            <summary>
            (Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries, used by the
            filters specified by FFilter. The same rules apply as for DecodeParms.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDictionary.PdfStream.Keys.DL">
            <summary>
            Optional; PDF 1.5) A non-negative integer representing the number of bytes in the decoded
            (defiltered) stream. It can be used to determine, for example, whether enough disk space is
            available to write a stream to a file.
            This value should be considered a hint only; for some stream filters, it may not be possible
            to determine this value precisely.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfAcroField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfAcroField.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfAcroField.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.AcroForms.PdfAcroField"/> class. Used for type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfAcroField.GetValue(System.String)">
            <summary>
            Gets a child field by name.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.Name">
            <summary>
            Gets the name of this field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.Flags">
            <summary>
            Gets the field flags of this instance.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the field is read only.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.Item(System.String)">
            <summary>
            Gets the field with the specified name.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.HasKids">
            <summary>
            Indicates whether the field has child fields.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.DescendantNames">
            <summary>
            Gets the names of all descendants of this field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.Fields">
            <summary>
            Gets the collection of fields within this field.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection">
            <summary>
            Holds a collection of interactive fields.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfArray">
            <summary>
            Represents a PDF array object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfArray"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfArray"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfArray.#ctor(External.Pdf.PdfDocument,External.Pdf.PdfItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfArray"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:External.Pdf.PdfArray.#ctor(External.Pdf.PdfArray)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:External.Pdf.PdfArray.Clone">
            <summary>
            Creates a copy of this array. Direct elements are deep copied. Indirect references are not
            modified.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.Copy">
            <summary>
            Implements the copy mechanism.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ToString">
            <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.Elements">
            <summary>
            Gets the collection containing the elements of this object.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfArray.ArrayElements">
            <summary>
            Represents the elements of an PdfArray.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Clone">
            <summary>
            Creates a shallow copy of this object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.SetOwner(External.Pdf.PdfArray)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetBoolean(System.Int32)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetInteger(System.Int32)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetReal(System.Int32)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetString(System.Int32)">
            <summary>
            Converts the specified value to string.
            If the value not exists, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetName(System.Int32)">
            <summary>
            Converts the specified value to a name.
            If the value not exists, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetIndirectObject(System.Int32)">
            <summary>
            Returns the indirect object if the value at the specified index is a PdfReference.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetObject(System.Int32)">
            <summary>
            Gets the PdfObject with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfObject is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetDictionary(System.Int32)">
            <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetArray(System.Int32)">
            <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetReference(System.Int32)">
            <summary>
            Gets the PdfReference with the specified index, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Remove(External.Pdf.PdfItem)">
            <summary>
            Removes the first occurrence of a specific object from the array/>.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Insert(System.Int32,External.Pdf.PdfItem)">
            <summary>
            Inserts the item the specified index.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Contains(External.Pdf.PdfItem)">
            <summary>
            Determines whether the specified value is in the array.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.IndexOf(External.Pdf.PdfItem)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.Add(External.Pdf.PdfItem)">
            <summary>
            Appends the specified object to the array.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.CopyTo(External.Pdf.PdfItem[],System.Int32)">
            <summary>
            Copies the elements of the array to the specified array.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfArray.ArrayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the array.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.Items">
            <summary>
            Gets all items of this array.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.Item(System.Int32)">
            <summary>
            Gets or sets an item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.IsFixedSize">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.IsSynchronized">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.Count">
            <summary>
            Gets the number of elements in the array.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfArray.ArrayElements.SyncRoot">
            <summary>
            The current implementation return null.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.CreateAcroField(External.Pdf.PdfDictionary)">
            <summary>
            Create a derived type like PdfTextField or PdfCheckBox if possible.
            If the actual cannot be guessed, the function returns an instance
            of PdfGenericField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Names">
            <summary>
            Gets the names of all fields in the collection.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.DescendantNames">
            <summary>
            Gets an array of all descendant names.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.Int32)">
            <summary>
            Gets a field from the collection. For your convenience an instance of a derived class like
            PdfTextField or PdfCheckBox is returned if it the actual type of the dictionary can be guessed.
            If the actual type cannot be guessed, the function returns an instance
            of PdfGenericField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.String)">
            <summary>
            Gets the field with the specified name.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.FT">
            <summary>
            (Required for terminal fields; inheritable) The type of field that this dictionary
            describes:
              Btn           Button
              Tx            Text
              Ch            Choice
              Sig (PDF 1.3) Signature
            Note: This entry may be present in a nonterminal field (one whose descendants
            are themselves fields) in order to provide an inheritable FT value. However, a
            nonterminal field does not logically have a type of its own; it is merely a container
            for inheritable attributes that are intended for descendant terminal fields of
            any type.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.Parent">
            <summary>
            (Required if this field is the child of another in the field hierarchy; absent otherwise)
            The field that is the immediate parent of this one (the field, if any, whose Kids array
            includes this field). A field can have at most one parent; that is, it can be included
            in the Kids array of at most one other field.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.Kids">
            <summary>
            (Optional) An array of indirect references to the immediate children of this field.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.T">
            <summary>
            (Optional) The partial field name.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.TU">
            <summary>
            (Optional; PDF 1.3) An alternate field name, to be used in place of the actual
            field name wherever the field must be identified in the user interface (such as
            in error or status messages referring to the field). This text is also useful
            when extracting the document’s contents in support of accessibility to disabled
            users or for other purposes.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.TM">
            <summary>
            (Optional; PDF 1.3) The mapping name to be used when exporting interactive form field 
            data from the document.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.Ff">
            <summary>
            (Optional; inheritable) A set of flags specifying various characteristics of the field.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.V">
            <summary>
            (Optional; inheritable) The field’s value, whose format varies depending on
            the field type; see the descriptions of individual field types for further information.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.DV">
            <summary>
            (Optional; inheritable) The default value to which the field reverts when a
            reset-form action is executed. The format of this value is the same as that of V.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.AA">
            <summary>
            (Optional; PDF 1.2) An additional-actions dictionary defining the field’s behavior
            in response to various trigger events. This entry has exactly the same meaning as
            the AA entry in an annotation dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.DR">
            <summary>
            (Required; inheritable) A resource dictionary containing default resources
            (such as fonts, patterns, or color spaces) to be used by the appearance stream.
            At a minimum, this dictionary must contain a Font entry specifying the resource
            name and font dictionary of the default font for displaying the field’s text.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.DA">
            <summary>
            (Required; inheritable) The default appearance string, containing a sequence of
            valid page-content graphics or text state operators defining such properties as
            the field’s text size and color.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroField.Keys.Q">
            <summary>
            (Optional; inheritable) A code specifying the form of quadding (justification)
            to be used in displaying the text:
              0 Left-justified
              1 Centered
              2 Right-justified
            Default value: 0 (left-justified).
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroForm">
            <summary>
            Represents a interactive form (or AcroForm), a collection of fields for 
            gathering information interactively from the user.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfAcroForm.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of AcroForm.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroForm.Fields">
            <summary>
            Gets the fields collection of this form.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroForm.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfAcroForm.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.Fields">
            <summary>
            (Required) An array of references to the document’s root fields (those with
            no ancestors in the field hierarchy).
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.NeedAppearances">
            <summary>
            (Optional) A flag specifying whether to construct appearance streams and
            appearance dictionaries for all widget annotations in the document.
            Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.SigFlags">
            <summary>
            (Optional; PDF 1.3) A set of flags specifying various document-level characteristics
            related to signature fields.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.CO">
            <summary>
            (Required if any fields in the document have additional-actions dictionaries
            containing a C entry; PDF 1.3) An array of indirect references to field dictionaries
            with calculation actions, defining the calculation order in which their values will 
            be recalculated when the value of any field changes.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.DR">
            <summary>
            (Optional) A document-wide default value for the DR attribute of variable text fields.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.DA">
            <summary>
            (Optional) A document-wide default value for the DA attribute of variable text fields.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfAcroForm.Keys.Q">
            <summary>
            (Optional) A document-wide default value for the Q attribute of variable text fields.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfAcroForm.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfButtonField">
            <summary>
            Represents the base class for all button fields.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfButtonField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.AcroForms.PdfButtonField"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfButtonField.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.AcroForms.PdfButtonField"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfButtonField.GetNonOffValue">
            <summary>
            Gets the name which represents the opposite of /Off.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfCheckBoxField">
            <summary>
            Represents the check box field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfCheckBoxField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfCheckBoxField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfCheckBoxField.Checked">
            <summary>
            Indicates whether the field is checked.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfCheckBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfCheckBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfCheckBoxField.Keys.Opt">
            <summary>
            (Optional; inheritable; PDF 1.4) A text string to be used in place of the V entry for the
            value of the field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfCheckBoxField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfChoiceField">
            <summary>
            Represents the base class for all choice field dictionaries.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfChoiceField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.AcroForms.PdfChoiceField"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfChoiceField.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.AcroForms.PdfChoiceField"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfChoiceField.IndexInOptArray(System.String)">
            <summary>
            Gets the index of the specified string in the /Opt array or -1, if no such string exists.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfChoiceField.ValueInOptArray(System.Int32)">
            <summary>
            Gets the value from the index in the /Opt array.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfChoiceField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfChoiceField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfChoiceField.Keys.Opt">
            <summary>
            (Required; inheritable) An array of options to be presented to the user. Each element of
            the array is either a text string representing one of the available options or a two-element
            array consisting of a text string together with a default appearance string for constructing
            the item’s appearance dynamically at viewing time.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfChoiceField.Keys.TI">
            <summary>
            (Optional; inheritable) For scrollable list boxes, the top index (the index in the Opt array
            of the first option visible in the list).
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfChoiceField.Keys.I">
            <summary>
            (Sometimes required, otherwise optional; inheritable; PDF 1.4) For choice fields that allow
            multiple selection (MultiSelect flag set), an array of integers, sorted in ascending order,
            representing the zero-based indices in the Opt array of the currently selected option
            items. This entry is required when two or more elements in the Opt array have different
            names but the same export value, or when the value of the choice field is an array; in
            other cases, it is permitted but not required. If the items identified by this entry differ
            from those in the V entry of the field dictionary (see below), the V entry takes precedence.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfChoiceField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfComboBoxField">
            <summary>
            Represents the combo box field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfComboBoxField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfComboBoxField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfComboBoxField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfComboBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfComboBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfGenericField">
            <summary>
            Represents a generic field. Used for unknown AcroForm dictionaries.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfGenericField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfGenericField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfGenericField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfGenericField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfListBoxField">
            <summary>
            Represents the list box field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfListBoxField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfListBoxField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfListBoxField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfListBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfListBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfPushButtonField">
            <summary>
            Represents the push button field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfPushButtonField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfPushButtonField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfPushButtonField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfPushButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfRadioButtonField">
            <summary>
            Represents the radio button field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfRadioButtonField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfRadioButtonField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfRadioButtonField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected radio button in a radio button group.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfRadioButtonField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfRadioButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfRadioButtonField.Keys.Opt">
            <summary>
            (Optional; inheritable; PDF 1.4) An array of text strings to be used in
            place of the V entries for the values of the widget annotations representing
            the individual radio buttons. Each element in the array represents
            the export value of the corresponding widget annotation in the
            Kids array of the radio button field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfRadioButtonField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfSignatureField">
            <summary>
            Represents the signature field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfSignatureField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfSignatureField.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfSignatureField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfSignatureField.Keys">
            <summary>
            Predefined keys of this dictionary.
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Sig for a signature dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Filter">
            <summary>
            (Required; inheritable) The name of the signature handler to be used for
            authenticating the field’s contents, such as Adobe.PPKLite, Entrust.PPKEF,
            CICI.SignIt, or VeriSign.PPKVS.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.SubFilter">
            <summary>
            (Optional) The name of a specific submethod of the specified handler.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.ByteRange">
            <summary>
            (Required) An array of pairs of integers (starting byte offset, length in bytes)
            describing the exact byte range for the digest calculation. Multiple discontinuous
            byte ranges may be used to describe a digest that does not include the
            signature token itself.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Contents">
            <summary>
            (Required) The encrypted signature token.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Name">
            <summary>
            (Optional) The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.M">
            <summary>
            (Optional) The time of signing. Depending on the signature handler, this
            may be a normal unverified computer time or a time generated in a verifiable
            way from a secure time server.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Location">
            <summary>
            (Optional) The CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfSignatureField.Keys.Reason">
            <summary>
            (Optional) The reason for the signing, such as (I agree…).
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfSignatureField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfTextField">
            <summary>
            Represents the text field.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfTextField.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfTextField.
            </summary>
        </member>
        <member name="M:External.Pdf.AcroForms.PdfTextField.RenderAppearance">
            <summary>
            Creates the normal appearance form X object for the annotation that represents
            this acro form text field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.Text">
            <summary>
            Gets or sets the text value of the text field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.Font">
            <summary>
            Gets or sets the font used to draw the text of the field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.ForeColor">
            <summary>
            Gets or sets the foreground color of the field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.BackColor">
            <summary>
            Gets or sets the background color of the field.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.MaxLength">
            <summary>
            Gets or sets the maximum length of the field.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.MultiLine">
            <summary>
            Gets or sets a value indicating whether the field has multiple lines.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.Password">
            <summary>
            Gets or sets a value indicating whether this field is used for passwords.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.AcroForms.PdfTextField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:External.Pdf.AcroForms.PdfTextField.Keys.MaxLen">
            <summary>
            (Optional; inheritable) The maximum length of the field’s text, in characters.
            </summary>
        </member>
        <member name="P:External.Pdf.AcroForms.PdfTextField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Actions.PdfNamedActionNames">
            <summary>
            Specifies the predefined PDF actions.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfNamedActionNames.NextPage">
            <summary>
            Go to next page.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfNamedActionNames.PrevPage">
            <summary>
            Go to previous page.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfNamedActionNames.FirstPage">
            <summary>
            Go to first page.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfNamedActionNames.LastPage">
            <summary>
            Go to last page.
            </summary>
        </member>
        <member name="T:External.Pdf.Actions.PdfAction">
            <summary>
            Represents the base class for all PDF actions.
            </summary>
        </member>
        <member name="M:External.Pdf.Actions.PdfAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Actions.PdfAction"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Actions.PdfAction.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Actions.PdfAction"/> class.
            </summary>
            <param name="document">The document that owns this object.</param>
        </member>
        <member name="T:External.Pdf.Actions.PdfAction.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfAction.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Action for an action dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfAction.Keys.S">
            <summary>
            (Required) The type of action that this dictionary describes.
            </summary>
        </member>
        <member name="F:External.Pdf.Actions.PdfAction.Keys.Next">
            <summary>
            (Optional; PDF 1.2) The next action or sequence of actions to be performed
            after the action represented by this dictionary. The value is either a
            single action dictionary or an array of action dictionaries to be performed
            in order; see below for further discussion.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfCatalog">
            <summary>
            Represents the catalog dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfCatalog.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfCatalog"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfCatalog.PrepareForSave">
            <summary>
            Dispatches PrepareForSave to the objects that need it.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Version">
            <summary>
            Get or sets the version of the PDF specification to which the document conforms.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Pages">
            <summary>
            Gets the pages collection of this document.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.PageLayout">
            <summary>
            Implementation of PdfDocument.PageLayout.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.PageMode">
            <summary>
            Implementation of PdfDocument.PageMode.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.ViewerPreferences">
            <summary>
            Implementation of PdfDocument.ViewerPreferences.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Outlines">
            <summary>
            Implementation of PdfDocument.Outlines.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.AcroForm">
            <summary>
            Gets the AcroForm dictionary of this document.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Language">
            <summary>
            Implementation of PdfDocument.PageMode.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfCatalog.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; 
            must be Catalog for the catalog dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Version">
            <summary>
            (Optional; PDF 1.4) The version of the PDF specification to which the document
            conforms (for example, 1.4) if later than the version specified in the file’s header.
            If the header specifies a later version, or if this entry is absent, the document 
            conforms to the version specified in the header. This entry enables a PDF producer 
            application to update the version using an incremental update.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Pages">
            <summary>
            (Required; must be an indirect reference) The page tree node that is the root of 
            the document’s page tree.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.PageLabels">
            <summary>
            (Optional; PDF 1.3) A number tree defining the page labeling for the document. 
            The keys in this tree are page indices; the corresponding values are page label dictionaries.
            Each page index denotes the first page in a labeling range to which the specified page 
            label dictionary applies. The tree must include a value for pageindex 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Names">
            <summary>
            (Optional; PDF 1.2) The document’s name dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Dests">
            <summary>
            (Optional; PDF 1.1; must be an indirect reference) A dictionary of names and 
            corresponding destinations.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.ViewerPreferences">
            <summary>
            (Optional; PDF 1.2) A viewer preferences dictionary specifying the way the document 
            is to be displayed on the screen. If this entry is absent, applications should use
            their own current user preference settings.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.PageLayout">
            <summary>
            (Optional) A name object specifying the page layout to be used when the document is 
            opened:
            SinglePage - Display one page at a time.
            OneColumn - Display the pages in one column.
            TwoColumnLeft - Display the pages in two columns, with oddnumbered pages on the left.
            TwoColumnRight - Display the pages in two columns, with oddnumbered pages on the right.
            TwoPageLeft - (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left
            TwoPageRight - (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.PageMode">
            <summary>
            (Optional) A name object specifying how the document should be displayed when opened:
            UseNone - Neither document outline nor thumbnail images visible.
            UseOutlines - Document outline visible.
            UseThumbs - Thumbnail images visible.
            FullScreen - Full-screen mode, with no menu bar, windowcontrols, or any other window visible.
            UseOC - (PDF 1.5) Optional content group panel visible.
            UseAttachments (PDF 1.6) Attachments panel visible.
            Default value: UseNone.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Outlines">
            <summary>
            (Optional; must be an indirect reference) The outline dictionary that is the root 
            of the document’s outline hierarchy.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Threads">
            <summary>
            (Optional; PDF 1.1; must be an indirect reference) An array of thread dictionaries 
            representing the document’s article threads.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.OpenAction">
            <summary>
            (Optional; PDF 1.1) A value specifying a destination to be displayed or an action to be 
            performed when the document is opened. The value is either an array defining a destination 
            or an action dictionary representing an action. If this entry is absent, the document
            should be opened to the top of the first page at the default magnification factor.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.AA">
            <summary>
            (Optional; PDF 1.4) An additional-actions dictionary defining the actions to be taken 
            in response to various trigger events affecting the document as a whole.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.URI">
            <summary>
            (Optional; PDF 1.1) A URI dictionary containing document-level information for URI 
            (uniform resource identifier) actions.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.AcroForm">
            <summary>
            (Optional; PDF 1.2) The document’s interactive form (AcroForm) dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4; must be an indirect reference) A metadata stream 
            containing metadata  for the document.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.StructTreeRoot">
            <summary>
            (Optional; PDF 1.3) The document’s structure tree root dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.MarkInfo">
            <summary>
            (Optional; PDF 1.4) A mark information dictionary containing information
            about the document’s usage of Tagged PDF conventions.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Lang">
            <summary>
            (Optional; PDF 1.4) A language identifier specifying the natural language for all 
            text in the document except where overridden by language specifications for structure 
            elements or marked content. If this entry is absent, the language is considered unknown.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.SpiderInfo">
            <summary>
            (Optional; PDF 1.3) A Web Capture information dictionary containing state information
            used by the Acrobat Web Capture (AcroSpider) plugin extension.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.OutputIntents">
            <summary>
            (Optional; PDF 1.4) An array of output intent dictionaries describing the color 
            characteristics of output devices on which the document might be rendered.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.PieceInfo">
            <summary>
            (Optional; PDF 1.4) A page-piece dictionary associated with the document.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.OCProperties">
            <summary>
            (Optional; PDF 1.5; required if a document contains optional content) The document’s 
            optional content properties dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Perms">
            <summary>
            (Optional; PDF 1.5) A permissions dictionary that specifies user access permissions 
            for the document.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCatalog.Keys.Legal">
            <summary>
            (Optional; PDF 1.5) A dictionary containing attestations regarding the content of a 
            PDF document, as it relates to the legality of digital signatures.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCatalog.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfCIDFont">
            <summary>
            Represents a CIDFont dictionary.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFont">
            <summary>
            Represents a PDF font.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFont.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfFont"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFont.CreateEmbeddedFontSubsetName(System.String)">
            <summary>
            Adds a tag of exactly six uppercase letters to the font name 
            according to PDF Reference Section 5.5.3 'Font Subsets'
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFont.IsSymbolFont">
            <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFont.CMapInfo">
            <summary>
            Gets or sets the CMapInfo.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFont.ToUnicodeMap">
            <summary>
            Gets or sets ToUnicodeMap.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFont.Keys">
            <summary>
            Predefined keys common to all font dictionaries.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFont.Keys.Subtype">
            <summary>
            (Required) The type of font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFont.Keys.FontDescriptor">
            <summary>
            (Required except for the standard 14 fonts; must be an indirect reference)
            A font descriptor describing the font’s metrics other than its glyph widths.
            Note: For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and 
            FontDescriptor must either all be present or all be absent. Ordinarily, they are
            absent; specifying them enables a standard font to be overridden.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfCIDFont.PrepareForSave">
            <summary>
            Prepares the object to get saved.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCIDFont.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfCIDFont.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a CIDFont dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.Subtype">
            <summary>
            (Required) The type of CIDFont; CIDFontType0 or CIDFontType2.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the CIDFont. For Type 0 CIDFonts, this
            is usually the value of the CIDFontName entry in the CIDFont program. For
            Type 2 CIDFonts, it is derived the same way as for a simple TrueType font;
            In either case, the name can have a subset prefix if appropriate.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.CIDSystemInfo">
            <summary>
            (Required) A dictionary containing entries that define the character collection
            of the CIDFont.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.FontDescriptor">
            <summary>
            (Required; must be an indirect reference) A font descriptor describing the
            CIDFont’s default metrics other than its glyph widths.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.DW">
            <summary>
            (Optional) The default width for glyphs in the CIDFont.
            Default value: 1000.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.W">
            <summary>
            (Optional) A description of the widths for the glyphs in the CIDFont. The
            array’s elements have a variable format that can specify individual widths
            for consecutive CIDs or one width for a range of CIDs.
            Default value: none (the DW value is used for all glyphs).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.DW2">
            <summary>
            (Optional; applies only to CIDFonts used for vertical writing) An array of two
            numbers specifying the default metrics for vertical writing.
            Default value: [880 −1000].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.W2">
            <summary>
            (Optional; applies only to CIDFonts used for vertical writing) A description
            of the metrics for vertical writing for the glyphs in the CIDFont.
            Default value: none (the DW2 value is used for all glyphs).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfCIDFont.Keys.CIDToGIDMap">
            <summary>
            (Optional; Type 2 CIDFonts only) A specification of the mapping from CIDs
            to glyph indices. If the value is a stream, the bytes in the stream contain the
            mapping from CIDs to glyph indices: the glyph index for a particular CID
            value c is a 2-byte value stored in bytes 2 × c and 2 × c + 1, where the first
            byte is the high-order byte. If the value of CIDToGIDMap is a name, it must
            be Identity, indicating that the mapping between CIDs and glyph indices is
            the identity mapping.
            Default value: Identity.
            This entry may appear only in a Type 2 CIDFont whose associated True-Type font 
            program is embedded in the PDF file.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfCIDFont.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfContent">
            <summary>
            Represents the content of a page. Only one content stream per page is supported.
            If an imported page has an array of content streams, the streams are concatenated to
            one single stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContent.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfContent"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContent.#ctor(External.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfContent"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContent.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfContent"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContent.Decode">
            <summary>
            Unfilters the stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContent.PreserveGraphicsState">
            <summary>
            Surround content with q/Q operations if necessary.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfContent.Compressed">
            <summary>
            Sets a value indicating whether the content is compressed with the ZIP algorithm.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfContent.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfContent.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfContent.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfContents">
            <summary>
            Represents an array of PDF content streams of a page.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContents.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfContents"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContents.AppendContent">
            <summary>
            Appends a new content stream and returns it.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContents.PrependContent">
            <summary>
            Prepends a new content stream and returns it.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfContents.CreateSingleContent">
            <summary>
            Creates a single content stream with the bytes from the array of the content streams.
            This operation does not modify any of the content streams in this array.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfDictionaryWithContentStream">
            <summary>
            Represents a base class for dictionaries with a content stream.
            Implement IContentStream for use with a content writer.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfDictionaryWithContentStream"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfDictionaryWithContentStream"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.GetImageName(External.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.External#Pdf#Advanced#IContentStream#GetImageName(External.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.GetFormName(External.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfDictionaryWithContentStream.External#Pdf#Advanced#IContentStream#GetFormName(External.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfDictionaryWithContentStream.Resources">
            <summary>
            Gets the resources dictionary of this dictionary. If no such dictionary exists, it is created.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfDictionaryWithContentStream.External#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfDictionaryWithContentStream.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfDictionaryWithContentStream.Keys.Resources">
            <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfExtGState">
            <summary>
            Represents an extended graphics state object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGState.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfExtGState"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGState.SetDefault2">
            <summary>
            ...for shading patterns
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfExtGState.StrokeAlpha">
            <summary>
            Sets the alpha value for stroking operations.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfExtGState.NonStrokeAlpha">
            <summary>
            Sets the alpha value for nonstroking operations.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfExtGState.SoftMask">
            <summary>
            Sets a soft mask object.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfExtGState.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfExtGState.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            must be ExtGState for a graphics state parameter dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.LW">
            <summary>
            (Optional; PDF 1.3) The line width (see “Line Width” on page 185).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.LC">
            <summary>
            (Optional; PDF 1.3) The line cap style.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.LJ">
            <summary>
            (Optional; PDF 1.3) The line join style.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.ML">
            <summary>
            (Optional; PDF 1.3) The miter limit.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.D">
            <summary>
            (Optional; PDF 1.3) The line dash pattern, expressed as an array of the form
            [dashArray dashPhase], where dashArray is itself an array and dashPhase is an integer.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.RI">
            <summary>
            (Optional; PDF 1.3) The name of the rendering intent.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.OP">
            <summary>
            (Optional) A flag specifying whether to apply overprint. In PDF 1.2 and earlier,
            there is a single overprint parameter that applies to all painting operations.
            Beginning with PDF 1.3, there are two separate overprint parameters: one for stroking 
            and one for all other painting operations. Specifying an OP entry sets both parameters
            unless there is also an op entry in the same graphics state parameter dictionary, in
            which case the OP entry sets only the overprint parameter for stroking.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.op">
            <summary>
            (Optional; PDF 1.3) A flag specifying whether to apply overprint for painting operations
            other than stroking. If this entry is absent, the OP entry, if any, sets this parameter.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.OPM">
            <summary>
            (Optional; PDF 1.3) The overprint mode.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.Font">
            <summary>
            (Optional; PDF 1.3) An array of the form [font size], where font is an indirect
             reference to a font dictionary and size is a number expressed in text space units.
             These two objects correspond to the operands of the Tf operator; however,
             the first operand is an indirect object reference instead of a resource name.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.BG">
            <summary>
            (Optional) The black-generation function, which maps the interval [0.0 1.0]
            to the interval [0.0 1.0].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.BG2">
            <summary>
            (Optional; PDF 1.3) Same as BG except that the value may also be the name Default,
            denoting the black-generation function that was in effect at the start of the page.
            If both BG and BG2 are present in the same graphics state parameter dictionary, 
            BG2 takes precedence.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.UCR">
            <summary>
            (Optional) The undercolor-removal function, which maps the interval
            [0.0 1.0] to the interval [-1.0 1.0].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.UCR2">
            <summary>
            (Optional; PDF 1.3) Same as UCR except that the value may also be the name Default,
            denoting the undercolor-removal function that was in effect at the start of the page.
            If both UCR and UCR2 are present in the same graphics state parameter dictionary, 
            UCR2 takes precedence.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.SA">
            <summary>
            (Optional) A flag specifying whether to apply automatic stroke adjustment.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.BM">
            <summary>
            (Optional; PDF 1.4) The current blend mode to be used in the transparent imaging model.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.SMask">
            <summary>
            (Optional; PDF 1.4) The current soft mask, specifying the mask shape or
            mask opacity values to be used in the transparent imaging model.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.CA">
            <summary>
            (Optional; PDF 1.4) The current stroking alpha constant, specifying the constant 
            shape or constant opacity value to be used for stroking operations in the transparent
            imaging model.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.ca">
            <summary>
            (Optional; PDF 1.4) Same as CA, but for nonstroking operations.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.AIS">
            <summary>
            (Optional; PDF 1.4) The alpha source flag (“alpha is shape”), specifying whether 
            the current soft mask and alpha constant are to be interpreted as shape values (true)
            or opacity values (false).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGState.Keys.TK">
            <summary>
            (Optional; PDF 1.4) The text knockout flag, which determines the behavior of 
            overlapping glyphs within a text object in the transparent imaging model.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfExtGState.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfExtGStateTable">
            <summary>
            Contains all used ExtGState objects of a document.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfResourceTable">
            <summary>
            Base class for FontTable, ImageTable, FormXObjectTable etc.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGStateTable.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGStateTable.GetExtGState(System.Double)">
            <summary>
            Gets a PdfExtGState with the keys 'CA' and 'ca' set to the specified alpha value.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGStateTable.GetExtGStateStroke(System.Double)">
            <summary>
            Gets a PdfExtGState with the key 'CA' set to the specified alpha value.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfExtGStateTable.GetExtGStateNonStroke(System.Double)">
            <summary>
            Gets a PdfExtGState with the key 'ca' set to the specified alpha value.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfExtGStateTable.alphaValues">
            <summary>
            Maps from alpha values (range "0" to "1000") to PdfExtGState objects.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFontDescriptorFlags">
            <summary>
            The PDF font descriptor flags.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.FixedPitch">
            <summary>
            All glyphs have the same width (as opposed to proportional or variable-pitch
            fonts, which have different widths).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.Serif">
            <summary>
            Glyphs have serifs, which are short strokes drawn at an angle on the top and
            bottom of glyph stems. (Sans serif fonts do not have serifs.)
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.Symbolic">
            <summary>
            Font contains glyphs outside the Adobe standard Latin character set. This
            flag and the Nonsymbolic flag cannot both be set or both be clear.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.Script">
            <summary>
            Glyphs resemble cursive handwriting.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.Nonsymbolic">
            <summary>
            Font uses the Adobe standard Latin character set or a subset of it.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.Italic">
            <summary>
            Glyphs have dominant vertical strokes that are slanted.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.AllCap">
            <summary>
            Font contains no lowercase letters; typically used for display purposes,
            such as for titles or headlines.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.SmallCap">
            <summary>
            Font contains both uppercase and lowercase letters. The uppercase letters are
            similar to those in the regular version of the same typeface family. The glyphs
            for the lowercase letters have the same shapes as the corresponding uppercase
            letters, but they are sized and their proportions adjusted so that they have the
            same size and stroke weight as lowercase glyphs in the same typeface family.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptorFlags.ForceBold">
            <summary>
            Determines whether bold glyphs are painted with extra pixels even at very small
            text sizes.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFontDescriptor">
            <summary>
            A PDF font descriptor specifies metrics and other attributes of a simple font, 
            as distinct from the metrics of individual glyphs.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontDescriptor.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontDescriptor.IsSymbolFont">
            <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontDescriptor.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFontDescriptor.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; must be
            FontDescriptor for a font descriptor.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontName">
            <summary>
            (Required) The PostScript name of the font. This name should be the same as the 
            value of BaseFont in the font or CIDFont dictionary that refers to this font descriptor.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontFamily">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            A string specifying the preferred font family name. For example, for the font 
            Times Bold Italic, the FontFamily is Times.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontStretch">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The font stretch value. It must be one of the following names (ordered from 
            narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, 
            Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.
            Note: The specific interpretation of these values varies from font to font. 
            For example, Condensed in one font may appear most similar to Normal in another.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontWeight">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The weight (thickness) component of the fully-qualified font name or font specifier.
            The possible values are 100, 200, 300, 400, 500, 600, 700, 800, or 900, where each
            number indicates a weight that is at least as dark as its predecessor. A value of 
            400 indicates a normal weight; 700 indicates bold.
            Note: The specific interpretation of these values varies from font to font. 
            For example, 300 in one font may appear most similar to 500 in another.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.Flags">
            <summary>
            (Required) A collection of flags defining various characteristics of the font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontBBox">
            <summary>
            (Required, except for Type 3 fonts) A rectangle (see Section 3.8.4, “Rectangles”),
            expressed in the glyph coordinate system, specifying the font bounding box. This 
            is the smallest rectangle enclosing the shape that would result if all of the 
            glyphs of the font were placed with their origins coincident and then filled.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.ItalicAngle">
            <summary>
            (Required) The angle, expressed in degrees counterclockwise from the vertical, of
            the dominant vertical strokes of the font. (For example, the 9-o’clock position is 90 
            degrees, and the 3-o’clock position is –90 degrees.) The value is negative for fonts 
            that slope to the right, as almost all italic fonts do.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.Ascent">
            <summary>
            (Required, except for Type 3 fonts) The maximum height above the baseline reached 
            by glyphs in this font, excluding the height of glyphs for accented characters.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.Descent">
            <summary>
            (Required, except for Type 3 fonts) The maximum depth below the baseline reached 
            by glyphs in this font. The value is a negative number.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.Leading">
            <summary>
            (Optional) The spacing between baselines of consecutive lines of text.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.CapHeight">
            <summary>
            (Required for fonts that have Latin characters, except for Type 3 fonts) The vertical
            coordinate of the top of flat capital letters, measured from the baseline.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.XHeight">
            <summary>
            (Optional) The font’s x height: the vertical coordinate of the top of flat nonascending
            lowercase letters (like the letter x), measured from the baseline, in fonts that have 
            Latin characters. Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.StemV">
            <summary>
            (Required, except for Type 3 fonts) The thickness, measured horizontally, of the dominant 
            vertical stems of glyphs in the font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.StemH">
            <summary>
            (Optional) The thickness, measured vertically, of the dominant horizontal stems 
            of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.AvgWidth">
            <summary>
            (Optional) The average width of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.MaxWidth">
            <summary>
            (Optional) The maximum width of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.MissingWidth">
            <summary>
            (Optional) The width to use for character codes whose widths are not specified in a 
            font dictionary’s Widths array. This has a predictable effect only if all such codes 
            map to glyphs whose actual widths are the same as the value of the MissingWidth entry.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile">
            <summary>
            (Optional) A stream containing a Type 1 font program.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile2">
            <summary>
            (Optional; PDF 1.1) A stream containing a TrueType font program.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile3">
            <summary>
            (Optional; PDF 1.2) A stream containing a font program whose format is specified 
            by the Subtype entry in the stream dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontDescriptor.Keys.CharSet">
            <summary>
            (Optional; meaningful only in Type 1 fonts; PDF 1.1) A string listing the character
            names defined in a font subset. The names in this string must be in PDF syntax—that is,
            each name preceded by a slash (/). The names can appear in any order. The name .notdef
            should be omitted; it is assumed to exist in the font subset. If this entry is absent,
            the only indication of a font subset is the subset tag in the FontName entry.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontDescriptor.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.FontType.TrueType">
            <summary>
            TrueType with WinAnsi encoding.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.FontType.Type0">
            <summary>
            TrueType with Identity-H or Identity-V encoding (unicode).
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFontTable">
            <summary>
            Contains all used fonts of a document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.GetFont(External.Drawing.XFont)">
            <summary>
            Gets a PdfFont from an XFont. If no PdfFont already exists, a new one is created.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.GetFont(System.String,System.Byte[])">
            <summary>
            Gets a PdfFont from a font program. If no PdfFont already exists, a new one is created.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.TryGetFont(System.String)">
            <summary>
            Tries to gets a PdfFont from the font dictionary.
            Returns null if no such PdfFont exists.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFontTable.fonts">
            <summary>
            Map from PdfFontSelector to PdfFont.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFontTable.FontSelector">
            <summary>
            A collection of information that uniquely identifies a particular PDF font.
            ... more docu... TODO
            Two PDF fonts are equal if and only if their font selector objects are equal.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.FontSelector.#ctor(External.Drawing.XFont)">
            <summary>
            Initializes a new instance of PdfFontSelector from an XFont.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.FontSelector.#ctor(System.String)">
            <summary>
            Initializes a new instance of PdfFontSelector from a unique name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFontTable.FontSelector.ToString">
            <summary>
            Returns a string for diagnostic purposes only.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontTable.FontSelector.Name">
            <summary>
            Gets the (generated) resource name of the font. In our own PDF files equal fonts share the
            same resource name in all contents streams.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontTable.FontSelector.Style">
            <summary>
            Gets the style. Contains only flags that effects the font face and are available for the specified font.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFontTable.FontSelector.FontType">
            <summary>
            Gets the type of the font (TrueType with Ansi Encoding or CID font).
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFormXObject">
            <summary>
            Represents an external form object (e.g. an imported page).
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfXObject">
            <summary>
            Base class for all PDF external objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfXObject.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfXObject"/> class.
            </summary>
            <param name="document">The document that owns the object.</param>
        </member>
        <member name="T:External.Pdf.Advanced.PdfXObject.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObject.GetFontName(System.String,System.Byte[],External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this form XObject.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFormXObject.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFormXObject.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be XObject for a form XObject.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.Subtype">
            <summary>
            (Required) The type of XObject that this dictionary describes; must be Form
            for a form XObject.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.FormType">
            <summary>
            (Optional) A code identifying the type of form XObject that this dictionary
            describes. The only valid value defined at the time of publication is 1.
            Default value: 1.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.BBox">
            <summary>
            (Required) An array of four numbers in the form coordinate system, giving the 
            coordinates of the left, bottom, right, and top edges, respectively, of the 
            form XObject’s bounding box. These boundaries are used to clip the form XObject
            and to determine its size for caching.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the form matrix, which maps
            form space into user space.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.Resources">
            <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObject.Keys.Group">
            <summary>
            (Optional; PDF 1.4) A group attributes dictionary indicating that the contents
            of the form XObject are to be treated as a group and specifying the attributes
            of that group (see Section 4.9.2, “Group XObjects”).
            Note: If a Ref entry (see below) is present, the group attributes also apply to the
            external page imported by that entry, which allows such an imported page to be
            treated as a group without further modification.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfFormXObject.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFormXObjectTable">
            <summary>
            Contains all external PDF files from which PdfFormXObjects are imported into the current document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObjectTable.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObjectTable.GetForm(External.Drawing.XForm)">
            <summary>
            Gets a PdfFormXObject from an XPdfForm. Because the returned objects must be unique, always
            a new instance of PdfFormXObject is created if none exists for the specified form. 
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObjectTable.GetImportedObjectTable(External.Pdf.PdfPage)">
            <summary>
            Gets the imported object table.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfFormXObjectTable.forms">
            <summary>
            Map from Selector to PdfImportedObjectTable.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfFormXObjectTable.Selector">
            <summary>
            A collection of information that uniquely identifies a particular ImportedObjectTable.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObjectTable.Selector.#ctor(External.Drawing.XForm)">
            <summary>
            Initializes a new instance of FormSelector from an XPdfForm.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfFormXObjectTable.Selector.#ctor(External.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of FormSelector from a PdfPage.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfGroupAttributes">
            <summary>
            Represents a PDF group XObject.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfGroupAttributes.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfGroupAttributes.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfGroupAttributes.Keys.Type">
             <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Group for a group attributes dictionary.
             </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfGroupAttributes.Keys.S">
            <summary>
            (Required) The group subtype, which identifies the type of group whose
            attributes this dictionary describes and determines the format and meaning
            of the dictionary’s remaining entries. The only group subtype defined in
            PDF 1.4 is Transparency. Other group subtypes may be added in the future.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfGroupAttributes.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfImage">
            <summary>
            Represents an image.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.#ctor(External.Pdf.PdfDocument,External.Drawing.XImage)">
            <summary>
            Initializes a new instance of PdfImage from an XImage.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.ToString">
            <summary>
            Returns 'Image'.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.InitializeJpeg">
            <summary>
            Creates the keys for a JPEG image.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.InitializeNonJpeg">
            <summary>
            Creates the keys for a FLATE image.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.ReadTrueColorMemoryBitmap(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads images that are returned from GDI+ without color palette.
            </summary>
            <param name="components">4 (32bpp RGB), 3 (24bpp RGB, 32bpp ARGB)</param>
            <param name="bits">8</param>
            <param name="hasAlpha">true (ARGB), false (RGB)</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.CountOneBits(External.Pdf.Advanced.BitReader,System.UInt32)">
            <summary>
            Counts the consecutive one bits in an image line.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitsLeft">The bits left.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.CountZeroBits(External.Pdf.Advanced.BitReader,System.UInt32)">
            <summary>
            Counts the consecutive zero bits in an image line.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitsLeft">The bits left.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.FindDifference(External.Pdf.Advanced.BitReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Returns the offset of the next bit in the range
            [bitStart..bitEnd] that is different from the
            specified color.  The end, bitEnd, is returned
            if no such bit exists.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitStart">The offset of the start bit.</param>
            <param name="bitEnd">The offset of the end bit.</param>
            <param name="searchOne">If set to <c>true</c> searches "one" (i. e. white), otherwise searches black.</param>
            <returns>The offset of the first non-matching bit.</returns>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.FindDifferenceWithCheck(External.Pdf.Advanced.BitReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Returns the offset of the next bit in the range
            [bitStart..bitEnd] that is different from the
            specified color.  The end, bitEnd, is returned
            if no such bit exists.
            Like FindDifference, but also check the
            starting bit against the end in case start > end.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitStart">The offset of the start bit.</param>
            <param name="bitEnd">The offset of the end bit.</param>
            <param name="searchOne">If set to <c>true</c> searches "one" (i. e. white), otherwise searches black.</param>
            <returns>The offset of the first non-matching bit.</returns>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.FaxEncode2DRow(External.Pdf.Advanced.BitWriter,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            2d-encode a row of pixels. Consult the CCITT documentation for the algorithm.
            </summary>
            <param name="writer">The writer.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="imageBits">The bitmap file.</param>
            <param name="currentRow">Index of the current row.</param>
            <param name="referenceRow">Index of the reference row (0xffffffff if there is none).</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="bytesPerLineBmp">The bytes per line in the bitmap file.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.DoFaxEncoding(System.Byte[]@,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encodes a bitonal bitmap using 1D CCITT fax encoding.
            </summary>
            <param name="imageData">Space reserved for the fax encoded bitmap. An exception will be thrown if this buffer is too small.</param>
            <param name="imageBits">The bitmap to be encoded.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The size of the fax encoded image (0 on failure).</returns>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.DoFaxEncodingGroup4(System.Byte[]@,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encodes a bitonal bitmap using 2D group 4 CCITT fax encoding.
            </summary>
            <param name="imageData">Space reserved for the fax encoded bitmap. An exception will be thrown if this buffer is too small.</param>
            <param name="imageBits">The bitmap to be encoded.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The size of the fax encoded image (0 on failure).</returns>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImage.WriteSample(External.Pdf.Advanced.BitWriter,System.UInt32,System.Boolean)">
            <summary>
            Writes the image data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="count">The count of bits (pels) to encode.</param>
            <param name="white">The color of the pels.</param>
        </member>
        <member name="P:External.Pdf.Advanced.PdfImage.Image">
            <summary>
            Gets the underlying XImage object.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfImage.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be XObject for an image XObject.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Subtype">
            <summary>
            (Required) The type of XObject that this dictionary describes;
            must be Image for an image XObject.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Width">
            <summary>
            (Required) The width of the image, in samples.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Height">
            <summary>
            (Required) The height of the image, in samples.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.ColorSpace">
            <summary>
            (Required for images, except those that use the JPXDecode filter; not allowed for image masks)
            The color space in which image samples are specified; it can be any type of color space except
            Pattern. If the image uses the JPXDecode filter, this entry is optional:
            • If ColorSpace is present, any color space specifications in the JPEG2000 data are ignored.
            • If ColorSpace is absent, the color space specifications in the JPEG2000 data are used.
              The Decode array is also ignored unless ImageMask is true.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.BitsPerComponent">
            <summary>
            (Required except for image masks and images that use the JPXDecode filter)
            The number of bits used to represent each color component. Only a single value may be specified;
            the number of bits is the same for all color components. Valid values are 1, 2, 4, 8, and 
            (in PDF 1.5) 16. If ImageMask is true, this entry is optional, and if specified, its value 
            must be 1.
            If the image stream uses a filter, the value of BitsPerComponent must be consistent with the 
            size of the data samples that the filter delivers. In particular, a CCITTFaxDecode or JBIG2Decode 
            filter always delivers 1-bit samples, a RunLengthDecode or DCTDecode filter delivers 8-bit samples,
            and an LZWDecode or FlateDecode filter delivers samples of a specified size if a predictor function
            is used.
            If the image stream uses the JPXDecode filter, this entry is optional and ignored if present.
            The bit depth is determined in the process of decoding the JPEG2000 image.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Intent">
            <summary>
            (Optional; PDF 1.1) The name of a color rendering intent to be used in rendering the image.
            Default value: the current rendering intent in the graphics state.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.ImageMask">
            <summary>
            (Optional) A flag indicating whether the image is to be treated as an image mask.
            If this flag is true, the value of BitsPerComponent must be 1 and Mask and ColorSpace should
            not be specified; unmasked areas are painted using the current nonstroking color.
            Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Mask">
            <summary>
            (Optional except for image masks; not allowed for image masks; PDF 1.3)
            An image XObject defining an image mask to be applied to this image, or an array specifying 
            a range of colors to be applied to it as a color key mask. If ImageMask is true, this entry
            must not be present.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Decode">
            <summary>
            (Optional) An array of numbers describing how to map image samples into the range of values
            appropriate for the image’s color space. If ImageMask is true, the array must be either
            [0 1] or [1 0]; otherwise, its length must be twice the number of color components required 
            by ColorSpace. If the image uses the JPXDecode filter and ImageMask is false, Decode is ignored.
            Default value: see “Decode Arrays”.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Interpolate">
            <summary>
            (Optional) A flag indicating whether image interpolation is to be performed. 
            Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Alternates">
            <summary>
            (Optional; PDF 1.3) An array of alternate image dictionaries for this image. The order of 
            elements within the array has no significance. This entry may not be present in an image 
            XObject that is itself an alternate image.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.SMask">
            <summary>
            (Optional; PDF 1.4) A subsidiary image XObject defining a soft-mask image to be used as a 
            source of mask shape or mask opacity values in the transparent imaging model. The alpha 
            source parameter in the graphics state determines whether the mask values are interpreted as
            shape or opacity. If present, this entry overrides the current soft mask in the graphics state,
            as well as the image’s Mask entry, if any. (However, the other transparency related graphics 
            state parameters — blend mode and alpha constant — remain in effect.) If SMask is absent, the 
            image has no associated soft mask (although the current soft mask in the graphics state may
            still apply).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.SMaskInData">
            <summary>
            (Optional for images that use the JPXDecode filter, meaningless otherwise; PDF 1.5)
            A code specifying how soft-mask information encoded with image samples should be used:
            0 If present, encoded soft-mask image information should be ignored.
            1 The image’s data stream includes encoded soft-mask values. An application can create
              a soft-mask image from the information to be used as a source of mask shape or mask 
              opacity in the transparency imaging model.
            2 The image’s data stream includes color channels that have been preblended with a 
              background; the image data also includes an opacity channel. An application can create
              a soft-mask image with a Matte entry from the opacity channel information to be used as
              a source of mask shape or mask opacity in the transparency model. If this entry has a 
              nonzero value, SMask should not be specified.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Name">
            <summary>
            (Required in PDF 1.0; optional otherwise) The name by which this image XObject is 
            referenced in the XObject subdictionary of the current resource dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.StructParent">
            <summary>
            (Required if the image is a structural content item; PDF 1.3) The integer key of the 
            image’s entry in the structural parent tree.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.ID">
            <summary>
            (Optional; PDF 1.3; indirect reference preferred) The digital identifier of the image’s
            parent Web Capture content set.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.OPI">
            <summary>
            (Optional; PDF 1.2) An OPI version dictionary for the image. If ImageMask is true, 
            this entry is ignored.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4) A metadata stream containing metadata for the image.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImage.Keys.OC">
            <summary>
            (Optional; PDF 1.5) An optional content group or optional content membership dictionary,
            specifying the optional content properties for this image XObject. Before the image is
            processed, its visibility is determined based on this entry. If it is determined to be 
            invisible, the entire image is skipped, as if there were no Do operator to invoke it.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.MonochromeMask">
            <summary>
            Helper class for creating bitmap masks (8 pels per byte).
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.MonochromeMask.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a bitmap mask.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.MonochromeMask.StartLine(System.Int32)">
            <summary>
            Starts a new line.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.MonochromeMask.AddPel(System.Boolean)">
            <summary>
            Adds a pel to the current line.
            </summary>
            <param name="isTransparent"></param>
        </member>
        <member name="M:External.Pdf.Advanced.MonochromeMask.AddPel(System.Int32)">
            <summary>
            Adds a pel from an alpha mask value.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.MonochromeMask.MaskData">
            <summary>
            Returns the bitmap mask that will be written to PDF.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.BitReader">
            <summary>
            The BitReader class is a helper to read bits from an in-memory bitmap file.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.BitReader"/> class.
            </summary>
            <param name="imageBits">The in-memory bitmap file.</param>
            <param name="bytesFileOffset">The offset of the line to read.</param>
            <param name="bits">The count of bits that may be read (i. e. the width of the image for normal usage).</param>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.SetPosition(System.UInt32)">
            <summary>
            Sets the position within the line (needed for 2D encoding).
            </summary>
            <param name="position">The new position.</param>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.GetBit(System.UInt32)">
            <summary>
            Gets a single bit at the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns>True if bit is set.</returns>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.PeekByte(System.UInt32@)">
            <summary>
            Returns the bits that are in the buffer (without changing the position).
            Data is MSB aligned.
            </summary>
            <param name="bits">The count of bits that were returned (1 through 8).</param>
            <returns>The MSB aligned bits from the buffer.</returns>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.NextByte">
            <summary>
            Moves the buffer to the next byte.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.BitReader.SkipBits(System.UInt32)">
            <summary>
            "Removes" (eats) bits from the buffer.
            </summary>
            <param name="bits">The count of bits that were processed.</param>
        </member>
        <member name="T:External.Pdf.Advanced.BitWriter">
            <summary>
            A helper class for writing groups of bits into an array of bytes.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.BitWriter.#ctor(System.Byte[]@)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.BitWriter"/> class.
            </summary>
            <param name="imageData">The byte array to be written to.</param>
        </member>
        <member name="M:External.Pdf.Advanced.BitWriter.FlushBuffer">
            <summary>
            Writes the buffered bits into the byte array.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.BitWriter.masks">
            <summary>
            Masks for n bits in a byte (with n = 0 through 8).
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.BitWriter.WriteBits(System.UInt32,System.UInt32)">
            <summary>
            Writes bits to the byte array.
            </summary>
            <param name="value">The bits to be written (LSB aligned).</param>
            <param name="bits">The count of bits.</param>
        </member>
        <member name="M:External.Pdf.Advanced.BitWriter.WriteTableLine(System.UInt32[],System.UInt32)">
            <summary>
            Writes a line from a look-up table.
            A "line" in the table are two integers, one containing the values, one containing the bit count.
            </summary>
            <param name="table">The table.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:External.Pdf.Advanced.BitWriter.BytesWritten">
            <summary>
            Flushes the buffer and returns the count of bytes written to the array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:External.Pdf.Advanced.PdfImageTable">
            <summary>
            Contains all used images of a document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImageTable.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImageTable.GetImage(External.Drawing.XImage)">
            <summary>
            Gets a PdfImage from an XImage. If no PdfImage already exists, a new one is created.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImageTable.images">
            <summary>
            Map from ImageSelector to PdfImage.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfImageTable.ImageSelector">
            <summary>
            A collection of information that uniquely identifies a particular PdfImage.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImageTable.ImageSelector.#ctor(External.Drawing.XImage)">
            <summary>
            Initializes a new instance of ImageSelector from an XImage.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfImportedObjectTable">
            <summary>
            Represents the imported objects of an external document. Used to cache objects that are
            already imported when a PdfFormXObject is added to a page.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImportedObjectTable.#ctor(External.Pdf.PdfDocument,External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class with the document the objects are imported from.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImportedObjectTable.Contains(External.Pdf.PdfObjectID)">
            <summary>
            Indicates whether the specified object is already imported.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfImportedObjectTable.Add(External.Pdf.PdfObjectID,External.Pdf.Advanced.PdfReference)">
            <summary>
            Adds a cloned object to this table.
            </summary>
            <param name="externalID">The object identifier in the foreign object.</param>
            <param name="iref">The cross reference to the clone of the foreign object, which belongs to
            this document. In general the clone has a different object identifier.</param>
        </member>
        <member name="F:External.Pdf.Advanced.PdfImportedObjectTable.externalIDs">
            <summary>
            Maps external object identifiers to cross reference entries of the importing document
            {PdfObjectID -> PdfReference}.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfImportedObjectTable.Owner">
            <summary>
            Gets the document this table belongs to.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfImportedObjectTable.ExternalDocument">
            <summary>
            Gets the external document, or null, if the external document is garbage collected.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfImportedObjectTable.Item(External.Pdf.PdfObjectID)">
            <summary>
            Gets the cloned object that corresponds to the specified external identifier.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfInternals">
            <summary>
            Provides access to the internal document data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetObject(External.Pdf.PdfObjectID)">
            <summary>
            Returns the object with the specified Identifier, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetReference(External.Pdf.PdfObject)">
            <summary>
            Returns the PdfReference of the specified object, or null, if the object is not in the
            document's object table.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetObjectID(External.Pdf.PdfObject)">
            <summary>
            Gets the object identifier of the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetObjectNumber(External.Pdf.PdfObject)">
            <summary>
            Gets the object number of the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GenerationNumber(External.Pdf.PdfObject)">
            <summary>
            Gets the generation number of the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetAllObjects">
            <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.CreateIndirectObject``1">
            <summary>
            Creates the indirect object of the specified type, adds it to the document, and
            returns the object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.AddObject(External.Pdf.PdfObject)">
            <summary>
            Adds an object to the PDF document. This operation and only this operation makes the object 
            an indirect object owned by this document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.RemoveObject(External.Pdf.PdfObject)">
            <summary>
            Removes an object from the PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetClosure(External.Pdf.PdfObject)">
            <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure. The closure of an object are all objects that can be reached by indirect references. 
            The transitive closure is the result of applying the calculation of the closure to a closure
            as long as no new objects came along. This is e.g. useful for getting all objects belonging 
            to the resources of a page.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.GetClosure(External.Pdf.PdfObject,System.Int32)">
            <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure limited by the specified number of iterations.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfInternals.WriteObject(System.IO.Stream,External.Pdf.PdfItem)">
            <summary>
            Writes a PdfItem into the specified stream.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfInternals.CustomValueKey">
            <summary>
            The name of the custom value key.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.FirstDocumentID">
            <summary>
            Gets or sets the first document identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.FirstDocumentGuid">
            <summary>
            Gets the first document identifier as GUID.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.SecondDocumentID">
            <summary>
            Gets or sets the second document identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.SecondDocumentGuid">
            <summary>
            Gets the first document identifier as GUID.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.Catalog">
            <summary>
            Gets the catalog dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfInternals.AllObjects">
            <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfObjectInternals">
            <summary>
            Provides access to the internal PDF object data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfObjectInternals.ObjectID">
            <summary>
            Gets the object identifier. Returns PdfObjectID.Empty for direct objects.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfObjectInternals.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfObjectInternals.GenerationNumber">
            <summary>
            Gets the generation number.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfObjectInternals.TypeID">
            <summary>
            Gets the name of the current type.
            Not a very useful property, but can be used for data binding.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfPageInheritableObjects">
            <summary>
            Represents a PDF page object.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfPageInheritableObjects.MediaBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfReference">
            <summary>
            Represents an indirect reference to a PdfObject.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.#ctor(External.Pdf.PdfObject)">
            <summary>
            Initializes a new PdfReference instance for the specified indirect object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.#ctor(External.Pdf.PdfObjectID,System.Int32)">
            <summary>
            Initializes a new PdfReference instance from the specified object identifier and file position.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.WriteXRefEnty(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the object in PDF iref table format.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes an indirect reference.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.SetObject(External.Pdf.PdfObject)">
            <summary>
            Hack for dead objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfReference.ToString">
            <summary>
            Gets a string representing the object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.ObjectID">
            <summary>
            Gets or sets the object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.ObjectNumber">
            <summary>
            Gets the object number of the object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.GenerationNumber">
            <summary>
            Gets the generation number of the object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.Position">
            <summary>
            Gets or sets the file position of the related PdfObject.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.Value">
            <summary>
            Gets or sets the referenced PdfObject.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfReference.Document">
            <summary>
            Gets or sets the document this object belongs to.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfReference.PdfReferenceComparer">
            <summary>
            Implements a comparer that compares PdfReference objects by their PdfObjectID.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfResourceMap">
            <summary>
            Base class for all dictionaries that map resource names to objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResourceMap.CollectResourceNames(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds all imported resource names to the specified hashtable.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfResources">
            <summary>
            Represents a PDF resource object.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfResources"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddFont(External.Pdf.Advanced.PdfFont)">
            <summary>
            Adds the specified font to this resource dictionary and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddImage(External.Pdf.Advanced.PdfImage)">
            <summary>
            Adds the specified image to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddForm(External.Pdf.Advanced.PdfFormXObject)">
            <summary>
            Adds the specified form object to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddExtGState(External.Pdf.Advanced.PdfExtGState)">
            <summary>
            Adds the specified graphics state to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddPattern(External.Pdf.Advanced.PdfShadingPattern)">
            <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddPattern(External.Pdf.Advanced.PdfTilingPattern)">
            <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.AddShading(External.Pdf.Advanced.PdfShading)">
            <summary>
            Adds the specified shading to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfResources.ExistsResourceNames(System.String)">
            <summary>
            Check whether a resource name is already used in the context of this resource dictionary.
            PDF4NET uses GUIDs as resource names, but I think this weapon is to heavy.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.importedResourceNames">
            <summary>
            All the names of imported resources.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.resources">
            <summary>
            Maps all PDF component resources to their local resource names.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.Fonts">
            <summary>
            Gets the fonts map.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.XObjects">
            <summary>
            Gets the external objects map.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextFontName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextImageName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextFormName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextExtGStateName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextPatternName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.NextShadingName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfResources.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.ExtGState">
            <summary>
            (Optional) A dictionary that maps resource names to graphics state 
            parameter dictionaries.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.ColorSpace">
            <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.Pattern">
            <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.Shading">
            <summary>
            (Optional; PDF 1.3) A dictionary that maps resource names to shading dictionaries.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.XObject">
            <summary>
            (Optional) A dictionary that maps resource names to external objects.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.Font">
            <summary>
            (Optional) A dictionary that maps resource names to font dictionaries.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.ProcSet">
            <summary>
            (Optional) An array of predefined procedure set names.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfResources.Keys.Properties">
            <summary>
            (Optional; PDF 1.2) A dictionary that maps resource names to property list
            dictionaries for marked content.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfResources.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfShading">
            <summary>
            Represents a shading dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfShading.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfShading"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfShading.SetupFromBrush(External.Drawing.XLinearGradientBrush)">
            <summary>
            Setups the shading from the specified brush.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfShading.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfShading.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.ShadingType">
            <summary>
            (Required) The shading type:
            1 Function-based shading
            2 Axial shading
            3 Radial shading
            4 Free-form Gouraud-shaded triangle mesh
            5 Lattice-form Gouraud-shaded triangle mesh
            6 Coons patch mesh
            7 Tensor-product patch mesh
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.ColorSpace">
            <summary>
            (Required) The color space in which color values are expressed. This may be any device, 
            CIE-based, or special color space except a Pattern space.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.Background">
            <summary>
            (Optional) An array of color components appropriate to the color space, specifying
            a single background color value. If present, this color is used, before any painting 
            operation involving the shading, to fill those portions of the area to be painted 
            that lie outside the bounds of the shading object. In the opaque imaging model, 
            the effect is as if the painting operation were performed twice: first with the 
            background color and then with the shading.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.BBox">
            <summary>
            (Optional) An array of four numbers giving the left, bottom, right, and top coordinates, 
            respectively, of the shading’s bounding box. The coordinates are interpreted in the 
            shading’s target coordinate space. If present, this bounding box is applied as a temporary 
            clipping boundary when the shading is painted, in addition to the current clipping path
            and any other clipping boundaries in effect at that time.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.AntiAlias">
            <summary>
            (Optional) A flag indicating whether to filter the shading function to prevent aliasing 
            artifacts. The shading operators sample shading functions at a rate determined by the 
            resolution of the output device. Aliasing can occur if the function is not smooth—that
            is, if it has a high spatial frequency relative to the sampling rate. Anti-aliasing can
            be computationally expensive and is usually unnecessary, since most shading functions
            are smooth enough or are sampled at a high enough frequency to avoid aliasing effects.
            Anti-aliasing may not be implemented on some output devices, in which case this flag
            is ignored.
            Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.Coords">
            <summary>
            (Required) An array of four numbers [x0 y0 x1 y1] specifying the starting and
            ending coordinates of the axis, expressed in the shading’s target coordinate space.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.Domain">
            <summary>
            (Optional) An array of two numbers [t0 t1] specifying the limiting values of a
            parametric variable t. The variable is considered to vary linearly between these
            two values as the color gradient varies between the starting and ending points of
            the axis. The variable t becomes the input argument to the color function(s).
            Default value: [0.0 1.0].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.Function">
            <summary>
            (Required) A 1-in, n-out function or an array of n 1-in, 1-out functions (where n
            is the number of color components in the shading dictionary’s color space). The
            function(s) are called with values of the parametric variable t in the domain defined
            by the Domain entry. Each function’s domain must be a superset of that of the shading
            dictionary. If the value returned by the function for a given color component is out
            of range, it is adjusted to the nearest valid value.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShading.Keys.Extend">
            <summary>
            (Optional) An array of two boolean values specifying whether to extend the shading
            beyond the starting and ending points of the axis, respectively.
            Default value: [false false].
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfShading.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfShadingPattern">
            <summary>
            Represents a shading pattern dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfShadingPattern.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfShadingPattern"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfShadingPattern.SetupFromBrush(External.Drawing.XLinearGradientBrush,External.Drawing.XMatrix)">
            <summary>
            Setups the shading pattern from the specified brush.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfShadingPattern.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfShadingPattern.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShadingPattern.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Pattern for a pattern dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShadingPattern.Keys.PatternType">
            <summary>
            (Required) A code identifying the type of pattern that this dictionary describes;
            must be 2 for a shading pattern.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShadingPattern.Keys.Shading">
            <summary>
            (Required) A shading object (see below) defining the shading pattern’s gradient fill.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShadingPattern.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the pattern matrix.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfShadingPattern.Keys.ExtGState">
            <summary>
            (Optional) A graphics state parameter dictionary containing graphics state parameters
            to be put into effect temporarily while the shading pattern is painted. Any parameters
            that are not so specified are inherited from the graphics state that was in effect
            at the beginning of the content stream in which the pattern is defined as a resource.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfShadingPattern.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfSoftMask">
            <summary>
            Represents a PDF soft mask.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfSoftMask.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfXObject"/> class.
            </summary>
            <param name="document">The document that owns the object.</param>
        </member>
        <member name="T:External.Pdf.Advanced.PdfSoftMask.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfSoftMask.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Mask for a soft-mask dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfSoftMask.Keys.S">
            <summary>
            (Required) A subtype specifying the method to be used in deriving the mask values
            from the transparency group specified by the G entry:
            Alpha: Use the group’s computed alpha, disregarding its color.
            Luminosity: Convert the group’s computed color to a single-component luminosity value.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfSoftMask.Keys.G">
            <summary>
            (Required) A transparency group XObject to be used as the source of alpha
            or color values for deriving the mask. If the subtype S is Luminosity, the
            group attributes dictionary must contain a CS entry defining the color space
            in which the compositing computation is to be performed.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfSoftMask.Keys.BC">
            <summary>
            (Optional) An array of component values specifying the color to be used
            as the backdrop against which to composite the transparency group XObject G.
            This entry is consulted only if the subtype S is Luminosity. The array consists of
            n numbers, where n is the number of components in the color space specified
            by the CS entry in the group attributes dictionary.
            Default value: the color space’s initial value, representing black.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfSoftMask.Keys.TR">
            <summary>
            (Optional) A function object specifying the transfer function to be used in
            deriving the mask values. The function accepts one input, the computed
            group alpha or luminosity (depending on the value of the subtype S), and
            returns one output, the resulting mask value. Both the input and output
            must be in the range 0.0 to 1.0; if the computed output falls outside this
            range, it is forced to the nearest valid value. The name Identity may be
            specified in place of a function object to designate the identity function.
            Default value: Identity.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTilingPattern">
            <summary>
            Represents a tiling pattern dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTilingPattern.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Advanced.PdfShadingPattern"/> class.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTilingPattern.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTilingPattern.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Pattern for a pattern dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.PatternType">
            <summary>
            (Required) A code identifying the type of pattern that this dictionary describes;
            must be 1 for a tiling pattern.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.PaintType">
            <summary>
            (Required) A code that determines how the color of the pattern cell is to be specified:
            1: Colored tiling pattern. The pattern’s content stream specifies the colors used to 
            paint the pattern cell. When the content stream begins execution, the current color
            is the one that was initially in effect in the pattern’s parent content stream.
            2: Uncolored tiling pattern. The pattern’s content stream does not specify any color
            information. Instead, the entire pattern cell is painted with a separately specified color
            each time the pattern is used. Essentially, the content stream describes a stencil
            through which the current color is to be poured. The content stream must not invoke
            operators that specify colors or other color-related parameters in the graphics state;
            otherwise, an error occurs. The content stream may paint an image mask, however,
            since it does not specify any color information.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.TilingType">
            <summary>
            (Required) A code that controls adjustments to the spacing of tiles relative to the device
            pixel grid:
            1: Constant spacing. Pattern cells are spaced consistently—that is, by a multiple of a
            device pixel. To achieve this, the application may need to distort the pattern cell slightly
            by making small adjustments to XStep, YStep, and the transformation matrix. The amount
            of distortion does not exceed 1 device pixel.
            2: No distortion. The pattern cell is not distorted, but the spacing between pattern cells
            may vary by as much as 1 device pixel, both horizontally and vertically, when the pattern
            is painted. This achieves the spacing requested by XStep and YStep on average but not
            necessarily for each individual pattern cell.
            3: Constant spacing and faster tiling. Pattern cells are spaced consistently as in tiling
            type 1 but with additional distortion permitted to enable a more efficient implementation. 
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.BBox">
            <summary>
            (Required) An array of four numbers in the pattern coordinate system giving the
            coordinates of the left, bottom, right, and top edges, respectively, of the pattern
            cell’s bounding box. These boundaries are used to clip the pattern cell.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.XStep">
            <summary>
            (Required) The desired horizontal spacing between pattern cells, measured in the
            pattern coordinate system.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.YStep">
            <summary>
            (Required) The desired vertical spacing between pattern cells, measured in the pattern
            coordinate system. Note that XStep and YStep may differ from the dimensions of the
            pattern cell implied by the BBox entry. This allows tiling with irregularly shaped figures.
            XStep and YStep may be either positive or negative but not zero.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.Resources">
            <summary>
            (Required) A resource dictionary containing all of the named resources required by
            the pattern’s content stream (see Section 3.7.2, “Resource Dictionaries”).
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTilingPattern.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the pattern matrix.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTilingPattern.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfToUnicodeMap">
            <summary>
            Represents a ToUnicode map for composite font.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfToUnicodeMap.PrepareForSave">
            <summary>
            Creates the ToUnicode map from the CMapInfo.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfToUnicodeMap.CMapInfo">
            <summary>
            Gets or sets the CMap info.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTrailer">
            <summary>
            Represents a PDF trailer dictionary. Even trailers are dictionaries their never have a cross
            reference entry in PdfReferenceTable.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrailer.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfTrailer.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrailer.GetDocumentID(System.Int32)">
            <summary>
            Gets the first or second document identifier.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrailer.SetDocumentID(System.Int32,System.String)">
            <summary>
            Sets the first or second document identifier.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrailer.CreateNewDocumentIDs">
            <summary>
            Creates and sets two identical new document IDs.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrailer.Finish">
            <summary>
            Replace temporary irefs by their correct counterparts from the iref table.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrailer.Root">
            <summary>
            (Required; must be an indirect reference)
            The catalog dictionary for the PDF document contained in the file.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrailer.SecurityHandler">
            <summary>
            Gets the standard security handler.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrailer.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTrailer.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.Size">
            <summary>
            (Required; must not be an indirect reference) The total number of entries in the file’s 
            cross-reference table, as defined by the combination of the original section and all
            update sections. Equivalently, this value is 1 greater than the highest object number
            used in the file.
            Note: Any object in a cross-reference section whose number is greater than this value is
            ignored and considered missing.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.Prev">
            <summary>
            (Present only if the file has more than one cross-reference section; must not be an indirect
            reference) The byte offset from the beginning of the file to the beginning of the previous 
            cross-reference section.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.Root">
            <summary>
            (Required; must be an indirect reference) The catalog dictionary for the PDF document
            contained in the file.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.Encrypt">
            <summary>
            (Required if document is encrypted; PDF 1.1) The document’s encryption dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.Info">
            <summary>
            (Optional; must be an indirect reference) The document’s information dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.ID">
            <summary>
            (Optional, but strongly recommended; PDF 1.1) An array of two strings constituting
            a file identifier for the file. Although this entry is optional, 
            its absence might prevent the file from functioning in some workflows
            that depend on files being uniquely identified.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrailer.Keys.XRefStm">
            <summary>
            (Optional) The byte offset from the beginning of the file of a cross-reference stream.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrailer.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTransparencyGroupAttributes">
            <summary>
            Represents a PDF transparency group XObject.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.CS">
            <summary>
            (Sometimes required, as discussed below)
            The group color space, which is used for the following purposes:
            • As the color space into which colors are converted when painted into the group
            • As the blending color space in which objects are composited within the group
            • As the color space of the group as a whole when it in turn is painted as an object onto its backdrop
            The group color space may be any device or CIE-based color space that
            treats its components as independent additive or subtractive values in the
            range 0.0 to 1.0, subject to the restrictions described in Section 7.2.3, “Blending Color Space.”
            These restrictions exclude Lab and lightness-chromaticity ICCBased color spaces,
            as well as the special color spaces Pattern, Indexed, Separation, and DeviceN.
            Device color spaces are subject to remapping according to the DefaultGray,
            DefaultRGB, and DefaultCMYK entries in the ColorSpace subdictionary of the
            current resource dictionary.
            Ordinarily, the CS entry is allowed only for isolated transparency groups
            (those for which I, below, is true), and even then it is optional. However,
            this entry is required in the group attributes dictionary for any transparency
            group XObject that has no parent group or page from which to inherit — in
            particular, one that is the value of the G entry in a soft-mask dictionary of
            subtype Luminosity.
            In addition, it is always permissible to specify CS in the group attributes
            dictionary associated with a page object, even if I is false or absent. In the
            normal case in which the page is imposed directly on the output medium,
            the page group is effectively isolated regardless of the I value, and the 
            specified CS value is therefore honored. But if the page is in turn used as an
            element of some other page and if the group is non-isolated, CS is ignored
            and the color space is inherited from the actual backdrop with which the
            page is composited.
            Default value: the color space of the parent group or page into which this
            transparency group is painted. (The parent’s color space in turn can be
            either explicitly specified or inherited.)
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.I">
            <summary>
            (Optional) A flag specifying whether the transparency group is isolated.
            If this flag is true, objects within the group are composited against a fully
            transparent initial backdrop; if false, they are composited against the
            group’s backdrop.
            Default value: false.
            In the group attributes dictionary for a page, the interpretation of this
            entry is slightly altered. In the normal case in which the page is imposed
            directly on the output medium, the page group is effectively isolated and
            the specified I value is ignored. But if the page is in turn used as an
            element of some other page, it is treated as if it were a transparency
            group XObject; the I value is interpreted in the normal way to determine
            whether the page group is isolated.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.K">
            <summary>
            (Optional) A flag specifying whether the transparency group is a knockout
            group. If this flag is false, later objects within the group are composited
            with earlier ones with which they overlap; if true, they are composited with
            the group’s initial backdrop and overwrite (“knock out”) any earlier
            overlapping objects.
            Default value: false.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTrueTypeFont">
            <summary>
            Represents a TrueType font.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrueTypeFont.#ctor(External.Pdf.PdfDocument,External.Drawing.XFont)">
            <summary>
            Initializes a new instance of PdfTrueTypeFont from an XFont.
            </summary>
        </member>
        <member name="M:External.Pdf.Advanced.PdfTrueTypeFont.PrepareForSave">
            <summary>
            Prepares the object to get saved.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrueTypeFont.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfTrueTypeFont.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Subtype">
            <summary>
            (Required) The type of font; must be TrueType for a TrueType font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Name">
            <summary>
            (Required in PDF 1.0; optional otherwise) The name by which this font is 
            referenced in the Font subdictionary of the current resource dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font. For Type 1 fonts, this is usually
            the value of the FontName entry in the font program; for more information.
            The Post-Script name of the font can be used to find the font’s definition in 
            the consumer application or its environment. It is also the name that is used when
            printing to a PostScript output device.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.FirstChar">
            <summary>
            (Required except for the standard 14 fonts) The first character code defined 
            in the font’s Widths array.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.LastChar">
            <summary>
            (Required except for the standard 14 fonts) The last character code defined
            in the font’s Widths array.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Widths">
            <summary>
            (Required except for the standard 14 fonts; indirect reference preferred)
            An array of (LastChar - FirstChar + 1) widths, each element being the glyph width
            for the character code that equals FirstChar plus the array index. For character
            codes outside the range FirstChar to LastChar, the value of MissingWidth from the 
            FontDescriptor entry for this font is used. The glyph widths are measured in units 
            in which 1000 units corresponds to 1 unit in text space. These widths must be 
            consistent with the actual widths given in the font program. 
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.FontDescriptor">
            <summary>
            (Required except for the standard 14 fonts; must be an indirect reference)
            A font descriptor describing the font’s metrics other than its glyph widths.
            Note: For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and 
            FontDescriptor must either all be present or all be absent. Ordinarily, they are
            absent; specifying them enables a standard font to be overridden.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Encoding">
            <summary>
            (Optional) A specification of the font’s character encoding if different from its
            built-in encoding. The value of Encoding is either the name of a predefined
            encoding (MacRomanEncoding, MacExpertEncoding, or WinAnsiEncoding, as described in 
            Appendix D) or an encoding dictionary that specifies differences from the font’s
            built-in encoding or from a specified predefined encoding.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfTrueTypeFont.Keys.ToUnicode">
            <summary>
            (Optional; PDF 1.2) A stream containing a CMap file that maps character
            codes to Unicode values.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfTrueTypeFont.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfType0Font">
            <summary>
            Represents a composite font. Used for Unicode encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfType0Font.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Advanced.PdfType0Font.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.Subtype">
            <summary>
            (Required) The type of font; must be Type0 for a Type 0 font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font. In principle, this is an arbitrary
            name, since there is no font program associated directly with a Type 0 font
            dictionary. The conventions described here ensure maximum compatibility
            with existing Acrobat products.
            If the descendant is a Type 0 CIDFont, this name should be the concatenation
            of the CIDFont’s BaseFont name, a hyphen, and the CMap name given in the
            Encoding entry (or the CMapName entry in the CMap). If the descendant is a
            Type 2 CIDFont, this name should be the same as the CIDFont’s BaseFont name.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.Encoding">
            <summary>
            (Required) The name of a predefined CMap, or a stream containing a CMap
            that maps character codes to font numbers and CIDs. If the descendant is a
            Type 2 CIDFont whose associated TrueType font program is not embedded
            in the PDF file, the Encoding entry must be a predefined CMap name.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.DescendantFonts">
            <summary>
            (Required) A one-element array specifying the CIDFont dictionary that is the
            descendant of this Type 0 font.
            </summary>
        </member>
        <member name="F:External.Pdf.Advanced.PdfType0Font.Keys.ToUnicode">
            <summary>
            ((Optional) A stream containing a CMap file that maps character codes to
            Unicode values.
            </summary>
        </member>
        <member name="P:External.Pdf.Advanced.PdfType0Font.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfAnnotationFlags">
            <summary>
            Specifies the annotation flags.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.Invisible">
            <summary>
            If set, do not display the annotation if it does not belong to one of the standard
            annotation types and no annotation handler is available. If clear, display such an
            unknown annotation using an appearance stream specified by its appearancedictionary,
            if any.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.Hidden">
            <summary>
            (PDF 1.2) If set, do not display or print the annotation or allow it to interact
            with the user, regardless of its annotation type or whether an annotation
            handler is available. In cases where screen space is limited, the ability to hide
            and show annotations selectively can be used in combination with appearance
            streams to display auxiliary pop-up information similar in function to online
            help systems.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.Print">
            <summary>
            (PDF 1.2) If set, print the annotation when the page is printed. If clear, never
            print the annotation, regardless of whether it is displayed on the screen. This
            can be useful, for example, for annotations representing interactive pushbuttons,
            which would serve no meaningful purpose on the printed page.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.NoZoom">
            <summary>
            (PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification
            of the page. The location of the annotation on the page (defined by the
            upper-left corner of its annotation rectangle) remains fixed, regardless of the
            page magnification. See below for further discussion.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.NoRotate">
            <summary>
            (PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation
            of the page. The upper-left corner of the annotation rectangle remains in a fixed
            location on the page, regardless of the page rotation. See below for further discussion.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.NoView">
            <summary>
            (PDF 1.3) If set, do not display the annotation on the screen or allow it to
            interact with the user. The annotation may be printed (depending on the setting
            of the Print flag) but should be considered hidden for purposes of on-screen
            display and user interaction.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.ReadOnly">
            <summary>
            (PDF 1.3) If set, do not allow the annotation to interact with the user. The
            annotation may be displayed or printed (depending on the settings of the
            NoView and Print flags) but should not respond to mouse clicks or change its
            appearance in response to mouse motions.
            Note: This flag is ignored for widget annotations; its function is subsumed by
            the ReadOnly flag of the associated form field.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.Locked">
            <summary>
            (PDF 1.4) If set, do not allow the annotation to be deleted or its properties
            (including position and size) to be modified by the user. However, this flag does
            not restrict changes to the annotation’s contents, such as the value of a form
            field.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotationFlags.ToggleNoView">
            <summary>
            (PDF 1.5) If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is
            held over it.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfAnnotation">
            <summary>
            Represents the base class of all annotations.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotation.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotation.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotation.Delete">
            <summary>
            Removes an annotation from the document
            <seealso cref="M:External.Pdf.Annotations.PdfAnnotations.Remove(External.Pdf.Annotations.PdfAnnotation)"/>
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Flags">
            <summary>
            Gets or sets the annotation flags of this instance.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Parent">
            <summary>
            Gets or sets the PdfAnnotations object that this annotation belongs to.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Rectangle">
            <summary>
            Gets or sets the annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Title">
            <summary>
            Gets or sets the text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Subject">
            <summary>
            Gets or sets text representing a short description of the subject being
            addressed by the annotation.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Contents">
            <summary>
            Gets or sets the text to be displayed for the annotation or, if this type of
            annotation does not display text, an alternate description of the annotation’s
            contents in human-readable form.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Color">
            <summary>
            Gets or sets the color representing the components of the annotation. If the color
            has an alpha value other than 1, it is ignored. Use property Opacity to get or set the
            opacity of an annotation.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotation.Opacity">
            <summary>
            Gets or sets the constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Annot for an annotation dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Subtype">
            <summary>
            (Required) The type of annotation that this dictionary describes.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Rect">
            <summary>
            (Required) The annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Contents">
            <summary>
            (Optional) Text to be displayed for the annotation or, if this type of annotation
            does not display text, an alternate description of the annotation’s contents
            in human-readable form. In either case, this text is useful when
            extracting the document’s contents in support of accessibility to users with
            disabilities or for other purposes.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.NM">
            <summary>
            (Optional; PDF 1.4) The annotation name, a text string uniquely identifying it
            among all the annotations on its page.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.M">
            <summary>
            (Optional; PDF 1.1) The date and time when the annotation was most recently
            modified. The preferred format is a date string, but viewer applications should be 
            prepared to accept and display a string in any format.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.F">
            <summary>
            (Optional; PDF 1.1) A set of flags specifying various characteristics of the annotation.
            Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.BS">
            <summary>
            (Optional; PDF 1.2) A border style dictionary specifying the characteristics of
            the annotation’s border.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.AP">
            <summary>
            (Optional; PDF 1.2) An appearance dictionary specifying how the annotation
            is presented visually on the page. Individual annotation handlers may ignore
            this entry and provide their own appearances.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.AS">
            <summary>
            (Required if the appearance dictionary AP contains one or more subdictionaries; PDF 1.2)
            The annotation’s appearance state, which selects the applicable appearance stream from 
            an appearance subdictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Border">
            <summary>
            (Optional) An array specifying the characteristics of the annotation’s border.
            The border is specified as a rounded rectangle.
            In PDF 1.0, the array consists of three numbers defining the horizontal corner 
            radius, vertical corner radius, and border width, all in default user space units.
            If the corner radii are 0, the border has square (not rounded) corners; if the border 
            width is 0, no border is drawn.
            In PDF 1.1, the array may have a fourth element, an optional dash array defining a 
            pattern of dashes and gaps to be used in drawing the border. The dash array is 
            specified in the same format as in the line dash pattern parameter of the graphics state.
            For example, a Border value of [0 0 1 [3 2]] specifies a border 1 unit wide, with
            square corners, drawn with 3-unit dashes alternating with 2-unit gaps. Note that no
            dash phase is specified; the phase is assumed to be 0.
            Note: In PDF 1.2 or later, this entry may be ignored in favor of the BS entry.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.C">
            <summary>
            (Optional; PDF 1.1) An array of three numbers in the range 0.0 to 1.0, representing
            the components of a color in the DeviceRGB color space. This color is used for the
            following purposes:
            • The background of the annotation’s icon when closed
            • The title bar of the annotation’s pop-up window
            • The border of a link annotation
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.A">
            <summary>
            (Optional; PDF 1.1) An action to be performed when the annotation is activated.
            Note: This entry is not permitted in link annotations if a Dest entry is present.
            Also note that the A entry in movie annotations has a different meaning.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.T">
            <summary>
            (Optional; PDF 1.1) The text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Popup">
            <summary>
            (Optional; PDF 1.3) An indirect reference to a pop-up annotation for entering or
            editing the text associated with this annotation.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.CA">
            <summary>
            (Optional; PDF 1.4) The constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            The specified value is not used if the annotation has an appearance stream; in that
            case, the appearance stream must specify any transparency. (However, if the viewer
            regenerates the annotation’s appearance stream, it may incorporate the CA value
            into the stream’s content.)
            The implicit blend mode is Normal.
            Default value: 1.0.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfAnnotation.Keys.Subj">
            <summary>
            (Optional; PDF 1.5) Text representing a short description of the subject being
            addressed by the annotation.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfAnnotations">
            <summary>
            Represents the annotations array of a page.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotations.Add(External.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Adds the specified annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotations.Remove(External.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Removes an annotation from the document.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotations.Clear">
            <summary>
            Removes all the annotations from the current page.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotations.FixImportedAnnotation(External.Pdf.PdfPage)">
            <summary>
            Fixes the /P element in imported annotation.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfAnnotations.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotations.Count">
            <summary>
            Gets the number of annotations in this collection.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotations.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:External.Pdf.Annotations.PdfAnnotation"/> at the specified index.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfAnnotations.Page">
            <summary>
            Gets the page the annotations belongs to.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfGenericAnnotation">
            <summary>
            Represents a generic annotation. Used for unknown annotation dictionaries.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfGenericAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfGenericAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfLinkAnnotation">
            <summary>
            Represents a link annotation.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfLinkAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfLinkAnnotation.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfLinkAnnotation.CreateDocumentLink(External.Pdf.PdfRectangle,System.Int32)">
            <summary>
            Creates a link within the current document.
            </summary>
            <param name="rect">The link area in default page coordinates.</param>
            <param name="destinationPage">The one-based destination page number.</param>
        </member>
        <member name="M:External.Pdf.Annotations.PdfLinkAnnotation.CreateWebLink(External.Pdf.PdfRectangle,System.String)">
            <summary>
            Creates a link to the web.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfLinkAnnotation.CreateFileLink(External.Pdf.PdfRectangle,System.String)">
            <summary>
            Creates a link to a file.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfLinkAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfLinkAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfLinkAnnotation.Keys.Dest">
            <summary>
            (Optional; not permitted if an A entry is present) A destination to be displayed
            when the annotation is activated.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfLinkAnnotation.Keys.H">
            <summary>
            (Optional; PDF 1.2) The annotation’s highlighting mode, the visual effect to be
            used when the mouse button is pressed or held down inside its active area:
            N (None) No highlighting.
            I (Invert) Invert the contents of the annotation rectangle.
            O (Outline) Invert the annotation’s border.
            P (Push) Display the annotation as if it were being pushed below the surface of the page.
            Default value: I.
            Note: In PDF 1.1, highlighting is always done by inverting colors inside the annotation rectangle.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfLinkAnnotation.Keys.PA">
            <summary>
            (Optional; PDF 1.3) A URI action formerly associated with this annotation. When Web 
            Capture changes and annotation from a URI to a go-to action, it uses this entry to save 
            the data from the original URI action so that it can be changed back in case the target page for 
            the go-to action is subsequently deleted.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfLinkAnnotation.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfRubberStampAnnotation">
            <summary>
            Represents a rubber stamp annotation.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfRubberStampAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfRubberStampAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfRubberStampAnnotation"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="P:External.Pdf.Annotations.PdfRubberStampAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfRubberStampAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfRubberStampAnnotation.Keys.Name">
            <summary>
            (Optional) The name of an icon to be used in displaying the annotation. Viewer
            applications should provide predefined icon appearances for at least the following
            standard names:
              Approved
              AsIs
              Confidential
              Departmental
              Draft
              Experimental
              Expired
              Final
              ForComment
              ForPublicRelease
              NotApproved
              NotForPublicRelease
              Sold
              TopSecret
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfTextAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfTextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfTextAnnotation"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Annotations.PdfTextAnnotation.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Annotations.PdfTextAnnotation"/> class.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfTextAnnotation.Open">
            <summary>
            Gets or sets a flag indicating whether the annotation should initially be displayed open.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfTextAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfTextAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfTextAnnotation.Keys.Open">
            <summary>
            (Optional) A flag specifying whether the annotation should initially be displayed open.
            Default value: false (closed).
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfTextAnnotation.Keys.Name">
            <summary>
            (Optional) The name of an icon to be used in displaying the annotation. Viewer
            applications should provide predefined icon appearances for at least the following
            standard names:
              Comment 
              Help 
              Insert
              Key 
              NewParagraph 
              Note
              Paragraph
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfWidgetAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="P:External.Pdf.Annotations.PdfWidgetAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Annotations.PdfWidgetAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfWidgetAnnotation.Keys.H">
            <summary>
            (Optional) The annotation’s highlighting mode, the visual effect to be used when
            the mouse button is pressed or held down inside its active area:
              N (None) No highlighting.
              I (Invert) Invert the contents of the annotation rectangle.
              O (Outline) Invert the annotation’s border.
              P (Push) Display the annotation’s down appearance, if any. If no down appearance is defined,
                offset the contents of the annotation rectangle to appear as if it were being pushed below
                the surface of the page.
              T (Toggle) Same as P (which is preferred).
            A highlighting mode other than P overrides any down appearance defined for the annotation. 
            Default value: I.
            </summary>
        </member>
        <member name="F:External.Pdf.Annotations.PdfWidgetAnnotation.Keys.MK">
            <summary>
            (Optional) An appearance characteristics dictionary to be used in constructing a dynamic 
            appearance stream specifying the annotation’s visual presentation on the page.
            The name MK for this entry is of historical significance only and has no direct meaning.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Chars">
            <summary>
            Character table by name. Same as External.Pdf.Pdf.IO.Chars. Not yet clear if necessary.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.CLexer">
            <summary>
            Lexical analyzer for PDF content files. Adobe specifies no grammar, but it seems that it
            is a simple post-fix notation.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Lexer class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanNextToken">
            <summary>
            Reads the next token and returns its type.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanComment">
            <summary>
            Scans a comment line. (Not yet used, comments are skipped by lexer.)
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanInlineImage">
            <summary>
            Scans the bytes of an inline image
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanName">
            <summary>
            Scans a name.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanNumber">
            <summary>
            Scans an integer or real number.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanOperator">
            <summary>
            Scans an operator.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ScanNextChar">
            <summary>
            Move current position one character further in content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.ClearToken">
            <summary>
            Resets the current token to the empty string.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.AppendAndScanNextChar">
            <summary>
            Appends current character to the token and reads next one.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.MoveToNonWhiteSpace">
            <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified character is a content stream white-space character.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.IsOperatorChar(System.Char)">
            <summary>
            Indicates whether the specified character is an content operator character.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CLexer.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF delimiter character.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.CLexer.Symbol">
            <summary>
            Gets or sets the current symbol.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.CLexer.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.CLexer.TokenToInteger">
            <summary>
            Interprets current token as integer literal.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.CLexer.TokenToReal">
            <summary>
            Interpret current token as real or integer literal.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.ContentReader">
            <summary>
            Represents the functionality for reading PDF content streams.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.ContentReader.ReadContent(External.Pdf.PdfPage)">
            <summary>
            Reads the content stream(s) of the specified page.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:External.Pdf.Content.ContentReader.ReadContent(System.Byte[])">
            <summary>
            Reads the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:External.Pdf.Content.ContentReaderException">
            <summary>
            Exception thrown by ContentReader.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfException">
            <summary>
            Base class of all exceptions in the PDF component framework.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfException"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:External.Pdf.PdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:External.Pdf.Content.ContentReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.ContentReaderException"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.ContentReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.ContentReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:External.Pdf.Content.ContentReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.ContentReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:External.Pdf.Content.ContentWriter">
            <summary>
            Represents a writer for generation of PDF streams. 
            </summary>
        </member>
        <member name="M:External.Pdf.Content.ContentWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.ContentWriter.IncreaseIndent">
            <summary>
            Increases indent level.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.ContentWriter.DecreaseIndent">
            <summary>
            Decreases indent level.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.ContentWriter.Indent">
            <summary>
            Gets or sets the indentation for a new indentation level.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.ContentWriter.IndentBlanks">
            <summary>
            Gets an indent string of current indent.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.ContentWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.CParser">
            <summary>
            Provides the functionality to parse PDF content streams.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CParser.ParseObject(External.Pdf.Content.Objects.CSequence,External.Pdf.Content.CSymbol)">
            <summary>
            Parses whatever comes until the specified stop symbol is reached.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.CParser.ReadSymbol(External.Pdf.Content.CSymbol)">
            <summary>
            Reads the next symbol that must be the specified one.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.CSymbol">
            <summary>
            Terminal symbols recognized by PDF content stream lexer.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CObject">
            <summary>
            Base class for all PDF content stream objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.Objects.CObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CObject.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CObject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CObject.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CObject.WriteObject(External.Pdf.Content.ContentWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CComment">
            <summary>
            Represents a comment in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CComment.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CComment.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CComment.ToString">
            <summary>
            Returns a string that represents the current comment.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CComment.Text">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CSequence">
            <summary>
            Represents a sequence of objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Add(External.Pdf.Content.Objects.CSequence)">
            <summary>
            Adds the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Add(External.Pdf.Content.Objects.CObject)">
            <summary>
            Adds the specified value add the end of the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Clear">
            <summary>
            Removes all elements from the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Contains(External.Pdf.Content.Objects.CObject)">
            <summary>
            Determines whether the specified value is in the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.IndexOf(External.Pdf.Content.Objects.CObject)">
            <summary>
            Returns the index of the specified value in the sequence or -1, if no such value is in the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Insert(System.Int32,External.Pdf.Content.Objects.CObject)">
            <summary>
            Inserts the specified value in the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.Remove(External.Pdf.Content.Objects.CObject)">
            <summary>
            Removes the specified value from the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index from the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.CopyTo(External.Pdf.Content.Objects.CObject[],System.Int32)">
            <summary>
            Copies the elements of the sequence to the specified array.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sequence.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.ToContent">
            <summary>
            Converts the sequence to a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CSequence.ToString">
            <summary>
            Returns a string containing all elements of the sequence.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CSequence.Item(System.Int32)">
            <summary>
            Gets or sets a CObject at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:External.Pdf.Content.Objects.CSequence.Count">
            <summary>
            Gets the number of elements contained in the sequence.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CNumber">
            <summary>
            Represents the base class for numerical objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CNumber.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CNumber.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CInteger">
            <summary>
            Represents an integer value in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CInteger.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CInteger.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CInteger.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CInteger.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CReal">
            <summary>
            Represents a real value in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CReal.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CReal.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CReal.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CReal.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CString">
            <summary>
            Represents a string value in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CString.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CString.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CString.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CName">
            <summary>
            Represents a name in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.Objects.CName"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.Objects.CName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:External.Pdf.Content.Objects.CName.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CName.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CName.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.CName.Name">
            <summary>
            Gets or sets the name. Names must start with a slash.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.CArray">
            <summary>
            Represents an array of objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CArray.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CArray.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.CArray.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.COperator">
            <summary>
            Represents an operator a PDF content stream.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.COperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.Objects.COperator"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.COperator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.COperator.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.COperator.ToString">
            <summary>
            Returns a string that represents the current operator.
            </summary>
        </member>
        <member name="P:External.Pdf.Content.Objects.COperator.Name">
            <summary>
            Gets or sets the name of the operator
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:External.Pdf.Content.Objects.COperator.Operands">
            <summary>
            Gets or sets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="P:External.Pdf.Content.Objects.COperator.OpCode">
            <summary>
            Gets the operator description for this instance.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.OpCodeFlags">
            <summary>
            Specifies the group of operations the op-code belongs to.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCodeFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCodeFlags.TextOut">
            <summary>
            
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.OpCodeName">
            <summary>
            The names of the op-codes. 
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.OpCode">
            <summary>
            Represents a PDF content stream operator description.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.OpCode.#ctor(System.String,External.Pdf.Content.Objects.OpCodeName,System.Int32,System.String,External.Pdf.Content.Objects.OpCodeFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.Content.Objects.OpCode"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="opcodeName">The enum value of the operator.</param>
            <param name="operands">The number of operands.</param>
            <param name="postscript">The postscript equivalent, or null, if no such operation exists.</param>
            <param name="flags">The flags.</param>
            <param name="description">The description from Adobe PDF Reference.</param>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.Name">
            <summary>
            The name of the operator.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.OpCodeName">
            <summary>
            The enum value of the operator.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.Operands">
            <summary>
            The number of operands. -1 indicates a variable number of operands.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.Postscript">
            <summary>
            The postscript equivalent, or null, if no such operation exists.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCode.Description">
            <summary>
            The description from Adobe PDF Reference.
            </summary>
        </member>
        <member name="T:External.Pdf.Content.Objects.OpCodes">
            <summary>
            Static class with all PDF op-codes.
            </summary>
        </member>
        <member name="M:External.Pdf.Content.Objects.OpCodes.OperatorFromName(System.String)">
            <summary>
            Operators from name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:External.Pdf.Content.Objects.OpCodes.#cctor">
            <summary>
            Initializes the <see cref="T:External.Pdf.Content.Objects.OpCodes"/> class.
            </summary>
        </member>
        <member name="F:External.Pdf.Content.Objects.OpCodes.ops">
            <summary>
            Array of all OpCodes.
            </summary>
        </member>
        <member name="T:External.Pdf.Drawing.StreamMode">
            <summary>
            Indicates whether we are within a BT/ET block.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.StreamMode.Graphic">
            <summary>
            Graphic mode. This is default.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.StreamMode.Text">
            <summary>
            Text mode.
            </summary>
        </member>
        <member name="T:External.Pdf.Drawing.PdfGraphicsState">
            <summary>
            Represents the current PDF graphics state.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.PdfGraphicsState.realizedCtm">
            <summary>
            The realized current transformation matrix.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.PdfGraphicsState.unrealizedCtm">
            <summary>
            The unrealized current transformation matrix.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.PdfGraphicsState.MustRealizeCtm">
            <summary>
            A flag indicating whether the CTM must be realized.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.PdfGraphicsState.MultiplyTransform(External.Drawing.XMatrix,External.Drawing.XMatrixOrder)">
            <summary>
            Modifies the current transformation matrix.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.PdfGraphicsState.RealizeCtm">
            <summary>
            Realizes the CTM.
            </summary>
        </member>
        <member name="T:External.Pdf.Drawing.XGraphicsPdfRenderer">
            <summary>
            Represents a drawing surface for PdfPages.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.GraphicsStackLevelInitial">
            <summary>
            The q/Q nesting level is 0.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.GraphicsStackLevelPageSpace">
            <summary>
            The q/Q nesting level is 1.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.GraphicsStackLevelWorldSpace">
            <summary>
            The q/Q nesting level is 2.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.GetContent">
            <summary>
            Gets the content created by this renderer.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.DrawLine(External.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Strokes a single connection of two points.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.DrawLines(External.Drawing.XPen,External.Drawing.XPoint[])">
            <summary>
            Strokes a series of connected points.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Save(External.Drawing.XGraphicsState)">
            <summary>
            Clones the current graphics state and push it on a stack.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.ResetClip">
            <summary>
            Sets the clip path empty. Only possible if graphic state level has the same value as it has when
            the first time SetClip was invoked.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.clipLevel">
            <summary>
            The nesting level of the PDF graphics state stack when the clip region was set to non empty.
            Because of the way PDF is made the clip region can only be reset at this level.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.WriteComment(System.String)">
            <summary>
            Writes a comment to the PDF content stream. May be useful for debugging purposes.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.AppendPartialArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,External.Drawing.PathStart,External.Drawing.XMatrix)">
            <summary>
            Appends one or up to five Bézier curves that interpolate the arc.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Quatrant(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets the quadrant (0 through 3) of the specified angle. If the angle lies on an edge
            (0, 90, 180, etc.) the result depends on the details how the angle is used.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.AppendPartialArcQuadrant(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,External.Drawing.PathStart,External.Drawing.XMatrix)">
            <summary>
            Appends a Bézier curve for an arc within a quadrant.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.AppendCurveSegment(External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,External.Drawing.XPoint,System.Double)">
            <summary>
            Appends a Bézier curve for a cardinal spline through pt1 and pt2.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.AppendPath(System.Windows.Media.PathGeometry)">
            <summary>
            Appends the content of a PathGeometry object.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.BeginPage">
            <summary>
            Initializes the default view transformation, i.e. the transformation from the user page
            space to the PDF page space.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.EndPage">
            <summary>
            Ends the content stream, i.e. ends the text mode and balances the graphic state stack.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.BeginGraphic">
            <summary>
            Begins the graphic mode (i.e. ends the text mode).
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Realize(External.Drawing.XPen,External.Drawing.XBrush)">
            <summary>
            Makes the specified pen and brush to the current graphics objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Realize(External.Drawing.XPen)">
            <summary>
            Makes the specified pen to the current graphics object.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Realize(External.Drawing.XBrush)">
            <summary>
            Makes the specified brush to the current graphics object.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Realize(External.Drawing.XFont,External.Drawing.XBrush,System.Int32)">
            <summary>
            Makes the specified font and brush to the current graphics objects.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.Realize(External.Drawing.XImage)">
            <summary>
            Makes the specified image to the current graphics object.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.RealizeTransform">
            <summary>
            Realizes the current transformation matrix, if necessary.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.GetFontName(External.Drawing.XFont,External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this page or form.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.GetImageName(External.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this page or form.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.GetFormName(External.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this page or form.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.SaveState">
            <summary>
            Saves the current graphical state.
            </summary>
        </member>
        <member name="M:External.Pdf.Drawing.XGraphicsPdfRenderer.RestoreState">
            <summary>
            Restores the previous graphical state.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.gfxState">
            <summary>
            The current graphical state.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.gfxStateStack">
            <summary>
            The graphical state stack.
            </summary>
        </member>
        <member name="F:External.Pdf.Drawing.XGraphicsPdfRenderer.defaultViewMatrix">
            <summary>
            The final transformation from the world space to the default page space.
            </summary>
        </member>
        <member name="P:External.Pdf.Drawing.XGraphicsPdfRenderer.Owner">
            <summary>
            Gets the owning PdfDocument of this page or form.
            </summary>
        </member>
        <member name="P:External.Pdf.Drawing.XGraphicsPdfRenderer.Resources">
            <summary>
            Gets the PdfResources of this page or form.
            </summary>
        </member>
        <member name="P:External.Pdf.Drawing.XGraphicsPdfRenderer.Size">
            <summary>
            Gets the size of this page or form.
            </summary>
        </member>
        <member name="T:External.Pdf.KeyType">
            <summary>
            Specifies the type of a key's value in a dictionary.
            </summary>
        </member>
        <member name="T:External.Pdf.KeyInfoAttribute">
            <summary>
            Summary description for KeyInfo.
            </summary>
        </member>
        <member name="T:External.Pdf.DocumentState">
            <summary>
            Identifies the state of the document
            </summary>
        </member>
        <member name="F:External.Pdf.DocumentState.Created">
            <summary>
            The document was created from scratch.
            </summary>
        </member>
        <member name="F:External.Pdf.DocumentState.Imported">
            <summary>
            The document was created by opening an existing PDF file.
            </summary>
        </member>
        <member name="F:External.Pdf.DocumentState.Disposed">
            <summary>
            The document is disposed.
            </summary>
        </member>
        <member name="T:External.Pdf.PageSize">
            <summary>
            Identifies the most popular predefined page sizes.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Undefined">
            <summary>
            The width or height of the page are set manually and override the PageSize property.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A0">
            <summary>
            Identifies a paper sheet size of 841 mm times 1189 mm or 33.11 inch times 46.81 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A1">
            <summary>
            Identifies a paper sheet size of 594 mm times 841 mm or 23.39 inch times 33.1 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A2">
            <summary>
            Identifies a paper sheet size of 420 mm times 594 mm or 16.54 inch times 23.29 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A3">
            <summary>
            Identifies a paper sheet size of 297 mm times 420 mm or 11.69 inch times 16.54 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A4">
            <summary>
            Identifies a paper sheet size of 210 mm times 297 mm or 8.27 inch times 11.69 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.A5">
            <summary>
            Identifies a paper sheet size of 148 mm times 210 mm or 5.83 inch times 8.27 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA0">
            <summary>
            Identifies a paper sheet size of 860 mm times 1220 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA1">
            <summary>
            Identifies a paper sheet size of 610 mm times 860 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA2">
            <summary>
            Identifies a paper sheet size of 430 mm times 610 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA3">
            <summary>
            Identifies a paper sheet size of 305 mm times 430 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA4">
            <summary>
            Identifies a paper sheet size of 215 mm times 305 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.RA5">
            <summary>
            Identifies a paper sheet size of 153 mm times 215 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B0">
            <summary>
            Identifies a paper sheet size of 1000 mm times 1414 mm or 39.37 inch times 55.67 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B1">
            <summary>
            Identifies a paper sheet size of 707 mm times 1000 mm or 27.83 inch times 39.37 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B2">
            <summary>
            Identifies a paper sheet size of 500 mm times 707 mm or 19.68 inch times 27.83 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B3">
            <summary>
            Identifies a paper sheet size of 353 mm times 500 mm or 13.90 inch times 19.68 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B4">
            <summary>
            Identifies a paper sheet size of 250 mm times 353 mm or 9.84 inch times 13.90 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.B5">
            <summary>
            Identifies a paper sheet size of 176 mm times 250 mm or 6.93 inch times 9.84 inch.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Quarto">
            <summary>
            Identifies a paper sheet size of 10 inch times 8 inch or 254 mm times 203 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Foolscap">
            <summary>
            Identifies a paper sheet size of 13 inch times 8 inch or 330 mm times 203 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Executive">
            <summary>
             Identifies a paper sheet size of 10.5 inch times 7.25 inch or 267 mm times 184 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.GovernmentLetter">
            <summary>
            Identifies a paper sheet size of 10.5 inch times 8 inch 267 mm times 203 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Letter">
            <summary>
            Identifies a paper sheet size of 11 inch times 8.5 inch 279 mm times 216 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Legal">
            <summary>
            Identifies a paper sheet size of 14 inch times 8.5 inch 356 mm times 216 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Ledger">
            <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Tabloid">
            <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Post">
            <summary>
            Identifies a paper sheet size of 19.25 inch times 15.5 inch 489 mm times 394 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Crown">
            <summary>
            20 ×Identifies a paper sheet size of 20 inch times 15 inch or 508 mm times 381 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.LargePost">
            <summary>
            Identifies a paper sheet size of 21 inch times 16.5 inch 533 mm times 419 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Demy">
            <summary>
            Identifies a paper sheet size of 22.5 inch times 17.5 inch 572 mm times 445 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Medium">
            <summary>
            Identifies a paper sheet size of 23 inch times 18 inch or 584 mm times 457 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Royal">
            <summary>
            Identifies a paper sheet size of 25 inch times 20 inch or 635 mm times 508 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Elephant">
            <summary>
            Identifies a paper sheet size of 28 inch times 23 inch or 711 mm times 584 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.DoubleDemy">
            <summary>
            Identifies a paper sheet size of 35 inch times 23.5 inch or 889 mm times 597 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.QuadDemy">
            <summary>
            Identifies a paper sheet size of 45 inch times 35 inch 1143 times 889 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.STMT">
            <summary>
            Identifies a paper sheet size of 8.5 inch times 5.5 inch or 216 mm times 396 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Folio">
            <summary>
            Identifies a paper sheet size of 8.5 inch times 13 inch or 216 mm times 330 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Statement">
            <summary>
            Identifies a paper sheet size of 5.5 inch times 8.5 inch or 396 mm times 216 mm.
            </summary>
        </member>
        <member name="F:External.Pdf.PageSize.Size10x14">
            <summary>
            Identifies a paper sheet size of 10 inch times 14 inch.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfColorMode">
            <summary>
            Specifies what color model is used in a PDF document.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfColorMode.Undefined">
            <summary>
            All color values are written as specified in the XColor objects they come from.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfColorMode.Rgb">
            <summary>
            All colors are converted to RGB.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfColorMode.Cmyk">
            <summary>
            All colors are converted to CMYK.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfCustomValueCompressionMode">
            <summary>
            This class is undocumented and may change or drop in future releases.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfCustomValueCompressionMode.Default">
            <summary>
            Use document default to determine compression.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfCustomValueCompressionMode.Uncompressed">
            <summary>
            Leave custom values uncompressed.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfCustomValueCompressionMode.Compressed">
            <summary>
            Compress custom values using FlateDecode.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfFontEmbedding">
            <summary>
            Specifies the embedding options of an XFont when converted into PDF.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEmbedding.Default">
            <summary>
            Unicode fonts are embedded, WinAnsi fonts are not embedded.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEmbedding.None">
            <summary>
            Fonts are not embedded.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEmbedding.Always">
            <summary>
            All fonts are embedded.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEmbedding.Automatic">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfFontEncoding">
            <summary>
            Specifies the encoding schema used for an XFont when converted into PDF.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEncoding.WinAnsi">
            <summary>
            Windows ANSI encoding.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEncoding.CP1252">
            <summary>
            Alternate name for Windows ANSI encoding.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfFontEncoding.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfOutlineStyle">
            <summary>
            Specifies the font style for the outline (bookmark) text.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutlineStyle.Regular">
            <summary>
            Regular font.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutlineStyle.Italic">
            <summary>
            Italic font.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutlineStyle.Bold">
            <summary>
            Bold font.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutlineStyle.BoldItalic">
            <summary>
            Bold and italic font.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPageLayout">
            <summary>
            Specifies the page layout to be used by a viewer when the document is opened.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with oddnumbered pages on the left.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with oddnumbered pages on the right.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.TwoPageLeft">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageLayout.TwoPageRight">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPageMode">
            <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, windowcontrols, or any other window visible.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.UseOC">
            <summary>
            (PDF 1.5) Optional content group panel visible.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPageMode.UseAttachments">
            <summary>
            (PDF 1.6) Attachments panel visible.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfReadingDirection">
            <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfReadingDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfReadingDirection.RightToLeft">
            <summary>
            Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.ASCII85Decode">
            <summary>
            Implements the ASCII85Decode filter.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.Filter">
            <summary>
            Base class for all stream filters
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.Encode(System.Byte[])">
            <summary>
            When implemented in a derived class encodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.Encode(System.String)">
            <summary>
            Encodes a raw string.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.Decode(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            When implemented in a derived class decodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.Decode(System.Byte[])">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.DecodeToString(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes to a raw string.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.DecodeToString(System.Byte[])">
            <summary>
            Decodes to a raw string.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filter.RemoveWhiteSpace(System.Byte[])">
            <summary>
            Removes all white spaces from the data. The function assumes that the bytes are characters.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.ASCII85Decode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.ASCII85Decode.Decode(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.ASCIIHexDecode">
            <summary>
            Implements the ASCIIHexDecode filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.ASCIIHexDecode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.ASCIIHexDecode.Decode(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.FilterParms">
            <summary>
            Reserved for future extension.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.Filtering">
            <summary>
            Applies standard filters to streams.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.GetFilter(System.String)">
            <summary>
            Gets the filter specified by the case sensitive name.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.Encode(System.Byte[],System.String)">
            <summary>
            Encodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.Encode(System.String,System.String)">
            <summary>
            Encodes a raw string with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.Decode(System.Byte[],System.String,External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.Decode(System.Byte[],System.String)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.Decode(System.Byte[],External.Pdf.PdfItem)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.DecodeToString(System.Byte[],System.String,External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes to a raw string with the specified filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.Filtering.DecodeToString(System.Byte[],System.String)">
            <summary>
            Decodes to a raw string with the specified filter.
            </summary>
        </member>
        <member name="P:External.Pdf.Filters.Filtering.ASCIIHexDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:External.Pdf.Filters.Filtering.ASCII85Decode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:External.Pdf.Filters.Filtering.LzwDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:External.Pdf.Filters.Filtering.FlateDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.FlateDecode">
            <summary>
            Implements the FlateDecode filter by wrapping SharpZipLib.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.FlateDecode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.FlateDecode.Decode(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:External.Pdf.Filters.LzwDecode">
            <summary>
            Implements the LzwDecode filter.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.LzwDecode.Encode(System.Byte[])">
            <summary>
            Throws a NotImplementedException because the obsolete LZW encoding is not supported.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.LzwDecode.Decode(System.Byte[],External.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.LzwDecode.InitializeDictionary">
            <summary>
            Initialize the dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Filters.LzwDecode.AddEntry(System.Byte[],System.Byte)">
            <summary>
            Add a new entry to the Dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.Filters.LzwDecode.NextCode">
            <summary>
            Returns the next set of bits.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.AnsiEncoding">
            <summary>
            An encoder for PDF AnsiEncoding.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.AnsiEncoding.IsAnsi1252Char(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is available in the ANSI code page 1252.
            </summary>
        </member>
        <member name="F:External.Pdf.Internal.AnsiEncoding.AnsiToUnicode">
            <summary>
            Converts WinAnsi to Unicode characters.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.ColorSpaceHelper">
            <summary>
            Helper functions for RGB and CMYK colors.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.ColorSpaceHelper.EnsureColorMode(External.Pdf.PdfColorMode,External.Drawing.XColor)">
            <summary>
            Checks whether a color mode and a color match.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.ColorSpaceHelper.EnsureColorMode(External.Pdf.PdfDocument,External.Drawing.XColor)">
            <summary>
            Checks whether the color mode of a document and a color match.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.ColorSpaceHelper.IsEqualCmyk(External.Drawing.XColor,External.Drawing.XColor)">
            <summary>
            Determines whether two colors are equal referring to their CMYK color values.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.DocEncoding">
            <summary>
            An encoder for PDF DocEncoding.
            </summary>
        </member>
        <member name="F:External.Pdf.Internal.DocEncoding.AnsiToDoc">
            <summary>
            Converts WinAnsi to DocEncode characters. Incomplete, just maps € and some other characters.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.GlobalObjectTable">
            <summary>
            Provides a thread-local cache for large objects.
            </summary>
        </member>
        <member name="F:External.Pdf.Internal.GlobalObjectTable.documentHandles">
            <summary>
            Array of handles to all documents.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.PdfEncoders">
            <summary>
            Groups a set of static encoding helper functions.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToStringLiteral(System.String,External.Pdf.PdfStringEncoding,External.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToStringLiteral(System.Byte[],System.Boolean,External.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToHexStringLiteral(System.String,External.Pdf.PdfStringEncoding,External.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw hexadecimal string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToHexStringLiteral(System.Byte[],System.Boolean,External.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw hexadecimal string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.FormatStringLiteral(System.Byte[],System.Boolean,System.Boolean,System.Boolean,External.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts the specified byte array into a byte array representing a string literal.
            </summary>
            <param name="bytes">The bytes of the string.</param>
            <param name="unicode">Indicates whether one or two bytes are one character.</param>
            <param name="prefix">Indicates whether to use Unicode prefix.</param>
            <param name="hex">Indicates whether to create a hexadecimal string literal.</param>
            <param name="securityHandler">Encrypts the bytes if specified.</param>
            <returns>The PDF bytes.</returns>
        </member>
        <member name="F:External.Pdf.Internal.PdfEncoders.docencode_______">
            <summary>
            Converts WinAnsi to DocEncode characters. Incomplete, just maps € and some other characters.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.Format(System.String,System.Object[])">
            <summary>
            ...because I always forget CultureInfo.InvariantCulture and wonder why Acrobat
            cannot understand my German decimal separator...
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToString(System.Double)">
            <summary>
            Converts a float into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToString(External.Drawing.XColor,External.Pdf.PdfColorMode)">
            <summary>
            Converts an XColor into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="M:External.Pdf.Internal.PdfEncoders.ToString(External.Drawing.XMatrix)">
            <summary>
            Converts an XMatrix into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="P:External.Pdf.Internal.PdfEncoders.RawEncoding">
            <summary>
            Gets the raw encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.Internal.PdfEncoders.RawUnicodeEncoding">
            <summary>
            Gets the raw Unicode encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.Internal.PdfEncoders.WinAnsiEncoding">
            <summary>
            Gets the Windows 1252 (ANSI) encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.Internal.PdfEncoders.DocEncoding">
            <summary>
            Gets the PDF DocEncoding encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.Internal.PdfEncoders.UnicodeEncoding">
            <summary>
            Gets the UNICODE little-endian encoding.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.RawEncoding">
            <summary>
            An encoder for raw strings. The raw encoding is simply the identity relation between
            characters and bytes. PDF component internally works with raw encoded strings instead of
            byte arrays because strings are much more handy than byte arrays.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.RawUnicodeEncoding">
            <summary>
            An encoder for Unicode strings.
            </summary>
        </member>
        <member name="T:External.Pdf.Internal.ThreadLocalStorage">
            <summary>
            Provides a thread-local cache for large objects.
            </summary>
        </member>
        <member name="F:External.Pdf.Internal.ThreadLocalStorage.importedDocuments">
            <summary>
            Maps path to document handle.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.Chars">
            <summary>
            Character table by name.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PasswordValidity">
            <summary>
            Determines the type of the password.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PasswordValidity.Invalid">
            <summary>
            Password is neither user nor owner password.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PasswordValidity.UserPassword">
            <summary>
            Password is user password.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PasswordValidity.OwnerPassword">
            <summary>
            Password is owner password.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfDocumentOpenMode">
            <summary>
            Determines how a PDF document is opened. 
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfDocumentOpenMode.Modify">
            <summary>
            The PDF stream is completely read into memory and can be modified. Pages can be deleted or
            inserted, but it is not possible to extract pages. This mode is useful for modifying an
            existing PDF document.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfDocumentOpenMode.Import">
            <summary>
            The PDF stream is opened for importing pages from it. A document opened in this mode cannot
            be modified.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfDocumentOpenMode.ReadOnly">
            <summary>
            The PDF stream is completely read into memory, but cannot be modified. This mode preserves the
            original internal structure of the document and is useful for analyzing existing PDF files.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfDocumentOpenMode.InformationOnly">
            <summary>
            The PDF stream is partially read for information purposes only. The only valid operation is to
            call the Info property at the imported document. This option is very fast and needs less memory
            and is e.g. useful for browsing information about a collection of PDF documents in a user interface.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfWriterLayout">
            <summary>
            Determines how the PDF output stream is formatted. Even all formats create valid PDF files,
            only Compact or Standard should be used for production purposes.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterLayout.Compact">
            <summary>
            The PDF stream contains no unnecessary characters. This is default in release build.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterLayout.Standard">
            <summary>
            The PDF stream contains some superfluous line feeds, but is more readable.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterLayout.Indented">
            <summary>
            The PDF stream is indented to reflect the nesting levels of the objects. This is useful
            for analyzing PDF files, but increases the size of the file significantly.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterLayout.Verbose">
            <summary>
            The PDF stream is indented to reflect the nesting levels of the objects and contains additional
            information about the PDF component objects. Furthermore content streams are not deflated. This 
            is useful for debugging purposes only and increases the size of the file significantly.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfWriterOptions">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterOptions.Regular">
            <summary>
            If only this flag is specified the result is a regular valid PDF stream.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterOptions.OmitStream">
            <summary>
            Omit writing stream data. For debugging purposes only. 
            With this option the result is not valid PDF.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.PdfWriterOptions.OmitInflation">
            <summary>
            Omit inflate filter. For debugging purposes only.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.Symbol">
            <summary>
            Terminal symbols recognized by lexer.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.Lexer">
            <summary>
            Lexical analyzer for PDF files. Technically a PDF file is a stream of bytes. Some chunks
            of bytes represent strings in several encodings. The actual encoding depends on the
            context where the string is used. Therefore the bytes are 'raw encoded' into characters,
            i.e. a character or token read by the lexer has always character values in the range from
            0 to 255.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Lexer class.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.Initialize">
            <summary>
            Initializes fields after position has changed.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ScanNextToken">
            <summary>
            Reads the next token and returns its type. If the token starts with a digit, the parameter
            testReference specifies how to treat it. If it is false, the lexer scans for a single integer.
            If it is true, the lexer checks if the digit is the prefix of a reference. If it is a reference,
            the token is set to the object ID followed by the generation number separated by a blank
            (the 'R' is omitted from the token).
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ReadStream(System.Int32)">
            <summary>
            Reads the raw content of a stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ReadRawString(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ScanComment">
            <summary>
            Scans a comment line.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ScanName">
            <summary>
            Scans a name.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ScanNextChar">
            <summary>
            Move current position one character further in PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.ClearToken">
            <summary>
            Resets the current token to the empty string.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.AppendAndScanNextChar">
            <summary>
            Appends current character to the token and reads next one.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.MoveToNonWhiteSpace">
            <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF white-space character.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Lexer.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF delimiter character.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.Position">
            <summary>
            Gets or sets the position within the PDF stream.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.Symbol">
            <summary>
            Gets the current symbol.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.TokenToBoolean">
            <summary>
            Interprets current token as boolean literal.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.TokenToInteger">
            <summary>
            Interprets current token as integer literal.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.TokenToUInteger">
            <summary>
            Interprets current token as unsigned integer literal.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.Lexer.TokenToReal">
            <summary>
            Interpret current token as real or integer literal.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.Parser">
            <summary>
            Provides the functions to parse PDF documents.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.MoveToObject(External.Pdf.PdfObjectID)">
            <summary>
            Sets PDF input stream position to the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadObject(External.Pdf.PdfObject,External.Pdf.PdfObjectID,System.Boolean)">
            <summary>
            Reads PDF object from input stream.
            </summary>
            <param name="pdfObject">Either the instance of a derived type or null. If it is null
            an appropriate object is created.</param>
            <param name="objectID">The address of the object.</param>
            <param name="includeReferences">If true, specifies that all indirect objects
            are included recursively.</param>
        </member>
        <member name="M:External.Pdf.IO.Parser.ParseObject(External.Pdf.IO.Symbol)">
            <summary>
            Parses whatever comes until the specified stop symbol is reached.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadObjectID(External.Pdf.PdfObject)">
            <summary>
            Reads the object ID and the generation and sets it into the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadSymbol(External.Pdf.IO.Symbol)">
            <summary>
            Reads the next symbol that must be the specified one.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadToken(System.String)">
            <summary>
            Reads the next token that must be the specified one.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadName">
            <summary>
            Reads a name from the PDF data stream. The preceding slash is part of the result string.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadInteger(System.Boolean)">
            <summary>
            Reads an integer value directly from the PDF data stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadObject(External.Pdf.PdfDocument,External.Pdf.PdfObjectID)">
            <summary>
            Reads an object from the PDF input stream using the default parser.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadTrailer">
            <summary>
            Reads the iref table and the trailer dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ReadXRefTableAndTrailer(External.Pdf.PdfReferenceTable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:External.Pdf.IO.Parser.ParseDateTime(System.String,System.DateTime)">
            <summary>
            Parses a PDF date string.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfPasswordProviderArgs">
            <summary>
            Encapsulates the arguments of the PdfPasswordProvider delegate.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfPasswordProvider">
            <summary>
            A delegated used by the PdfReader.Open function to retrieve a password if the document is protected.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfReader">
            <summary>
            Represents the functionality for reading PDF documents.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.TestPdfFile(System.String)">
            <summary>
            Determines whether the file specified by its path is a PDF file by inspecting the first eight
            bytes of the data. If the file header has the form «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the file header is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.TestPdfFile(System.IO.Stream)">
            <summary>
            Determines whether the specified stream is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.TestPdfFile(System.Byte[])">
            <summary>
            Determines whether the specified data is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.GetPdfFileVersion(System.Byte[])">
            <summary>
            Implements scanning the PDF file version.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String,External.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String,External.Pdf.IO.PdfDocumentOpenMode,External.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String,System.String,External.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String,System.String,External.Pdf.IO.PdfDocumentOpenMode,External.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.String,System.String)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.IO.Stream,External.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.IO.Stream,External.Pdf.IO.PdfDocumentOpenMode,External.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,External.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,External.Pdf.IO.PdfDocumentOpenMode,External.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReader.Open(System.IO.Stream)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.PdfReaderException">
            <summary>
            Exception thrown by PdfReader.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.IO.PdfReaderException"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.IO.PdfReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:External.Pdf.IO.PdfReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.IO.PdfReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:External.Pdf.IO.PdfWriter">
            <summary>
            Represents a writer for generation of PDF streams. 
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfBoolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(System.Int32)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(System.UInt32)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfInteger)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfUInteger)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(System.Double)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfReal)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfString)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.Write(External.Pdf.PdfName)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.WriteBeginObject(External.Pdf.PdfObject)">
            <summary>
            Begins a direct or indirect dictionary or array.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.WriteEndObject">
            <summary>
            Ends a direct or indirect dictionary or array.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.WriteStream(External.Pdf.PdfDictionary,System.Boolean)">
            <summary>
            Writes the stream of the specified dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.IncreaseIndent">
            <summary>
            Increases indent level.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.PdfWriter.DecreaseIndent">
            <summary>
            Decreases indent level.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.PdfWriter.Indent">
            <summary>
            Gets or sets the indentation for a new indentation level.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.PdfWriter.IndentBlanks">
            <summary>
            Gets an indent string of current indent.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.PdfWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:External.Pdf.IO.ShiftStack">
            <summary>
            Represents the stack for the shift-reduce parser. It seems that it is only needed for
            reduction of indirect references.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.ShiftStack.GetItem(System.Int32)">
            <summary>
            Gets an item relative to the current stack pointer. The index must be a negative value (-1, -2, etc.).
            </summary>
        </member>
        <member name="M:External.Pdf.IO.ShiftStack.GetInteger(System.Int32)">
            <summary>
            Gets an item relative to the current stack pointer. The index must be a negative value (-1, -2, etc.).
            </summary>
        </member>
        <member name="M:External.Pdf.IO.ShiftStack.Shift(External.Pdf.PdfItem)">
            <summary>
            Pushes the specified item onto the stack.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.ShiftStack.Reduce(System.Int32)">
            <summary>
            Replaces the last 'count' items with the specified item.
            </summary>
        </member>
        <member name="M:External.Pdf.IO.ShiftStack.Reduce(External.Pdf.PdfItem,System.Int32)">
            <summary>
            Replaces the last 'count' items with the specified item.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.ShiftStack.sp">
            <summary>
            The stack pointer index. Points to the next free item.
            </summary>
        </member>
        <member name="F:External.Pdf.IO.ShiftStack.items">
            <summary>
            An array representing the stack.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.ShiftStack.SP">
            <summary>
            Gets the stack pointer index.
            </summary>
        </member>
        <member name="P:External.Pdf.IO.ShiftStack.Item(System.Int32)">
            <summary>
            Gets the value at the specified index. Valid index is in range 0 up to sp-1.
            </summary>
        </member>
        <member name="T:External.Pdf.KeyDescriptor">
            <summary>
            Hold information about the value of a key in a dictionary. This information is used to create
            and interpret this value.
            </summary>
        </member>
        <member name="M:External.Pdf.KeyDescriptor.#ctor(External.Pdf.KeyInfoAttribute)">
            <summary>
            Initializes a new instance of KeyDescriptor from the specified attribute during a KeysMeta
            initializes itself using reflection.
            </summary>
        </member>
        <member name="M:External.Pdf.KeyDescriptor.GetValueType">
            <summary>
            Returns the type of the object to be created as value for the described key.
            </summary>
        </member>
        <member name="P:External.Pdf.KeyDescriptor.Version">
            <summary>
            Gets or sets the PDF version starting with the availability of the described key.
            </summary>
        </member>
        <member name="T:External.Pdf.DictionaryMeta">
            <summary>
            Contains meta information about all keys of a PDF dictionary.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfBoolean">
            <summary>
            Represents a direct boolean value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfBoolean"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfBoolean"/> class.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfBoolean.True">
            <summary>
            A pre-defined value that represents <c>true</c>.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfBoolean.False">
            <summary>
            A pre-defined value that represents <c>false</c>.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBoolean.ToString">
            <summary>
            Returns 'false' or 'true'.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBoolean.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes 'true' or 'false'.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfBoolean.Value">
            <summary>
            Gets the value of this instance as boolean value.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfBooleanObject">
            <summary>
            Represents an indirect boolean value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBooleanObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBooleanObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBooleanObject.#ctor(External.Pdf.PdfDocument,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBooleanObject.ToString">
            <summary>
            Returns "false" or "true".
            </summary>
        </member>
        <member name="M:External.Pdf.PdfBooleanObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the keyword «false» or «true».
            </summary>
        </member>
        <member name="P:External.Pdf.PdfBooleanObject.Value">
            <summary>
            Gets the value of this instance as boolean value.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfCustomValue">
            <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfCustomValue.#ctor">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfCustomValue.#ctor(System.Byte[])">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfCustomValue.Value">
            <summary>
            This property is intended for empira internal use only.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfCustomValues">
            <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfCustomValues.Contains(System.String)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfCustomValues.ClearAllCustomValues(External.Pdf.PdfDocument)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfCustomValues.CompressionMode">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfCustomValues.Item(System.String)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDate">
            <summary>
            Represents a direct date value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDate.ToString">
            <summary>
            Returns the value in the PDF date format.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDate.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the value in the PDF date format.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDate.Value">
            <summary>
            Gets the value as DateTime.
            </summary>
        </member>
        <member name="T:External.Pdf.VCF">
            <summary>
            Value creation flags. Specifies whether and how a value that not exists is created.
            </summary>
        </member>
        <member name="F:External.Pdf.VCF.None">
            <summary>
            Don't create the value.
            </summary>
        </member>
        <member name="F:External.Pdf.VCF.Create">
            <summary>
            Create the value as direct object.
            </summary>
        </member>
        <member name="F:External.Pdf.VCF.CreateIndirect">
            <summary>
            Create the value as indirect object.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDocument">
            <summary>
            Represents a PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.#ctor(External.Fonts.FontDescriptorStock)">
            <summary>
            Creates a new PDF document in memory.
            To open an existing PDF file, use the PdfReader class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.Dispose">
            <summary>
            Disposes all references to this document stored in other documents. This function should be called
            for documents you finished importing pages from. Calling Dispose is technically not necessary but
            useful for earlier reclaiming memory of documents you do not need anymore.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.NewName">
            <summary>
            Get a new default name for a new document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.Save(System.String)">
            <summary>
            Saves the document to the specified path. If a file already exists, it will be overwritten.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the document to the specified stream.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream and closes the stream.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.DoSave(External.Pdf.IO.PdfWriter)">
            <summary>
            Implements saving a PDF file.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.PrepareForSave">
            <summary>
            Dispatches PrepareForSave to the objects that need it.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.CanSave(System.String@)">
            <summary>
            Determines whether the document can be saved.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.AddPage">
            <summary>
            Creates a new page and adds it to this document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.AddPage(External.Pdf.PdfPage)">
            <summary>
            Adds the specified page to this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.InsertPage(System.Int32)">
            <summary>
            Creates a new page and inserts it in this document at the specified position.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.InsertPage(System.Int32,External.Pdf.PdfPage)">
            <summary>
            Inserts the specified page in this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocument.OnExternalDocumentFinalized(External.Pdf.PdfDocument.DocumentHandle)">
            <summary>
            Occurs when the specified document is not used anymore for importing content.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Tag">
            <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this document.
            The tag is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Name">
            <summary>
            Gets or sets a value used to distinguish PdfDocument objects.
            The name is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Options">
            <summary>
            Gets the document options used for saving the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Settings">
            <summary>
            Gets PDF specific document settings.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.EarlyWrite">
            <summary>
            NYI Indicates whether large objects are written immediately to the output stream to relieve
            memory consumption.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Version">
            <summary>
            Gets or sets the PDF version number. Return value 14 e.g. means PDF 1.4 / Acrobat 5 etc.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.PageCount">
            <summary>
            Gets the number of pages in the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.FileSize">
            <summary>
            Gets the file size of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.FullPath">
            <summary>
            Gets the full qualified file name if the document was read form a file, or an empty string otherwise.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Guid">
            <summary>
            Gets a Guid that uniquely identifies this instance of PdfDocument.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.IsImported">
            <summary>
            Returns a value indicating whether the document was newly created or opened from an existing document.
            Returns true if the document was opened with the PdfReader.Open function, false otherwise.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.IsReadOnly">
            <summary>
            Returns a value indicating whether the document is read only or can be modified.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Info">
            <summary>
            Gets information about the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.CustomValues">
            <summary>
            This function is intended to be undocumented.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Pages">
            <summary>
            Get the pages dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.PageLayout">
            <summary>
            Gets or sets a value specifying the page layout to be used when the document is opened.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.PageMode">
            <summary>
            Gets or sets a value specifying how the document should be displayed when opened.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.ViewerPreferences">
            <summary>
            Gets the viewer preferences of this document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Outlines">
            <summary>
            Gets the root of the outline (or bookmark) tree.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.AcroForm">
            <summary>
            Get the AcroForm dictionary.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Language">
            <summary>
            Gets or sets the default language of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.SecuritySettings">
            <summary>
            Gets the security settings of this document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.FontTable">
            <summary>
            Gets the document font table that holds all fonts used in the current document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.ImageTable">
            <summary>
            Gets the document image table that holds all images used in the current document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.FormTable">
            <summary>
            Gets the document form table that holds all form external objects used in the current document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.ExtGStateTable">
            <summary>
            Gets the document ExtGState table that holds all form state objects used in the current document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Catalog">
            <summary>
            Gets the PdfCatalog of the current document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Internals">
            <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.SecurityHandler">
            <summary>
            Gets the security handler.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocument.Tls">
            <summary>
            Gets the ThreadLocalStorage object. It is used for caching objects that should created
            only once.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDocumentInformation">
            <summary>
            Represents the PDF document information dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfDocumentInformation.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfDocumentInformation"/> class.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the document's title.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the name of the person who created the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the name of the subject of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets keywords associated with the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the name of the application that created the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Producer">
            <summary>
            Gets the producer application.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the creation date of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.ModificationDate">
            <summary>
            Gets or sets the modification date of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDocumentInformation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Title">
            <summary>
            (Optional; PDF 1.1) The document’s title.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Author">
            <summary>
            (Optional) The name of the person who created the document.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Subject">
            <summary>
            (Optional; PDF 1.1) The subject of the document.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Keywords">
            <summary>
            (Optional; PDF 1.1) Keywords associated with the document.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Creator">
            <summary>
            (Optional) If the document was converted to PDF from another format,
            the name of the application that created the
            original document from which it was converted.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Producer">
            <summary>
            (Optional) If the document was converted to PDF from another format,
            the name of the application (for example, this library) that converted it to PDF.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.CreationDate">
            <summary>
            (Optional) The date and time the document was created, in human-readable form.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.ModDate">
            <summary>
            (Required if PieceInfo is present in the document catalog; otherwise optional; PDF 1.1)
            The date and time the document was most recently modified, in human-readable form.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfDocumentInformation.Keys.Trapped">
            <summary>
            (Optional; PDF 1.3) A name object indicating whether the document has been modified 
            to include trapping information.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentInformation.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDocumentOptions">
            <summary>
            Holds information how to handle the document when it is saved as PDF stream.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentOptions.ColorMode">
            <summary>
            Gets or sets the color mode.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentOptions.CompressContentStreams">
            <summary>
            Gets or sets a value indicating whether to compress content streams of PDF pages.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentOptions.NoCompression">
            <summary>
            Gets or sets a value indicating that all objects are not compressed.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfDocumentSettings">
            <summary>
            Holds PDF specific information of the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfDocumentSettings.TrimMargins">
            <summary>
            Gets or sets the default trim margins.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfInteger">
            <summary>
            Represents a direct integer value.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfNumber">
            <summary>
            Base class for direct number values (not yet used, maybe superfluous).
            </summary>
        </member>
        <member name="M:External.Pdf.PdfInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfInteger"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfInteger"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfInteger.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfInteger.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfInteger.GetTypeCode">
            <summary>
            Returns TypeCode for 32-bit integers.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfInteger.Value">
            <summary>
            Gets the value as integer
            </summary>
        </member>
        <member name="T:External.Pdf.PdfIntegerObject">
            <summary>
            Represents an indirect integer value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfNumberObject">
            <summary>
            Base class for indirect number values (not yet used, maybe superfluous).
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNumberObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNumberObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNumberObject.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNumberObject"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfIntegerObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfIntegerObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfIntegerObject.#ctor(External.Pdf.PdfDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfIntegerObject.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfIntegerObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer literal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfIntegerObject.Value">
            <summary>
            Gets the value as integer.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfLiteral">
            <summary>
            Represents text that is written 'as it is' into the PDF stream. This class can lead to invalid PDF files.
            E.g. strings in a literal are not encrypted when the document is saved with a password.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfLiteral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfLiteral"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfLiteral.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance with the culture invariant formatted specified arguments.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfLiteral.FromMatrix(External.Drawing.XMatrix)">
            <summary>
            Creates a literal from an XMatrix
            </summary>
        </member>
        <member name="M:External.Pdf.PdfLiteral.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfLiteral.Value">
            <summary>
            Gets the value as litaral string.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfName">
            <summary>
            Represents a PDF name value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this name.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.ToString">
            <summary>
            Returns the name. The string always begins with a slash.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.op_Equality(External.Pdf.PdfName,System.String)">
            <summary>
            Determines whether the specified name and string are equal.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.op_Inequality(External.Pdf.PdfName,System.String)">
            <summary>
            Determines whether the specified name and string are not equal.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfName.Empty">
            <summary>
            Represents the empty name.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the name including the leading slash.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfName.Value">
            <summary>
            Gets the name as a string.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfName.Comparer">
            <summary>
            Gets the comparer for this type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfName.PdfXNameComparer">
            <summary>
            Implements a comparer that compares PdfName objects.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfName.PdfXNameComparer.Compare(External.Pdf.PdfName,External.Pdf.PdfName)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:External.Pdf.PdfNameObject">
            <summary>
            Represents an indirect name value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object. Acrobat sometime uses indirect
            names to save space, because an indirect reference to a name may be shorter than a long name.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNameObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.#ctor(External.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNameObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfNameObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.ToString">
            <summary>
            Returns the name. The string always begins with a slash.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.op_Equality(External.Pdf.PdfNameObject,System.String)">
            <summary>
            Determines whether a name is equal to a string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.op_Inequality(External.Pdf.PdfNameObject,System.String)">
            <summary>
            Determines whether a name is not equal to a string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNameObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the name including the leading slash.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfNameObject.Value">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfNull">
            <summary>
            Represents a indirect reference that is not in the cross reference table.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNull.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="F:External.Pdf.PdfNull.Value">
            <summary>
            The only instance of this class.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfNullObject">
            <summary>
            Represents an indirect null value. This type is not used by PDF component, but at least
            one tool from Adobe creates PDF files with a null object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNullObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNullObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNullObject.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfNullObject"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfNullObject.ToString">
            <summary>
            Returns the string "null".
            </summary>
        </member>
        <member name="M:External.Pdf.PdfNullObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the keyword «null».
            </summary>
        </member>
        <member name="T:External.Pdf.PdfObjectID">
            <summary>
            Represents a PDF object identifier, a pair of object and generation number.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfObjectID"/> class.
            </summary>
            <param name="objectNumber">The object number.</param>
        </member>
        <member name="M:External.Pdf.PdfObjectID.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfObjectID"/> class.
            </summary>
            <param name="objectNumber">The object number.</param>
            <param name="generationNumber">The generation number.</param>
        </member>
        <member name="M:External.Pdf.PdfObjectID.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.op_Equality(External.Pdf.PdfObjectID,External.Pdf.PdfObjectID)">
            <summary>
            Determines whether the tow objects are equal.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.op_Inequality(External.Pdf.PdfObjectID,External.Pdf.PdfObjectID)">
            <summary>
            Determines whether the tow objects not are equal.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.ToString">
            <summary>
            Returns the object and generation numbers as a string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfObjectID.CompareTo(System.Object)">
            <summary>
            Compares the current object id with another object.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObjectID.ObjectNumber">
            <summary>
            Gets or sets the object number.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObjectID.GenerationNumber">
            <summary>
            Gets or sets the generation number.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObjectID.IsEmpty">
            <summary>
            Indicates whether this object is an empty object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfObjectID.Empty">
            <summary>
            Creates an empty object identifier.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfOutline">
            <summary>
            Represents an outline item in the outlines tree. An outline is also knows as a bookmark.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(System.String,External.Pdf.PdfPage,System.Boolean,External.Pdf.PdfOutlineStyle,External.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
            <param name="textColor">The color used to draw the outline text.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(System.String,External.Pdf.PdfPage,System.Boolean,External.Pdf.PdfOutlineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(System.String,External.Pdf.PdfPage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.#ctor(System.String,External.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="F:External.Pdf.PdfOutline.openCount">
            <summary>
            The total number of open descendants at all lower levels.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.PrepareForSave">
            <summary>
            Creates key/values pairs according to the object structure.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.DestinationPage">
            <summary>
            Gets or sets the destination page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.Opened">
            <summary>
            Gets or sets whether the outline item is opened (or expanded).
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:External.Pdf.PdfOutline.Outlines">
            <summary>
            Gets the outline collection of this node.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfOutline.PdfOutlineCollection">
            <summary>
            Represents a collection of outlines.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.Add(External.Pdf.PdfOutline)">
            <summary>
            Adds the specified outline.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,External.Pdf.PdfPage,System.Boolean,External.Pdf.PdfOutlineStyle,External.Drawing.XColor)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
            <param name="textColor">The color used to draw the outline text.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,External.Pdf.PdfPage,System.Boolean,External.Pdf.PdfOutlineStyle)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,External.Pdf.PdfPage,System.Boolean)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,External.Pdf.PdfPage)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.IndexOf(External.Pdf.PdfOutline)">
            <summary>
            Gets the index of the specified outline.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfOutline.PdfOutlineCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.PdfOutlineCollection.HasOutline">
            <summary>
            Indicates whether the outline has at least one entry.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.PdfOutlineCollection.Count">
            <summary>
            Gets the number of entries in this collection.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.PdfOutlineCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:External.Pdf.PdfOutline"/> at the specified index.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfOutline.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Outlines for an outline dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Title">
            <summary>
            (Required) The text to be displayed on the screen for this item.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Parent">
            <summary>
            (Required; must be an indirect reference) The parent of this item in the outline hierarchy.
            The parent of a top-level item is the outline dictionary itself.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Prev">
            <summary>
            (Required for all but the first item at each level; must be an indirect reference)
            The previous item at this outline level.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Next">
            <summary>
            (Required for all but the last item at each level; must be an indirect reference)
            The next item at this outline level.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.First">
            <summary>
            (Required if the item has any descendants; must be an indirect reference)
             The first of this item’s immediate children in the outline hierarchy.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Last">
            <summary>
            (Required if the item has any descendants; must be an indirect reference)
            The last of this item’s immediate children in the outline hierarchy.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Count">
            <summary>
            (Required if the item has any descendants) If the item is open, the total number of its 
            open descendants at all lower levels of the outline hierarchy. If the item is closed, a 
            negative integer whose absolute value specifies how many descendants would appear if the 
            item were reopened.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.Dest">
            <summary>
            (Optional; not permitted if an A entry is present) The destination to be displayed when this 
            item is activated.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.A">
            <summary>
            (Optional; not permitted if an A entry is present) The destination to be displayed when 
            this item is activated.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.SE">
            <summary>
            (Optional; PDF 1.3; must be an indirect reference) The structure element to which the item 
            refers.
            Note: The ability to associate an outline item with a structure element (such as the beginning 
            of a chapter) is a PDF 1.3 feature. For backward compatibility with earlier PDF versions, such
            an item should also specify a destination (Dest) corresponding to an area of a page where the
            contents of the designated structure element are displayed.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.C">
            <summary>
            (Optional; PDF 1.4) An array of three numbers in the range 0.0 to 1.0, representing the 
            components in the DeviceRGB color space of the color to be used for the outline entry’s text.
            Default value: [0.0 0.0 0.0].
            </summary>
        </member>
        <member name="F:External.Pdf.PdfOutline.Keys.F">
            <summary>
            (Optional; PDF 1.4) A set of flags specifying style characteristics for displaying the outline
            item’s text. Default value: 0.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfOutline.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPage">
            <summary>
            Represents a page in a PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.#ctor">
            <summary>
            Initializes a new page. The page must be added to a document before it can be used.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.#ctor(External.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfPage"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:External.Pdf.PdfPage.Close">
            <summary>
            Closes the page. A closes page cannot be modified anymore and it is not possible to
            get an XGraphics object for a closed page. Closing a page is not required, but may saves
            resources if the document has many pages. 
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.RenderContent">
            <summary>
            The content stream currently used by an XGraphics object for rendering.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.AddDocumentLink(External.Pdf.PdfRectangle,System.Int32)">
            <summary>
            Adds an intra document link.
            </summary>
            <param name="rect">The rect.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="M:External.Pdf.PdfPage.AddWebLink(External.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds a link to the Web.
            </summary>
            <param name="rect">The rect.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:External.Pdf.PdfPage.AddFileLink(External.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds a link to a file.
            </summary>
            <param name="rect">The rect.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:External.Pdf.PdfPage.GetFontName(External.Drawing.XFont,External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this page.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.TryGetFontName(System.String,External.Pdf.Advanced.PdfFont@)">
            <summary>
            Tries to get the resource name of the specified font data within this page.
            Returns null if no such font exists.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.GetFontName(System.String,System.Byte[],External.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this page.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.GetImageName(External.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this page.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.External#Pdf#Advanced#IContentStream#GetImageName(External.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.GetFormName(External.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this page.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.External#Pdf#Advanced#IContentStream#GetFormName(External.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.transparencyUsed">
            <summary>
            Hack to indicate that a page-level transparency group must be created.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.InheritValues(External.Pdf.PdfDictionary,External.Pdf.PdfPage.InheritedValues)">
            <summary>
            Inherit values from parent node.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.InheritValues(External.Pdf.PdfDictionary,External.Pdf.PdfPage.InheritedValues@)">
            <summary>
            Add all inheritable values from the specified page to the specified values structure.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Tag">
            <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this PDF page.
            The tag is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.IsClosed">
            <summary>
            Gets a value indicating whether the page is closed.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Size">
            <summary>
            Gets or sets one of the predefined standard sizes like.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.TrimMargins">
            <summary>
            Gets or sets the trim margins.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.MediaBox">
            <summary>
            Gets or sets the media box directly. XGrahics is not prepared to work with a media box
            with an origin other than (0,0).
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.CropBox">
            <summary>
            Gets or sets the crop box.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.BleedBox">
            <summary>
            Gets or sets the bleed box.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.ArtBox">
            <summary>
            Gets or sets the art box.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.TrimBox">
            <summary>
            Gets or sets the trim box.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Height">
            <summary>
            Gets or sets the height of the page. If orientation is Landscape, this function applies to
            the width.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Width">
            <summary>
            Gets or sets the width of the page. If orientation is Landscape, this function applies to
            the height.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Rotate">
            <summary>
            Gets or sets the /Rotate entry of the PDF page. The value is the number of degrees by which the page 
            should be rotated clockwise when displayed or printed. The value must be a multiple of 90.
            PDF component does not set this value, but for imported pages this value can be set and must be taken
            into account when adding graphic to such a page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Contents">
            <summary>
            Gets the array of content streams of the page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Annotations">
            <summary>
            Gets the annotations array of this page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.CustomValues">
            <summary>
            Gets or sets the custom values.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.External#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPage.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPage.InheritablePageKeys">
            <summary>
            Predefined keys common to PdfPage and PdfPages.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.InheritablePageKeys.Resources">
            <summary>
            (Required; inheritable) A dictionary containing any resources required by the page. 
            If the page requires no resources, the value of this entry should be an empty dictionary.
            Omitting the entry entirely indicates that the resources are to be inherited from an 
            ancestor node in the page tree.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.InheritablePageKeys.MediaBox">
            <summary>
            (Required; inheritable) A rectangle, expressed in default user space units, defining the 
            boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.InheritablePageKeys.CropBox">
            <summary>
            (Optional; inheritable) A rectangle, expressed in default user space units, defining the 
            visible region of default user space. When the page is displayed or printed, its contents 
            are to be clipped (cropped) to this rectangle and then imposed on the output medium in some
            implementation defined manner. Default value: the value of MediaBox.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.InheritablePageKeys.Rotate">
            <summary>
            (Optional; inheritable) The number of degrees by which the page should be rotated clockwise 
            when displayed or printed. The value must be a multiple of 90. Default value: 0.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Page for a page object.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Parent">
            <summary>
            (Required; must be an indirect reference)
            The page tree node that is the immediate parent of this page object.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.LastModified">
            <summary>
            (Required if PieceInfo is present; optional otherwise; PDF 1.3) The date and time
            when the page’s contents were most recently modified. If a page-piece dictionary
            (PieceInfo) is present, the modification date is used to ascertain which of the 
            application data dictionaries that it contains correspond to the current content
            of the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.BleedBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the 
            region to which the contents of the page should be clipped when output in a production
            environment. Default value: the value of CropBox.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.TrimBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the
            intended dimensions of the finished page after trimming. Default value: the value of 
            CropBox.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.ArtBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the
            extent of the page’s meaningful content (including potential white space) as intended
            by the page’s creator. Default value: the value of CropBox.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.BoxColorInfo">
            <summary>
            (Optional; PDF 1.4) A box color information dictionary specifying the colors and other 
            visual characteristics to be used in displaying guidelines on the screen for the various
            page boundaries. If this entry is absent, the application should use its own current 
            default settings.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Contents">
            <summary>
            (Optional) A content stream describing the contents of this page. If this entry is absent, 
            the page is empty. The value may be either a single stream or an array of streams. If the 
            value is an array, the effect is as if all of the streams in the array were concatenated,
            in order, to form a single stream. This allows PDF producers to create image objects and
            other resources as they occur, even though they interrupt the content stream. The division
            between streams may occur only at the boundaries between lexical tokens but is unrelated
            to the page’s logical content or organization. Applications that consume or produce PDF 
            files are not required to preserve the existing structure of the Contents array.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Group">
            <summary>
            (Optional; PDF 1.4) A group attributes dictionary specifying the attributes of the page’s 
            page group for use in the transparent imaging model.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Thumb">
            <summary>
            (Optional) A stream object defining the page’s thumbnail image.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.B">
            <summary>
            (Optional; PDF 1.1; recommended if the page contains article beads) An array of indirect
            references to article beads appearing on the page. The beads are listed in the array in 
            natural reading order.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Dur">
            <summary>
            (Optional; PDF 1.1) The page’s display duration (also called its advance timing): the 
            maximum length of time, in seconds, that the page is displayed during presentations before
            the viewer application automatically advances to the next page. By default, the viewer does 
            not advance automatically.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Trans">
            <summary>
            (Optional; PDF 1.1) A transition dictionary describing the transition effect to be used 
            when displaying the page during presentations.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Annots">
            <summary>
            (Optional) An array of annotation dictionaries representing annotations associated with 
            the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.AA">
            <summary>
            (Optional; PDF 1.2) An additional-actions dictionary defining actions to be performed 
            when the page is opened or closed.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4) A metadata stream containing metadata for the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.PieceInfo">
            <summary>
            (Optional; PDF 1.3) A page-piece dictionary associated with the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.StructParents">
            <summary>
            (Required if the page contains structural content items; PDF 1.3)
            The integer key of the page’s entry in the structural parent tree.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.ID">
            <summary>
            (Optional; PDF 1.3; indirect reference preferred) The digital identifier of
            the page’s parent Web Capture content set.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.PZ">
            <summary>
            (Optional; PDF 1.3) The page’s preferred zoom (magnification) factor: the factor 
            by which it should be scaled to achieve the natural display magnification.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.SeparationInfo">
            <summary>
            (Optional; PDF 1.3) A separation dictionary containing information needed
            to generate color separations for the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.Tabs">
            <summary>
            (Optional; PDF 1.5) A name specifying the tab order to be used for annotations
            on the page. The possible values are R (row order), C (column order),
            and S (structure order).
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.TemplateInstantiated">
            <summary>
            (Required if this page was created from a named page object; PDF 1.5)
            The name of the originating page object.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.PresSteps">
            <summary>
            (Optional; PDF 1.5) A navigation node dictionary representing the first node
            on the page.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.UserUnit">
            <summary>
            (Optional; PDF 1.6) A positive number giving the size of default user space units,
            in multiples of 1/72 inch. The range of supported values is implementation-dependent.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPage.Keys.VP">
            <summary>
            (Optional; PDF 1.6) An array of viewport dictionaries specifying rectangular regions 
            of the page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPage.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPage.InheritedValues">
            <summary>
            Values inherited from a parent in the parent chain of a page tree.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPage.PageSizeConverter">
            <summary>
            Converter from <see cref="T:External.Pdf.PageSize"/> to <see cref="T:External.Drawing.XSize"/>.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPage.PageSizeConverter.ToSize(External.Pdf.PageSize)">
            <summary>
            Converts the specified page size enumeration to a pair of values in point.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPages">
            <summary>
            Represents the pages of the document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.Add">
            <summary>
            Creates a new PdfPage, adds it to this document, and returns it.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.Add(External.Pdf.PdfPage)">
            <summary>
            Adds the specified PdfPage to this document and maybe returns a new PdfPage object.
            The value returned is a new object if the added page comes from a foreign document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.Insert(System.Int32)">
            <summary>
            Creates a new PdfPage, inserts it at the specified position into this document, and returns it.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.Insert(System.Int32,External.Pdf.PdfPage)">
            <summary>
            Inserts the specified PdfPage at the specified position to this document and maybe returns a new PdfPage object.
            The value returned is a new object if the inserted page comes from a foreign document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.Remove(External.Pdf.PdfPage)">
            <summary>
            Removes the specified page from the document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.RemoveAt(System.Int32)">
            <summary>
            Removes the specified page from the document.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves a page within the page sequence.
            </summary>
            <param name="oldIndex">The page index before this operation.</param>
            <param name="newIndex">The page index after this operation.</param>
        </member>
        <member name="M:External.Pdf.PdfPages.ImportExternalPage(External.Pdf.PdfPage)">
            <summary>
            Imports an external page. The elements of the imported page are cloned and added to this document.
            Important: In contrast to PdfFormXObject adding an external page always make a deep copy
            of their transitive closure. Any reuse of already imported objects is not intended because
            any modification of an imported page must not change another page.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.CloneElement(External.Pdf.PdfPage,External.Pdf.PdfPage,System.String,System.Boolean)">
            <summary>
            Helper function for ImportExternalPage.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.FlattenPageTree">
            <summary>
            Replaces the page tree by a flat array of indirect references to the pages objects.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.GetKids(External.Pdf.Advanced.PdfReference,External.Pdf.PdfPage.InheritedValues,External.Pdf.PdfDictionary)">
            <summary>
            Recursively converts the page tree into a flat array.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.PrepareForSave">
            <summary>
            Prepares the document for saving.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfPages.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPages.Count">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPages.Item(System.Int32)">
            <summary>
            Gets the page with the specified index.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPages.PagesArray">
            <summary>
            Gets a PdfArray containing all pages of this document. The array must not be modified.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPages.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfPages.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPages.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; 
            must be Pages for a page tree node.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPages.Keys.Parent">
            <summary>
            (Required except in root node; must be an indirect reference)
            The page tree node that is the immediate parent of this one.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPages.Keys.Kids">
            <summary>
            (Required) An array of indirect references to the immediate children of this node.
            The children may be page objects or other page tree nodes.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfPages.Keys.Count">
            <summary>
            (Required) The number of leaf nodes (page objects) that are descendants of this node 
            within the page tree.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfPages.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfReal">
            <summary>
            Represents a direct real value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfReal"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfReal"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfReal.ToString">
            <summary>
            Returns the real number as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReal.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the real value with up to three digits.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfReal.Value">
            <summary>
            Gets the value as double.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfRealObject">
            <summary>
            Represents an indirect real value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRealObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfRealObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRealObject.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfRealObject"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfRealObject.#ctor(External.Pdf.PdfDocument,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfRealObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfRealObject.ToString">
            <summary>
            Returns the real as a culture invariant string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRealObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the real literal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRealObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfRectangle">
            <summary>
            Represents a PDF rectangle value, that is internally an array with 4 real values.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor">
            <summary>
            Initializes a new instance of the PdfRectangle class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners. Notice that in contrast to GDI+ convention the 
            3rd and the 4th parameter specify a point and not a width. This is so much confusing
            that this function is for internal use only.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor(External.Drawing.XPoint,External.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor(External.Drawing.XPoint,External.Drawing.XSize)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified location and size.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor(External.Drawing.XRect)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified XRect.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.#ctor(External.Pdf.PdfItem)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified PdfArray.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Copy">
            <summary>
            Implements cloning this instance.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a PdfRectangle and has equal coordinates.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.op_Equality(External.Pdf.PdfRectangle,External.Pdf.PdfRectangle)">
            <summary>
            Tests whether two structures have equal coordinates.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.op_Inequality(External.Pdf.PdfRectangle,External.Pdf.PdfRectangle)">
            <summary>
            Tests whether two structures differ in one or more coordinates.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Contains(External.Drawing.XPoint)">
            <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Contains(External.Drawing.XRect)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.Contains(External.Pdf.PdfRectangle)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.ToXRect">
            <summary>
            Returns the rectangle as an XRect object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.ToString">
            <summary>
            Returns the rectangle as a string in the form «[x1 y1 x2 y2]».
            </summary>
        </member>
        <member name="M:External.Pdf.PdfRectangle.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the rectangle.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfRectangle.Empty">
            <summary>
            Represents an empty PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.IsEmpty">
            <summary>
            Tests whether all coordinate are zero.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.X1">
            <summary>
            Gets or sets the x-coordinate of the first corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Y1">
            <summary>
            Gets or sets the y-coordinate of the first corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.X2">
            <summary>
            Gets or sets the x-coordinate of the second corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Y2">
            <summary>
            Gets or sets the y-coordinate of the second corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Width">
            <summary>
            Gets X2 - X1.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Height">
            <summary>
            Gets Y2 - Y1.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Location">
            <summary>
            Gets or sets the coordinates of the first point of this PdfRectangle.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfRectangle.Size">
            <summary>
            Gets or sets the size of this PdfRectangle.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfReferenceTable">
            <summary>
            Represents the cross reference table of a PDF document. It contains all indirect objects of
            a document.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfReferenceTable.objectTable">
            <summary>
            Represents the relation between PdfObjectID and PdfReference for a PdfDocument.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.Add(External.Pdf.Advanced.PdfReference)">
            <summary>
            Adds a cross reference entry to the table. Used when parsing the trailer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.Add(External.Pdf.PdfObject)">
            <summary>
            Adds a PdfObject to the table.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.Contains(External.Pdf.PdfObjectID)">
            <summary>
            Indicates whether the specified object identifier is in the table.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.GetNewObjectNumber">
            <summary>
            Returns the next free object number.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the iref section in pdf stream.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.Compact">
            <summary>
            Removes all objects that cannot be reached from the trailer. Returns the number of removed objects.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.Renumber">
            <summary>
            Renumbers the objects starting at 1.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.CheckConsistence">
            <summary>
            Checks the logical consistence for debugging purposes (useful after reconstruction work).
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.TransitiveClosure(External.Pdf.PdfObject)">
            <summary>
            Calculates the transitive closure of the specified PdfObject, i.e. all indirect objects
            recursively reachable from the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfReferenceTable.TransitiveClosure(External.Pdf.PdfObject,System.Int32)">
            <summary>
            Calculates the transitive closure of the specified PdfObject with the specified depth, i.e. all indirect objects
            recursively reachable from the specified object in up to maximally depth steps.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfReferenceTable.Item(External.Pdf.PdfObjectID)">
            <summary>
            Gets a cross reference entry from an object identifier.
            Returns null if no object with the specified ID exists in the object table.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfReferenceTable.AllObjectIDs">
            <summary>
            Gets an array of all object identifier. For debugging purposes only.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfReferenceTable.AllReferences">
            <summary>
            Gets an array of all cross references ordered increasing by their object identifier.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfReferenceTable.DeadObject">
            <summary>
            Gets the cross reference to an objects used for undefined indirect references.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfStringEncoding">
            <summary>
            Determines the encoding of a PdfString or PdfStringObject.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.RawEncoding">
            <summary>
            The characters of the string are actually bytes with an unknown or context specific meaning or encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.StandardEncoding">
            <summary>
            Not yet used.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.PDFDocEncoding">
            <summary>
            The characters of the string are actually bytes with PDF document encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.WinAnsiEncoding">
            <summary>
            The characters of the string are actually bytes with Windows ANSI encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.MacRomanEncoding">
            <summary>
            Not yet used.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.MacExpertEncoding">
            <summary>
            Not yet used.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfStringEncoding.Unicode">
            <summary>
            The characters of the string are Unicode characters.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfStringFlags">
            <summary>
            Internal wrapper for PdfStringEncoding.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfString">
            <summary>
            Represents a direct text string value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfString"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfString.#ctor(System.String,External.Pdf.PdfStringEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfString"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:External.Pdf.PdfString.ToString">
            <summary>
            Returns the string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfString.ToStringFromPdfDocEncoded">
            <summary>
            Hack for document encoded bookmarks.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfString.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the string DocEncoded.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfString.Length">
            <summary>
            Gets the number of characters in this string.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfString.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfString.HexLiteral">
            <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfString.Value">
            <summary>
            Gets the string value.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfString.EncryptionValue">
            <summary>
            Gets or sets the string value for encryption purposes.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfStringObject">
            <summary>
            Represents an indirect text string value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfStringObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfStringObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfStringObject.#ctor(External.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfStringObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfStringObject.#ctor(System.String,External.Pdf.PdfStringEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfStringObject"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:External.Pdf.PdfStringObject.ToString">
            <summary>
            Returns the string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfStringObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the string literal with encoding DOCEncoded.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfStringObject.Length">
            <summary>
            Gets the number of characters in this string.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfStringObject.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfStringObject.HexLiteral">
            <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfStringObject.Value">
            <summary>
            Gets or sets the value as string
            </summary>
        </member>
        <member name="P:External.Pdf.PdfStringObject.EncryptionValue">
            <summary>
            Gets or sets the string value for encryption purposes.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfUInteger">
            <summary>
            Represents a direct unsigned integer value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfUInteger"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfUInteger"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToString">
            <summary>
            Returns the unsigned integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToDateTime(System.IFormatProvider)">
            <summary>
            Returns an undefined DateTime structure.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"></see>.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.GetTypeCode">
            <summary>
            Returns type code for 32-bit integers.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUInteger.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfUInteger.Value">
            <summary>
            Gets the value as integer.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfUIntegerObject">
            <summary>
            Represents an indirect integer value. This type is not used by PDF component. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUIntegerObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfUIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUIntegerObject.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfUIntegerObject"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfUIntegerObject.#ctor(External.Pdf.PdfDocument,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfUIntegerObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:External.Pdf.PdfUIntegerObject.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfUIntegerObject.WriteObject(External.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer literal.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfUIntegerObject.Value">
            <summary>
            Gets the value as unsigned integer.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfViewerPreferences">
            <summary>
            Represents the PDF document viewer preferences dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.PdfViewerPreferences.#ctor(External.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:External.Pdf.PdfViewerPreferences"/> class.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.HideToolbar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer application’s tool
             bars when the document is active.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.HideMenubar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer application’s
            menu bar when the document is active.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.HideWindowUI">
            <summary>
            Gets or sets a value indicating whether to hide user interface elements in
            the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.FitWindow">
            <summary>
            Gets or sets a value indicating whether to resize the document’s window to
            fit the size of the first displayed page.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.CenterWindow">
            <summary>
            Gets or sets a value indicating whether to position the document’s window
            in the center of the screen.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.DisplayDocTitle">
            <summary>
            Gets or sets a value indicating whether the window’s title bar
            should display the document title taken from the Title entry of the document
            information dictionary. If false, the title bar should instead display the name
            of the PDF file containing the document.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.Direction">
            <summary>
            The predominant reading order for text: LeftToRight or RightToLeft 
            (including vertical writing systems, such as Chinese, Japanese, and Korean).
            This entry has no direct effect on the document’s contents or page numbering
            but can be used to determine the relative positioning of pages when displayed 
            side by side or printed n-up. Default value: LeftToRight.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.PdfViewerPreferences.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.HideToolbar">
            <summary>
            (Optional) A flag specifying whether to hide the viewer application’s tool
             bars when the document is active. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.HideMenubar">
            <summary>
            (Optional) A flag specifying whether to hide the viewer application’s
            menu bar when the document is active. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.HideWindowUI">
            <summary>
            (Optional) A flag specifying whether to hide user interface elements in
             the document’s window (such as scroll bars and navigation controls),
             leaving only the document’s contents displayed. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.FitWindow">
            <summary>
            (Optional) A flag specifying whether to resize the document’s window to
            fit the size of the first displayed page. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.CenterWindow">
            <summary>
            (Optional) A flag specifying whether to position the document’s window
            in the center of the screen. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.DisplayDocTitle">
            <summary>
            (Optional; PDF 1.4) A flag specifying whether the window’s title bar
            should display the document title taken from the Title entry of the document
            information dictionary. If false, the title bar should instead display the name
            of the PDF file containing the document. Default value: false.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.NonFullScreenPageMode">
            <summary>
            (Optional) The document’s page mode, specifying how to display the document on 
            exiting full-screen mode:
              UseNone     Neither document outline nor thumbnail images visible
              UseOutlines Document outline visible
              UseThumbs   Thumbnail images visible
              UseOC       Optional content group panel visible
            This entry is meaningful only if the value of the PageMode entry in the catalog 
            dictionary is FullScreen; it is ignored otherwise. Default value: UseNone.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.Direction">
            <summary>
            (Optional; PDF 1.3) The predominant reading order for text:
              L2R  Left to right
              R2L  Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)
            This entry has no direct effect on the document’s contents or page numbering
            but can be used to determine the relative positioning of pages when displayed 
            side by side or printed n-up. Default value: L2R.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.ViewArea">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary representing the area of a page
            to be displayed when viewing the document on the screen. The value is the key 
            designating the relevant page boundary in the page object. If the specified page
            boundary is not defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.ViewClip">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary to which the contents of a page 
            are to be clipped when viewing the document on the screen. The value is the key 
            designating the relevant page boundary in the page object. If the specified page 
            boundary is not defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.PrintArea">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary representing the area of a page
            to be rendered when printing the document. The value is the key designating the 
            relevant page boundary in the page object. If the specified page boundary is not 
            defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.PrintClip">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary to which the contents of a page
            are to be clipped when printing the document. The value is the key designating the 
            relevant page boundary in the page object. If the specified page boundary is not
            defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that interpret
            or manipulate the page boundaries. Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:External.Pdf.PdfViewerPreferences.Keys.PrintScaling">
            <summary>
            (Optional; PDF 1.6) The page scaling option to be selected when a print dialog is
            displayed for this document. Valid values are None, which indicates that the print
            dialog should reflect no page scaling, and AppDefault, which indicates that 
            applications should use the current print scaling. If this entry has an unrecognized
            value, applications should use the current print scaling.
            Default value: AppDefault.
            Note: If the print dialog is suppressed and its parameters are provided directly
            by the application, the value of this entry should still be used.
            </summary>
        </member>
        <member name="P:External.Pdf.PdfViewerPreferences.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfDocumentSecurityLevel">
            <summary>
            Specifies the security level of the PDF document.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfDocumentSecurityLevel.None">
            <summary>
            Document is not protected.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfDocumentSecurityLevel.Encrypted40Bit">
            <summary>
            Document is protected with 40-bit security. This option is for compatibility with 
            Acrobat 3 and 4 only. Use Encrypted128Bit whenever possible.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfDocumentSecurityLevel.Encrypted128Bit">
            <summary>
            Document is protected with 128-bit security.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfUserAccessPermission">
            <summary>
            Specifies which operations are permitted when the document is opened with user access.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfUserAccessPermission.PermitAll">
            <summary>
            Permits everything. This is the default value.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfSecurityHandler">
            <summary>
            Represents the base of all security handlers.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfSecurityHandler.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.Filter">
            <summary>
            (Required) The name of the preferred security handler for this document. Typically,
            it is the name of the security handler that was used to encrypt the document. If 
            SubFilter is not present, only this security handler should be used when opening 
            the document. If it is present, consumer applications can use any security handler
            that implements the format specified by SubFilter.
            Standard is the name of the built-in password-based security handler. Names for other
            security handlers can be registered by using the procedure described in Appendix E.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.SubFilter">
            <summary>
            (Optional; PDF 1.3) A name that completely specifies the format and interpretation of
            the contents of the encryption dictionary. It is needed to allow security handlers other
            than the one specified by Filter to decrypt the document. If this entry is absent, other
            security handlers should not be allowed to decrypt the document.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.V">
            <summary>
            (Optional but strongly recommended) A code specifying the algorithm to be used in encrypting
            and decrypting the document:
            0 An algorithm that is undocumented and no longer supported, and whose use is strongly discouraged.
            1 Algorithm 3.1, with an encryption key length of 40 bits.
            2 (PDF 1.4) Algorithm 3.1, but permitting encryption key lengths greater than 40 bits.
            3 (PDF 1.4) An unpublished algorithm that permits encryption key lengths ranging from 40 to 128 bits.
            4 (PDF 1.5) The security handler defines the use of encryption and decryption in the document, using
                        the rules specified by the CF, StmF, and StrF entries.
            The default value if this entry is omitted is 0, but a value of 1 or greater is strongly recommended.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.Length">
            <summary>
            (Optional; PDF 1.4; only if V is 2 or 3) The length of the encryption key, in bits.
            The value must be a multiple of 8, in the range 40 to 128. Default value: 40.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.CF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5)
            A dictionary whose keys are crypt filter names and whose values are the corresponding
            crypt filter dictionaries. Every crypt filter used in the document must have an entry
            in this dictionary, except for the standard crypt filter names.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.StmF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5)
            The name of the crypt filter that is used by default when decrypting streams.
            The name must be a key in the CF dictionary or a standard crypt filter name. All streams
            in the document, except for cross-reference streams or streams that have a Crypt entry in
            their Filter array, are decrypted by the security handler, using this crypt filter.
            Default value: Identity.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.StrF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.)
            The name of the crypt filter that is used when decrypting all strings in the document.
            The name must be a key in the CF dictionary or a standard crypt filter name.
            Default value: Identity.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfSecurityHandler.Keys.EFF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.6)
            The name of the crypt filter that should be used by default when encrypting embedded
            file streams; it must correspond to a key in the CF dictionary or a standard crypt
            filter name. This entry is provided by the security handler. Applications should respect
            this value when encrypting embedded files, except for embedded file streams that have
            their own crypt filter specifier. If this entry is not present, and the embedded file
            stream does not contain a crypt filter specifier, the stream should be encrypted using
            the default stream crypt filter specified by StmF.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfSecuritySettings">
            <summary>
            Encapsulates access to the security settings of a PDF document.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfSecuritySettings.CanSave(System.String@)">
            <summary>
            Determines whether the document can be saved.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.HasOwnerPermissions">
            <summary>
            Indicates whether the granted access to the document is 'owner permission'. Returns true if the document 
            is unprotected or was opened with the owner password. Returns false if the document was opened with the
            user password.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.DocumentSecurityLevel">
            <summary>
            Gets or sets the document security level. If you set the security level to anything but PdfDocumentSecurityLevel.None
            you must also set a user and/or an owner password. Otherwise saving the document will fail.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.UserPassword">
            <summary>
            Sets the user password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.OwnerPassword">
            <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitPrint">
            <summary>
            Permits printing the document. Should be used in conjunction with PermitFullQualityPrint.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitModifyDocument">
            <summary>
            Permits modifying the document.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitExtractContent">
            <summary>
            Permits content copying or extraction.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitAnnotations">
            <summary>
            Permits commenting the document.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitFormsFill">
            <summary>
            Permits filling of form fields.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitAccessibilityExtractContent">
            <summary>
            Permits content extraction for accessibility.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitAssembleDocument">
            <summary>
            Permits to insert, rotate, or delete pages and create bookmarks or thumbnail images even if
            PermitModifyDocument is not set.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.PermitFullQualityPrint">
            <summary>
            Permits to print in high quality. insert, rotate, or delete pages and create bookmarks or thumbnail images
            even if PermitModifyDocument is not set.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfSecuritySettings.SecurityHandler">
            <summary>
            PdfStandardSecurityHandler is the only implemented handler.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfStandardSecurityHandler">
            <summary>
            Represents the standard PDF security handler.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptDocument">
            <summary>
            Encrypts the whole document.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptObject(External.Pdf.PdfObject)">
            <summary>
            Encrypts an indirect object.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptDictionary(External.Pdf.PdfDictionary)">
            <summary>
            Encrypts a dictionary.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptArray(External.Pdf.PdfArray)">
            <summary>
            Encrypts an array.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptString(External.Pdf.PdfString)">
            <summary>
            Encrypts a string.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts an array.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.ValidatePassword(System.String)">
            <summary>
            Checks the password.
            </summary>
            <param name="inputPassword">Password or null if no password is provided.</param>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.PadPassword(System.String)">
            <summary>
            Pads a password to a 32 byte array.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.InitWidhUserPassword(System.Byte[],System.String,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Generates the user key based on the padded user password.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.InitWidhOwnerPassword(System.Byte[],System.String,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Generates the user key based on the padded owner password.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.ComputeOwnerKey(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Computes the padded user password from the padded owner password.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.InitEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Computes the encryption key.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.SetupUserKey(System.Byte[])">
            <summary>
            Computes the user key.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.PrepareKey">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.PrepareRC4Key(System.Byte[])">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.PrepareRC4Key(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.EqualsKey(System.Byte[],System.Int32)">
            <summary>
            Checks whether the calculated key correct.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.SetHashKey(External.Pdf.PdfObjectID)">
            <summary>
            Set the hash key for the specified object.
            </summary>
        </member>
        <member name="M:External.Pdf.Security.PdfStandardSecurityHandler.PrepareEncryption">
            <summary>
            Prepares the security handler for encrypting the document.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.encryptionKey">
            <summary>
            The global encryption key.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.md5">
            <summary>
            The message digest algorithm MD5.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.state">
            <summary>
            Bytes used for RC4 encryption.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.ownerKey">
            <summary>
            The encryption key for the owner.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.userKey">
            <summary>
            The encryption key for the user.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.key">
            <summary>
            The encryption key for a particular object/generation.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.keySize">
            <summary>
            The encryption key length for a particular object/generation.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfStandardSecurityHandler.UserPassword">
            <summary>
            Sets the user password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfStandardSecurityHandler.OwnerPassword">
            <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfStandardSecurityHandler.Permission">
            <summary>
            Gets or sets the user access permission represented as an integer in the P key.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfStandardSecurityHandler.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:External.Pdf.Security.PdfStandardSecurityHandler.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.Keys.R">
            <summary>
            (Required) A number specifying which revision of the standard security handler
            should be used to interpret this dictionary:
            • 2 if the document is encrypted with a V value less than 2 and does not have any of
              the access permissions set (by means of the P entry, below) that are designated 
              "Revision 3 or greater".
            • 3 if the document is encrypted with a V value of 2 or 3, or has any "Revision 3 or 
              greater" access permissions set.
            • 4 if the document is encrypted with a V value of 4
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.Keys.O">
            <summary>
            (Required) A 32-byte string, based on both the owner and user passwords, that is
            used in computing the encryption key and in determining whether a valid owner
            password was entered.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.Keys.U">
            <summary>
            (Required) A 32-byte string, based on the user password, that is used in determining
            whether to prompt the user for a password and, if so, whether a valid user or owner 
            password was entered.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.Keys.P">
            <summary>
            (Required) A set of flags specifying which operations are permitted when the document
            is opened with user access.
            </summary>
        </member>
        <member name="F:External.Pdf.Security.PdfStandardSecurityHandler.Keys.EncryptMetadata">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5) Indicates whether
            the document-level metadata stream is to be encrypted. Applications should respect this value.
            Default value: true.
            </summary>
        </member>
        <member name="P:External.Pdf.Security.PdfStandardSecurityHandler.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:External.Pdf.StringLiterals">
            <summary>
            The Pdf-Sharp-String-Resources.
            </summary>
        </member>
        <member name="T:External.Pdf.TrimMargins">
            <summary>
            Represents trim margins added to the page.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.All">
            <summary>
            Sets all four crop margins simultaneously.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.Left">
            <summary>
            Gets or sets the left crop margin.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.Right">
            <summary>
            Gets or sets the right crop margin.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.Top">
            <summary>
            Gets or sets the top crop margin.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.Bottom">
            <summary>
            Gets or sets the bottom crop margin.
            </summary>
        </member>
        <member name="P:External.Pdf.TrimMargins.AreSet">
            <summary>
            Gets a value indicating whether this instance has at least one margin with a value other than zero.
            </summary>
        </member>
        <member name="T:External.Rendering.FieldInfos">
            <summary>
            Field information used to fill fields when rendering or formatting.
            </summary>
        </member>
        <member name="T:External.Rendering.FontHandler">
            <summary>
            Helps measuring and handling fonts.
            </summary>
        </member>
        <member name="M:External.Rendering.FontHandler.FontToXFont(External.Rendering.DocumentObjectModel.Font,External.Rendering.Extensions.TypefaceCache,External.Pdf.PdfFontEncoding,External.Pdf.PdfFontEmbedding,External.Fonts.FontDescriptorStock)">
            <summary>
            Converts an DOM Font to an XFont.
            </summary>
        </member>
        <member name="T:External.Rendering.FormatInfo">
            <summary>
            Abstract base class for formatting information received by calling Format() on a renderer.
            </summary>
        </member>
        <member name="P:External.Rendering.FormatInfo.IsStarting">
            <summary>
            Indicates that the formatted object is starting.
            </summary>
        </member>
        <member name="P:External.Rendering.FormatInfo.IsEnding">
            <summary>
            Indicates that the formatted object is ending.
            </summary>
        </member>
        <member name="P:External.Rendering.FormatInfo.IsComplete">
            <summary>
            Indicates that the formatted object is complete.
            </summary>
        </member>
        <member name="P:External.Rendering.FormatInfo.StartingIsComplete">
            <summary>
            Indicates that the starting of the element is completed
            </summary>
        </member>
        <member name="P:External.Rendering.FormatInfo.EndingIsComplete">
            <summary>
            Indicates that the ending of the element is completed
            </summary>
        </member>
        <member name="T:External.Rendering.FormattedDocument">
            <summary>
            Represents a formatted document.
            </summary>
        </member>
        <member name="M:External.Rendering.FormattedDocument.Format(External.Drawing.XGraphics)">
            <summary>
            Formats the document by performing line breaks and page breaks.
            </summary>
        </member>
        <member name="M:External.Rendering.FormattedDocument.FillNumPagesInfo">
            <summary>
            Fills the number pages information after formatting the document.
            </summary>
        </member>
        <member name="M:External.Rendering.FormattedDocument.FillSectionPagesInfo">
            <summary>
            Fills the section pages information after formatting a section.
            </summary>
        </member>
        <member name="M:External.Rendering.FormattedDocument.GetRenderInfos(System.Int32)">
            <summary>
            Gets the rendering information for the page content.
            </summary>
            <param name="page">The page to render.</param>
            <returns>Rendering information for the page content.</returns>
        </member>
        <member name="M:External.Rendering.FormattedDocument.GetFormattedHeader(System.Int32)">
            <summary>
            Gets a formatted headerfooter object for header of the given page.
            </summary>
            <param name="page">The page the header shall appear on.</param>
            <returns>The required header, null if none exists to render.</returns>
        </member>
        <member name="M:External.Rendering.FormattedDocument.GetFormattedFooter(System.Int32)">
            <summary>
            Gets a formatted headerfooter object for footer of the given page.
            </summary>
            <param name="page">The page the footer shall appear on.</param>
            <returns>The required footer, null if none exists to render.</returns>
        </member>
        <member name="M:External.Rendering.FormattedDocument.GetPageInfo(System.Int32)">
            <summary>
            Gets information about the specified page.
            </summary>
            <param name="page">The page the information is asked for.</param>
            <returns>The page information.</returns>
        </member>
        <member name="P:External.Rendering.FormattedDocument.PageCount">
            <summary>
            Gets the number of pages of the document.
            </summary>
        </member>
        <member name="T:External.Rendering.FormattedHeaderFooter">
            <summary>
            Represents a formatted header or footer.
            </summary>
        </member>
        <member name="T:External.Rendering.ImageFormatInfo">
            <summary>
            Formatting information for an image.
            </summary>
        </member>
        <member name="T:External.Rendering.ShapeFormatInfo">
            <summary>
            Format information for all shapes.
            </summary>
        </member>
        <member name="P:External.Rendering.ShapeFormatInfo.StartingIsComplete">
            <summary>
            Indicates that the starting of the element is completed
            </summary>
        </member>
        <member name="P:External.Rendering.ShapeFormatInfo.EndingIsComplete">
            <summary>
            Indicates that the ending of the element is completed
            </summary>
        </member>
        <member name="T:External.Rendering.ImageRenderer">
            <summary>
            Renders images.
            </summary>
        </member>
        <member name="T:External.Rendering.ShapeRenderer">
            <summary>
            Renders a shape to an XGraphics object.
            </summary>
        </member>
        <member name="M:External.Rendering.ShapeRenderer.Format(External.Rendering.Area,External.Rendering.FormatInfo)">
            <summary>
            Formats the shape.
            </summary>
            <param name="area">The area to fit in the shape.</param>
            <param name="previousFormatInfo"></param>
        </member>
        <member name="P:External.Rendering.ShapeRenderer.ShapeWidth">
            <summary>
            Gets the shape width including line width.
            </summary>
        </member>
        <member name="P:External.Rendering.ShapeRenderer.ShapeHeight">
            <summary>
            Gets the shape height including line width.
            </summary>
        </member>
        <member name="T:External.Rendering.ImageRenderInfo">
            <summary>
            Represents rendering information for images.
            </summary>
        </member>
        <member name="T:External.Rendering.ShapeRenderInfo">
            <summary>
            Rendering information for shapes.
            </summary>
        </member>
        <member name="T:External.Rendering.LayoutInfo">
            <summary>
            Abstract base class to serve as a layoutable unit.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.StartingHeight">
            <summary>
            Gets or sets the height necessary to start the document object.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.TrailingHeight">
            <summary>
            Gets or sets the height necessary to end the document object.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.KeepWithNext">
            <summary>
            Indicates whether the document object shall be kept on one page
            with its successor.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.KeepTogether">
            <summary>
            Indicates whether the document object shall be kept together on one page.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.MarginTop">
            <summary>
            The space that shall be kept free above the element's content.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.MarginBottom">
            <summary>
            The space that shall be kept free below the element's content.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.ContentArea">
            <summary>
            Gets or sets the Area needed by the content (including padding and borders for e.g. paragraphs).
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.PageColumnBreak">
            <summary>
            Gets or sets the a value indicating whether the element shall appear on a new page/new column.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.Floating">
            <summary>
            Gets or sets the floating behavior of surrounding elements.
            </summary>
            <remarks>Default value is TopBottom.</remarks>
        </member>
        <member name="P:External.Rendering.LayoutInfo.Top">
            <summary>
            Gets or sets the top position of the element.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.Left">
            <summary>
            Gets or sets the left position of the element.
            </summary>
        </member>
        <member name="P:External.Rendering.LayoutInfo.MinWidth">
            <summary>
            Gets or sets the minimum width of the element.
            </summary>
        </member>
        <member name="T:External.Rendering.NumberFormatter">
            <summary>
            Formats numbers roman or with letters.
            </summary>
        </member>
        <member name="T:External.Rendering.PageBreakFormatInfo">
            <summary>
            Formatting information for a page break.
            </summary>
        </member>
        <member name="T:External.Rendering.PageInfo">
            <summary>
            Provides information necessary to render the page.
            </summary>
        </member>
        <member name="T:External.Rendering.VerticalLineInfo">
            <summary>
            Vertical measurements of a paragraph line.
            </summary>
        </member>
        <member name="T:External.Rendering.LineInfo">
            <summary>
            Line info object used by the paragraph format info.
            </summary>
        </member>
        <member name="T:External.Rendering.ParagraphFormatInfo">
            <summary>
            Formatting information for a paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphFormatInfo.Append(External.Rendering.FormatInfo)">
            <summary>
            
            </summary>
            <param name="mergeInfo"></param>
            <returns></returns>
        </member>
        <member name="P:External.Rendering.ParagraphFormatInfo.IsEnding">
            <summary>
            Indicates whether the paragraph is ending.
            </summary>
            <returns>True if the paragraph is ending.</returns>
        </member>
        <member name="P:External.Rendering.ParagraphFormatInfo.IsStarting">
            <summary>
            Indicates whether the paragraph is starting.
            </summary>
            <returns>True if the paragraph is starting.</returns>
        </member>
        <member name="T:External.Rendering.ParagraphIterator">
            <summary>
            Iterates sequentially through the elements of a paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.#ctor(External.Rendering.DocumentObjectModel.ParagraphElements)">
            <summary>
            Initializes a paragraph iterator pointing on the given paragraph elements object.
            Paragraph iterators received from this paragraph iterator relate to this root node.
            </summary>
            <param name="rootNode">The root node for the paragraph iterator.</param>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.#ctor(External.Rendering.DocumentObjectModel.ParagraphElements,External.Rendering.DocumentObjectModel.DocumentObject,System.Collections.ArrayList)">
            <summary>
            Initializes a paragraph iterator given the root node, its position in the object tree and the current object
            </summary>
            <param name="rootNode">The node the position indices relate to.</param>
            <param name="current">The element the iterator shall point to.</param>
            <param name="indices">The position of the paragraph iterator in terms of element indices.</param>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.GetLastLeaf">
            <summary>
            Gets the last leaf of the document object tree.
            </summary>
            <returns>The paragraph iterator pointing to the last leaf in the document object tree.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.GetFirstLeaf">
            <summary>
            Gets the first leaf of the element tree.
            </summary>
            <returns>The paragraph iterator pointing to the first leaf in the element tree.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.GetNextLeaf">
            <summary>
            Returns the next iterator in the tree pointing to a leaf.
            </summary>
            <remarks>This function is intended to receive the renderable objects of a paragraph.
            Thus, empty ParagraphElement objects (which are collections) don't count as leafs.</remarks>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.GetNodeObject(External.Rendering.DocumentObjectModel.DocumentObject)">
            <summary>
            Gets the object a paragraph iterator shall point to.
            Only ParagraphElements and renderable objects are allowed.
            </summary>
            <param name="obj">The object to select the node object for.</param>
            <returns>The object a paragraph iterator shall point to.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.GetPreviousLeaf">
            <summary>
            Returns the previous iterator to a leaf in the document object tree pointing.
            </summary>
            <returns>The previous leaf, null if none exists.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphIterator.SeekFirstLeaf">
            <summary>
            Gets the leftmost leaf within the hierarchy.
            </summary>
            <returns>The searched leaf.</returns>
        </member>
        <member name="P:External.Rendering.ParagraphIterator.IsFirstLeaf">
            <summary>
            Determines whether this iterator is the first leaf of the root node.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphIterator.IsLastLeaf">
            <summary>
            Determines whether this iterator is the last leaf of the document object tree.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphIterator.Current">
            <summary>
            Gets the document object this instance ponits to.
            </summary>
        </member>
        <member name="T:External.Rendering.ParagraphRenderer">
            <summary>
            Summary description for ParagraphRenderer.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.#ctor(External.Drawing.XGraphics,External.Rendering.DocumentObjectModel.Paragraph,External.Rendering.FieldInfos)">
            <summary>
            Initializes a ParagraphRenderer object for formatting.
            </summary>
            <param name="gfx">The XGraphics object to do measurements on.</param>
            <param name="paragraph">The paragraph to format.</param>
            <param name="fieldInfos">The field infos.</param>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.#ctor(External.Drawing.XGraphics,External.Rendering.RenderInfo,External.Rendering.FieldInfos)">
            <summary>
            Initializes a ParagraphRenderer object for rendering.
            </summary>
            <param name="gfx">The XGraphics object to render on.</param>
            <param name="renderInfo">The render info object containing information necessary for rendering.</param>
            <param name="fieldInfos">The field infos.</param>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.Render">
            <summary>
            Renders the paragraph.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FormatTab(System.Boolean)">
            <summary>
            Adjusts the current x position to the given tab stop if possible.
            </summary>
            <returns>True, if the text doesn't fit the line any more and the tab causes a line break.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.ProbeAfterTab(External.Drawing.XUnit,External.Rendering.DocumentObjectModel.TabAlignment,System.Boolean@)">
            <summary>
            Probes the paragraph elements after a aligned tab stop and returns the vertical text position to start at.
            </summary>
            <param name="tabStopPosition">Position of the tab to probe.</param>
            <param name="tabAlignment">Alignment of the tab to probe.</param>
            <param name="notFitting">Out parameter determining whether the tab causes a line break.</param>
            <returns>The new x-position to restart behind the tab.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.ProbeAfterDecimalAlignedTab(External.Drawing.XUnit,System.Boolean@)">
            <summary>
            Probes the paragraph elements after a right aligned tab stop and returns the vertical text position to start at.
            </summary>
            <param name="tabStopPosition">Position of the tab to probe.</param>
            <param name="notFitting">Out parameter determining whether the tab causes a line break.</param>
            <returns>The new x-position to restart behind the tab.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.ProbeAfterTab">
            <summary>
            Probes the paragraph after a tab.
            Caution: This Function resets the word count and line width before doing its work.
            </summary>
            <returns>True if the tab causes a linebreak.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.GetNextTabStop(System.Boolean)">
            <summary>
            Gets the next tab stop following the current x position.
            </summary>
            <returns>The searched tab stop.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.RenderLine(External.Rendering.LineInfo)">
            <summary>
            Renders a single line.
            </summary>
            <param name="lineInfo"></param>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.InitFormat(External.Rendering.Area,External.Rendering.FormatInfo)">
            <summary>
            Initializes this instance for formatting.
            </summary>
            <param name="area">The area for formatting</param>
            <param name="previousFormatInfo">A previous format info.</param>
            <returns>False, if nothing of the paragraph will fit the area any more.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.Format(External.Rendering.Area,External.Rendering.FormatInfo)">
            <summary>
            Formats the paragraph by performing line breaks etc.
            </summary>
            <param name="area">The area in which to render.</param>
            <param name="previousFormatInfo">The format info that was obtained on formatting the same paragraph on a previous area.</param>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FinishLayoutInfo(System.Boolean)">
            <summary>
            Finishes the layout info by calculating starting and trailing heights.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FormatWord(System.String)">
            <summary>
            Helper function for formatting word-like elements like text and fields.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FormatCharacter(External.Rendering.DocumentObjectModel.Character)">
            <summary>
            Processes (measures) a special character within text.
            </summary>
            <param name="character">The character to process.</param>
            <returns>True if the character should start at a new line.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FormatBlank">
            <summary>
            Processes (measures) a blank.
            </summary>
            <returns>True if the blank causes a line break.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.FormatText(External.Rendering.DocumentObjectModel.Text)">
            <summary>
            Processes a text element during formatting.
            </summary>
            <param name="text">The text element to measure.</param>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.StartNewLine">
            <summary>
            Starts a new line by resetting measuring values.
            Do not call before the first first line is formatted!
            </summary>
            <returns>True, if the new line may fit the formatting area.</returns>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.StoreLineInformation(System.Boolean)">
            <summary>
            Stores all line information.
            </summary>
        </member>
        <member name="M:External.Rendering.ParagraphRenderer.GetLineHeight(External.Rendering.DocumentObjectModel.ParagraphFormat,External.Drawing.XGraphics,External.Rendering.DocumentRenderer)">
            <summary>
            Help function to receive a line height on empty paragraphs.
            </summary>
            <param name="format">The format.</param>
            <param name="gfx">The GFX.</param>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="F:External.Rendering.ParagraphRenderer.paragraph">
            <summary>
            The paragraph to format or render.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.InitialLayoutInfo">
            <summary>
            Gets a layout info with only margin and break information set.
            It can be taken before the paragraph is formatted.
            </summary>
            <remarks>
            The following layout information is set properly:<br />
            MarginTop, MarginLeft, MarginRight, MarginBottom, KeepTogether, KeepWithNext, PagebreakBefore.
            </remarks>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.StartXPosition">
            <summary>
            Gets the horizontal position to start a new line.
            </summary>
            <returns>The position to start the line.</returns>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.IgnoreHorizontalGrowth">
            <summary>
            When rendering a justified paragraph, only the part after the last tab stop needs remeasuring.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.TopBorderOffset">
            <summary>
            Gets the top border offset for the first line, else 0.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.BottomBorderOffset">
            <summary>
            Gets the bottom border offset for the last line, else 0.
            </summary>
        </member>
        <member name="P:External.Rendering.ParagraphRenderer.CurrentFont">
            <summary>
            The font used for the current paragraph element.
            </summary>
        </member>
        <member name="T:External.Rendering.ParagraphRenderer.Phase">
            <summary>
            Process phases of the renderer.
            </summary>
        </member>
        <member name="T:External.Rendering.ParagraphRenderer.FormatResult">
            <summary>
            Results that can occur when processing a paragraph element
            during formatting.
            </summary>
        </member>
        <member name="F:External.Rendering.ParagraphRenderer.FormatResult.Ignore">
            <summary>
            Ignore the current element during formatting.
            </summary>
        </member>
        <member name="F:External.Rendering.ParagraphRenderer.FormatResult.Continue">
            <summary>
            Continue with the next element within the same line.
            </summary>
        </member>
        <member name="F:External.Rendering.ParagraphRenderer.FormatResult.NewLine">
            <summary>
            Start a new line from the current object on.
            </summary>
        </member>
        <member name="F:External.Rendering.ParagraphRenderer.FormatResult.NewArea">
            <summary>
            Break formatting and continue in a new area (e.g. a new page).
            </summary>
        </member>
        <member name="T:External.Rendering.ParagraphRenderInfo">
            <summary>
            Represents rendering information for a paragraph.
            </summary>
        </member>
        <member name="T:External.Rendering.PdfDocumentRenderer">
            <summary>
            Provides the functionality to convert a document into PDF.
            </summary>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.RenderDocument">
            <summary>
            Renders the document into a PdfDocument containing all pages of the document.
            </summary>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.PrepareRenderPages">
            <summary>
            Renders the document into a PdfDocument containing all pages of the document.
            </summary>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the PDF document to the specified stream.
            </summary>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.RenderPages(System.Int32,System.Int32)">
            <summary>
            Renders the spcified page range.
            </summary>
            <param name="startPage">The first page to print.</param>
            <param name="endPage">The last page to print</param>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.WriteDocumentInformation">
            <summary>
            Writes document information like author and subject to the PDF document.
            </summary>
        </member>
        <member name="M:External.Rendering.PdfDocumentRenderer.CreatePdfDocument">
            <summary>
            Creates a new PDF document.
            </summary>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.Unicode">
            <summary>
            Gets a value indicating whether the text is rendered as Unicode.
            </summary>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.FontEmbedding">
            <summary>
            Gets a value indicating whether all used fonts are embedded in the document.
            </summary>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.Document">
            <summary>
            Set the document to be rendered by this printer.
            </summary>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.DocumentRenderer">
            <summary>
            Gets or sets a document renderer.
            </summary>
            <remarks>
            A document renderer is automatically created and prepared
            when printing before this property was set.
            </remarks>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.PageCount">
            <summary>
            Gets the count of pages.
            </summary>
        </member>
        <member name="P:External.Rendering.PdfDocumentRenderer.PdfDocument">
            <summary>
            Gets or sets the PDF document to render on.
            </summary>
            <remarks>A PDF document in memory is automatically created when printing before this property was set.</remarks>
        </member>
        <member name="T:External.Rendering.ShadingRenderer">
            <summary>
            Renders a Shading to an XGraphics object.
            </summary>
        </member>
        <member name="T:External.Rendering.TablesOld.FormattedCell">
            <summary>
            Represents a formatted cell.
            </summary>
        </member>
        <member name="T:External.Rendering.TablesOld.MergedCellList">
            <summary>
            Represents a merged list of cells of a table.
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.MergedCellList.#ctor(External.Rendering.DocumentObjectModel.TablesOld.Table)">
            <summary>
            Initializes a new instance of the MergedCellList class.
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.MergedCellList.Init(External.Rendering.DocumentObjectModel.TablesOld.Table)">
            <summary>
            Initializes this instance from a table.
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.MergedCellList.GetEffectiveBorders(External.Rendering.DocumentObjectModel.TablesOld.Cell)">
            <summary>
            Gets a borders object that should be used for rendering.
            </summary>
            <exception cref="T:System.ArgumentException">
              Thrown when the cell is not in this list.
              This situation occurs if the given cell is merged "away" by a previous one.
            </exception>
        </member>
        <member name="M:External.Rendering.TablesOld.MergedCellList.GetCoveringCell(External.Rendering.DocumentObjectModel.TablesOld.Cell)">
            <summary>
            Gets the cell that covers the given cell by merging. Usually the cell itself if not merged.
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.MergedCellList.GetNeighbor(External.Rendering.TablesOld.CellInfo,External.Rendering.TablesOld.MergedCellList.NeighborPosition)">
            <summary>
            Gets the specified cell's uppermost neighbor at the specified position.
            </summary>
        </member>
        <member name="T:External.Rendering.TablesOld.MergedCellList.NeighborPosition">
            <summary>
            Enumeration of neighbor positions of cells in a table.
            </summary>
        </member>
        <member name="T:External.Rendering.TablesOld.TableFormatInfo">
            <summary>
            Formatting information for tables.
            </summary>
        </member>
        <member name="T:External.Rendering.TablesOld.TableRenderer">
            <summary>
            Renders a table to an XGraphics object.
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.RenderHeaderRows">
            <summary>
            
            </summary>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.Format(External.Rendering.Area,External.Rendering.FormatInfo)">
            <summary>
            Formats (measures) the table.
            </summary>
            <param name="area">The area on which to fit the table.</param>
            <param name="previousFormatInfo"></param>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.CalcStartingHeight">
            <summary>
            Calcs either the height of the header rows or the height of the uppermost top border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.CalcMaxTopBorderWidth(System.Int32)">
            <summary>
            Calculates the top border width for the first row that is rendered or formatted.
            </summary>
            <param name="row">The row index.</param>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.CalcBottomBorderWidth(External.Rendering.DocumentObjectModel.TablesOld.Cell)">
            <summary>
            Calculates bottom border width of a cell.
            </summary>
            <param name="cell">The cell the bottom border of the row that is probed.</param>
            <returns>The calculated border width.</returns>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.GetMinMergedCell(System.Int32)">
            <summary>
            Gets the first cell in the given row that is merged down minimally.
            </summary>
            <param name="row">The row to prope.</param>
            <returns>The first cell with minimal vertical merge.</returns>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.CalcLastConnectedRow(System.Int32)">
            <summary>
            Calculates the last row that is connected with the given row.
            </summary>
            <param name="row">The row that is probed for downward connection.</param>
            <returns>The last row that is connected with the given row.</returns>
        </member>
        <member name="M:External.Rendering.TablesOld.TableRenderer.CalcLastConnectedColumn(System.Int32)">
            <summary>
            Calculates the last column that is connected with the specified column.
            </summary>
            <param name="column">The column that is probed for downward connection.</param>
            <returns>The last column that is connected with the given column.</returns>
        </member>
        <member name="T:External.Rendering.TablesOld.TableRenderInfo">
            <summary>
            Rendering information for tables.
            </summary>
        </member>
        <member name="T:External.Rendering.TextFrameFormatInfo">
            <summary>
            Formatting information for textframes.
            </summary>
        </member>
        <member name="T:External.Rendering.TextFrameRenderer">
            <summary>
            Renders text frames.
            </summary>
        </member>
        <member name="T:External.Rendering.TextFrameRenderInfo">
            <summary>
            Summary description for TextFrameRenderInfo.
            </summary>
        </member>
        <member name="T:External.Rendering.TopDownFormatter">
            <summary>
            Formats a series of document elements from top to bottom.
            </summary>
        </member>
        <member name="F:External.Rendering.TopDownFormatter.MaxCombineElements">
            <summary>
            The maximum number of elements that can be combined via keepwithnext and keeptogether
            </summary>
        </member>
        <member name="M:External.Rendering.TopDownFormatter.MarginMax(External.Drawing.XUnit,External.Drawing.XUnit)">
            <summary>
            Returns the max of the given Margins, if both are positive or 0, the sum otherwise.
            </summary>
            <param name="prevBottomMargin">The bottom margin of the previous element.</param>
            <param name="nextTopMargin">The top margin of the next element.</param>
            <returns></returns>
        </member>
        <member name="M:External.Rendering.TopDownFormatter.FormatOnAreas(External.Drawing.XGraphics)">
            <summary>
            Formats the elements on the areas provided by the area provider.
            </summary>
            <param name="gfxParam">The graphics object to render on.</param>
        </member>
        <member name="M:External.Rendering.TopDownFormatter.IsForcedAreaBreak(System.Int32,External.Rendering.Renderer,External.Rendering.Area)">
            <summary>
            Indicates that a break between areas has to be performed before the element with the given idx.
            </summary>
            <param name="idx">Index of the document element.</param>
            <param name="renderer">A formatted renderer for the document element.</param>
            <param name="remainingArea">The remaining area.</param>
        </member>
        <member name="T:External.Encryption.OpenXmlEncryption">
            <summary>
            Class for encrypting/decrypting Office 2007 files
            </summary>
        </member>
        <member name="T:External.Encryption.SHA">
            <summary>
            This is implemented using SHA1 algorithm
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.BuiltInCellStyleName">
            <summary>
            Represents available built-in cell styles.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Normal">
            <summary>
            Normal built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Good">
            <summary>
            Good built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Bad">
            <summary>
            Bad built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Neutral">
            <summary>
            Neutral built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Note">
            <summary>
            Note built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.LinkedCell">
            <summary>
            Linked Cell built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Calculation">
            <summary>
            Calculation built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.CheckCell">
            <summary>
            Check Cell built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.ExplanatoryText">
            <summary>
            Explanatory Text built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading1">
            <summary>
            Heading 1 built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading2">
            <summary>
            Heading 2 built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading3">
            <summary>
            Heading 3 built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Heading4">
            <summary>
            Heading 4 built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Input">
            <summary>
            Input built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Output">
            <summary>
            Output built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Title">
            <summary>
            Title built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.WarningText">
            <summary>
            Warning text built-in cell style.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInCellStyleName.Total">
            <summary>
            Total built-in cell style.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CellStyle">
            <summary>
            Contains settings specifying how the cell data will be displayed.
            </summary>
            <remarks>
            Various settings control various display aspects: alignment, patterns and shading, indentation, 
            rotation, cell protection, text wrapping, number format, font related settings and cell borders. You can 
            set cell style of a specific <see cref="T:GemBox.Spreadsheet.ExcelCell"/> through its <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/> property, or you can create new cell style 
            with desired properties and apply it to unlimited number of Excel objects. Note, however, that number of 
            distinct cell styles in Excel file can't exceed <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsCellStyles">
            ExcelFile.MaxCellStyles</see>. You don't have to worry about creating duplicate cell styles; internal 
            caching engine will eliminate duplicates in appropriate moments.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyle.#ctor">
            <summary>
            Creates new cell style with default values (Arial font with size 200).
            </summary>
            <remarks>
            Creating standalone cell style has sense only if you assign it to some <see cref="T:GemBox.Spreadsheet.ExcelCell"/> object
            by setting <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/> property. Otherwise, the created cell style will have no effect on the Excel file.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyle.#ctor(GemBox.Spreadsheet.ExcelFile)">
            <summary>
            Creates new cell style with default values (copies default font from ExcelFile object).
            </summary>
            <remarks>
            Creating standalone cell style has sense only if you assign it to some <see cref="T:GemBox.Spreadsheet.ExcelCell"/> object
            by setting <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/> property. Otherwise, the created cell style will have no effect on the Excel file.
            </remarks>
            <param name="ef">ExcelFile object.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.IsDefault">
            <summary>
            Returns <see langword="true"/> if cell style is default; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment">
            <summary>
            Gets or sets horizontal alignment.
            </summary>
            <remarks>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General">
            HorizontalAlignmentStyle.General</see>.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment">
            <summary>
            Gets or sets vertical alignment.
            </summary>
            <remarks>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom">
            VerticalAlignmentStyle.Bottom</see>.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.FillPattern">
            <summary>
            Get or sets fill pattern.
            </summary>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Indent">
            <summary>
            Gets or sets cell data indentation.
            </summary>
            <remarks>
            <para>Indents cell contents from any edge of the cell, depending on 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> and associated alignment. If 
            you set this property to non-zero value and <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical">
            IsTextVertical</see> is <see langword="false"/>, it is recommended that you also set 
            <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment"/> to
            <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left">HorizontalAlignmentStyle.Left</see> or
            <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right">HorizontalAlignmentStyle.Right</see>. 
            Otherwise some versions of Microsoft Excel will have problems interpreting Indent value in 
            "Format Cells..." dialog &gt; "Alignment" tab. In the case where 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> is <see langword="true"/>, you should set
            <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment"/> instead.</para>
            <para>Unit is one character. Value must be between 0 and 15.</para>
            <para>Default value for this property is 0.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of range.</exception>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Rotation">
            <summary>
            Gets or sets cell data rotation.
            </summary>
            <remarks>
            <para>Unit is degrees (1/360th of a full circle). Value must be between -90 and 90 and specifies 
            anticlockwise (counterclockwise [N.Amer]) rotation from the normal position.</para>
            <para>Because of Microsoft Excel limitations, this property and 
            <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> property can't be used at the 
            same time. If <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> is <see langword="true"/> and 
            rotation is set, <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> will be set to 
            <see langword="false"/>. When <see cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/> is set to 
            <see langword="true"/>, rotation will be set to 0.</para>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is not between -90 and 90.</exception>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.IsTextVertical"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.IsTextVertical">
            <summary>
            Gets or sets whether the cell text is displayed in a vertical style.
            </summary>
            <remarks>
            <para>If <see langword="true"/> letters are stacked top-to-bottom.</para>
            <para>Because of Microsoft Excel limitations, this property 
            and <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation"/> property can't be used at the same time. 
            When set, <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation"/> property is set to 0. 
            If <see cref="P:GemBox.Spreadsheet.CellStyle.Rotation"/> property is latter set to some non-zero value,
            this property will be set to <see langword="false"/>.</para>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.Rotation"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Locked">
            <summary>
            Gets or sets if the cell is locked.
            </summary>
            <remarks>
            <para>This property has meaning only if <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</see> 
            or is <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</see> set to <see langword="true"/>. For more information consult Microsoft Excel documentation.</para>
            <para>Default value for this property is <see langword="true"/>.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.FormulaHidden">
            <summary>
            Gets or sets whether the formula is hidden in the formula bar when the cell is selected.
            </summary>
            <remarks>
            <para>This property has meaning only if <see cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</see> 
            is set to <see langword="true"/>. For more information consult Microsoft Excel documentation.</para>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.WrapText">
            <summary>
            Gets or sets if the text is wrapped.
            </summary>
            <remarks>
            <para>If set to <see langword="true"/>, wraps cell data into multiple lines in a cell. The number of wrapped lines is 
            dependent on the width of the column and the length of the cell contents.</para>
            Default value for this property is <see langword="false"/>.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.ShrinkToFit">
            <summary>
            Gets or sets if the cell text is shrunk to fit the cell.
            </summary>
            <remarks>
            <para>If set to <see langword="true"/>, reduces the apparent size of font characters so that all data in a selected 
            cell fits within the column. For more information consult Microsoft Excel documentation.</para>
            Default value for this property is <see langword="false"/>.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.QuotePrefix">
            <summary>
            Gets or sets if the cell text should be prefixed by a single quote mark (e.g., 'text).
            </summary>
            <remarks>Supported only in xlsx.</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.NumberFormat">
            <summary>
            Gets or sets format string that will be used to interpret and display cell value.
            </summary>
            <remarks>
            <para>If the value of this property is <see cref="F:System.String.Empty">String.Empty</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see> is of 
            <see cref="T:System.DateTime"/> type, 
            ISO date/time format will be used as number format.</para>
            <para>
            Custom  number format has to be in invariant culture format.
            </para>
            <para>
            Example:
            </para>
            <para>
            <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
            <tr>
            <th>Format string</th>
            <th>Value</th>
            <th>Output</th>
            </tr>
            <tr>
            <td>#####</td>
            <td>123</td>
            <td>123</td>
            </tr>
            <tr>
            <td>00000</td>
            <td>123</td>
            <td>00123</td>
            </tr>
            <tr>
            <td>#,#</td>
            <td>1234567890</td>
            <td>1,234,567,890</td>
            </tr>
            <tr>
            <td>00.00</td>
            <td>1.2</td>
            <td>01.20</td>
            </tr>
            <tr>
            <td>#,##0.00</td>
            <td>1234567890</td>
            <td>1,234,567,890.00</td>
            </tr>
            <tr>
            <td>#0.##%</td>
            <td>0.092</td>
            <td>9.2%</td>
            </tr>
            </table>
            </font>
            </para>
            <para>For more information on number format strings consult Microsoft Excel documentation.</para>
            Default value for this property is <see cref="F:System.String.Empty">String.Empty</see>.
            </remarks>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Font">
            <summary>
            Gets or sets font related settings.
            </summary>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Borders">
            <summary>
            Gets or sets cell borders (<see cref="T:GemBox.Spreadsheet.CellBorder"/>).
            </summary>
            <example>
      <para>Following code demonstrates various cell style properties:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellStyle"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellStyle"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyle.Name">
            <summary>
            Gets the style name.
            </summary>
            <remarks>
            <para>For direct style (for example <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/>), gets the name of the style from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles"/> collection which is applied to the current cell.</para>
            <para>For style from <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles"/> collection, gets the name of the style.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.HashtableElement">
            <summary>
            HashtableElement. All derived classes MUST implement:
            1) HashtableElement Clone()
            2) int GetHashCode()
            3) bool Equals(object obj)
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalAlignmentStyle">
            <summary>
            Horizontal alignment styles used for <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment">
            CellStyle.HorizontalAlignment</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General">
            <summary>
            Aligns data depending on the data type (text, number, etc.). Consult Microsoft Excel documentation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Fill">
            <summary>
            Fill alignment repeats cell data to fill the whole cell.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.General"/>.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.CenterAcross">
            <summary>
            Centered across selection. Multiple cells can be selected but only one should have value for this alignment to have effect.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Center"/>.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.HorizontalAlignmentStyle.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalAlignmentStyle">
            <summary>
            Vertical alignment styles used for <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment">
            CellStyle.VerticalAlignment</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Justify">
            <summary>
            Justify alignment.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Top"/>.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Distributed">
            <summary>
            Distributed alignment.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats. This option is exported as <see cref="F:GemBox.Spreadsheet.VerticalAlignmentStyle.Center"/>.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CellBorder">
            <summary>
            Contains settings for a single cell border.
            </summary>
            <remarks>
      <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
    </remarks>
            <seealso cref="T:GemBox.Spreadsheet.CellBorders"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorder.SetBorder(System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets both border line color and line style.
            </summary>
            <param name="lineColor">Border line color.</param>
            <param name="lineStyle">Border line style.</param>
            <remarks>
      <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorder.LineColor">
            <summary>
            Gets or sets border line color.
            </summary>
            <remarks>
      <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorder.LineStyle">
            <summary>
            Gets or sets border line style.
            </summary>
            <remarks>
      <para>
        Note that although diagonal-up (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">IndividualBorder.DiagonalUp</see>
        or <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">MultipleBorders.DiagonalUp</see>) and diagonal-down
        (<see cref="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">IndividualBorder.DiagonalDown</see> or
        <see cref="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">MultipleBorders.DiagonalDown</see>) can be individually set,
        they share the same color and the same line style. This is a Microsoft Excel limitation.
      </para>
    </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.CellBorders">
            <summary>
            Collection of cell borders (<see cref="T:GemBox.Spreadsheet.CellBorder"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.CellBorder"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellBorders.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets specific line color and line style on multiple borders.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Border line color.</param>
            <param name="lineStyle">Border line style.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CellBorders.Item(GemBox.Spreadsheet.IndividualBorder)">
            <summary>
            Gets specific border.
            </summary>
            <param name="individualBorder">Border to get.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.LineStyle">
            <summary>
            Line styles used for 
            <see cref="P:GemBox.Spreadsheet.CellBorder.LineStyle">CellBorder.LineStyle</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Thin">
            <summary>
            Thin line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Medium">
            <summary>
            Medium line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Dashed">
            <summary>
            Dashed line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Dotted">
            <summary>
            Dotted line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Thick">
            <summary>
            Thick line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DoubleLine">
            <summary>
            Obsolete. Use Double instead.
            </summary>
            <exclude/>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.Hair">
            <summary>
            Hair line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashed">
            <summary>
            Medium dashed line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DashDot">
            <summary>
            Dash-dot line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDot">
            <summary>
            Medium dash-dot line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.DashDotDot">
            <summary>
            Dash-dot-dot line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot line.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.SlantDashDot">
            <summary>
            Slanted dash-dot line.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.LineStyle.SlantedDashDot">
            <summary>
            Obsolete. Use SlantDashDot instead.
            </summary>
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.IndividualBorder">
            <summary>
            Different borders that can be set on excel cell. Members of this enumeration can't be combined.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.MultipleBorders"/>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IndividualBorder.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.MultipleBorders">
            <summary>
            Flags for borders and border groups that can be set on the excel cell. 
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.IndividualBorder"/>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.None">
            <summary>
            None of the borders are used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Top">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Bottom">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Left">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Right">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalUp">
            <summary>
            Diagonal-up border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.DiagonalDown">
            <summary>
            Diagonal-down border.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Horizontal">
            <summary>
            Horizontal borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Vertical">
            <summary>
            Vertical borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Diagonal">
            <summary>
            Diagonal borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.Outside">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.MultipleBorders.All">
            <summary>
            All borders are used.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFillPattern">
            <summary>
            Contains fill pattern settings.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetSolid(System.Drawing.Color)">
            <summary>
            Sets solid pattern using specified fill color.
            </summary>
            <param name="fillColor">Fill color.</param>
            <remarks>
            This will set <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle"/> to 
            <see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid">FillPatternStyle.Solid</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor"/> 
            to <paramref name="fillColor"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFillPattern.SetPattern(GemBox.Spreadsheet.FillPatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets complex (non-empty and non-solid) pattern.
            </summary>
            <param name="patternStyle">Pattern style.</param>
            <param name="foregroundColor">Foreground color.</param>
            <param name="backgroundColor">Background color.</param>
            <remarks>
            <para>For solid pattern, just use <see cref="M:GemBox.Spreadsheet.ExcelFillPattern.SetSolid(System.Drawing.Color)"/> method.</para>
            <para>To clear fill pattern, just set <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle"/> 
            to <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None">FillPatternStyle.None</see></para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">
            <summary>
            Gets or sets fill pattern style.
            </summary>
            <remarks>
            If you set this property to anything else than <see cref="F:GemBox.Spreadsheet.FillPatternStyle.None">
            FillPatternStyle.None</see>, <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            PatternForegroundColor</see> and/or <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">
            PatternBackgroundColor</see> should also be set (if color is 
            different from default <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            <summary>
            Get or sets fill pattern foreground color.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.FillPatternStyle"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">
            <summary>
            Get or sets fill pattern background color.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.FillPatternStyle"/>
        </member>
        <member name="T:GemBox.Spreadsheet.FillPatternStyle">
            <summary>
            Fill pattern styles used for 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</see>.
            </summary>
            <remarks>
            <para>To see names of Microsoft Excel patterns, start Microsoft Excel and go to "Format" menu &gt; "Cells..." submenu &gt; 
            "Patterns" tab &gt; "Pattern" drop-down. When hovering over a pattern, Microsoft Excel name is displayed in tooltip
            text.</para>
            <para><see cref="F:GemBox.Spreadsheet.FillPatternStyle.None"/> fill pattern uses no colors.</para>
            <para><see cref="F:GemBox.Spreadsheet.FillPatternStyle.Solid"/> fill pattern uses <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see>.</para>
            <para>All other paterns use both <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">
            ExcelFillPattern.PatternForegroundColor</see> and 
            <see cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</see></para>
            <para><see cref="T:GemBox.Spreadsheet.FillPatternStyle"/>s are currently supported only for XLSX (Excel 2007+) and XLS (Excel 1997-2003) files.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternStyle">ExcelFillPattern.PatternStyle</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor">ExcelFillPattern.PatternForegroundColor</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor">ExcelFillPattern.PatternBackgroundColor</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Solid">
            <summary>
            "Solid" fill pattern using foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray6">
            <summary>
            "6% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray12">
            <summary>
            "12% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray25">
            <summary>
            "25% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray50">
            <summary>
            "50% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.Gray75">
            <summary>
            "75% Gray" is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.HorizontalStripe">
            <summary>
            "Horizontal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.VerticalStripe">
            <summary>
            "Vertical Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalStripe">
            <summary>
            "Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ReverseDiagonalStripe">
            <summary>
            "Reverse Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.DiagonalCrosshatch">
            <summary>
            "Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThickDiagonalCrosshatch">
            <summary>
            "Thick Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalStripe">
            <summary>
            "Thin Horizontal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinVerticalStripe">
            <summary>
            "Thin Vertical Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalStripe">
            <summary>
            "Thin Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinReverseDiagonalStripe">
            <summary>
            "Thin Reverse Diagonal Stripe" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinHorizontalCrosshatch">
            <summary>
            "Thin Horizontal Crosshatch" pattern.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FillPatternStyle.ThinDiagonalCrosshatch">
            <summary>
            "Thin Diagonal Crosshatch" pattern.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFont">
            <summary>
            Contains font related settings.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.MinWeight">
            <summary>
            Minimum font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.NormalWeight">
            <summary>
            Normal font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.BoldWeight">
            <summary>
            Default bold font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFont.MaxWeight">
            <summary>
            Maximum font weight.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFont.#ctor">
            <summary>
            Creates new font with default values (Arial font with size 200).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Name">
            <summary>
            Gets or sets name of the font.
            </summary>
            <remarks>
            Default value for this property is determined by
            <see cref="P:GemBox.Spreadsheet.ExcelFile.DefaultFontName">
            GemBox.Spreadsheet.ExcelFile.DefaultFontName</see>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Color">
            <summary>
            Gets or sets font color.
            </summary>
            <remarks>
            Default value for this property is <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Weight">
            <summary>
            Gets or sets font weight (font boldness).
            </summary>
            <remarks>
            <para>Font weight is an integer value between <see cref="F:GemBox.Spreadsheet.ExcelFont.MinWeight">
            MinWeight</see> and <see cref="F:GemBox.Spreadsheet.ExcelFont.MaxWeight"/>.</para>
            <para>If you want font to have standard boldness, set this property to
            <see cref="F:GemBox.Spreadsheet.ExcelFont.BoldWeight"/>.</para>
            <para>Default value of this property is <see cref="F:GemBox.Spreadsheet.ExcelFont.NormalWeight"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Font weight is out of allowed range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Size">
            <summary>
            Gets or sets font size.
            </summary>
            <remarks>
            <para>Unit is twip (1/20th of a point).</para>
            <para>Default value of this property is determined by
            <see cref="P:GemBox.Spreadsheet.ExcelFile.DefaultFontSize">
            GemBox.Spreadsheet.ExcelFile.DefaultFontSize</see></para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Italic">
            <summary>
            Gets or sets if the font is italic.
            </summary>
            <remarks>
            Default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.Strikeout">
            <summary>
            Gets or sets if the font is struck out.
            </summary>
            <remarks>
            Default value of this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition">
            <summary>
            Gets or sets font script position.
            </summary>
            <remarks>
            Default value of this property is <see cref="F:GemBox.Spreadsheet.ScriptPosition.Normal">ScriptPosition.Normal</see>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle">
            <summary>
            Gets or sets font underlining.
            </summary>
            <remarks>
            Default value of this property is <see cref="F:GemBox.Spreadsheet.UnderlineStyle.None">UnderlineStyle.None</see>.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ScriptPosition">
            <summary>
            Script positions used in <see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition">ExcelFont.ScriptPosition</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Normal">
            <summary>
            Normal script position.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Superscript">
            <summary>
            Displays script above normal position.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ScriptPosition.Subscript">
            <summary>
            Displays script below normal position.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.UnderlineStyle">
            <summary>
            Underline styles used in <see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle">ExcelFont.UnderlineStyle</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.Single">
            <summary>
            Single underline. Underlines only cell data.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.Double">
            <summary>
            Double underline. Underlines only cell data.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.SingleAccounting">
            <summary>
            Single accounting underline. Underlines whole cell.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.UnderlineStyle.DoubleAccounting">
            <summary>
            Double accounting underline. Underlines whole cell.
            </summary>
            <remarks>
            <para>This option is currently not supported when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ComHelper">
            <summary>
            Contains methods that can be useful for users which are calling GemBox.Spreadsheet component using COM interop.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ComHelper"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ComHelper.ComSetLicense(System.String)">
            <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
            <remarks>
            <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
            <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
            <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
            </remarks>
            <param name="serialKey">Serial key.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CmoObjSubRecord.ID">
            <summary>
            Object's id.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.UnknownObjSubRecord.Read(System.Byte[])">
            <summary>
            Reads bye array.
            </summary>
            <param name="buffer">Array to Read.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.UnknownObjSubRecord.ConvertToBytes">
            <summary>
            Returns binary representation of the subrecord.
            </summary>
            <returns>Binary representation of the subrecord.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoBaseRecord.ConvertToBytes(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.MsoBaseRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoBaseRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>		
        </member>
        <member name="P:GemBox.Spreadsheet.MsoBaseRecord.Version">
            <summary>
            Get or sets the version if the record is an atom. 
            If the record is a container, this field has a value of 0xFFFF.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.MsoBaseRecord.Instance">
            <summary>
            Gets or setes the instance. Depending on the instance a record's contents 
            it can have different meanings.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientDataRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientDataRecord.ConvertToBytes(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientDataRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientTextBoxRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientTextBoxRecord.ConvertToBytes(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Converts mso structure' representation to bytes.
            </summary>		
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientTextBoxRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ColumnTypeResolution">
            <summary>
            Defines resolution method that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>. 
            </summary>
            <remarks>
            <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution">column type resolution</see> and by exploring 
            types of all <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> in some column.
            Column type can be <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime">
            DateTime</see>, <see cref="T:System.String"/> or <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Object">
            <summary>
            All columns will be of type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringInvariantCulture">
            <summary>
            All columns  will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.StringCurrentCulture">
            <summary>
            All columns  will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.Object"/>. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringInvariantCulture">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.InvariantCulture">
            invariant culture</see> will be used.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ColumnTypeResolution.AutoPreferStringCurrentCulture">
            <summary>
            If all values in some column have the same type then that type will be used for <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>, otherwise
            column will be of type <see cref="T:System.String"/>. For conversion from some <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> to string <see cref="P:System.Globalization.CultureInfo.CurrentCulture">
            current culture</see> will be used.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CreateDataTableOptions">
            <summary>
            Represents options creating <see cref="T:System.Data.DataTable"/> and filling it with values from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            Use default constructor to extract used cell range.
            </remarks>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)"/>
            <example>
      <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to <see cref="T:System.Data.DataTable"/> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)"/> method.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CreateDataTable"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CreateDataTable"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <remarks>
            Use this constructor to extract used cell range.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CreateDataTableOptions.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfColumns">Number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfRows">
            <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns">
            <summary>
            Gets or sets the number of columns being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns"/> is ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes">
            <summary>
            Gets a list of indexes of columns which will be extracted.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.StartColumn"/> and <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.NumberOfColumns"/> are ignored if <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnIndexes"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.Resolution">
            <summary>
            Gets or sets the resolution type that specifies how column types will be resolved in created <see cref="T:System.Data.DataTable"/>,
            see <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ColumnTypeResolution.Auto"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ColumnHeaders">
            <summary>
            Gets or sets a value indicating whether to use first row of extracted data for column headers.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions">
            <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None"/>.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs">
            <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable">
            <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnIndex">
            <summary>
            Gets the destination column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableColumnType">
            <summary>
            Gets the destination column type in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue">
            <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/> cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.IsDataTableValueValid">
            <summary>
            Gets a value indication whether current <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue"/> can be converted into <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable"/> cell.
            </summary>
            <remarks>
            If this value is false, you need to set an appropriate <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue"/> before exiting event handler or
            <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> will be thrown.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet">
            <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelRowIndex">
            <summary>
            Gets the source row index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelColumnIndex">
            <summary>
            Gets the source column index in <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCellValue">
            <summary>
            Gets the source value from <see cref="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.Action">
            <summary>
            Gets or sets the action which will be executed after event, see <see cref="T:GemBox.Spreadsheet.ExtractDataEventAction"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooter">
            <summary>
            Represents worksheet's header or footer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooter.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooter"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.LeftSection">
            <summary>
            Gets or sets left section.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.CenterSection">
            <summary>
            Gets or sets center section.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooter.RightSection">
            <summary>
            Gets or sets right section.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterFieldType">
            <summary>
            Represents types of <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> predefined fields.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.PageNumber">
            <summary>
            Page number.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.NumberOfPages">
            <summary>
            Total number of pages.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Date">
            <summary>
            Current date.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.Time">
            <summary>
            Current time.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.SheetName">
            <summary>
            Sheet name.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HeaderFooterFieldType.FilePath">
            <summary>
            File path.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterPage">
            <summary>
            Represents header/footer which should be shown on a specific worksheet page (first page, even pages and all other pages).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterPage.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Header">
            <summary>
            Gets or sets header for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> instance.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterPage.Footer">
            <summary>
            Gets or sets footer for this <see cref="T:GemBox.Spreadsheet.HeaderFooterPage"/> instance.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HeaderFooterSection">
            <summary>
            Represents <see cref="T:GemBox.Spreadsheet.HeaderFooter">header or footer</see> section.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> constructor.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String)">
            <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="text">Text to append.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(System.String,GemBox.Spreadsheet.ExcelFont)">
            <summary>
            Appends text to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="text">Text to append.</param>
            <param name="font">Desired <see cref="T:GemBox.Spreadsheet.ExcelFont"/> font.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
            <remarks>
            <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont"/> properties:</para>
            <list type="bullet">
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Italic"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Color"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle"/></description></item>
            </list>
            <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/> to some of special commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType)">
            <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="fieldType">Special Header/Footer field.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.Append(GemBox.Spreadsheet.HeaderFooterFieldType,GemBox.Spreadsheet.ExcelFont)">
            <summary>
            Appends special header/footer field to <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/>.
            </summary>
            <param name="fieldType">Special Header/Footer field.</param>
            <param name="font">&gt;Desired <see cref="T:GemBox.Spreadsheet.ExcelFont"/> font.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
            <remarks>
            <para>Append method currently supports the following <see cref="T:GemBox.Spreadsheet.ExcelFont"/> properties:</para>
            <list type="bullet">
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Weight"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Italic"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Strikeout"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.ScriptPosition"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.Color"/></description></item>
            <item><description><see cref="P:GemBox.Spreadsheet.ExcelFont.UnderlineStyle"/></description></item>
            </list>
            <para>For other formattings, set <see cref="P:GemBox.Spreadsheet.HeaderFooterSection.Content"/> to some of special string commands. 
            For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="fileName">The fileName of the file that contains picture.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.String,System.Int32,System.Int32)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="fileName">The fileName of the file that contains picture.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureStream">Stream of the picture to be added.</param>
            <param name="imageFormat">Picture format.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.AppendPicture(System.IO.MemoryStream,GemBox.Spreadsheet.ExcelPictureFormat,System.Int32,System.Int32)">
            <summary>
            Appends picture to this <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureStream">Stream of the picture to be added.</param>
            <param name="imageFormat">Picture format.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.HeaderFooterSection.GetPicture(GemBox.Spreadsheet.ExcelPictureFormat@,System.Int32@,System.Int32@)">
            <summary>
            Gets picture from <see cref="T:GemBox.Spreadsheet.HeaderFooterSection"/> instance.
            </summary>
            <param name="pictureFormat">Picture format.</param>
            <param name="width">Picture width (in pixels).</param>
            <param name="height">Picture height (in pixels).</param>
            <returns>If header/footer section contains picture, returns picture stream; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.HeaderFooterSection.Content">
            <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.HeaderFooter">header/footer</see> section content.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthColumn">
            <summary>
            Class that represents column in Fixed-Width Text format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthColumn.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthColumn"/> class.
            </summary>
            <param name="width">The column width.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.LoadConverter">
            <summary>
            Gets or sets the converter for converting value from file to <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value when loading from Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.SaveConverter">
            <summary>
            Gets or sets the converter for converting <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value to text when saving to Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthColumn.Width">
            <summary>
            Gets or sets a value that represents column width.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthLoadOptions">
            <summary>
            Represents options for loading from Fixed-Width Text file format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LoadOptions">
            <summary>
            Represents a base class for loading options of various file formats.
            </summary>
            <remarks>
            Following classes inherit from this base class:
            <list type="bullet">
            <item><description><see cref="T:GemBox.Spreadsheet.XlsxLoadOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XlsLoadOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.OdsLoadOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.CsvLoadOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.HtmlLoadOptions"/></description></item>
            </list>
            </remarks>
            <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Load"/>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Load"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Load"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.LoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.LoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.XlsxDefault">
            <summary>
            Gets the default options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.XlsDefault">
            <summary>
            Gets the default options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.OdsDefault">
            <summary>
            Gets the default options for loading from OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.CsvDefault">
            <summary>
            Gets the default options for loading from Character Separated Values file format.
            </summary>
            <remarks>
            <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LoadOptions.HtmlDefault">
            <summary>
            Gets the default options for loading from HyperText Markup Language File (HTML) format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthLoadOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading Fixed-Width Text file. If <see langword="false"/>, numbers will be loaded as strings.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Columns">
            <summary>
            Gets the list of column definitions for Fixed-Width Text file. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being loaded from Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.FixedWidthSaveOptions">
            <summary>
            Represents options for saving to Fixed-Width Text file format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SaveOptions">
            <summary>
            Represents a base class for saving options of various file formats.
            </summary>
            <remarks>
            Following classes inherit from this base class:
            <list type="bullet">
            <item><description><see cref="T:GemBox.Spreadsheet.XlsxSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XlsSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.OdsSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.CsvSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.HtmlSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.PdfSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.XpsSaveOptions"/></description></item>
            <item><description><see cref="T:GemBox.Spreadsheet.ImageSaveOptions"/></description></item>
            </list>
            </remarks>
            <seealso cref="O:GemBox.Spreadsheet.ExcelFile.Save"/>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to specified file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Save"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Save"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.SaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.SaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XlsxDefault">
            <summary>
            Gets the default options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XlsDefault">
            <summary>
            Gets the default options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.OdsDefault">
            <summary>
            Gets the default options for saving to OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.CsvDefault">
            <summary>
            Gets the default options for saving to Character Separated Values file format.
            </summary>
            <remarks>
            <b>MS Excel</b> uses ';' as default if current culture uses ',' for decimal separator. <b>GemBox.Spreadsheet</b> always uses ','.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.HtmlDefault">
            <summary>
            Gets the default options for saving to HyperText Markup Language File format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.PdfDefault">
            <summary>
            Gets the default options for saving to Portable Document Format file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.XpsDefault">
            <summary>
            Gets the default options for saving to XML Paper Specification file format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.ImageDefault">
            <summary>
            Gets the default options for saving to image formats.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SaveOptions.Limitations">
            <summary>
            Gets limitations for saving to a file formats.
            </summary>
            <remarks>
            This is the table for all limitations of each format:
            <para>
            <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
            <tr>
            <td></td>
            <th>Rows</th>
            <th>Columns</th>
            <th>Colors</th>
            <th>CellStyles</th>
            </tr>
            <tr>
            <th>XLSX</th>
            <td>1048576</td>
            <td>16384</td>
            <td>16000000</td>
            <td>64000</td>
            </tr>
            <tr>
            <th>XLS</th>
            <td>65536</td>
            <td>256</td>
            <td>56</td>
            <td>3979</td>
            </tr>
            <tr>
            <th>ODS</th>
            <td>1048576</td>
            <td>16384</td>
            <td>16000000</td>
            <td>64000</td>
            </tr>
            <tr>
            <th>CSV</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>TXT</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>HTML</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>PDF</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>XPS</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            <tr>
            <th>IMAGE</th>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            <td><see cref="F:System.Int32.MaxValue"/></td>
            </tr>
            </table>
            </font>
            </para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.FixedWidthColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.#ctor(GemBox.Spreadsheet.FixedWidthColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FixedWidthSaveOptions"/> class.
            </summary>
            <param name="columns">The column definitions for Fixed-Width Text file.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FixedWidthSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to Fixed-Width Text file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Columns">
            <summary>
            Gets the List of column definitions for saving data. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being saved to Fixed-Width Text file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Fixed-Width Text file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.SheetHeaderFooter">
            <summary>
            Represents sheet header/footer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SheetHeaderFooter.#ctor">
            <summary>
            <see cref="T:GemBox.Spreadsheet.SheetHeaderFooter"/> constructor.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentOddEven">
            <summary>
            Gets or sets if there are different headers/footers on the even and odd pages.
            If <see langword="true"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter"/> specify page header and footer values for odd
            and even pages. 
            If <see langword="false"/> then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Header"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer"/> is used, even when <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader"/>/<see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter"/> are present.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DifferentFirst">
            <summary>
            Gets or sets if header/footer is different on the first page. 
            If <see langword="true"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter"/> are on the first page.
            If <see langword="false"/>, <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader"/> and <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter"/> are ignored.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenFooter">
            <summary>
            Gets or sets even footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenHeader">
            <summary>
            Gets or sets even header.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstFooter">
            <summary>
            Gets or sets first footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstHeader">
            <summary>
            Gets or sets first header.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Footer">
            <summary>
            Gets or sets default footer.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd905956.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.Header">
            <summary>
            Gets or sets default header.
            </summary>
            <remarks>
            <para>The header string may contain special commands, for example placeholders for the page number, 
            current date, or text formatting attributes. These fields are represented by single letters 
            (exception: font name and size) with a leading ampersand. If the ampersand is part of 
            the regular header text, it will be duplicated.</para>
            <para>For more information consult <see href="http://msdn.microsoft.com/en-us/library/dd773041.aspx">Microsoft Excel documentation</see>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.AlignWithMargins">
            <summary>
            Gets or sets if header/footer margin will align with page margins.
            Supported in XLSX only.
            </summary>
            <remarks>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.ScaleWithDoc">
            <summary>
            Gets or sets if headers/footers will be scaled with document scaling.
            Supported in XLSX only.
            </summary>
            <remarks>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage">
            <summary>
            Gets or sets default header/footer.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage">
            <summary>
            Gets or sets first page header/footer.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on first page.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage">
            <summary>
            Gets or sets header/footer for even pages.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on even pages.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage">
            <summary>
            Returns <see langword="true"/> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.FirstPage"/> header/footer is specified.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasFirstPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on first page.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage">
            <summary>
            Returns <see langword="true"/> if <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.EvenPage"/> header/footer is specified.
            </summary>
            <remarks>
            If <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.HasEvenPage"/> returns <see langword="false"/>, then <see cref="P:GemBox.Spreadsheet.SheetHeaderFooter.DefaultPage"/> will be used on even pages.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlLoadOptions">
            <summary>
            Represents options for loading from HyperText Markup Language File (HTML) format.
            </summary>
            <remarks>
            When importing, each paragraph will be translated to spreadsheet row.
            Text values will be merged in spreadsheet cell.
            Table rows and cells will be translated to spreadsheet rows and cells.
            All content inside table cell will be merged in spreadsheet cell, even nested tables and paragraphs.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading HTML file. If <see langword="false"/>, numbers will be loaded as strings.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.ParseFormatProvider">
            <summary>
            Gets or sets the format provider for the HTML file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the HTML file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.FontSettings">
            <summary>
            Contains font related settings which are used when printing a spreadsheet or exporting a spreadsheet to a file format that requires font information.
            </summary>
            <remarks>
            Setting the custom fonts location is usually used in medium trust environments to bypass file system operations restrictions imposed for file locations that are not under the application's jurisdiction.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseUri">
            <summary>
            Gets or sets base <see cref="T:System.Uri"/> where component looks for fonts. <see cref="T:System.Uri"/> path should end with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FontSettings.FontsBaseDirectory">
            <summary>
            Gets or sets base directory path where component looks for fonts. Directory path can be absolute or relative to <see cref="M:System.IO.Directory.GetCurrentDirectory"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitEventArgs">
            <summary>
            Provides data for the <see cref="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction">
            <summary>
            Gets or sets the choice for proceeding when free limit is reached.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FreeLimitEventArgs.File">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> on which limit was reached.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitReachedAction">
            <summary>
            Type of action that can be chosen when free limit is reached.
            </summary>
            <example>
      <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PerformanceCounter"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PerformanceCounter"/>
    </example>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ThrowException">
            <summary>
            Throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop">
            <summary>
            Stop reading/writing.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial">
            <summary>
            Continue reading/writing using trial mode.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FreeLimitReachedException">
            <summary>
            Exception that occurs when free limit is reached.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetException">
            <summary>
            Represents errors that can occur in the GemBox.Spreadsheet component. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with a specified error message. 
            </summary>
            <param name="msg">Message string.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="msg">Message string.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SpreadsheetException"/> class with serialized data. 
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlType">
            <summary>
            Defines type of HTML export.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.Html">
            <summary>
            Export entire HTML document. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.HtmlTable">
            <summary>
            Export HTML table and its content. Pictures are exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.HtmlType.Mhtml">
            <summary>
            Export entire HTML document and images to MIME HTML (MHTML) format. Pictures are always exported.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlExportPosition">
            <summary>
            Data that describes the current position in the exporter methods.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlExportPosition.#ctor(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelColumn,System.Int32,System.Int32)">
            <summary>
            Creates new HTML export position.
            </summary>
            <param name="range">Cell range.</param>
            <param name="sheetRow">Current sheet row.</param>
            <param name="sheetColumn">Current sheet column.</param>
            <param name="htmlRowIndex">Current HTML row index.</param>
            <param name="htmlColumnIndex">Current HTML column index.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.Range">
            <summary>
            Gets the cell range that is exporting to HTML.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.SheetRow">
            <summary>
            Gets the current sheet row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.SheetColumn">
            <summary>
            Gets the current sheet column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.HtmlRowIndex">
            <summary>
            Gets row index for the current row in HTML table.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlExportPosition.HtmlColumnIndex">
            <summary>
            Gets column index for the current column in HTML table.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.HtmlSaveOptions">
            <summary>
            Represents options for saving to HyperText Markup Language File (HTML) format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.HtmlSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectorySrcPath">
            <summary>
            Gets or sets the relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>s files in the HTML.
            </summary>
            <value>
            The relative directory that will be used when referencing <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>s files in the HTML.
            </value>
            <remarks>
            If value is <see langword="null"/> or <see cref="F:System.String.Empty"/> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath">
            <summary>
            Gets or sets the physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>s files will be saved.
            </summary>
            <value>
            The physical directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s and <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>s files will be saved.
            </value>
            <remarks>
            If value is <see langword="null"/> or <see cref="F:System.String.Empty"/> and HTML export is called with <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload, 
            value will be automatically set to <i>htmlFileNameWithoutExtension</i> + "_files". 
            This directory will be created in the same location as HTML file.
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType">
            <summary>
            Gets or sets the type of export.
            </summary>
            <value>
            The <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.HtmlType"/> value for type of export.
            </value>
            <remarks>
            <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Html"/> and <see cref="F:GemBox.Spreadsheet.HtmlType.HtmlTable"/> values, pictures will be exported only if <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> or <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> overload is used or if <see cref="P:GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath"/> is specified.</para>
            <para>For <see cref="F:GemBox.Spreadsheet.HtmlType.Mhtml"/> value, pictures are always exported.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.WriteCellAddress">
            <summary>
            Gets or sets a value indicating whether each td HTML element should contain data-cell attribute with cell address for this cell.
            </summary>
            <remarks>
            If the value of this property is <see langword="true"/> then each td HTML element will contain data-cell attribute with cell address for this cell (for example data-cell="A1").
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the Html file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to HTML file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryImgSrcPath">
            <summary>
            Gets or sets the pictures directory that will be used when referencing images in the HTML and Javascript.
            </summary>
            <value>
            The pictures directory that will be used when referencing images in the HTML.
            </value>
            <remarks>
            If value is <see langword="null"/> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images". 
            This directory will be created in the same location as HTML file.        
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.HtmlSaveOptions.PicturesDirectoryPath">
            <summary>
            Gets or sets the directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s will be physically saved.
            </summary>
            <value>
            The directory where <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>s will be physically saved.
            </value>
            <remarks>
            If value is <see langword="null"/> or empty string and HTML export is called with filePath parameter overload, 
            value will be automatically set to htmlFileNameWithoutExtension + "-Images".
            This directory will be created in the same location as HTML file.
            </remarks>
            <example>
      <para>Following code demonstrates how to export Excel file to HTML with specifying location where images will be saved.</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="HtmlExportImages"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="HtmlExportImages"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.CellStyleCollection">
            <summary>
            Represents a collection of named (master) <see cref="T:GemBox.Spreadsheet.CellStyle"/>s.
            </summary>
            <remarks>
            Used as a container for a <see cref="P:GemBox.Spreadsheet.ExcelFile.Styles"/> property.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Add(System.String)">
            <summary>
            Adds an empty <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance to the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.
            </summary>
            <param name="name">The name of new <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance.</param>
            <returns>New <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance that is added to this collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> contains a <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance with specific name.
            </summary>
            <param name="styleName">Name of the <see cref="T:GemBox.Spreadsheet.CellStyle"/> to locate in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.</param>
            <returns>
            <see langword="true"/> if <see cref="T:GemBox.Spreadsheet.CellStyle"/> instance with speficic name is found in the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&gt;CellStyle&lt;</see> that can be used to iterate through the <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellStyleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Count">
            <summary>
            Gets the number of <see cref="T:GemBox.Spreadsheet.CellStyle"/>s contained in the collection. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given name.
            </summary>
            <remarks>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given name.
            If <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> doesn't contain correspondent style, then new style will be added and returned. 
            </remarks>
            <param name="styleName">The name of the <see cref="T:GemBox.Spreadsheet.CellStyle"/>.</param>
            <returns><see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given name.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellStyleCollection.Item(GemBox.Spreadsheet.BuiltInCellStyleName)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.
            </summary>
            <remarks>
            Gets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.
            If <see cref="T:GemBox.Spreadsheet.CellStyleCollection"/> doesn't contain correspondent style, then new style will be added and returned. 
            </remarks>
            <param name="styleName">The <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName"/> of the <see cref="T:GemBox.Spreadsheet.CellStyle"/>.</param>
            <returns><see cref="T:GemBox.Spreadsheet.CellStyle"/> that corresponds to given <see cref="T:GemBox.Spreadsheet.BuiltInCellStyleName">styleName</see>.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRangeEnumerator">
            <summary>
            Enumerator used for iterating cells in a <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Dispose">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is one column before 
            the first cell in the cell range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the cell range.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if 
            the enumerator has passed the end of the cell range.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentCell">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Parent">
            <summary>
            Parent <see cref="T:GemBox.Spreadsheet.CellRange"/>. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentRow">
            <summary>
            Current absolute row index in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.CurrentColumn">
            <summary>
            Current absolute column index in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.Current">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRangeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current <see cref="T:GemBox.Spreadsheet.ExcelCell"/> in the cell range.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumn">
            <summary>
            Excel column contains column options and cell range with column cells.
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns"/> method.</para>
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow"/>
            <example>
      <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ColumnCollection"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ColumnCollection"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumnRowBase">
            <summary>
            Base class for the excel column and row classes.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.#ctor(GemBox.Spreadsheet.ExcelRowColumnCollectionBase,System.Int32)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnRowBase.#ctor(GemBox.Spreadsheet.ExcelRowColumnCollectionBase,GemBox.Spreadsheet.ExcelColumnRowBase)">
            <summary>
            Internal. Copy constructor.
            </summary>
            <param name="parent"></param>
            <param name="source"></param>
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle"/>) for contained cells.
            </summary>
            <remarks>
            Setting this property will not directly change <see cref="P:GemBox.Spreadsheet.ExcelCell.Style">ExcelCell.Style</see>. 
            Instead, this style will be used in resolving process when writing Excel file. See 
            <see cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for details.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if style is default; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed">
            <summary>
            Gets or sets whether object is collapsed in outlining.
            </summary>
            <remarks>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> property 
            needs to be set to <see langword="true"/>.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/> property needs to be set to <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel">
            <summary>
            Gets or sets outline level.
            </summary>
            <remarks>
            <para>Exception is thrown if value is out of 0 to 7 range.</para>
            <para>Using this property you can create hierarchical groups. Range of consecutive objects (rows or columns) 
            with the same value of outline level belongs to the same group. Default value is zero, which prevents grouping.</para>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> property 
            needs to be set to <see langword="true"/>.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/> property needs to be set to <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 0 to 7 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden">
            <summary>
            Gets or sets whether excel object is hidden.
            </summary>
            <remarks>
            <para>When you use outline grouping and you want outline group to be collapsed, you need to set three properties:</para>
            <para><see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/> property needs to be set to correct outline level.</para>
            <para>If group is collapsed, for all rows in the collapsed group <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Hidden"/> property 
            needs to be set to <see langword="true"/>.</para>
            <para>If group is collapsed, for the row where collapsed (plus) sign is located 
            <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/> property needs to be set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single)">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFitAdvanced(System.Single,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
            <param name="firstRow">First row.</param>
            <param name="lastRow">Last row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double)">
            <summary>
            Automatically fits column width to the minimum size required for all data in the column to be visible.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.AutoFit(System.Double,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Automatically fits column width by checking only the cells in the column that are specified by row range.
            </summary>
            <remarks>
            <para>Auto-fit column width is a MS Excel feature and not a file format feature. Autofit method uses methods from System.Drawing to determine the real data width.</para>
            <para>Scaling factor is used to adjust the width of the column. Resulting column width is equal to CalculatedWidth * scaling. Default scaling is 1.</para>
            </remarks>
            <param name="scaling">Scaling factor.</param>
            <param name="firstRow">First row.</param>
            <param name="lastRow">Last row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.Delete">
            <summary>
            Deletes this column from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertEmpty(System.Int32)">
            <summary>
            Inserts specified number of empty columns before the current column.
            </summary>
            <param name="columnCount">Number of columns to insert.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumn.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelColumn)">
            <summary>
            Inserts specified number of copied columns before the current column.
            </summary>
            <param name="columnCount">Number of columns to insert.</param>
            <param name="sourceColumn">Source column to copy.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumn.Cells">
            <summary>
            Gets cell range with column cells.
            </summary>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelColumn.Width">
            <summary>
            Gets or sets column width.
            </summary>
            <remarks>
            Unit is 1/256th of the width of the zero character in default font.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth"/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataError">
            <summary>
            Possible errors that can occur while extracting to DataTable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataError.WrongType">
            <summary>
            Error that indicates that data in ExcelWorksheet can't convert to <see cref="T:System.Data.DataTable"/> type.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataOptions">
            <summary>
            Options specified when extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.None">
            <summary>
            None of the options is set. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.StopAtFirstEmptyRow">
            <summary>
            Extracting data stops at the first empty row.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataOptions.SkipEmptyRows">
            <summary>
            When extracting data, skip all empty rows.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractToDataTableOptions">
            <summary>
            Represents options for extracting data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to <see cref="T:System.Data.DataTable"/>.
            </summary>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)"/>
            <example>
      <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting"/>.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ExtractDataEvent"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ExtractDataEvent"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExtractToDataTableOptions.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="numberOfRows">Number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of data being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.NumberOfRows">
            <summary>
            Gets or sets the number of rows being extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection">
            <summary>
            Gets the collection used for mapping <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> columns to <see cref="T:System.Data.DataTable"/> columns.
            </summary>
            <remarks>
            <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.StartColumn"/> is ignored if <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.MappingCollection"/> has any values.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions">
            <summary>
            Gets or sets <see cref="P:GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions"/>.
            </summary>
            <remarks>
            Default value is <see cref="F:GemBox.Spreadsheet.ExtractDataOptions.None"/>.
            </remarks>
        </member>
        <member name="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting">
            <summary>
            Event that fires when converting <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value to <see cref="T:System.Data.DataTable"/> cell value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs">
            <summary>
            Arguments for <see cref="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting"/> event.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable">
            <summary>
            Gets the source <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableRowIndex">
            <summary>
            Gets the source row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableColumnIndex">
            <summary>
            Gets the source column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTableValue">
            <summary>
            Gets the source value from <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet">
            <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelRowIndex">
            <summary>
            Gets the destination row index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelColumnIndex">
            <summary>
            Gets the destination column index in <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell">
            <summary>
            Gets the destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCellValue">
            <summary>
            Gets or sets the value which will be inserted into destination <see cref="P:GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.DataValidation"/> items.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidationCollection.InsertItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidationCollection.SetItem(System.Int32,GemBox.Spreadsheet.DataValidation)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidation">
            <summary>
            A single item of data validation defined on ranges of the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
            <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange"/>s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges"/> collection of this data validation.</param>
            <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>s.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.ExcelWorksheet,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified worksheet and cell references on which this data validation will be applied.
            </summary>
            <param name="worksheet">The worksheet that will be used to initialize <see cref="T:GemBox.Spreadsheet.CellRange"/>s that will be added to the <see cref="P:GemBox.Spreadsheet.DataValidation.CellRanges"/> collection of this data validation.</param>
            <param name="cellReferences">The cell references from which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>s.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.CellRange})">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified cell ranges on which this data validation will be applied.
            </summary>
            <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DataValidation.#ctor(GemBox.Spreadsheet.CellRange[])">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.DataValidation"/> class with specified cell ranges on which this data validation will be applied.
            </summary>
            <param name="cellRanges">The cell ranges on which this data validation will be applied.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Type">
            <summary>
            Gets or sets the type of data validation.
            </summary>
            <value>
            The type of data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Operator">
            <summary>
            Gets or sets the relational operator used with this data validation.
            </summary>
            <value>
            The relational operator used with this data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.IgnoreBlank">
            <summary>
            Gets or sets a value indicating whether the data validation treats empty or blank entries as 
            valid. <see langword="true"/> means empty entries are OK and do not violate the validation constraints.
            </summary>
            <value>
            <see langword="true"/> if empty entries are OK and do not violate the validation constraints; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InCellDropdown">
            <summary>
            Gets or sets a value indicating whether to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type.
            </summary>
            <value>
            <see langword="true"/> to display the dropdown combo box for a <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Formula1">
            <summary>
            Gets or sets the first formula in the DataValidation dropdown.
            </summary>
            <value>
            The first formula in the DataValidation dropdown.
            </value>
            <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween"/> relational
            operators, and the only formula used for other relational operators (<see cref="F:GemBox.Spreadsheet.DataValidationOperator.Equal"/>, 
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThan"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual"/>,
            <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan"/>, <see cref="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual"/>), 
            or for <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom"/> or <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/> data validation type.
            The content can be an instance of any type, but the following rules apply when formula is being written:
            <list type="table">
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.WholeNumber"/> or <see cref="F:GemBox.Spreadsheet.DataValidationType.TextLength"/>, and content is integral data type
            (<see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, 
            <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>), formula will be saved as integral constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Decimal"/>, and content is floating-point data type (<see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>), formula will be saved as floating-point constant, else if formula is an 
            Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Date"/>, and content is <see cref="T:System.DateTime"/> data type, formula will be saved as 
            date constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Time"/>, and content is <see cref="T:System.TimeSpan"/> data type, formula will be saved as
            time constant, else if formula is an Excel formula or an Excel reference (<see cref="T:System.String"/> that starts with '='), 
            value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.List"/>, and content is any type that implements <see cref="T:System.Collections.IEnumerable"/>, 
            formula will be saved as list series (comma seperated values), else if formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.Custom"/>, and formula is an Excel formula or an Excel reference 
            (<see cref="T:System.String"/> that starts with '='), value will be saved as a formula, otherwise, it will be saved as string constant.
            </description></item>
            <item><description>
            If data validation type is <see cref="F:GemBox.Spreadsheet.DataValidationType.None"/>, formula won't be saved.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.Formula2">
            <summary>
            Gets or sets the second formula in the DataValidation dropdown.
            </summary>
            <value>
            The second formula in the DataValidation dropdown.
            </value>
            <remarks>
            It used as a bounds for <see cref="F:GemBox.Spreadsheet.DataValidationOperator.Between"/> and <see cref="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween"/> relational operators only.
            For the information about the content, see <see cref="P:GemBox.Spreadsheet.DataValidation.Formula1"/> remarks.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ShowInputMessage">
            <summary>
            Gets or sets a value indicating whether to display the input prompt message.
            </summary>
            <value>
            <see langword="true"/> to display the input prompt message; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InputMessageTitle">
            <summary>
            Gets or sets the title bar text of input prompt.
            </summary>
            <value>
            The title bar text of input prompt.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.InputMessage">
            <summary>
            Gets or sets the message text of input prompt.
            </summary>
            <value>
            The message text of input prompt.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ShowErrorAlert">
            <summary>
            Gets or sets a value indicating whether to display the error alert message when an invalid
            value has been entered, according to the criteria specified.
            </summary>
            <value>
            <see langword="true"/> to display the error alert message when an invalid
            value has been entered; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorStyle">
            <summary>
            Gets or sets the style of error alert used for this data validation.
            </summary>
            <value>
            The style of error alert used for this data validation.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorTitle">
            <summary>
            Gets or sets the title bar text of error alert.
            </summary>
            <value>
            The title bar text of error alert.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.ErrorMessage">
            <summary>
            Gets or sets the message text of error alert.
            </summary>
            <value>
            The message text of error alert.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.DataValidation.CellRanges">
            <summary>
            Gets the ranges over which data validation is applied.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRangeCollection">
            <summary>
            A collection of <see cref="T:GemBox.Spreadsheet.CellRange"/> items.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.Add(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
            <summary>
            Adds the <see cref="T:GemBox.Spreadsheet.CellRange"/> from the specified worksheet to the collection.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="cellReference">The cell reference for which to create <see cref="T:GemBox.Spreadsheet.CellRange"/>.</param>
            <returns>An instance of the <see cref="T:GemBox.Spreadsheet.CellRange"/> that was added to the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.InsertItem(System.Int32,GemBox.Spreadsheet.CellRange)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRangeCollection.SetItem(System.Int32,GemBox.Spreadsheet.CellRange)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationType">
            <summary>
            Specifies the type of data validation used to validate user input.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.None">
            <summary>
            No data validation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.WholeNumber">
            <summary>
            Data validation which checks for whole number values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Decimal">
            <summary>
            Data validation which checks for decimal values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.List">
            <summary>
            Data validation which checks for a value matching one of list of values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Date">
            <summary>
            Data validation which checks for date values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Time">
            <summary>
            Data validation which checks for time values satisfying the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.TextLength">
            <summary>
            Data validation which checks for text values, whose length satisfies the given condition.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationType.Custom">
            <summary>
            Data validation which uses a custom formula to check the cell value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationOperator">
            <summary>
            The relational operator used in data validation.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.Between">
            <summary>
            Data validation which checks if a value is between two other values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotBetween">
            <summary>
            Data validation which checks if a value is not between two other values.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.Equal">
            <summary>
            Data validation which checks if a value is equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.NotEqual">
            <summary>
            Data validation which checks if a value is not equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThan">
            <summary>
            Data validation which checks if a value is less than a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.LessThanOrEqual">
            <summary>
            Data validation which checks if a value is less than or equal to a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThan">
            <summary>
            Data validation which checks if a value is greater than a specified value.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationOperator.GreaterThanOrEqual">
            <summary>
            Data validation which checks if a value is greater than or equal to a specified value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DataValidationErrorStyle">
            <summary>
            The style of data validation error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Stop">
            <summary>
            This data validation error style uses a stop icon in the error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Warning">
            <summary>
            This data validation error style uses a warning icon in the error alert.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.DataValidationErrorStyle.Information">
            <summary>
            This data validation error style uses an information icon in the error alert.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCell">
            <summary>
            Excel cell provides access to a single worksheet cell or to a merged range if the cell is merged.
            </summary>
            <remarks>
            <para>Merged range is created by using <see cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</see> property. 
            See the property documentation for more information on merging.</para>
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
        </member>
        <member name="T:GemBox.Spreadsheet.AbstractRange">
            <summary>
            Base class for classes representing one or more excel cells.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Internal.
            </summary>
            <param name="parent"></param>
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.AbstractRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Comment">
            <summary>
            Gets is sets comment
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>		
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle"/>) on one or more excel cells.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AbstractRange.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if all cells in <see cref="T:GemBox.Spreadsheet.AbstractRange"/> have default 
            cell style; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets borders on this cell or on merged range if this cell is merged.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.ConvertExcelNumberToDateTime(System.Double,System.Boolean)">
            <summary>
            Converts Excel floating-point number to <see cref="T:System.DateTime"/> structure.
            </summary>
            <remarks>
            <para>
            Excel file format doesn't have a separate data type for date and time. 
            <see cref="T:System.DateTime"/> value is
            stored as IEEE number encoded in a special way. When reading Excel file, 
            <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> is examined and if it matches 
            some of date/time number formats cell value is interpreted as <see cref="T:System.DateTime"/>.</para>
            <para>However, if some non-standard date/time number format is used, cell value will not be recognized 
            as <see cref="T:System.DateTime"/> but as ordinary number. In such cases (when you know that
            specific cell holds <see cref="T:System.DateTime"/> value but you get a number when reading
            Excel file) use this method to convert IEEE number to <see cref="T:System.DateTime"/> 
            structure.</para>
            </remarks>
            <param name="num">Excel floating-point number.</param>
            <param name="use1904DateSystem">True to use 1904 date system.</param>
            <returns>Converted DateTime structure.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCell.GetFormattedValue">
            <summary>
            Converts <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value</see> of this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance to string representation using <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">number format</see> 
            that is specified on this <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance.
            </summary>
            <returns>Formatted <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">cell value.</see></returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Value">
            <summary>
            Gets or sets value of this cell or of merged range if this cell is merged.
            </summary>
            <remarks>
            <para>Exception is thrown if value for the set is not of supported type (See 
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</see> for details).</para>
            <para>Note that the fact some type is supported doesn't mean it is written to Excel file in the native format. As
            Microsoft Excel has just few basic types, the object of supported type will be converted to a similar excel type. 
            If similar excel type doesn't exist, value is written as a string value.</para>
            <para>If the value of this property is of <see cref="T:System.DateTime"/> type and 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/> number format is not set, ISO date/time 
            format will be used as <see cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</see> 
            value.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Value is not supported.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
            <seealso cref="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">ExcelFile.SupportsType</seealso>
            <seealso cref="P:GemBox.Spreadsheet.CellStyle.NumberFormat">CellStyle.NumberFormat</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle"/>) of this cell or 
            of merged range if this cell is merged.
            </summary>
            <remarks>
            Unset style properties will be inherited from corresponding row or column. See
            <see cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</see>
            for more details.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if style is default; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.MergedRange">
            <summary>
            Returns associated merged range if the cell is merged; otherwise, <see langword="null"/>.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged">CellRange.Merged</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Formula">
            <summary>
            Gets or sets cell formula string.
            </summary>
            <remarks>
            <para>GemBox.Spreadsheet can read and write formulas, but cannot calculate formula results. However, when you 
            open a file in MS Excel, formula results will be calculated automatically.</para>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
            <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
            <para>Currently supported formula features by GemBox.Spreadsheet XLS formula parser are:
            <list type="bullet">
            <item><description>Named cell</description></item>
            <item><description>Named range</description></item>
            <item><description>Absolute cell/range</description></item>
            <item><description>Relative cell/range</description></item>
            <item><description>Functions( partly, see the list of supported functions below )</description></item>
            <item><description>Missed argument</description></item>
            <item><description>Unary operator</description></item>
            <item><description>Binary operator</description></item>
            <item><description>Parentheses</description></item>
            <item><description>3d cell reference</description></item>
            <item><description>3d cell range reference</description></item>
            <item><description>Boolean</description></item>
            <item><description>Integer</description></item>
            <item><description>Float</description></item>
            <item><description>String</description></item>
            <item><description>Error</description></item>
            </list>
            </para>
            <para>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </para>
            <para>
            Currently supported functions are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGE, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
            <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
            NamedRangeCollection.Add</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Comment">
            <summary>
            Gets or sets cell comment.
            </summary>
            <remarks>
            <para>
            You can set comment text, set whether comment will be visible during loading xls file or not.
            Additinally you can get column or row of the excel cell to which this comment is assigned.
            </para>
            <para>
            Supported only in xlsx.
            </para>
            </remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Comment"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasComment">
            <summary>
            If cell has comment returns true, else returns false.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.Hyperlink">
            <summary>
            Gets or sets cell hyperlink.
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks> 
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCell.HasHyperlink">
            <summary>
            If cell has hyperlink returns true, else returns false.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelCellCollection">
            <summary>
            Collection of excel cells (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase">
            <summary>
            Base class for row, column and cell collections.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase"/>.
            </summary>
            <returns>
            An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase"/>.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.Count">
            <summary>
            Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks).
            </summary>
            <remarks>
            The cells are internally allocated in rows and not in columns. In other words, when you load CSV/XLS/XLSX or 
            access some cells via worksheet.Cells property new rows and cells can be allocated but the column count 
            will stay the same. To find last used column in the worksheet, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">ExcelWorksheet.GetUsedCellRange</see> method.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelCellCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellCollection.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelCellCollection.Item(System.Int32)">
            <summary>
            Gets the cell with the specified index.
            </summary>
            <param name="index">The zero-based index of the cell.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRow">
            <summary>
            Excel row contains row options and cell range with row cells.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.Delete">
            <summary>
            Deletes this row from the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.InsertEmpty(System.Int32)">
            <summary>
            Inserts specified number of empty rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.InsertCopy(System.Int32,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Inserts specified number of copied rows before the current row.
            </summary>
            <param name="rowCount">Number of rows to insert.</param>
            <param name="sourceRow">Source row to copy.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRow.AutoFit">
            <summary>
            Automatically fits row height to the minimum size required for all lines in the row cells to be visible.
            </summary>
            <remarks>
            <para>Auto-fit row height is a MS Excel feature and not a file format feature. When rows are
            auto-fit in MS Excel user interface, MS Excel will calculate current character heights and 
            set row height to the new numeric value.</para>
            <para>This method will set <see cref="P:GemBox.Spreadsheet.ExcelRow.Height"/> to the approximate 
            value (maxLinesCount * 255).</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.Cells">
            <summary>
            Gets cell range with row cells.
            </summary>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells"/>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">
            <summary>
            Gets only currently allocated cells for this row.
            </summary>
            <remarks>
            <para>Use this collection if you are reading entire Excel file (you don't know exact position of 
            cells with data). If writing values, using <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells"/>
            property is recommended.</para>
            <para>This collection contains only allocated cells so it is faster as you avoid  
            checking every single cell in a row. You still need to check if a specific cell contains 
            any value (it can be empty).</para>
            </remarks>
            <example>
      <para>Following code reads entire XLSX file and displays all cells containing any data. Data types are also displayed.</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ReadingFile"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ReadingFile"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelRow.Cells"/>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRow.Height">
            <summary>
            Gets or sets row height.
            </summary>
            <remarks>
            Unit is twip (1/20th of a point).
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1">
            <summary>
            Generic base class for row and column collections.
            </summary>
            <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.ExcelRow"/> or <see cref="T:GemBox.Spreadsheet.ExcelColumn"/>.</typeparam>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowColumnCollectionBase">
            <summary>
            Base class for row and column collections.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.DeleteInternalCore(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase.ClearCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.DeleteInternalCore(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.RemoveComments(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixAllIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixMergedRegionsIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ClearCore">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Items">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.Int32)">
            <overloads>Gets the row / column with the specified index or name.</overloads>
            <summary>
            Gets the row / column with the specified index.
            </summary>
            <param name="index">The zero-based index of the row / column.</param>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelRowColumnCollectionBase`1.Item(System.String)">
            <summary>
            Gets the row / column with the specified name.
            </summary>
            <param name="name">The name of the row / column.</param>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelRowCollection">
            <summary>
            Collection of excel rows (<see cref="T:GemBox.Spreadsheet.ExcelRow"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowNameToIndex(System.String)">
            <summary>
            Converts row name ("1", "2", ...) to row index (0, 1, ...).
            </summary>
            <param name="name">Row name.</param>
            <returns>Row index for the specified name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RowIndexToName(System.Int32)">
            <summary>
            Converts row index (0, 1, ...) to row name ("1", "2", ...).
            </summary>
            <param name="rowIndex">Row index.</param>
            <returns>Row name for the specified index.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixMergedRegionsIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelRowCollection.RemoveComments(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelColumnCollection">
            <summary>
            Collection of excel columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn"/>).
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns"/> method.</para>
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn"/>
            <example>
      <para>
        Following code shows how to get hidden columns and shows how to get number of columns occupied with data.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ColumnCollection"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ColumnCollection"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.AdjustArraySize(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ParseName(System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnNameToIndex(System.String)">
            <summary>
            Converts column name ("A", "B", ...) to column index (0, 1, ...).
            </summary>
            <param name="name">Column name.</param>
            <returns>Column index for the specified name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.ColumnIndexToName(System.Int32)">
            <summary>
            Converts column index (0, 1, ...) to column name ("A", "B", ...).
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns>Column name for the specified index.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixMergedRegionsIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelColumnCollection.FixPageBreaksIndexes(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreak">
            <summary>
            Base class for all page breaks.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalPageBreak">
            <summary>
            Specifies a horizontal position where the new page begins when the worksheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.Row">
            <summary>
            Index of the first row of the new page.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.FirstColumn">
            <summary>
            Index of the first column of the new page.
            </summary>
            <remarks>
            Use 0 (first column) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreak.LastColumn">
            <summary>
            Index of the last column of the new page.
            </summary>
            <remarks>
            Use 255 (last column) if you don't care.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalPageBreak">
            <summary>
            Specifies a vertical position where the new page begins when the worksheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckBreakIndex(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreak.CheckLimit(System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.Column">
            <summary>
            Index of the first column of the new page.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.FirstRow">
            <summary>
            Index of the first row of the new page.
            </summary>
            <remarks>
            Use 0 (first row) if you don't care.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreak.LastRow">
            <summary>
            Index of the last row of the new page.
            </summary>
            <remarks>
            Use 65535 (last row) if you don't care.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreakCollection`1">
            <summary>
            Generic base class for page break collections.
            </summary>
            <typeparam name="T">Type of the items in the collection, either <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak"/> or <see cref="T:GemBox.Spreadsheet.VerticalPageBreak"/>.</typeparam>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.PageBreakCollection">
            <summary>
            Base class for page break collections.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.Clear">
            <summary>
            Removes all page breaks. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the page break at the specified index.
            </summary>
            <param name="index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection.Count">
            <summary>
            Gets the number of page breaks contained in the collection. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.Add(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.PageBreakCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.ItemsCore">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.MaxLastLimit">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PageBreakCollection`1.Item(System.Int32)">
            <exclude/>
        </member>
        <member name="T:GemBox.Spreadsheet.HorizontalPageBreakCollection">
            <summary>
            Collection of horizontal page breaks (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak"/>).
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new horizontal page break.</overloads>
            <summary>
            Ads a new horizontal page break above the specified row.
            </summary>
            <param name="row">The zero-based index of the row.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.HorizontalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new horizontal page break above the specified row and within specified columns.
            </summary>
            <param name="row">The zero-based index of the row.</param>
            <param name="firstColumn">The zero-based index of the first column.</param>
            <param name="lastColumn">The zero-based index of the last column.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.MaxLastLimit">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.HorizontalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the horizontal page break at the specified index.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.VerticalPageBreakCollection">
            <summary>
            Collection of vertical page breaks (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak"/>).
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.CreateItem(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32)">
            <overloads>Ads a new vertical page break.</overloads>
            <summary>
            Ads a new vertical page break left to the specified column.
            </summary>
            <param name="column">The zero-based index of the column.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.VerticalPageBreakCollection.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Ads a new vertical page break left to the specified column and within specified rows.
            </summary>
            <param name="column">The zero-based index of the column.</param>
            <param name="firstRow">The zero-based index of the first row.</param>
            <param name="lastRow">The zero-based index of the last row.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.MaxLastLimit">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.VerticalPageBreakCollection.Item(System.Int32)">
            <summary>
            Gets or sets the vertical page break at the specified index.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlink">
            <summary>
            Hyperlink class.
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.IsExternal">
            <summary>
            Defines if hyperlink location is in this excel file.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.ToolTip">
            <summary>
            Gets or sets ToolTip for hyperlink.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlink.Location">
            <summary>
            Gets or sets the location string for hyperlink.
            <remarks>URL have to be in escaped format(You can use<see cref="M:System.Uri.EscapeUriString(System.String)">System.Uri.EscapeUriString</see> method).</remarks>
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection">
            <summary>
            Collection of hyperlinks (<see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/>).
            </summary>
            <remarks>
            <para>Supported only in xlsx. If you want hyperlinks also to work in XLS, assign HYPERLINK formula to
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>.</para>
            <para>You can set cell style to underline and font color to blue in order to appear as hyperlink, that 
            is not done automatically.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Add(GemBox.Spreadsheet.SpreadsheetHyperlink)">
            <summary>
            Adds hyperlink to collection.
            </summary>
            <param name="hyperlink">Hyperlink to add.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Clear">
            <summary>
            Removes all hyperlinks. 
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the SpreadsheetHyperlink at the specified index.
            </summary>
            <param name="index">The zero-based index of the page break to remove.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.DeleteInternal(GemBox.Spreadsheet.SpreadsheetHyperlink)">
            <summary>
            Deletes specified hyperlink.
            </summary>
            <param name="hyperlink">Hyperlink to delete.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.Count">
            <summary>
            Gets the number of hyperlinks contained in the collection. 
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelComment">
            <summary>
            Represents a comment object used by <see cref="P:GemBox.Spreadsheet.ExcelCell.Comment"/> in the worksheet.
            </summary>
            <remarks>Supported only in xlsx.</remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Comment"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.Text">
            <summary>
            Gets the comment text assigned to excel cell
            </summary>
            <value>The comment text assigned to excel cell.</value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Comment"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.Author">
            <summary>
            Gets or sets comment author.
            </summary>
            <value>Comment author.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<see langword="true"/> if this instance is visible; otherwise, <see langword="false"/>.
            </value>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Comment"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.TopLeftCell">
            <summary>
            Gets or sets the top left anchor cell for the comment shape.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelComment.BottomRightCell">
            <summary>
            Gets or sets the bottom right anchor cell for the comment shape.
            </summary>        
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelFile">
            <summary>
            Excel file contains one or more worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>)
            and workbook related properties and methods.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColors">
            <summary>
            Maximum number of colors in XLS (BIFF8) file.
            </summary>
            <remarks>
            This number includes 8 default colors:
            <see cref="P:System.Drawing.Color.Black">Color.Black</see>, 
            <see cref="P:System.Drawing.Color.White">Color.White</see>,
            <see cref="P:System.Drawing.Color.Red">Color.Red</see>, 
            <see cref="P:System.Drawing.Color.Green">Color.Green</see>,
            <see cref="P:System.Drawing.Color.Blue">Color.Blue</see>, 
            <see cref="P:System.Drawing.Color.Yellow">Color.Yellow</see>,
            <see cref="P:System.Drawing.Color.Magenta">Color.Magenta</see> and
            <see cref="P:System.Drawing.Color.Cyan">Color.Cyan</see>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsCellStyles">
            <summary>
            Maximum number of user-defined cell styles in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">
            <summary>
            Maximum number of rows in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">
            <summary>
            Maximum number of columns in XLS (BIFF8) file.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxRows">
            <summary>
            Maximum number of rows in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsRows">ExcelFile.MaxXlsRows</see>.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">
            <summary>
            Maximum number of columns in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <remarks>
            If you read/write XLS files, you are also limited by
            <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxXlsColumns">ExcelFile.MaxXlsColumns</see>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.#ctor">
            <summary>
            Initializes an empty (no worksheets) instance of the ExcelFile class.
            </summary>
            <remarks>
            <para>To add new worksheets to a blank file use <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
            Worksheets</see> property, <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)"/> method.</para>
            <para>To load / read a spreadsheet from a file or a stream, use static <see cref="O:GemBox.Spreadsheet.ExcelFile.Load"/> methods.</para>
            <para>To save / write a spreadsheet to a file or a stream use <see cref="O:GemBox.Spreadsheet.ExcelFile.Save"/> methods.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <returns>A loaded spreadsheet.</returns>
            <remarks>
            File extension that is extracted from the <paramref name="path"/> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.LoadOptions"/>
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)"/> method.
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item>
            <item><description>OpenDocument Spreadsheet: .ods, .ots</description></item>
            <item><description>Character Separated Values: .csv, .tsv</description></item>
            <item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item>
            </list>
            </remarks>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Load"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Load"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.String,GemBox.Spreadsheet.LoadOptions)">
            <summary>
            Loads a spreadsheet from a file with the specified path.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Load"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Load"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.Stream,GemBox.Spreadsheet.LoadOptions)">
            <summary>
            Loads a spreadsheet from the specified stream.
            </summary>
            <param name="stream">The stream from which to load a spreadsheet.</param>
            <param name="options">The loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
            <example>
      <para>
        Following code demonstrates different ways of loading <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Load"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Load"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Load(System.IO.TextReader,GemBox.Spreadsheet.CsvLoadOptions)">
            <summary>
            Loads a spreadsheet from CSV data using the specified reader.
            </summary>
            <param name="reader">The reader which is used to load a spreadsheet.</param>
            <param name="options">The CSV loading options which can be used to define settings for load operation.</param>
            <returns>A loaded spreadsheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.XlsxLoadOptions)">
            <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The XLSX loading options which can be used to define settings for load operation.</param>
            <returns>A loaded XLSX spreadsheet.</returns>
            <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with this method.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadFromDirectory(System.String,GemBox.Spreadsheet.OdsLoadOptions)">
            <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
            <param name="path">The path from which to load a spreadsheet.</param>
            <param name="options">The ODS loading options which can be used to define settings for load operation.</param>
            <returns>A loaded ODS spreadsheet.</returns>
            <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)">
            <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
            <param name="path">The path to which to save the spreadsheet.</param>
            <remarks>
            File extension that is extracted from the <paramref name="path"/> is used to create the appropriate <see cref="T:GemBox.Spreadsheet.SaveOptions"/>
            derived class instance that is then passed to the <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)"/> method.
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel: .xlsx, xlsm, .xltx, .xltm, .xls, .xlt</description></item>
            <item><description>OpenDocument Spreadsheet: .ods, .ots</description></item>
            <item><description>Character Separated Values: .csv, .tsv</description></item>
            <item><description>HyperText Markup Language: .htm, .html, .mht, .mhtml</description></item>
            <item><description>Portable Document Format: .pdf</description></item>
            <item><description>XML Paper Specification: .xps</description></item>
            <item><description>Image: .bmp, .gif, .jpg, .jpeg, .png, .tif, .tiff, .wdp</description></item>
            </list>
            </remarks>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to specified file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Save"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Save"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.String,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to a file with the specified path.
            </summary>
            <param name="path">The path to which to save the spreadsheet.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to specified file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Save"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Save"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.Stream,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to the specified stream.
            </summary>
            <param name="stream">The stream to which to save the spreadsheet.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <example>
      <para>
        Following code demonstrates different ways of saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to specified file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Save"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Save"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.IO.TextWriter,GemBox.Spreadsheet.CsvSaveOptions)">
            <summary>
            Save the spreadsheet to CSV format using the specified writer.
            </summary>
            <param name="writer">The writer which is used to save the spreadsheet.</param>
            <param name="options">The CSV saving options which can be used to define settings for save operation.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Xml.XmlWriter,GemBox.Spreadsheet.HtmlSaveOptions)">
            <summary>
            Save the spreadsheet to HTML format using the specified writer.
            </summary>
            <param name="writer">The writer which is used to save the spreadsheet.</param>
            <param name="options">The HTML saving options which can be used to define settings for save operation.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String)">
            <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream and sets appropriate HTTP response headers. Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is resolved from <paramref name="fileName"/> extension. See remarks why <paramref name="httpResponse"/> parameter is of type <see cref="T:System.Object"/>.
            </summary>
            <param name="httpResponse">HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or HttpResponseBase object.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <exception cref="T:System.InvalidOperationException">If file extension is not specified or not supported. If file extension is not recognized, use <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)"/> method overload instead.</exception>
            <remarks>
            <note type="note">Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).</note>
            <para>This method accepts <see cref="T:System.Object"/> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> assembly and could not be used in applications which target <i>Client Profile .NET Framework</i>.</para>
            <para><see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.</para>
            <para>For supported file extensions, see remarks for <see cref="M:GemBox.Spreadsheet.ExcelFile.Save(System.String)"/> method.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Save(System.Object,System.String,GemBox.Spreadsheet.SaveOptions)">
            <summary>
            Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream and sets appropriate HTTP response headers. Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is defined with <paramref name="options"/> parameter. See remarks why <paramref name="httpResponse"/> parameter is of type <see cref="T:System.Object"/>.
            </summary>
            <param name="httpResponse">HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes or HttpResponseBase object.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <remarks>
            <note type="note">Supported only if updating the whole page with a postback and not if doing partial-page updates (when you use <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.updatepanel.aspx">UpdatePanel</see> controls to update selected regions of a page).</note>
            <para>This method accepts <see cref="T:System.Object"/> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponsebase.aspx">HttpResponseBase</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> assembly and could not be used in applications which target <i>Client Profile .NET Framework</i>.</para>
            <para><see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.</para>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <param name="path">Path of output directory</param>
            <param name="options">Advanced save options.</param>
            <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToDirectory(System.String,GemBox.Spreadsheet.OdsSaveOptions)">
            <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
            <param name="path">Path of output directory.</param>
            <param name="options">Advanced save options.</param>
            <remarks>
            You need to use external ZIP library to package all created files to ODS file.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.ConvertToXpsDocument(GemBox.Spreadsheet.XpsSaveOptions)">
            <summary>
            Converts this <see cref="T:GemBox.Spreadsheet.ExcelFile"/> instance to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument"/> instance.
            </summary>
            <param name="options">The options used when converting to XML Paper Specification (XPS) document.</param>
            <returns>A New <see cref="T:System.Windows.Xps.Packaging.XpsDocument"/> instance created from this <see cref="T:GemBox.Spreadsheet.ExcelFile"/> instance.</returns>
            <seealso cref="T:GemBox.Spreadsheet.XpsSaveOptions"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.ConvertToImageSource(GemBox.Spreadsheet.ImageSaveOptions)">
            <summary>
            Converts single page specified in <paramref name="options"/> of this <see cref="T:GemBox.Spreadsheet.ExcelFile"/> instance to an <see cref="T:System.Windows.Media.ImageSource"/> instance.
            </summary>
            <param name="options">The options used when converting a single spreadsheet's page to an image.</param>
            <returns>A new <see cref="T:System.Windows.Media.ImageSource"/> instance created from a single spreadsheet's page specified in <paramref name="options"/>.</returns>
            <seealso cref="T:GemBox.Spreadsheet.ImageSaveOptions"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print">
            <summary>
            Prints the document to the default printer.
            </summary>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to the specified printer.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Print"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Print"/>
    </example><seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String)">
            <summary>
            Prints the document to the specified printer.
            </summary>
            <param name="printerName">Printer name.</param>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to the specified printer.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Print"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Print"/>
    </example><seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.Print(System.String,GemBox.Spreadsheet.PrintOptions)">
            <summary>
            Prints the document to the specified printer according to specified options.
            </summary>
            <param name="printerName">Printer name.</param>
            <param name="options">Print options.</param>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to the specified printer.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Print"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Print"/>
    </example><seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)">
            <summary>
            Gets a value indicating whether the objects of specified type can be assigned 
            to <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see> property.
            </summary>
            <param name="type">Queried type.</param>
            <remarks>
            Currently supported types are:
            <list type="bullet">
            <item><description>System.DBNull</description></item>
            <item><description>System.Byte</description></item>
            <item><description>System.SByte</description></item>
            <item><description>System.Int16</description></item>
            <item><description>System.UInt16</description></item>
            <item><description>System.Int64</description></item>
            <item><description>System.UInt64</description></item>
            <item><description>System.UInt32</description></item>
            <item><description>System.Int32</description></item>
            <item><description>System.Single</description></item>
            <item><description>System.Double</description></item>
            <item><description>System.Boolean</description></item>
            <item><description>System.Char</description></item>
            <item><description>System.Text.StringBuilder</description></item>
            <item><description>System.Decimal</description></item>
            <item><description>System.DateTime</description></item>
            <item><description>System.String</description></item>
            </list>
            </remarks>
            <returns><see langword="true"/> if the specified type is supported; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.Stream)">
            <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
            <remarks>
            This method counts the number of occurrences of the most common separators (',', ';', '\t')
            and returns one that has occurred the most times in first 5 rows. 
            </remarks>
            <param name="stream">Input Stream.</param>
            <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurance, returns first of them.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.AutoDetectCsvSeparator(System.IO.StreamReader,System.Int32,System.Char[])">
            <summary>
            Autodetects CSV separator. If there's no separators in the input stream returns (char)0. 
            </summary>
            <remarks>
            This method counts the number of occurrences of chars that are specified in the 
            array possibleSeparators, and returns one that has occurred the most times in first rowsToTest rows of StreamReader sr. 
            </remarks>
            <param name="sr">Input StreamReader.</param>
            <param name="rowsToTest">Number of rows to test.</param>
            <param name="possibleSeparators">Chars that can be CSV separators.</param>
            <returns>Char that is CSV separator. If there's no separators in the input StreamReader returns (char)0, 
            and if there are two with equal number of occurance, returns first of them.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
            <overloads>Loads the existing XLSX file or stream. <b>(.NET 3.0 and greater only)</b></overloads>
            <summary>
            Loads the existing XLSX file. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">Existing XLSX file name (opened for reading).</param>
            <param name="xlsxOptions">XLSX options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxOptions)">
            <summary>
            Loads the existing XLSX file from the input stream. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Input stream.</param>
            <param name="xlsxOptions">XLSX options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXlsxFromDirectory(System.String,GemBox.Spreadsheet.XlsxOptions)">
            <summary>
            Loads all parts of XLSX file as separate files from input directory.
            </summary>
            <remarks>
            You need to use external ZIP library to extract all parts from XLSX file.
            XlsxOptions.PreserveMakeCopy option does not work with LoadXlsxFromDirectory method.
            </remarks>
            <param name="path">Path of input directory.</param>
            <param name="xlsxOptions">XLS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.ClosePreservedXlsx">
            <summary>
            Closes preserved XLSX file handle if needed 
            (<see cref="F:GemBox.Spreadsheet.XlsxOptions.PreserveKeepOpen">XlsxOptions.PreserveKeepOpen</see> was
            used with <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadXlsx(System.String,GemBox.Spreadsheet.XlsxOptions)">
            ExcelFile.LoadXlsx(string,XlsxOptions)</see> method). <b>(.NET 3.0 and greater only)</b>
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String)">
            <overloads>Saves all data to a file or stream in XLSX format. <b>(.NET 3.0 and greater only)</b></overloads>
            <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">File name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all data to a new file in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            /// <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="path">File name.</param>
            <param name="options">Advanced save options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsx(System.IO.Stream,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all data to an output stream in XLSX format. <b>(.NET 3.0 and greater only)</b>
            </summary>
            <remarks>
            <para><b>This method throws <see cref="T:System.NotImplementedException"/> in GemBox.Spreadsheet builds which target .NET Framework 2.0 or lower.</b></para>
            </remarks>
            <param name="stream">Output stream.</param>
            <param name="options">Advanced save options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
            <param name="path">Path of output directory.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXlsxToDirectory(System.String,GemBox.Spreadsheet.XlsxSaveOptions)">
            <summary>
            Saves all parts of XLSX file as separate files to output directory.
            </summary>
            <remarks>
            You need to use external ZIP library to package all created files to XLSX file.
            </remarks>
            <param name="path">Path of output directory</param>
            <param name="options">Advanced save options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String)">
            <overloads>Loads the existing XLS file or stream.</overloads>
            <summary>
            Loads the existing XLS file (preserving MS Excel records).
            </summary>
            <param name="path">Existing XLS file name (opened for reading).</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.String,GemBox.Spreadsheet.XlsOptions)">
            <summary>
            Loads the existing XLS file (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions"/> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
            <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
            </remarks>
            <param name="path">Existing XLS file name (opened for reading).</param>
            <param name="xlsOptions">XLS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream)">
            <summary>
            Loads the existing XLS file from the input stream (preserving MS Excel records).
            </summary>
            <param name="stream">Input stream.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadXls(System.IO.Stream,GemBox.Spreadsheet.XlsOptions)">
            <summary>
            Loads the existing XLS file from the input stream (optionally preserving MS Excel records).
            </summary>
            <remarks>
            <para>If the only purpose of loading the file is to read data values and formatting using 
            GemBox.Spreadsheet API, you should use <paramref name="xlsOptions"/> set to <see cref="F:GemBox.Spreadsheet.XlsOptions.None">XlsOptions.None</see>
            as this will speed up the loading process.</para>
            <para>If you load the existing file to use it as template for a new file, you can choose
            whether you want to preserve specific MS Excel records not recognized by GemBox.Spreadsheet API.</para>
            </remarks>
            <param name="stream">Input stream.</param>
            <param name="xlsOptions">XLS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            <overloads>Saves all data to a file or stream in XLS format.</overloads>
            <summary>
            Saves all data to a new file in XLS format.
            </summary>
            <param name="path">File name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in XLS format.
            </summary>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.String,GemBox.Spreadsheet.OdsOptions)">
            <overloads>Loads the existing ODS file.</overloads>
            <summary>
            Loads the existing ODS file.
            </summary>
            <param name="path">Existing ODS file name.</param>
            <param name="odsOptions">ODS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOds(System.IO.Stream,GemBox.Spreadsheet.OdsOptions)">
            <summary>
            Loads the existing ODS file from the input stream.
            </summary>
            <param name="stream">Input stream (opened for reading).</param>
            <param name="odsOptions">ODS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadOdsFromDirectory(System.String,GemBox.Spreadsheet.OdsOptions)">
            <summary>
            Loads all parts of ODS file as separate files from input directory.
            </summary>
            <remarks>
            You need to use external ZIP library to extract all parts from ODS file.
            </remarks>
            <param name="path">Path of input directory.</param>
            <param name="odsOptions">ODS options.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.String)">
            <overloads>Saves all data to a new file in ODF format.</overloads>
            <summary>
            Saves all data to a new file in ODF format.
            </summary>
            <param name="path">File name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOds(System.IO.Stream)">
            <summary>
            Saves all data to an output stream in ODF format.
            </summary>
            <param name="stream">Output stream.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveOdsToDirectory(System.String)">
            <summary>
            Saves all parts of ODS file as separate files to output directory.
            </summary>
            <remarks>
            You need to use external ZIP library to package all created files to ODS file.
            </remarks>
            <param name="path">Path of output directory.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
            <overloads>Loads the existing CSV file or stream.</overloads>
            <summary>
            Loads the existing stream with specified CSV format.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.Stream,System.Char)">
            <summary>
            Loads the existing stream, using specified character as a delimiter.
            </summary>
            <param name="stream">Input stream.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,GemBox.Spreadsheet.CsvType)">
            <summary>
            Loads all data using specified StreamReader and CSV Type.
            </summary>
            <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
            <param name="reader">Stream reader.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.IO.StreamReader,System.Char)">
            <summary>
            Loads all data using specified StreamReader and character delimiter.
            </summary>
            <remarks>
            Use this overload if you want to use a StreamReader with non-default encoding. 
            </remarks>
            <param name="reader">Stream reader.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,GemBox.Spreadsheet.CsvType)">
            <summary>
            Loads the existing file with specified CSV format.
            </summary>
            <param name="path">Existing CSV file name (opened for reading).</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)">
            <summary>
            Loads the existing file, using specified character as a delimiter.
            </summary>
            <param name="path">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,GemBox.Spreadsheet.CsvType)">
            <overloads>Saves all data to a new file or stream in CSV format.</overloads>
            <summary>
            Saves all data to a stream in a specified CSV format.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.Stream,System.Char)">
            <summary>
            Saves all data to a stream, using specified character as a delimiter.
            </summary>
            <param name="stream">Output stream.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,GemBox.Spreadsheet.CsvType)">
            <summary>
            Saves all data using specified TextWriter and CSV Type.
            </summary>
            <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
            <param name="writer">Text writer.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.IO.TextWriter,System.Char)">
            <summary>
            Saves all data using specified TextWriter and character delimiter.
            </summary>
            <remarks>
            Use this overload if you want to use a TextWriter with non-default encoding. 
            Note that .NET Framework adds byte order mark (BOM) to files with non-default 
            encoding. MS Excel and other programs may fail to recognize CSV files with 
            non-default encoding.
            </remarks>
            <param name="writer">Text writer.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,GemBox.Spreadsheet.CsvType)">
            <summary>
            Saves all data to a new file in a specified CSV format.
            </summary>
            <param name="path">File name.</param>
            <param name="csvType">CSV type.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)">
            <summary>
            Saves all data to a new file, using specified character as a delimiter.
            </summary>
            <param name="path">File name.</param>
            <param name="separator">Separator used for delimiting data values.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelFile.SaveToHttpResponse(System.Object,System.String,System.Object[])">
            <summary>
            Saves the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to a System.Web.HttpResponse output stream and sets appropriate HTTP response headers. Use this method in ASP.NET application to send the document to a client browser. File format is resolved from <paramref name="options"/> parameter or <paramref name="fileName"/> parameter file extension as described in remarks. See remarks why <paramref name="httpResponse"/> parameter is of type <see cref="T:System.Object"/>.
            </summary>
            <param name="httpResponse">HttpResponse object that can be retrieved through the Response property of the System.Web.HttpApplication, System.Web.HttpContext, System.Web.UI.Page or System.Web.UI.UserControl classes.</param>
            <param name="fileName">File name that will be presented in client browser when downloading a file.</param>
            <param name="options">The saving options which can be used to define settings for save operation.</param>
            <remarks>
            <para>This method accepts <see cref="T:System.Object"/> rather than <see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> because otherwise <b>GemBox.Spreadsheet</b> assembly would have a dependency on <b>System.Web</b> assembly and could not be used in applications which target <i>Client Profile .NET Framework</i>.</para>
            <para><see href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.aspx">HttpResponse</see> can be retrieved through the <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.response.aspx">Response</see> property of the <see href="http://msdn.microsoft.com/en-us/library/system.web.httpapplication.aspx">HttpApplication</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.aspx">HttpContext</see>, <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.page.aspx">Page</see> or <see href="http://msdn.microsoft.com/en-us/library/system.web.ui.usercontrol.aspx">UserControl</see> classes.</para>
            <para>File format in which <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved depends on the type of the first item in <paramref name="options"/> array as follows:</para>
            <list type="bullet">
            <item><description>if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in Microsoft Excel 2007 format,</description></item>
            <item><description>otherwise if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.CsvType"/> or <see cref="T:System.Char"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in Character separated value format,</description></item>
            <item><description>otherwise if <paramref name="options"/> array first item is of type <see cref="T:GemBox.Spreadsheet.HtmlSaveOptions"/>, <see cref="T:GemBox.Spreadsheet.ExcelFile"/> will be saved in HyperText Markup Language format,</description></item>
            <item><description>otherwise, file format in which <see cref="T:GemBox.Spreadsheet.ExcelFile"/> is saved is resolved based on <paramref name="fileName"/> parameter file extension.</description></item>
            </list>
            <para>Following file extensions are supported:</para>
            <list type="bullet">
            <item><description>Microsoft Excel 2007 formats: .xlsx, .xlsm, .xltm, .xltx</description></item>
            <item><description>Microsoft Excel 97-2003 formats: .xls, .xlt</description></item>
            <item><description>Character separated value formats: .csv, .tsv</description></item>
            <item><description>OpenDocument Spreadsheet formats: .ods, .ots</description></item>
            <item><description>HyperText Markup Language formats: .htm, .html</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Worksheets">
            <summary>
            Collection of all worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>) in a workbook. 
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">
            <summary>
            Gets or sets the <see cref="T:GemBox.Spreadsheet.CellStyle"/> resolution method.
            </summary>
            <remarks>
            <para>
            Because of limitations of Microsoft Excel file format, every cell must be written to file with
            resolved <see cref="T:GemBox.Spreadsheet.CellStyle"/>. In the case where a cell doesn't 
            have specific property set on its <see cref="P:GemBox.Spreadsheet.ExcelCell.Style"/> and that 
            property is set on both row and column that contain that cell, a cell will inherit property value 
            from row or column <see cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Style"/>, depending 
            on the resolution method.
            </para>
            <para>
            Default value for this property is <see cref="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn">
            RowOverColumn</see>.
            </para>
            </remarks>
            <example>
      <para>
        Following code will result in a file where cell will have right alignment because same column cell style property takes precedence over row cell style property.
        Note that resolution is property based, in other words if column in this case had <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment"/>
        set cell would inherit both <see cref="P:GemBox.Spreadsheet.CellStyle.HorizontalAlignment"/> and
        <see cref="P:GemBox.Spreadsheet.CellStyle.VerticalAlignment"/> from row and column.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="RowColumnResolution"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="RowColumnResolution"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Protected">
            <summary>
            Gets or sets the workbook protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on workbook protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">ExcelWorksheet.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.GroupMethodsAffectedCellsLimit">
            <summary>
            Maximum number of affected cells in group set methods.
            </summary>
            <remarks>
            If user tries to modify all cells in a group which has more cells than specified limit, exception
            will be thrown. This property was introduced to prevent users from accidentally modifying millions
            of cells which results in a long delay, a large memory allocation and a big resulting file. You can 
            set this limit to value which suits your needs (minimum is 5).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Use1904DateSystem">
            <summary>
            Gets or sets whether 1904 date system is used.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            For more information on 1904 date system, consult Microsoft Excel documentation.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontName">
            <summary>
            Gets or sets name of the default font used in the workbook.
            </summary>
            <remarks>
            Default value for this property is "Arial".
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefaultFontSize">
            <summary>
            Gets or sets default font size.
            </summary>
            <remarks>
            <para>Unit is twip (1/20th of a point).</para>
            <para>Default value of this property is 200.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            <summary>
            Delays formula parsing until one of SaveXls methods is called.
            </summary>
            <remarks>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed at <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see>
            page. Only listed formulas can be saved to XLS file.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>If this property is true, each set of <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">
            ExcelCell.Formula</see> property will just store formula string. When one of
            <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">ExcelFile.SaveXls</see> methods is called
            formulas are parsed and exception is thrown if formula is not supported or in bad format.
            When XLSX is saved, formulas are not parsed, they are just saved as strings.
            If the formula is in bad format, MS Excel or other application will report an error in formula.
            </para>
            <para>If this property is false, formula string is parsed every time you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</see> property. You will
            limit formulas to the ones supported by GemBox.Spreadsheet parser and the exception will be
            thrown immediately if the formula is not supported or in bad format.</para>
            <para>Default value of this property is <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties">
            <summary>
            Gets <see cref="P:GemBox.Spreadsheet.ExcelFile.DocumentProperties"/> of this <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.DefinedNames">
            <summary>
            Gets the collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.Styles">
            <summary>
            Gets the collection of <see cref="T:GemBox.Spreadsheet.CellStyle"/>s defined for this <see cref="T:GemBox.Spreadsheet.ExcelFile"/> instance.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.IoWarning">
            <summary>
            Fired for unexpected situations when reading or writing XLS / CSV files.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.LimitNear">
            <summary>
            Occurs when the size of XLS / CSV file in reading / writing is near <b>GemBox.Spreadsheet</b> free limit.
            </summary>
            <remarks>
            <para>This event is fired when 80% of maximum row count per worksheet is reached (150 * 0.8 = 120 rows) or when 5 worksheets are used.</para>
            <para>This event is not fired if <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached"/> event is fired.</para>
            <para>You can use this event to detect when your application is close to <b>GemBox.Spreadsheet</b> free limit. 
            For example, you can write number of used rows to a log file or send a notification e-mail.</para>
            </remarks>
            <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached"/>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelFile.LimitReached">
            <summary>
            Occurs when the size of XLS / CSV file in reading / writing is above <b>GemBox.Spreadsheet</b> free limit.
            </summary>
            <remarks>
            <para>This event is fired when maximum row count per worksheet is reached (150 rows) or when more than 5 worksheets are used.</para>
            <para>You can use this event to notify a user of your application that data is only partially read / written.</para>
            </remarks>
            <seealso cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvParseNumbersDuringLoad">
            <summary>
            Gets or sets whether LoadCsv() methods will try to convert text values to numbers.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>All values (including numbers) in CSV files are stored as text. By default, 
            any of <see cref="M:GemBox.Spreadsheet.ExcelFile.LoadCsv(System.String,System.Char)"/> 
            overloads will try to parse text values as numbers and if successful
            cell will be filled with <see cref="T:System.Double"/> value. If
            you don't want such behaviour (for example, you want IDs like "00935" to remain
            strings), set this property to <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAllowNewlineInQuotes">
            <summary>
            Gets or sets whether SaveCsv() methods will allow newline in quotes.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>If this property is <see langword="true"/>, newline in quoted value will be threated as part of that value. 
            If this propery is <see langword="false"/>, newline in quoted value will be threated as the beginning of the new row.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelFile.CsvAlwaysQuoteValues">
            <summary>
            Gets or sets whether SaveCsv() methods will always put values in quotes.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>All values (including numbers) in CSV files are stored as text. If this property is
            <see langword="true"/>, any of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveCsv(System.String,System.Char)"/> 
            overloads will always put values in quotes. If this propery is <see langword="false"/>, only values that
            contain special characters (quotes or CSV separator) will be quoted.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.BuiltInDocumentProperties">
            <summary>
            Enumeration of available built-in document properties.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Title">
            <summary>
            Title of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Author">
            <summary>
            Name of the document's author.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Subject">
            <summary>
            Subject of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Comments">
            <summary>
            Document comments.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Category">
            <summary>
            Category of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Status">
            <summary>
            Status of the document.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Keywords">
            <summary>
            Document keywords.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.LastSavedBy">
            <summary>
            Name of the last author.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.BuiltInDocumentProperties.HyperlinkBase">
            <summary>
            Base hyperlink.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DocumentProperties">
            <summary>
            Contains a collection of built-in and custom document properties.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DocumentProperties.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.DocumentProperties"/>.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.DocumentProperties.BuiltIn">
            <summary>
            Gets a collection of built-in document properties.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DocumentProperties.Custom">
            <summary>
            Gets a collection of custom document properties.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NumberFormatCollection.SetNumberFormat(System.Int32,System.String)">
            <summary>
            This method is designed to be used ONLY for Excel file reading.
            </summary>
            <param name="index"></param>
            <param name="formatString"></param>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsOptions">
            <summary>
            Options specified when reading XLS files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.None">
            <summary>
            Do not preserve records. Only records fully supported by GemBox.Spreadsheet API will be loaded.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveGlobalRecords">
            <summary>
            Preserve global (workbook) records.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveWorksheetRecords">
            <summary>
            Preserve worksheet records.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveSummaries">
            <summary>
            Preserve summaries.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveMacros">
            <summary>
            Preserve macros and VBA code.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsOptions.PreserveAll">
            <summary>
            Preserve all possible information.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvType">
            <summary>
            Formatting type for CSV files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.CommaDelimited">
            <summary>
            Comma delimited CSV (most frequently used). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.SemicolonDelimited">
            <summary>
            Semicolon delimited CSV (used by Excel if current culture specifies comma as decimal separator).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.CsvType.TabDelimited">
            <summary>
            Tab delimited CSV.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.RowColumnResolutionMethod">
            <summary>
            Defines different methods of <see cref="T:GemBox.Spreadsheet.CellStyle"/> resolution.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.RowOverColumn">
            <summary>
            Row has precedence over column.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="F:GemBox.Spreadsheet.RowColumnResolutionMethod.ColumnOverRow">
            <summary>
            Column has precedence over row.
            </summary>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.RowColumnResolutionMethod">ExcelFile.RowColumnResolutionMethod</seealso>
        </member>
        <member name="T:GemBox.Spreadsheet.DefinedName">
            <summary>
            Defined name class describes defined name that is not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.Name">
            <summary>
            Gets or sets the name of the defined name object.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.Value">
            <summary>
            Gets or sets the value of the defined name.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedName.LocalSheetIndex">
            <summary>
            Gets or sets the local sheet index of the defined name.
            If the local sheet index is -1, defined name is global.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.DefinedNameCollection">
            <summary>
            Collection of defined names that are not directly related with one cell range.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.AddDefinedName(System.String,System.String,System.Int32)">
            <summary>
            Adds defined name to collection and returns index of that defined name.
            </summary>
            <param name="name">Name of the defined name.</param>
            <param name="value">Range string.</param>
            <param name="localSheetIndex">Local sheet index. If the value is -1, defined name is global.</param>
            <returns>Index of the defined name.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedName(System.String)">
            <summary>
            Removes the defined name described by name from collection.
            </summary>
            <param name="definedName">Name of the defined name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.RemoveDefinedNameAt(System.Int32)">
            <summary>
            Removes the defined name described by index from collection.
            </summary>
            <param name="index">Index of the defined name.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.Clear">
            <summary>
            Removes all elements from defined names collection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the collection. 
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.DefinedNameCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for the collection. 
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Count">
            <summary>
            Returns the number of defined names in collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.Int32)">
            <summary>
            Gets or sets defined name described by index from collection.
            </summary>
            <param name="index">Index of the defined name.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.DefinedNameCollection.Item(System.String)">
            <summary>
            Gets defined name described by name from collection.
            </summary>
            <param name="definedName">Name of the defined name.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPicture">
            <summary>
            Represents a picture object used by <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/> in the worksheet.
            </summary>	
            <seealso cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/>				
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Image"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Image"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPicture.ToImage">
            <summary>
            Creates <see cref="T:System.Drawing.Image"/> instance from this <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> instance.
            </summary>
            <returns>New instance of <see cref="T:System.Drawing.Image"/> class.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPicture.Delete">
            <summary>
            Deletes this picture from picture collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.Index">
            <summary>
            Gets or sets the index in parent collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.Image">
            <summary>
            Gets the image previously loaded.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.BoundingRectangle">
            <summary>
            Gets the image bounding rectangle.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.Positioning">
            <summary>
            Gets or sets the positioning options of the pictue.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.TopLeftCell">
            <summary>
            Gets or sets the top left anchor cell for the picture.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.BottomRightCell">
            <summary>
            Gets or sets the bottom right anchor cell for the picture.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.PictureFormat">
            <summary>
            Gets the picture format.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.ImageStream">
            <summary>
            Gets the image stream.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.Hyperlink">
            <summary>
             Gets or sets picture hyperlink.
            </summary>
            <remarks>Supported only in xlsx.</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPicture.HasHyperlink">
            <summary>
            If picture has hyperlink returns true, else returns false.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PositioningMode">
            <summary>
            Option that specify the behavior of the picture in the worksheet. 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.FreeFloating">
            <summary>
            Picture will not move with any of the anchor cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.Move">
            <summary>
            Picture will move with the top left anchor cell.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PositioningMode.MoveAndSize">
            <summary>
            Picture will move and resize with both anchor cells.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPictureFormat">
            <summary>
            Picture formats.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Jpeg">
            <summary>
            Jpeg picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Png">
            <summary>
            Png picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Tiff">
            <summary>
            Tiff picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Gif">
            <summary>
            Gif picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Emf">
            <summary>
            Emf picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Wmf">
            <summary>
            Wmf picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Bmp">
            <summary>
            Bmp picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Exif">
            <summary>
            Exif picture format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExcelPictureFormat.Ico">
            <summary>
            Ico picture format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.AnchorCell">
            <summary>
            Represents an anchor cell object used by <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/> in the worksheet.
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Int64,System.Int64)">
            <overloads>Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AnchorCell"/> class.</overloads>
            <summary>
            Initializes a new instance by using offset values.
            </summary>
            <param name="column">Column where the anchor is placed.</param>
            <param name="row">Row where the anchor is placed.</param>
            <param name="columnOffset">Column offset for the anchor.</param>
            <param name="rowOffset">Row offset for the anchor.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.ExcelColumn,GemBox.Spreadsheet.ExcelRow,System.Boolean)">
            <summary>
            Initializes a new instance without using offset values.
            </summary>
            <param name="column">Column where the anchor is placed.</param>
            <param name="row">Row where the anchor is placed.</param>
            <param name="topLeft">If true, anchor will be placed in the top left corner of the anchor cell.
            Otherwise the anchor will be placed in the bottom right corner of the anchor cell.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.#ctor(GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Initializes a new instance by using another anchor cell.
            </summary>
            <param name="anchorCell">Anchor cell to copy from.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.AnchorCell"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.AnchorCell"/>.
            </summary>
            <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.AnchorCell"/> type.</param>
            <returns><see langword="true"/> if the specified <see cref="T:GemBox.Spreadsheet.AnchorCell"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.AnchorCell"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AnchorCell.GetHashCode">
            <summary>
            Gets the hash code for anchor object.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.Column">
            <summary>
            Gets or sets column for the anchor cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.ColumnOffset">
            <summary>
            Gets or sets column offset for the anchor cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.Row">
            <summary>
            Gets or sets row for the anchor cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.AnchorCell.RowOffset">
            <summary>
            Gets or sets row offset for the anchor cell.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPictureCollection">
            <summary>
            Collection of the <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.
            </summary>	
            <remarks>Supported only in xlsx.</remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Image"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Image"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/> class.
            </summary>
            <param name="worksheet">The worksheet to initialize with.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.ExcelPictureCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/> class.
            </summary>
            <param name="worksheet">The worksheet to initialize with.</param>
            <param name="sourcePictures">The collection to initialize with.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,System.Drawing.Rectangle)">
            <overloads>Adds new <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> object to ExcelPictureCollection.</overloads>
            <summary>
            Adds the image from specified fileName by using defined rectangle.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="rect">The destination rectangle.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle)">
            <summary>
            Adds the image from specified fileName by using defined rectangle.
            </summary>
            <param name="fileName">The fileName.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="rect">The destination rectangle.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Adds image from the image object by using defined rectangle.
            </summary>
            <param name="imageStream">Image stream.</param>
            <param name="rect">Destination rectangle.</param>
            <param name="format">Picture format.</param>	
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,System.Drawing.Rectangle,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Adds the image by using defined rectangle.
            </summary>
            <param name="imageStream">Stream of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="rect">The destination rectangle.</param>
            <param name="format">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds the image from specified fileName with defined anchor properties.
            </summary>
            <param name="fileName">File name of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <param name="bottomRightCell">Bottom right anchor cell.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
            <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Adds the image with defined anchor properties.
            </summary>
            <param name="imageStream">Stream of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <param name="bottomRightCell">Bottom right anchor cell.</param>
            <param name="format">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
            <remarks>If column or row offset is greater then that row height or that column width, excel will show image as that offset is set to 0.</remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell)">
            <summary>
            Adds the image from specified fileName by using defined top left anchor property and default width/height.
            </summary>
            <param name="fileName">File name of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.String,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32)">
            <summary>
            Adds the image from specified fileName by using defined top left anchor property and defined width and height.
            </summary>
            <param name="fileName">File name of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Adds the image by using defined top left anchor property and default width/height.
            </summary>
            <param name="imageStream">Stream of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <param name="format">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Add(System.IO.MemoryStream,GemBox.Spreadsheet.PositioningMode,GemBox.Spreadsheet.AnchorCell,System.Int32,System.Int32,GemBox.Spreadsheet.ExcelPictureFormat)">
            <summary>
            Adds the image from specified fileName by using defined top left anchor property and defined width and height.
            </summary>
            <param name="imageStream">Stream of the image to be added.</param>
            <param name="mode">Positioning mode of the image.</param>
            <param name="topLeftCell">Top left anchor cell.</param>
            <param name="width">Image width (in pixels).</param>
            <param name="height">Image height (in pixels).</param>
            <param name="format">Picture format.</param>
            <returns>Newly created <see cref="T:GemBox.Spreadsheet.ExcelPicture"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.Clear">
            <summary>
            Clears ExcelPictureCollection.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.DeleteInternal(System.Int32)">
            <summary>
            Deletes picture at specified index.
            </summary>
            <param name="index">The specified index.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPictureCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPictureCollection.Count">
            <summary>
            Gets the count of pictures items.
            </summary>
            <value>The count of pictures items.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPictureCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> at the specified index.
            </summary>
            <value>the <see cref="T:GemBox.Spreadsheet.ExcelPicture"/></value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPictureCollection.Worksheet">
            <summary>
            Gets the worksheet.
            </summary>
            <value>The worksheet.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheet">
            <summary>
            Excel worksheet is a table with additional properties, identified by a unique name.
            </summary>
            <remarks>
            <para>
            Worksheet in Microsoft Excel has limited size. 
            Number of rows (<see cref="T:GemBox.Spreadsheet.ExcelRow"/>) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxRows">ExcelFile.MaxRows</see>. 
            Number of columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn"/>) is limited 
            to <see cref="F:GemBox.Spreadsheet.ExcelFile.MaxColumns">ExcelFile.MaxColumns</see>. 
            A specific cell (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>) can be accessed either trough 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells">ExcelRow.Cells</see>, 
            <see cref="P:GemBox.Spreadsheet.ExcelColumn.Cells">ExcelColumn.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">ExcelWorksheet.Cells</see> property. 
            Whichever property used, there are two distinct methods of getting a cell reference; using <b>name</b>
            and using <b>index</b>. For example, full name of cell in top left corner of a worksheet is "A1". Translated
            to indexes, same cell would be 0,0 (zero row and zero column). If using 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.Cells">ExcelRow.Cells</see> or 
            <see cref="P:GemBox.Spreadsheet.ExcelColumn.Cells">ExcelColumn.Cells</see> to access a
            specific cell, only partial name or partial index must be used, providing unknown column or row information. 
            </para>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns"/> method.</para>
            </remarks>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
            <seealso cref="T:GemBox.Spreadsheet.ExcelRow"/>
            <seealso cref="T:GemBox.Spreadsheet.ExcelColumn"/>
            <seealso cref="T:GemBox.Spreadsheet.ExcelCell"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Delete">
            <summary>
            Deletes this worksheet from the workbook.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.Clear">
            <summary>
            Clears this worksheet.
            </summary>
            <remarks>
            References to following members will become invalid after calling this method. If they are stored in external variables,
            you will need to get them again from worksheet.
            <example>
      <para>
        For example:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ClearExcelWorksheet"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ClearExcelWorksheet"/>
    </example>
            Here is the list:
            <ul>
            <li><see cref="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelRow"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Rows"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelColumn"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Columns"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelCell"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Cells"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.ExcelPicture"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.HorizontalPageBreak"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.VerticalPageBreak"/> instance in <see cref="T:GemBox.Spreadsheet.VerticalPageBreak"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.NamedRange"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges"/></li>
            <li>Each <see cref="T:GemBox.Spreadsheet.SpreadsheetHyperlink"/> instance in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks"/></li>
            </ul>
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertEmpty(System.String)">
            <summary>
            Inserts an empty worksheet before the current worksheet.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Inserts a copy of an existing worksheet before the current worksheet.
            </summary>
            <param name="destinationWorksheetName">Name of the new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> into the current worksheet.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> which will be inserted into the current worksheet.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> into the current worksheet.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> which will be inserted into the current worksheet.</param>
            <param name="options">The <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> which can be used to define settings for the insert operation.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)">
            <summary>
            Extracts data to <see cref="T:System.Data.DataTable"/> with specified extract options, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/>.
            </summary>
            <param name="dataTable">Destination <see cref="T:System.Data.DataTable"/>.</param>
            <param name="options">Options that describe how data will be extracted, see <see cref="T:GemBox.Spreadsheet.ExtractToDataTableOptions"/>.</param>
            <example>
      <para>
        Following code demonstrates how to handle <see cref="E:GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting"/>.
        Code demonstrates how to make generic conversion from unsupported type to string.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="ExtractDataEvent"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="ExtractDataEvent"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)">
            <summary>
            Creates a <see cref="T:System.Data.DataTable"/> and fills it with data from this <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> in a manner specified by
            create options, see <see cref="T:GemBox.Spreadsheet.CreateDataTableOptions"/>.
            </summary>
            <param name="options">Options that describe how <see cref="T:System.Data.DataTable"/> will be created and filled with data extracted from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <returns><see cref="T:System.Data.DataTable"/> with data from specified cells.</returns>
            <example>
      <para>
        Following code demonstrates how to extract data from <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to <see cref="T:System.Data.DataTable"/> using <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CreateDataTableOptions)"/> method.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CreateDataTable"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CreateDataTable"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)">
            <summary>
            Calculates cell range that is used in the worksheet.
            </summary>
            <param name="ignoreCellsWithoutValue">Specifies if allocated cells with <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> set to <see langword="null"/> are ignored.</param>
            <returns>Cell range that is used in the worksheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns">
            <summary>
            Iterates all rows and finds maximum number of used columns.
            </summary>
            <returns>Maximum number of occupied columns in this sheet.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> at the specified position in 
            the current worksheet.
            </summary>
            <param name="dataTable">Source DataTable.</param>
            <param name="startCell">Name of start (top-left) cell.</param>
            <param name="columnHeaders">True to insert column names above data.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Inserts a <see cref="T:System.Data.DataTable"/> at the specified row and column in 
            the current worksheet.
            </summary>
            <param name="dataTable">Source DataTable.</param>
            <param name="startRow">Index of the start row.</param>
            <param name="startColumn">Index of the start column.</param>
            <param name="columnHeaders">True to insert column names above data.</param>
            <returns>Number of inserted rows.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelRow,GemBox.Spreadsheet.ExcelColumn)">
            <overloads>Extracts data to <see cref="T:System.Data.DataTable"/>.</overloads>
            <summary>
            Extracts data to DataTable with the same column order as it is in ExcelWorksheet.
            </summary>
            <remarks>
            <para>DataTable has to have all the columns defined before calling this method. 
            Because DataColumnMapping objects are not used in this method, columns in DataTable have to have the same
            order as columns in ExcelWorksheet (starting from column defined in startColumn argument).</para>
            <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            </remarks>
            <param name="dataTable">Destination DataTable.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="startColumn">Start ExcelColumn.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractUsedRangeToDataTable(GemBox.Spreadsheet.ExtractDataOptions)">
            <summary>
            Extracts data from used cells of this worksheet to a new DataTable with columns of type object.
            </summary>
            <remarks>This method first calls <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange(System.Boolean)"/> method
            to find block of used cells in this worksheet. Then it creates a new <see cref="T:System.Data.DataTable"/> with the same
            number of columns as width of that range and with the column type of object. Finnaly, it extracts block of used cells to 
            <see cref="T:System.Data.DataTable"/> and returns filled <see cref="T:System.Data.DataTable"/>.
            </remarks>
            <param name="options">Options that describe how data will be extracted.</param>
            <returns>New DataTable.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Data.Common.DataColumnMappingCollection,GemBox.Spreadsheet.ExcelRow)">
            <summary>
            Extracts data to DataTable with column mapping.
            </summary>
            <remarks>
            <para>DataTable has to have all the columns defined before calling this method. 
            How will data be extracted from ExcelColumn to DataTableColumn has to be defined
            in the dataColumnMappingCollection argument.</para>
            <para>You can customize error handling by using <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            <para>DataTable column type and corresponding cell value type need to be 'similar' data types. If that's not the case, then exception would be thrown.
            Note that numbers and string are not 'similar' data types. Numbers wouldn't be automatically converted to strings because of culture issues; someone would expect the number 12.4 is converted to "12.4" and someone else to "12,4".
            To make custom conversion, use <see cref="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent"/>.</para>
            </remarks>
            <param name="dataTable">Destination DataTable.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="dataColumnMappingCollection">Column mapping.</param>
            <param name="startRow">Start ExcelRow.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution)">
            <summary>
            Extracts data from used cells of this worksheet to a new <see cref="T:System.Data.DataTable"/>. 
            <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see> is determined by the <see cref="T:GemBox.Spreadsheet.ColumnTypeResolution"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <returns>DataTable with data from used cells.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.CellRange,GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean)">
            <summary>
            Extracts data from <see cref="T:GemBox.Spreadsheet.CellRange">specified range of cells</see> to a new <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="range">Cell range.</param>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <returns>DataTable with data from specified cells.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>. 
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.ExcelColumn})">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,GemBox.Spreadsheet.ExcelColumn[])">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.CreateDataTable(GemBox.Spreadsheet.ColumnTypeResolution,GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExtractDataOptions,System.Boolean,GemBox.Spreadsheet.ExcelColumn[])">
            <summary>
            Extracts data from specified cells to a new <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="resolution">Resolution type that determines <see cref="P:System.Data.DataColumn.DataType">DataTable column type</see>.</param>
            <param name="startRow">Start ExcelRow.</param>
            <param name="numberOfRows">Number of rows to extract.</param>
            <param name="options">Options that describe how data will be extracted.</param>
            <param name="useFirstRowForColumnNames">If <see langword="true"/> then values from first row will be used for <see cref="P:System.Data.DataColumn.ColumnName"/> columns.</param>
            <param name="columns">Columns to extract.</param>
            <returns>DataTable with data from specified rows/columns.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.GetUsedCellRange">
            <summary>
            Calculates cell range that is used in the worksheet (every allocated cell is considered used).
            </summary>
            <returns>Cell range that is used in the worksheet (every allocated cell is considered used).</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheet.ResolveCellStyle(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasDataValidations">
            <summary>
            Gets a value indicating whether this sheet has any cells which have data validation features applied.
            </summary>
            <value>
            <see langword="true"/> if this sheet has any cells which have data validation features applied; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DataValidations">
            <summary>
            Gets the collection that expresses all data validation information for cells in a sheet which have data validation features applied.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Pictures">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.ExcelPictureCollection"/> containing images.
            </summary>
            <remarks>
            This feature is supported only in xlsx file format. 
            Picture formats that are supported are listed in <see cref="T:GemBox.Spreadsheet.ExcelPictureFormat"/>.
            </remarks>
            <seealso cref="T:GemBox.Spreadsheet.ExcelPicture"/>
            <example>
      <para>Following code demonstrates how to use images:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Image"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Image"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.NamedRanges">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.NamedRangeCollection"/> 
            containing descriptive names which are used to represent cells, ranges of cells, 
            formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Hyperlinks">
            <summary>
            Gets hyperlinks in this  sheet.
            </summary>
            <remarks>Supported only in xlsx.</remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Name">
            <summary>
            Gets or sets worksheet name. 
            </summary>
            <remarks>
            If not unique (worksheet with that name already exists in 
            <see cref="P:GemBox.Spreadsheet.ExcelFile.Worksheets">ExcelFile.Worksheets</see> collection) exception is thrown.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Rows">
            <summary>
            Gets collection of all rows (<see cref="T:GemBox.Spreadsheet.ExcelRow"/>) in the worksheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Columns">
            <summary>
            Gets collection of all columns (<see cref="T:GemBox.Spreadsheet.ExcelColumn"/>) in the worksheet.
            </summary>
            <remarks>
            <para>Note that the cells are internally allocated in rows and not in columns. ExcelColumn objects are created 
            only if they have non-standard width or style, or they are accessed directly. So, while ExcelRowCollection.Count 
            shows number of rows occupied with data, ExcelColumnCollection.Count does not say which Column is the 
            last one occupied with data!</para>
            <para>If you want to read all data in a sheet, use 
            <see cref="P:GemBox.Spreadsheet.ExcelRow.AllocatedCells">ExcelRow.AllocatedCells</see> property.</para>
            <para>If you want to find last column occupied with data, use 
            <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.CalculateMaxUsedColumns"/> method.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Cells">
            <summary>
            Gets <see cref="T:GemBox.Spreadsheet.CellRange"/> with all the cells 
            (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>) 
            in the worksheet.
            </summary>
            <example>
      <para>Look at following code for cell referencing examples:</para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellReferencing"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellReferencing"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Protected">
            <summary>
            Gets or sets the worksheet protection flag.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelFile.Protected">ExcelFile.Protected</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ProtectionSettings">
            <summary>
            Gets or sets worksheet protection properties. This settings will be used only if <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Protected"/> is set to <see langword="true"/>;
            Otherwise it will be ignored.
            Supported in XLSX only.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">
            <summary>
            Gets or sets the worksheet visible property.
            </summary>
            <remarks>
            <para>Workbook must contain at least one visible sheet.</para>
            <para>This property is available only in XLSX file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.DefaultColumnWidth">
            <summary>
            Gets or sets default column width.
            </summary>
            <remarks>
            Unit is 1/256th of the width of the zero character in default font. This value is used as width for columns 
            which don't have <see cref="P:GemBox.Spreadsheet.ExcelColumn.Width">ExcelColumn.Width</see> property explicitly set.
            </remarks>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumn.Width">ExcelColumn.Width</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets collection of all horizontal page breaks 
            (<see cref="T:GemBox.Spreadsheet.HorizontalPageBreak"/>) in the worksheet.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets collection of all vertical page breaks 
            (<see cref="T:GemBox.Spreadsheet.VerticalPageBreak"/>) in the worksheet.
            </summary>
            <example>
      <para>
        Following code demonstrates how to add <see cref="T:GemBox.Spreadsheet.PageBreak"/>s to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PageBreaks"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PageBreaks"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasShape">
            <summary>
            Gets a value indicating whether this instance has shape.
            </summary>
            <value><see langword="true"/> if this instance has shape; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Shapes">
            <summary>
            Gets the shapes.
            </summary>
            <value>The shapes.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions">
            <summary>
            Contains MS Excel print and print related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.ViewOptions">
            <summary>
            Contains MS Excel display and view related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HeadersFooters">
            <summary>
            Gets or sets headers/footers for the sheet.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasHeadersFooters">
            <summary>
            Returns true if worksheet has headers/footers.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.Panes">
            <summary>
            Gets or sets the panes in the worksheet.
            </summary>
            <remarks>
            If there are no split or freeze panes in the worksheet, the value of this property is null.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.HasSplitOrFreezePanes">
            <summary>
            Returns true if worksheet has split or freeze panes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheet.PasswordHash">
            <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            This property needs to be set to value of type ushort (property is of type int because ushort is not cls compliant). 
            If you don't know which password hash corresponds to determinant password, make excel file using MS Excel, load it using GemBox.Spreadsheet, and read
            this property. Then reuse that value in your project.
            </remarks>
        </member>
        <member name="E:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEvent">
            <summary>
            Event that fires when specific error occurs while extracting data to DataTable.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheet.ExtractDataEventHandler">
            <summary>
            Delegate for handling the ExtractData events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            <summary>
            Collection of worksheets (<see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>).
            </summary>
            <seealso cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)">
            <summary>
            Adds an empty worksheet to the end of the collection.
            </summary>
            <param name="worksheetName">Worksheet name.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.AddCopy(System.String,GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Adds a copy of an existing worksheet to the end of the collection.
            </summary>
            <param name="destinationWorksheetName">Name of new worksheet.</param>
            <param name="sourceWorksheet">Source worksheet.</param>
            <returns>Newly created worksheet.</returns>
            <remarks>
            If this is the first worksheet added to the collection the 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is set to this worksheet.
            </remarks>
            <exception cref="T:System.ArgumentException">Worksheet name is not unique.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
            <returns>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> element is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <param name="item">The <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</param>
            <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Contains(System.String)">
            <summary>
            Determines whether an <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> element with specified name is in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.
            </summary>
            <param name="worksheetName">The name of the <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> to locate in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>.</param>
            <returns>
            True if <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> with specified name is found in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Pictures">
            <summary>
            Get the list of bse records
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.SheetNames">
            <summary>
            Gets the sheet names.
            </summary>
            <value>The sheet names.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.SheetIndexes">
            <summary>
            Gets the sheet indexes.
            </summary>
            <value>The sheet indexes.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.Int32)">
            <overloads>Gets the worksheet with the specified index or name.</overloads>
            <summary>
            Gets the worksheet with the specified index.
            </summary>
            <param name="index">The zero-based index of the worksheet.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name.
            </summary>
            <param name="name">The name of the worksheet.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet">
            <summary>
            Gets or sets active worksheet.
            </summary>
            <remarks>
            <para>Active worksheet is the one selected when file is opened with Microsoft Excel. By default active worksheet 
            is the first one added with <see cref="M:GemBox.Spreadsheet.ExcelWorksheetCollection.Add(System.String)"/> method.</para>
            <para><b>GemBox.Spreadsheet Free</b> allows setting active worksheet to only one of the first 5 worksheets, otherwise active worksheet defaults to the first worksheet.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelWorksheetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:GemBox.Spreadsheet.ExcelWorksheetCollection">
            ExcelWorksheetCollection</see>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.NamedRangeCollection">
            <summary>
            Collection of the descriptive names which are used 
            to represent cells, ranges of cells, formulas, or constant values.
            </summary>		
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within 
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells, 
            formulas, or constant values. Labels can be used in formulas that refer to data on the same 
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.		
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NamedRangeCollection"/> class.
            </summary>
            <param name="worksheet">The worksheet to initialize NamedRangeCollection.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.NamedRangeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NamedRangeCollection"/> class.
            </summary>
            <param name="worksheet">The worksheet to initialize NamedRangeCollection.</param>
            <param name="sourceNamedRanges">The source named range collection to initialize NamedRangeCollection.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange)">
            <overloads>Adds a new global or local named range.</overloads>
            <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>		
            <param name="name">The user-defined name.</param>
            <param name="range">The range to be refered by name.</param>
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            <summary>
            Adds a new named range. Named ranges are used to represent cells, ranges of cells,
            formulas or constant values.
            </summary>		
            <param name="name">The user-defined name.</param>
            <param name="range">The range to be refered by name.</param>
            <param name="globalName">sets the range as global if set to true</param>
            <remarks>
            You can use the labels of columns and rows on a worksheet to refer to the cells within
            those columns and rows. Or you can create descriptive names to represent cells, ranges of cells,
            formulas, or constant values. Labels can be used in formulas that refer to data on the same
            worksheet; if you want to represent a range on another worksheet, use a name.
            You can also create 3-D names that represent the same cell or range of cells across multiple worksheets.
            </remarks>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelCell.Formula">ExcelCell.Formula</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintArea(GemBox.Spreadsheet.CellRange)">
            <summary>
            Sets print area.
            </summary>
            <param name="range">Range of cells that we want set as print area.</param>
            <remarks>
            If specified, print area is used when exporting to HTML, PDF, XPS and image file formats as cell range which will be exported in the output file format.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelRow,System.Int32)">
            <summary>
            Sets print titles (rows to repeat at top).
            </summary>
            <param name="startRow">First row.</param>
            <param name="numberOfRows">Number of rows that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelColumn,System.Int32)">
            <summary>
            Sets print titles (columns to repeat at left).
            </summary>
            <param name="startColumn">First column.</param>
            <param name="numberOfColumns">Number of columns that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.SetPrintTitles(GemBox.Spreadsheet.ExcelRow,System.Int32,GemBox.Spreadsheet.ExcelColumn,System.Int32)">
            <summary>
            Sets print titles.
            </summary>
            <param name="startRow">First row.</param>
            <param name="numberOfRows">Number of rows that repeat.</param>
            <param name="startColumn">First column.</param>
            <param name="numberOfColumns">Number of columns that repeat.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRangeCollection.DeleteInternal(System.Int32)">
            <summary>
            Deletes named range at specified index.
            </summary>
            <param name="index">The specified index.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Names">
            <summary>
            Gets the user-defined names. You can use these names as shortcuts for ranges, cells, etc.
            </summary>
            <value>The user-defined names.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Count">
            <summary>
            Gets the number of named ranges contained in the collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.NamedRanges">
            <summary>
            Gets or sets the named cell name list
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.Int32)">
            <overloads>Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> with 
            the specified index or name.</overloads>
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> at the specified index.
            </summary>
            <param name="index">Range index.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRangeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.NamedRange"/> with the specified name.
            </summary>
            <param name="name">Range name.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.NamedRange">
            <summary>
            Represents a named range in the worksheet.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.#ctor(GemBox.Spreadsheet.NamedRangeCollection,System.Int32,System.Object[],System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NamedRange"/> class.
            </summary>
            <param name="parent">Parent collection.</param>
            <param name="index">Index in the parrent collection.</param>
            <param name="options">The options.</param>
            <param name="name">The cell range name.</param>
            <param name="range">The named cell range.</param>
            <param name="globalName">if name is global (=true)</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NamedRange.Delete">
            <summary>
            Deletes this named range from the named ranges collection.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.GlobalName">
            <summary>
            gets global flag
            </summary>
            <value>if this name is global</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.Range">
            <summary>
            Gets or sets the named cell range.
            </summary>
            <value>The named cell range.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.Name">
            <summary>
            Gets the named range name.
            </summary>
            <value>The named range name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NamedRange.Options">
            <summary>
            Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelPrintOptions">
            <summary>
            Stores MS Excel print and print related options.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelPrintOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/>.
            </summary>
            <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> type.</param>
            <returns><see langword="true"/> if the specified <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalCentered">
            <summary>
            <see langword="true"/> for printing sheet vertical centered, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HorizontalCentered">
            <summary>
            <see langword="true"/> for printing sheet horizontal centered, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings">
            <summary>
            <see langword="true"/> for print headings, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintHeadings"/> is also supported when exporting to HTML file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines">
            <summary>
            <see langword="true"/> for printing gridlines, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>Except from printing and exporting to fixed document and rendering formats, such as PDF, XPS and image file formats, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines"/> is also supported when exporting to HTML file format.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor">
            <summary>
            Scaling factor for automatic page breaks.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 100.</para>
            <para>MS Excel inserts automatic page breaks depending on this scaling factor. 
            Smaller it gets, bigger will be the distance between the two automatic page breaks.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="false"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage">
            <summary>
            <see langword="true"/> for using 
            <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages"/>
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages"/>, 
            <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>This property determines whether <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.AutomaticPageBreakScalingFactor"/>
            or <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages"/>
            and <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages"/>
            will be used in printing.</para>
            <para>Default value for this property is <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageWidth">
            <summary>
            Gets the width of the page (in inches).
            </summary>
            <value>
            The width of the page.
            </value>
            <remarks>
            If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see> this will return 0.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PageHeight">
            <summary>
            Gets the height of the page (in inches).
            </summary>
            <value>
            The height of the page.
            </value>
            <remarks>
            If the <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType"/> is
            <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see> this will return 0.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperType">
            <summary>
            Gets or sets the type of the paper for the page. 
            </summary>
            <remarks>
            <para>Default value for this property is <see cref="F:GemBox.Spreadsheet.PaperType.A4"/>.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
            <value>
            The type of the paper.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if type is set to
            <see cref="F:GemBox.Spreadsheet.PaperType.Custom">PaperType.Custom</see></exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.StartPageNumber">
            <summary>
            Start page number.
            </summary>
            <remarks>
            Default value for this property is 1.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages">
            <summary>
            Fit worksheet width to this number of pages (0 = use as many as needed).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages">
            <summary>
            Fit worksheet height to this number of pages (0 = use as many as needed).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>If you set this property, <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.FitToPage"/>
            will automatically be set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintPagesInRows">
            <summary>
            <see langword="true"/> for printing pages in rows, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.Portrait">
            <summary>
            <see langword="true"/> for portrait orientation, <see langword="false"/> for landscape orientation.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintBlackWhite">
            <summary>
            <see langword="true"/> for printing in black and white, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para> 
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.DraftQuality">
            <summary>
            <see langword="true"/> for printing in draft quality, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintCellNotes">
            <summary>
            <see langword="true"/> for printing cell notes, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.UseStartPageNumber">
            <summary>
            <see langword="true"/> for using start page number, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintNotesSheetEnd">
            <summary>
            <see langword="true"/> for printing notes at end of sheet, <see langword="false"/> otherwise.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintResolution">
            <summary>
            Print resolution in DPI (dots per inch).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.VerticalPrintResolution">
            <summary>
            Vertical print resolution in DPI (dots per inch).
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            <para>
      This member is supported in <see cref="O:GemBox.Spreadsheet.ExcelFile.Print">printing</see>.
    </para><para>
      <b>GemBox.Spreadsheet</b> uses <see href="http://msdn.microsoft.com/en-us/library/ms742418.aspx">enhanced printing services</see> provided with Windows Presentation Foundation (WPF).
      All pages of a specific <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/> will be printed with settings from <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.PrintOptions"/> of that worksheet.
      Internally, WPF printing uses <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> class to specify page printing settings
      and value of this member is applied to appropriate member of <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance
      which is used to print all pages of a worksheet with this print options member.
    </para><para>
      <see href="http://msdn.microsoft.com/en-us/library/system.printing.printticket.aspx">PrintTicket</see> instance which is used to print every page of a worksheet is constructed in following order:
    </para><list type="ordered">
      <item>
        <description>
          Based on stream specified in <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor (base print ticket).
        </description>
      </item>
      <item>
        <description>
          Appropriate base print ticket members are set based on <see cref="T:GemBox.Spreadsheet.PrintOptions"/> instance members values.
        </description>
      </item>
      <item>
        <description>
          Base print ticket is cloned for each worksheet, clone's appropriate members are set based on <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> instance of that worksheet and clone is used to print all pages of that worksheet.
        </description>
      </item>
    </list><para>
      Printing settings which do not exist in <see cref="T:GemBox.Spreadsheet.PrintOptions"/> nor in <see cref="T:GemBox.Spreadsheet.ExcelPrintOptions"/> can be specified on base print ticket (which stream is passed to <see cref="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)"/> constructor).
    </para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.HeaderMargin">
            <summary>
            Header margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.5.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.FooterMargin">
            <summary>
            Footer margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 0.5.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.TopMargin">
            <summary>
            Top margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 1.9.
            Currently supported only in XLSX.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.BottomMargin">
            <summary>
            Bottom margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 1.9.
            Currently supported only in XLSX.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.LeftMargin">
            <summary>
            Left margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 1.8.
            Currently supported only in XLSX.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.RightMargin">
            <summary>
            Right margin (in inches).
            </summary>
            <remarks>
            Default value for this property is 1.8.
            Currently supported only in XLSX.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.NumberOfCopies">
            <summary>
            Number of copies to print.
            </summary>
            <remarks>
            <para>Default value for this property is 1.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats. Use <see cref="P:GemBox.Spreadsheet.PrintOptions.CopyCount"/> instead.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelPrintOptions.PaperSize">
            <summary>
            MS Excel specific paper size / type index.
            </summary>
            <remarks>
            <para>
            Default value for this property is 0.
            </para>
            <para>
            Following table shows possible values:
            </para>
            <para>
            <font face="Arial" size="1">
            <table border="1" cellpadding="5" cellspacing="0">
            <tr>
            <th>Index</th>
            <th>Paper type</th>
            <th>Paper size</th>
            </tr>
            <tr>
            <td>0</td>
            <td>Undefined</td>
            <td>
            </td>
            </tr>
            <tr>
            <td>1</td>
            <td>Letter</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Letter small paper</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Tabloid paper</td>
            <td>11 in × 17in</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Ledger paper</td>
            <td>17 in × 11in</td>
            </tr>
            <tr>
            <td>5</td>
            <td>Legal paper</td>
            <td>8.5in × 14in</td>
            </tr>
            <tr>
            <td>6</td>
            <td>Statement paper</td>
            <td>5.5in × 8.5in</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Executive paper</td>
            <td>7.25in × 10.5in</td>
            </tr>
            <tr>
            <td>8</td>
            <td>A3</td>
            <td>297mm × 420mm</td>
            </tr>
            <tr>
            <td>9</td>
            <td>A4</td>
            <td>210mm × 297mm</td>
            </tr>
            <tr>
            <td>10</td>
            <td>A4 small paper</td>
            <td>210mm × 297mm</td>
            </tr>
            <tr>
            <td>11</td>
            <td>A5</td>
            <td>148mm × 210mm</td>
            </tr>
            <tr>
            <td>12</td>
            <td>B4</td>
            <td>250mm × 353mm</td>
            </tr>
            <tr>
            <td>13</td>
            <td>B5</td>
            <td>176mm × 250mm</td>
            </tr>
            <tr>
            <td>14</td>
            <td>Folio paper</td>
            <td>8.5in × 13in</td>
            </tr>
            <tr>
            <td>15</td>
            <td>Quarto paper</td>
            <td>215mm × 275mm</td>
            </tr>
            <tr>
            <td>16</td>
            <td>Standard paper</td>
            <td>10in × 14in</td>
            </tr>
            <tr>
            <td>17</td>
            <td>Standard paper</td>
            <td>11in × 17in</td>
            </tr>
            <tr>
            <td>18</td>
            <td>Note paper</td>
            <td>8.5in × 11in</td>
            </tr>
            <tr>
            <td>19</td>
            <td>#9 envelope</td>
            <td>3.875in × 8.875in</td>
            </tr>
            <tr>
            <td>20</td>
            <td>#10 envelope</td>
            <td>4.125in * 9.5in</td>
            </tr>
            <tr>
            <td>21</td>
            <td>#11 envelope</td>
            <td>4.5in * 10.375in</td>
            </tr>
            <tr>
            <td>22</td>
            <td>#12 envelope</td>
            <td>4.75in * 11in</td>
            </tr>
            <tr>
            <td>23</td>
            <td>#14 envelope</td>
            <td>5in * 11.5in</td>
            </tr>
            <tr>
            <td>24</td>
            <td>C paper</td>
            <td>17in * 22in</td>
            </tr>
            <tr>
            <td>25</td>
            <td>D paper</td>
            <td>22in * 34in</td>
            </tr>
            <tr>
            <td>26</td>
            <td>E paper</td>
            <td>34in * 44in</td>
            </tr>
            <tr>
            <td>27</td>
            <td>DL envelope</td>
            <td>110mm × 220mm</td>
            </tr>
            <tr>
            <td>28</td>
            <td>C5 envelope</td>
            <td>162mm × 229mm</td>
            </tr>
            <tr>
            <td>29</td>
            <td>C3 envelope</td>
            <td>324mm × 458mm</td>
            </tr>
            <tr>
            <td>31</td>
            <td>C6 envelope</td>
            <td>114mm × 162mm</td>
            </tr>
            <tr>
            <td>32</td>
            <td>C65 envelope</td>
            <td>114mm × 229mm</td>
            </tr>
            <tr>
            <td>33</td>
            <td>B4 envelope</td>
            <td>250mm × 353mm</td>
            </tr>
            <tr>
            <td>34</td>
            <td>B5 envelope</td>
            <td>176mm × 250mm</td>
            </tr>
            <tr>
            <td>35</td>
            <td>B6 envelope</td>
            <td>176mm × 125mm</td>
            </tr>
            <tr>
            <td>36</td>
            <td>Italy envelope</td>
            <td>110mm × 230mm</td>
            </tr>
            <tr>
            <td>37</td>
            <td>Monarch envelope</td>
            <td>3.875in × 7.5in</td>
            </tr>
            <tr>
            <td>38</td>
            <td>6 3/4 envelope</td>
            <td>3.625in * 6.5in</td>
            </tr>
            <tr>
            <td>39</td>
            <td>US standard fanfold</td>
            <td>14.875in × 11in</td>
            </tr>
            <tr>
            <td>40</td>
            <td>German standard fanfold</td>
            <td>8.5in × 12in</td>
            </tr>
            <tr>
            <td>41</td>
            <td>German legal fanfold</td>
            <td>8.5in * 13in</td>
            </tr>
            <tr>
            <td>42</td>
            <td>ISO B4</td>
            <td>250mm * 353mm</td>
            </tr>
            <tr>
            <td>43</td>
            <td>Japanese double postcard</td>
            <td>200mm * 148mm</td>
            </tr>
            <tr>
            <td>44</td>
            <td>Standard paper</td>
            <td>9in * 11in</td>
            </tr>
            <tr>
            <td>45</td>
            <td>Standard paper</td>
            <td>10in * 11in</td>
            </tr>
            <tr>
            <td>46</td>
            <td>Standard paper</td>
            <td>15in * 11in</td>
            </tr>
            <tr>
            <td>47</td>
            <td>Invite envelope</td>
            <td>220mm * 220mm</td>
            </tr>
            <tr>
            <td>50</td>
            <td>Letter extra paper</td>
            <td>9.275in * 12in</td>
            </tr>
            <tr>
            <td>51</td>
            <td>Legal extra paper</td>
            <td>9.275in * 15in</td>
            </tr>
            <tr>
            <td>52</td>
            <td>Tabloid extra paper</td>
            <td>11.69in * 18in</td>
            </tr>
            <tr>
            <td>53</td>
            <td>A4 extra paper</td>
            <td>236mm * 322mm</td>
            </tr>
            <tr>
            <td>54</td>
            <td>Letter transverse paper</td>
            <td>8.275in * 11in</td>
            </tr>
            <tr>
            <td>55</td>
            <td>A4 transverse paper</td>
            <td>210mm * 297mm</td>
            </tr>
            <tr>
            <td>56</td>
            <td>Letter extra transverse paper</td>
            <td>9.275in * 12in</td>
            </tr>
            <tr>
            <td>57</td>
            <td>SuperA/SuperA/A4 paper</td>
            <td>227mm * 356mm</td>
            </tr>
            <tr>
            <td>58</td>
            <td>SuperB/SuperB/A3 paper</td>
            <td>305mm * 487mm</td>
            </tr>
            <tr>
            <td>59</td>
            <td>Letter plus paper</td>
            <td>8.5in * 12.69in</td>
            </tr>
            <tr>
            <td>60</td>
            <td>A4 plus paper</td>
            <td>210mm * 330mm</td>
            </tr>
            <tr>
            <td>61</td>
            <td>A5 transverse paper</td>
            <td>148mm * 210mm</td>
            </tr>
            <tr>
            <td>62</td>
            <td>JIS B5 transverse paper</td>
            <td>182mm * 257mm</td>
            </tr>
            <tr>
            <td>63</td>
            <td>A3 extra paper</td>
            <td>322mm * 445mm</td>
            </tr>
            <tr>
            <td>64</td>
            <td>A5 extra paper</td>
            <td>174mm * 235mm</td>
            </tr>
            <tr>
            <td>65</td>
            <td>ISO B5 extra paper </td>
            <td>201mm * 276mm</td>
            </tr>
            <tr>
            <td>66</td>
            <td>A2 paper</td>
            <td>420mm * 594mm</td>
            </tr>
            <tr>
            <td>67</td>
            <td>A3 transverse paper</td>
            <td>297mm * 420mm</td>
            </tr>
            <tr>
            <td>68</td>
            <td>A3 extra transverse paper</td>
            <td>322mm * 445mm</td>
            </tr>
            </table>
            </font>
            </para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.ExcelViewOptions">
            <summary>
            Stores MS Excel display and view related options.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleRow">
            <summary>
            Index of the first visible row in the worksheet.
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.FirstVisibleColumn">
            <summary>
            Index of the first visible column in the worksheet.
            </summary>
            <remarks>
            <para>Default value for this property is 0.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.Zoom">
            <summary>
            Magnification factor in normal view.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 100.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType">
            <summary>
            Gets and sets the view type. 
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="ViewType.Normal"/>.</para> 
            <para><see cref="P:GemBox.Spreadsheet.ExcelViewOptions.ViewType"/> is supported only for XLSX (Excel 2007+) files.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.PageBreakViewZoom">
            <summary>
            Magnification factor in page break view.
            </summary>
            <remarks>
            <para>Unit is one percent. Value must be between 10 and 400.</para>
            <para>Default value for this property is 60.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is out of 10 to 400 range.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowFormulas">
            <summary>
            If true, MS Excel shows formulas. Otherwise, formula results are shown. 
            </summary>
            <remarks>
            Default value for this property is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowGridLines">
            <summary>
            If true, MS Excel shows grid lines.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats. Use <see cref="P:GemBox.Spreadsheet.ExcelPrintOptions.PrintGridlines"/> for printing gridlines.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowSheetHeaders">
            <summary>
            If true, MS Excel shows row and column headers.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowZeroValues">
            <summary>
            If true, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
            <remarks>
            Default value for this property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowColumnsFromRightToLeft">
            <summary>
            If true, MS Excel shows columns from right to left.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowOutlineSymbols">
            <summary>
            If true, MS Excel shows outline symbols.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="true"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.ShowInPageBreakPreview">
            <summary>
            If true, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
            <remarks>
            <para>Default value for this property is <see langword="false"/>.</para>
            <para>This value is currently ignored when exporting a document to PDF, XPS or image file formats.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">
            <summary>
            Gets or sets whether outline row buttons are displayed below groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">ExcelWorksheet.OutlineColumnButtonsRight</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineColumnButtonsRight">
            <summary>
            Gets or sets whether outline column buttons are displayed on the right side of groups.
            </summary>
            <remarks>
            This property is simply written to Excel file and has no effect on behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
            <example>
      <para>
        Following code creates two horizontal groups and one vertical group. Horizontal groups have outline button above (default is below),
        while vertical group is collapsed.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="GroupingAndOutline"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="GroupingAndOutline"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.ExcelViewOptions.OutlineRowButtonsBelow">ExcelWorksheet.OutlineRowButtonsBelow</seealso>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.Collapsed"/>
            <seealso cref="P:GemBox.Spreadsheet.ExcelColumnRowBase.OutlineLevel"/>
        </member>
        <member name="P:GemBox.Spreadsheet.ExcelViewOptions.SelectedCells">
            <summary>
            Gets or sets the selected cells.
            </summary>
            <value>
            The selected cells.
            </value>
            /* JK(2012-01-10): Added support for selected cells. Ticket: https://www.assembla.com/spaces/gemmeus/tickets/481 */
        </member>
        <member name="T:GemBox.Spreadsheet.SheetVisibility">
            <summary>
            Script positions used in <see cref="P:GemBox.Spreadsheet.ExcelWorksheet.Visibility">ExcelWorksheet.Visibility</see>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.Visible">
            <summary>
            Sheet is visible.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.Hidden">
            <summary>
            Sheet is hidden, but is displayed in unhide dialog.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetVisibility.VeryHidden">
            <summary>
            Sheet is very hidden and can be made visible only programmatically
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PanesState">
            <summary>
            Represents the state of the pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.Frozen">
            <summary>
            Panes are frozen, but were not split being frozen. In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.FrozenSplit">
            <summary>
            Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanesState.Split">
            <summary>
            Panes are split, but not frozen. In this state, the split bars are adjustable by the user.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PanePosition">
            <summary>
            Represents the position of the pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.BottomRight">
            <summary>
            Bottom right pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.TopRight">
            <summary>
            Top right pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.BottomLeft">
            <summary>
            Bottom left pane.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PanePosition.TopLeft">
            <summary>
            Top left pane.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.WorksheetPanes">
            <summary>
            Represents the worksheet panes.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.PanesState,System.Single,System.Single,System.String,GemBox.Spreadsheet.PanePosition)">
            <summary>
            Worksheet panes constructor.
            </summary>
            <param name="state">State of the panes.</param>
            <param name="xSplit">If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
            <param name="ySplit">If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.</param>
            <param name="topLeftCell">Top left visible cell in the bottom right pane.</param>
            <param name="activePane">Position of the active pane.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetPanes.#ctor(GemBox.Spreadsheet.WorksheetPanes)">
            <summary>
            Copy constructor.
            </summary>
            <param name="sourcePane">Source pane.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.State">
            <summary>
            Gets or sets the state of the panes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.XSplit">
            <summary>
            Gets or sets the XSplit value.
            </summary>
            <remarks>
            If the panes are frozen, xSplit represents the number of columns visible in the top right pane. If the panes are not frozen, xSplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.YSplit">
            <summary>
            Gets or sets the XSplit value.
            </summary>
            <remarks>
            If the panes are frozen, ySplit represents the number of rows visible in the top right pane. If the panes are not frozen, ySplit represents the position of the split, in 1/20th of a point, 0 (zero) if none.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.TopLeftCell">
            <summary>
            Gets or sets the top left visible cell in the bottom right pane. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetPanes.ActivePane">
            <summary>
            Gets or sets the active pane.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.WorksheetProtection">
            <summary>
            Protection settings.
            Supported in XLSX only.
            </summary>
            <remarks>
            Properties in this class are simply written to Excel file and have no effect on the behavior of this library.
            For more information on worksheet protection, consult Microsoft Excel documentation.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)">
            <summary>
            Sets the password for protected sheet.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.PasswordHash">
            <summary>
            Gets or sets the password hash for protected sheet.
            </summary>
            <remarks>
            This property needs to be set to value of type ushort (property is of type int because ushort is not CLS compliant). 
            For setting password it can be also used <see cref="M:GemBox.Spreadsheet.WorksheetProtection.SetPassword(System.String)"/> method. 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingLockedCells">
            <summary>
            Gets or sets if selecting locked cells is allowed.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSelectingUnlockedCells">
            <summary>
            Gets or sets if selecting unlocked cells is allowed.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingCells">
            <summary>
            Gets or sets if formatting cells is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingColumns">
            <summary>
            Gets or sets if formatting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowFormattingRows">
            <summary>
            Gets or sets if formatting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingColumns">
            <summary>
            Gets or sets if inserting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingRows">
            <summary>
            Gets or sets if inserting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowInsertingHyperlinks">
            <summary>
            Gets or sets if inserting hyperlinks is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingColumns">
            <summary>
            Gets or sets if deleting columns is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowDeletingRows">
            <summary>
            Gets or sets if deleting rows is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowSorting">
            <summary>
            Gets or sets if sorting is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingAutoFilter">
            <summary>
            Gets or sets if using autofilter is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowUsingPivotTableReports">
            <summary>
            Gets or sets if using pivot table reports is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingObjects">
            <summary>
            Gets or sets if editing objects is allowed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.WorksheetProtection.AllowEditingScenarios">
            <summary>
            Gets or sets if editing scenarios is allowed.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FileFormatLimitations">
            <summary>
            Represents file format limitations when saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to some format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FileFormatLimitations.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes instance of <see cref="T:GemBox.Spreadsheet.FileFormatLimitations"/> class.
            </summary>
            <param name="maxRows">Maximum number of rows.</param>
            <param name="maxColumns">Maximum number of columns.</param>
            <param name="maxColors">Maximum number of colors.</param>
            <param name="maxCellStyles">Maximum number of cell styles.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxRows">
            <summary>
            Get maximum number of rows. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColumns">
            <summary>
            Get maximum number of columns. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxColors">
            <summary>
            Get maximum number of colors. 
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FileFormatLimitations.MaxCellStyles">
            <summary>
            Get maximum number of cell styles. 
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.Buffer">
            <summary>
            Buffer class is used as the wrapper aroung input string for FormulaParser providing
            additional helpful methods for accessing string buffer.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Buffer.Empty">
            <summary>
            Unique char to identify that char is empty
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Buffer.EmptyInteger">
            <summary>
            Unique integer to identify that integer is null
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Buffer"/> class.
            </summary>
            <param name="data">The string data to wrap.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.SkipWhitespaces">
            <summary>
            Skips the whitespaces.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.GetNextOnDemand(System.Char,System.Boolean)">
            <summary>
            Gets the next on demand( if next symbol is peek, than read it and return back ).
            Additionally it can skip whitespaces on demand.
            </summary>
            <param name="peek">The char to peek for.</param>
            <param name="skipWhitespaces">if set to <c>true</c> [skip whitespaces].</param>
            <returns>
            read char or special char indicating no read status
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.GetNext">
            <summary>
            Gets the next char from buffer.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.Peek">
            <summary>
            Peeks for the next char.
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.Peek(System.Int32)">
            <summary>
            Peeks for the next char at specified forward-position
            </summary>		
            <returns>read char or special char indicating no read status</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.GetNextString(System.Char)">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChar">The char used as end mark during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.GetNextString(System.Char[])">
            <summary>
            Gets the next string from buffer.
            </summary>
            <param name="endChars">The arrag of chars used as end marks during reading.</param>
            <returns>read string</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Buffer.GetNextString(System.Boolean)">
            <summary>
            Gets the next string from buffer with optional skipping whitespaces.
            </summary>		
            <returns>read string</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.Buffer.Data">
            <summary>
            Gets the input data string buffer.
            </summary>
            <value>The input data string buffer.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Buffer.Pos">
            <summary>
            Gets the position of input data string buffer.
            </summary>
            <value>The position of input data string buffer.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.Buffer.IsEOF">
            <summary>
            Gets a value indicating whether we have reached end of input buffer.
            </summary>
            <value><c>true</c> if we have reached end of input buffer; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GemBox.Spreadsheet.CellFormula.Recalculate">
            <summary>
            Recalculate formula based on saved tokens.
            It need to be done for changing some data which can be changed after setting formula
            and before saving xls file.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CellFormula.UpdateValueFromExtraRecords">
            <summary>
            Updates the <see cref="P:GemBox.Spreadsheet.CellFormula.Value"/> property based on <c>STRING</c> structure
            in <see cref="F:GemBox.Spreadsheet.CellFormula.ExtraFormulaRecords"/>.
            </summary>
            <remarks>
            If there is no <c>STRING</c> structure in extra records then the value
            remains unchanged.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaFunctionInfo">
            <summary>
            Hold information about function( name, code, expected arguments count. )
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FormulaFunctionInfo.VariableArgumentAmountMark">
            <summary>
            Is used to the specify for appropriate functins the variable count of arguments
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.FormulaFunctionInfo.argumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaFunctionInfo.#ctor(System.UInt16,System.String,GemBox.Spreadsheet.FormulaTokenCode,GemBox.Spreadsheet.FormulaTokenClass)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
            <param name="argumentCode">The argument code.</param>
            <param name="returnCode">The return code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaFunctionInfo.#ctor(System.UInt16,System.String,GemBox.Spreadsheet.FormulaTokenCode,GemBox.Spreadsheet.FormulaTokenClass,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> class.
            </summary>
            <param name="code">The function code.</param>
            <param name="name">The function name.</param>
            <param name="argumentCode">The argument code.</param>
            <param name="returnCode">The return code.</param>
            <param name="argumentsCount">The function's arguments count.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionInfo.ReturnCode">
            <summary>
            Gets the return code.
            </summary>
            <value>The return code.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionInfo.Code">
            <summary>
            Gets function code.
            </summary>
            <value>The function code.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionInfo.ArgumentsCount">
            <summary>
            Arguments count value, by default it is initilized with not fixed( variable ) argument count mark.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionInfo.Name">
            <summary>
            Gets function name.
            </summary>
            <value>Function name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionInfo.IsFixedArgumentCount">
            <summary>
            Gets a value indicating whether function has fixed argument count.
            </summary>
            <value>
            	<c>true</c> if this function has fixed argument count; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaFunctionsTable">
            <summary>
            Hold information about all supported functions.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaFunctionsTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaFunctionsTable"/> class.
            Constructor is private to allow only creation of FormulaFunctionsTable instances only once.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaFunctionsTable.IsFunction(System.String)">
            <summary>
            Determines whether the specified name is function.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if the specified name is function; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionsTable.Instance">
            <summary>
            Gets the static FormulaFunctionsTable instance. Used to be shared between FormulaFunctionsTable' users.
            </summary>
            <value>The singleton FormulaFunctionTable instance.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionsTable.Item(System.UInt16)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaFunctionsTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> at the specified index.
            </summary>
            <value><see cref="T:GemBox.Spreadsheet.FormulaFunctionInfo"/> instance</value>
        </member>
        <member name="F:GemBox.Spreadsheet.FormulaParser.boolList">
            <summary>
            List of allowed values for boolean primitive type
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaParser"/> class.
            </summary>
            <param name="sheet">The excel worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.Parse(System.String)">
            <summary>
            Parses the specified string formula.
            </summary>
            <param name="formula">The string formula.</param>
            <returns>formula token array</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.AddToken(GemBox.Spreadsheet.FormulaToken)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="token">The token to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.AddToken(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.AddToken(GemBox.Spreadsheet.FormulaTokenCode,System.Object)">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaParser.AddToken(GemBox.Spreadsheet.FormulaTokenCode,System.Object[])">
            <summary>
            Adds the token to the result list.
            </summary>
            <param name="code">The code of the token to be added.</param>
            <param name="data">The array of data to be used as the input for formula token delay initialization.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokensFactory.CreateFrom(GemBox.Spreadsheet.ExcelWorksheet,System.Byte[],System.Int32)">
            <summary>
            Creates formula token from rpn bytes and the code read from that bytes.
            </summary>
            <param name="sheet"></param>
            <param name="rpnBytes">The RPN bytes.</param>
            <param name="startIndex">The start index to read code from the RPN bytes.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokensFactory.CreateFunctionFromName(System.String,GemBox.Spreadsheet.FormulaTokenClass,System.Byte)">
            <summary>
            Creates formula token form the name of the function.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="tokenClass">The token class.</param>
            <param name="argumentsCount">The arguments count for the function.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokensFactory.CreateFromCode(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Creates formula token from code.
            </summary>
            <param name="sheet"></param>
            <param name="tokenCode">The token code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokensFactory.CreateFromCode(GemBox.Spreadsheet.ExcelWorksheet,System.Byte)">
            <summary>
            Creates formula token from byte code.
            </summary>
            <param name="sheet"></param>
            <param name="code">The byte code.</param>
            <returns>created formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokensFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaTokensFactory"/> class.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaTokenTypeEx">
            <summary>
            It is wrapper arodung FormulaTokenType enum to provide high-level bool methods
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaTokenTypeEx.#ctor(GemBox.Spreadsheet.FormulaTokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaTokenTypeEx"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.Type">
            <summary>
            Gets the formula token type.
            </summary>
            <value>The formula token type.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.IsBinary">
            <summary>
            Gets a value indicating whether this instance is binary.
            </summary>
            <value><c>true</c> if this instance is binary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.IsUnary">
            <summary>
            Gets a value indicating whether this instance is unary.
            </summary>
            <value><c>true</c> if this instance is unary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.IsOperand">
            <summary>
            Gets a value indicating whether this instance is operand.
            </summary>
            <value>
            	<c>true</c> if this instance is operand; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.IsFunction">
            <summary>
            Gets a value indicating whether this instance is function.
            </summary>
            <value>
            	<c>true</c> if this instance is function; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaTokenTypeEx.IsControl">
            <summary>
            Gets a value indicating whether this instance is control.
            </summary>
            <value>
            	<c>true</c> if this instance is control; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.NumbersParser">
            <summary>
            Class used for controling number format
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.NumbersParser.formatProvider">
            <summary>
            Number format for string conversion
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NumbersParser.#cctor">
            <summary>
            Initialize object
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NumbersParser.IsUshort(System.Double)">
            <summary>
            Determines whether the specified double value is ushort( integer ).
            </summary>
            <param name="doubleValue">The double value.</param>
            <returns>
            	<c>true</c> if the specified double value is ushort; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NumbersParser.StrToFloat(System.String)">
            <summary>
            Converts string to float.
            </summary>
            <param name="str">strind data.</param>
            <returns>flot data.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NumbersParser.StrToInt(System.String)">
            <summary>
            Converts string to int.
            </summary>
            <param name="data">string data.</param>
            <returns>int data.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NumbersParser.StrToDouble(System.String)">
            <summary>
            Convert string to double.
            </summary>
            <param name="data">string data.</param>
            <returns>double data.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.NumbersParser.Provider">
            <summary>
            Get number format info instance
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExternsheetRecord">
            <summary>
            Externsheet record for holding information REF' structures
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ExternsheetRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ExternsheetRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExternsheetRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ExternsheetRecord"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExternsheetRecord.SheetIndexes">
            <summary>
            Gets the sheet indexes.
            </summary>
            <value>The sheet indexes.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.SheetIndexes">
            <summary>
            SheetIndexes structure for storing index to SupBook record
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SheetIndexes.sheetIndex">
            <summary>
            Index to first/last sheet
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SheetIndexes.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SheetIndexes"/> class.
            </summary>		
            <param name="sheetIndex">The first/last sheet index.</param>				
        </member>
        <member name="M:GemBox.Spreadsheet.SheetIndexes.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SheetIndexes"/> class.
            </summary>
            <param name="br">The binary reader to read from.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SheetIndexes.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the REF' data to the specified binary writer.
            </summary>
            <param name="bw">The destination binary writer.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetIndexes.SheetIndex">
            <summary>
            Gets or sets the first/last sheet index.
            </summary>
            <value>The first/last sheet index.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.SheetIndexes.Size">
            <summary>
            Gets the size of REF' storage.
            </summary>
            <value>The size of REF' storage.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.NameRecord">
            <summary>
            Name record for holding information about name which can be used in named cell\range
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NameRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NameRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary readed to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NameRecord.#ctor(GemBox.Spreadsheet.ExcelWorksheet)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NameRecord"/> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NameRecord.ConvertNameRecordRangeToRpnBytes(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.CellRange,System.String,GemBox.Spreadsheet.ExcelWorksheetCollection)">
            <summary>
            Converts the name record range to RPN bytes.
            </summary>
            <param name="sheet"></param>
            <param name="range">The range to be converted.</param>
            <param name="sheetName">Sheet' name.</param>
            <param name="worksheets">The worksheets collection.</param>		
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.NameValue">
            <summary>
            Gets or sets the name value.
            </summary>
            <value>The name value.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.SheetIndex">
            <summary>
            Gets or sets the index for the sheet which contain named cell\range.
            </summary>
            <value>The index for the sheet which contain named cell\range.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.Worksheets">
            <summary>
            Gets or sets the workbook\worksheets collection.
            </summary>
            <value>The workbook\worksheets collection.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.Range">
            <summary>
            Gets or sets the range to be associated with the user-defined name.
            </summary>
            <value>The range to be associated with the user-defined name.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.RpnBytes">
            <summary>
            Gets or sets the RPN bytes of formula used for referencing 3d cell or area.
            </summary>
            <value>The RPN bytes of formula used for referencing 3d cell or area.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.NameRecord.Options">
            <summary>
            Gets or sets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.SupBookRecord">
            <summary>
            SupBookRecord record is used to provide information about internal 3d references	
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SupBookRecord.#ctor(System.Int32,System.IO.BinaryReader,GemBox.Spreadsheet.AbsXLSRec)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SupBookRecord"/> class.
            </summary>
            <param name="bodyLength">Length of the body.</param>
            <param name="br">The binary reader to read from.</param>
            <param name="previousRecord">The previous record.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SupBookRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SupBookRecord"/> class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.SupBookRecord.SheetsCount">
            <summary>
            Gets or sets the sheets count in current workbook.
            </summary>
            <value>The sheets count in current workbook.</value>
        </member>
        <member name="T:GemBox.Spreadsheet.Area3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell range.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.AreaFormulaToken">
            <summary>
            Formula token for holding reference on cell range.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaToken">
            <summary>
            Base formula token class for inheritance
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaToken.Token">
            <summary>
            Gets the formula token code.
            </summary>
            <value>The formula token code.</value>
        </member>
        <member name="P:GemBox.Spreadsheet.FormulaToken.Size">
            <summary>
            Gets the size of the formula token.
            </summary>
            <value>The size of the formula token.</value>
        </member>
        <member name="F:GemBox.Spreadsheet.AreaFormulaToken.regexOptions">
            <summary>
            Regular expression default settings
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.AreaFormulaToken.IsCellRangeRegex">
            <summary>
            Regula expression used to determinate whether the input string is cell range( area ) or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.AreaFormulaToken.firstRow">
            <summary>
            first row.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AreaFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.AreaFormulaToken.FirstRow">
            <summary>
            Gets the first row.
            </summary>
            <value>The first row.</value>
        </member>
        <member name="F:GemBox.Spreadsheet.Area3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Area3dFormulaToken.IsCellRange3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell range( 1t case ) or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Area3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode,GemBox.Spreadsheet.ExcelWorksheetCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Area3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
            <param name="workbook">The workbook.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.IsArea3dToken(System.Byte)">
            <summary>
            Determines whether is the specified code related to area3d token.
            </summary>
            <param name="code">The code to be checked.</param>
            <returns>
            	<c>true</c> if the specified code related to area3d token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Area3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.AreaErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaErr3dFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.AreaErr3dFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.AreaErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ArrayFormulaToken">
            <summary>
            Formula token for holding array.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ArrayFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ArrayFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ArrayFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ArrayFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ArrayFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.BinaryOperatorFormulaToken">
            <summary>
            Formula token for holding binary operator.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.BinaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.BinaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.BinaryOperatorFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.BinaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.BinaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.BoolFormulaToken">
            <summary>
            Formula token for holding bool.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.BoolFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.BoolFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.BoolFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.BoolFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.BoolFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.BoolFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ControlFormulaToken">
            <summary>
            Formula token for holding control value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ControlFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ControlFormulaToken"/> class.
            </summary>
            <param name="code">The FormulaTokenCode code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ControlFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ControlFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.ErrFormulaToken">
            <summary>
            Formula token for holding error value.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ErrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.FunctionFormulaToken">
            <summary>
            Formula token for holding function.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FunctionFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.FunctionVarFormulaToken">
            <summary>
            Formula token for holding function with variable arguments count.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionVarFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.FunctionVarFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionVarFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionVarFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionVarFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.FunctionVarFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.IntFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.IntFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.IntFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.IntFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.IntFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.IntFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to bytes representation.
            </summary>
            <returns>bytes representation of the formula token</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.IntFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.MissArgFormulaToken">
            <summary>
            Formula token for holding missed argument( argument with no value ) in argument list of function.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MissArgFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.MissArgFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MissArgFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.NameFormulaToken">
            <summary>
            Formula token for holding the index to a NAME/EXTERNNAME record.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.NameFormulaToken.nameIndex">
            <summary>
            One-based index to ExternName record.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NameFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NameFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NameFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NameFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.NumFormulaToken">
            <summary>
            Formula token for holding integer.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NumFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.NumFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.NumFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NumFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.NumFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.NumFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.Ref3dFormulaToken">
            <summary>
            Formula token for holding 3d reference on internal cell.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.RefFormulaToken">
            <summary>
            Formula token for holding reference.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.ColumnBitMask">
            <summary>
            Bit mask for column options.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.RowBitMask">
            <summary>
            Bit mask for row options.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.IsColumnRegex">
            <summary>
            Regular expression used to determinate whether the input string is column or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.IsCellRegex">
            <summary>
            Regular expression used to determinate whether the input string is cell or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RefFormulaToken.AbsoluteCellMark">
            <summary>
            Absolute preffix row\height symbol
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.RefFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.RefFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.RefFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.RefFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.RefFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.RefFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="F:GemBox.Spreadsheet.Ref3dFormulaToken.regexOptions">
            <summary>
            Regular expression default options
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Ref3dFormulaToken.IsCell3DRegex">
            <summary>
            Regular expression used to determinate whether the input string is 3d cell or not
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.Ref3dFormulaToken.refIndex">
            <summary>
            REF entry' index on EXTERNSHEET record( see the Link Table ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.#ctor(GemBox.Spreadsheet.ExcelWorksheet,GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.Ref3dFormulaToken"/> class.
            </summary>
            <param name="sheet"></param>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.IsRef3dToken(System.Byte)">
            <summary>
            Determines whether is the specified code related to ref3d token.
            </summary>
            <param name="code">The code to be checked.</param>
            <returns>
            	<c>true</c> if the specified code related to ref3d token; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.Ref3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.RefErr3dFormulaToken">
            <summary>
            Formula token for holding 3d reference error on internal cell range.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.RefErr3dFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.RefErrFormulaToken">
            <summary>
            Formula token for holding reference error.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.RefErrFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.RefErrFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.RefErrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.StrFormulaToken">
            <summary>
            Formula token for holding string.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.StrFormulaToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.StrFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.StrFormulaToken.DelayInitialize(System.Object[])">
            <summary>
            Make custom delay initialize.
            </summary>
            <param name="data">The data for initialization which is unique for each formula token.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.StrFormulaToken.Read(System.Byte[],System.Int32)">
            <summary>
            Initialize formula token by reading input data from array of bytes
            </summary>
            <param name="rpnBytes">input data, array of bytes</param>
            <param name="startIndex">start position for array of bytes to read from</param>
        </member>
        <member name="M:GemBox.Spreadsheet.StrFormulaToken.ConvertToBytes">
            <summary>
            Convert formula token to array of byte representation.
            </summary>
            <returns>formula token' array of byte representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.StrFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.UnaryOperatorFormulaToken">
            <summary>
            Formula token for holding unary operator.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.UnaryOperatorFormulaToken.#cctor">
            <summary>
            Initializes the <see cref="T:GemBox.Spreadsheet.UnaryOperatorFormulaToken"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.UnaryOperatorFormulaToken.#ctor(GemBox.Spreadsheet.FormulaTokenCode)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.UnaryOperatorFormulaToken"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.UnaryOperatorFormulaToken.ToString">
            <summary>
            Convert formula token to string representation.
            </summary>
            <returns>formula token string representation</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelShapeCollection.DeleteInternal(System.Int32)">
            <summary>
            Deletes shape at specified index.
            </summary>
            <param name="index">The specified index.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.ExcelShapeCollection.DeleteInternal(GemBox.Spreadsheet.ExcelShape)">
            <summary>
            Deletes shape at specified index.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="T:GemBox.Spreadsheet.ImageRecordsFactory">
            <summary>
            Factory class for creation image records
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageRecordsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageRecordsFactory"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageRecordsFactory.CreateContainer(System.IO.BinaryReader,GemBox.Spreadsheet.MsoType)">
            <summary>
            Creates the mso container from specified mso type and reader.
            </summary>
            <param name="reader">The reader used to create appropriate container.</param>
            <param name="type">The type used to create appropriate container.</param>
            <returns></returns>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageRecordsFactory.CreateContainer(GemBox.Spreadsheet.MsoType)">
            <summary>
            Creates the mso container from specified mso type.
            </summary>
            <param name="type">The type used to create appropriate container.</param>		
        </member>
        <member name="M:GemBox.Spreadsheet.ImageRecordsFactory.CreateFromReader(System.IO.BinaryReader)">
            <summary>
            Creates image record from reader.
            </summary>
            <param name="reader">The binary reader.</param>
            <returns>created image record</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoBitmapPictureRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoBitmapPictureRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoContainerRecord.Add(GemBox.Spreadsheet.MsoBaseRecord)">
            <summary>
            Adds the specified item to container.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoContainerRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>		
        </member>
        <member name="M:GemBox.Spreadsheet.MsoContainerRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtBseRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtBseRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientAnchorRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtClientAnchorRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtDggRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtDggRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtDgRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtDgRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtOptRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtOptRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtSpgrRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtSpgrRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtSpRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsofbtSpRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoPreservedRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads data from the specified reader.
            </summary>
            <param name="reader">The source binary reader.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.MsoPreservedRecord.SetData(GemBox.Spreadsheet.MsoDelayedRecords)">
            <summary>
            Sets the inner data( mso structure' data without header: atom, type, length ).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.InsertDataTableOptions">
            <summary>
            Represents options for inserting data from <see cref="T:System.Data.DataTable"/> to <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
            <seealso cref="M:GemBox.Spreadsheet.ExcelWorksheet.InsertDataTable(System.Data.DataTable,GemBox.Spreadsheet.InsertDataTableOptions)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
            <param name="startRow">Index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
            <param name="startColumn">Index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.InsertDataTableOptions.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:GemBox.Spreadsheet.InsertDataTableOptions"/> class.
            </summary>
            <param name="startCell">Name of the first (top left) cell of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartRow">
            <summary>
            Gets or sets the index of the first row of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.StartColumn">
            <summary>
            Gets or sets the index of the first column of inserted data in <see cref="T:GemBox.Spreadsheet.ExcelWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.InsertDataTableOptions.ColumnHeaders">
            <summary>
            Gets or sets a value indicating whether to insert column headers.
            </summary>
        </member>
        <member name="E:GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting">
            <summary>
            Event that fires when converting <see cref="T:System.Data.DataTable"/> cell value to <see cref="T:GemBox.Spreadsheet.ExcelCell"/> value.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LengthUnit">
            <summary>
            Represents the measurement unit for measuring length or distance.
            </summary>
            <remarks>
            <para>To convert values between various <see cref="T:GemBox.Spreadsheet.LengthUnit"/>s, use <see cref="T:GemBox.Spreadsheet.LengthUnitConverter"/>.</para>
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Pixel">
            <summary>
            Pixel (1 inch is equal as 96 pixels). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Point">
            <summary>
            Point (1 inch is equal as 72 points).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Inch">
            <summary>
            Inch.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Millimeter">
            <summary>
            Millimeter (10 millimeters are equal as 1 centimeter).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Centimeter">
            <summary>
            Centimeter (1 inch is around 2.54 centimeters).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Twip">
            <summary>
            Twip (twentieth of a point, 1 point is equal as 20 twips).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.Emu">
            <summary>
            English Metric Unit (1 point is equal as 12,700 EMUs)
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth256thPart">
            <summary>
            Unit is 1/256th of the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.LengthUnit.ZeroCharacterWidth">
            <summary>
            Unit is the width of the zero character in default font (width of zero character is fixed to 7 pixel).
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LengthUnitConverter">
            <summary>
            Utility class used for converting values between various <see cref="T:GemBox.Spreadsheet.LengthUnit"/> measurement units.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.LengthUnitConverter.Convert(System.Double,GemBox.Spreadsheet.LengthUnit,GemBox.Spreadsheet.LengthUnit)">
            <summary>
            Converts the specified <paramref name="length"/> from <paramref name="sourceUnit"/> measurement unit to <paramref name="destinationUnit"/> measurement unit.
            </summary>
            <param name="length">The length that will be converted.</param>
            <param name="sourceUnit">The source measurement unit.</param>
            <param name="destinationUnit">The destination measurement unit.</param>
            <returns>The <paramref name="length"/> expressed in <paramref name="destinationUnit"/> measurement unit.</returns>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvLoadOptions">
            <summary>
            Represents options for loading from Character Separated Values file format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(GemBox.Spreadsheet.CsvType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions"/> class.
            </summary>
            <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType"/>.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvLoadOptions"/> class.
            </summary>
            <param name="separator">Character that will serve as value delimiter.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.AllowNewLineInQuotes">
            <summary>
            Gets or sets a value indicating whether a new line character can be inside quotes.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseNumbers">
            <summary>
            Gets or sets a value indicating whether numbers will be parsed and stored as <see cref="T:System.Double"/> value when loading CSV file. If <see langword="false"/>, numbers will be loaded as strings.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Separator">
            <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
            <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Type">
            <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.ParseFormatProvider">
            <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvLoadOptions.Encoding">
            <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to <see langword="null"/>.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.CsvSaveOptions">
            <summary>
            Represents options for saving to Character Separated Values file format.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(GemBox.Spreadsheet.CsvType)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions"/> class.
            </summary>
            <param name="csvType">Value delimiter, <see cref="T:GemBox.Spreadsheet.CsvType"/>.</param>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.CsvSaveOptions"/> class.
            </summary>
            <param name="separator">Character that will serve as value delimiter.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CsvSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.AlwaysQuoteValues">
            <summary>
            Gets or sets a value indicating whether values in CSV file will always be quoted. Default value is false.
            </summary>
            <remarks>
            Default value of this property will be false, not true like in ExcelFile.CsvAlwaysQuoteValues.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to CSV file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Separator">
            <summary>
            Gets or sets character that serves as value delimiter.
            </summary>
            <exception cref="T:System.ArgumentException">Value is set to quote '"' or new line '\n'.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Type">
            <summary>
            Gets or sets value delimiter type, see <see cref="T:GemBox.Spreadsheet.CsvType"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.FormatProvider">
            <summary>
            Gets or sets the format provider for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile">ExcelCell.Value</see>s to CSV file format. <see cref="P:GemBox.Spreadsheet.ExcelCell.Value"/> (numbers, dates, etc.) will be converted to string using specified culture.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveCsv"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveCsv"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CsvSaveOptions.Encoding">
            <summary>
            Gets or sets the encoding for the CSV file.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is set to null.</exception>
        </member>
        <member name="T:GemBox.Spreadsheet.ImageSaveFormat">
            <summary>
            An enumeration of supported image file formats when saving the <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to an image using a <see cref="T:GemBox.Spreadsheet.ImageSaveOptions"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Bmp">
            <summary>
            Bitmap (BMP) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Gif">
            <summary>
            Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Jpeg">
            <summary>
            Joint Photographics Experts Group (JPEG) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Png">
            <summary>
            Portable Network Graphics (PNG) format.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Tiff">
            <summary>
            Tagged Image File Format (TIFF).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ImageSaveFormat.Wmp">
            <summary>
            Windows Media Photo format.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ImageSaveOptions">
            <summary>
            Represents a class which stores saving options for image files.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to image.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions"/> class.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to image.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.#ctor(GemBox.Spreadsheet.ImageSaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.ImageSaveOptions"/> class for a specific image format.
            </summary>
            <param name="imageFormat">The image format.</param>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to image.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveAsImage"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveAsImage"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.ImageSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Format">
            <summary>
            Gets or sets the image format.
            </summary>
            <value>
            The image format.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.PageNumber">
            <summary>
            Gets or sets the zero-based page number of the document's page which should be saved to an image.
            </summary>
            <value>
            The zero-based page number of the document's page which should be saved to an image.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Width">
            <summary>
            Gets or sets the image width in pixels.
            </summary>
            <value>
            The image width in pixels.
            </value>
            <remarks>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are not specified, then image size will be equal to the page size.</para>
            <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> is specifed, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Height">
            <summary>
            Gets or sets the image height in pixels.
            </summary>
            <value>
            The image height in pixels.
            </value>
            <remarks>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are not specified, then image size will be equal to the page size.</para>
            <para>If only one of the <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> or <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> is specifed, then the specified dimension will be respected and other dimension will be calculated so that original aspect ratio is maintained.</para>
            <para>If both <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Width"/> and <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.Height"/> are specified, then both specified dimensions will be respected (which may result in non-uniformly scaled image, if aspect ratio is not equal to the original one.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save a page from the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
            <remarks>
            <para>Default value is <see cref="F:GemBox.Spreadsheet.SelectionType.ActiveSheet"/> to optimize export since only active worksheet will be paginated.</para>
            <para>If you want to render a specific page from an un-active worksheet, set that worksheet as <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> or change this property to <see cref="F:GemBox.Spreadsheet.SelectionType.EntireFile"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor"/> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor"/> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor"/> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor"/> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.ImageSaveOptions.MetafileScaleFactor"/> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.ImageSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to image file formats.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsLoadOptions">
            <summary>
            Represents options for loading from OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsLoadOptions.PreserveUnsupportedFeatures">
            <summary>
            Gets or sets a value indicating whether to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
            <value>
            <see langword="true"/> to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsLoadOptions.ReadDisplayValues">
            <summary>
            Read display values instead of stored values. 
            </summary>
            <value>
            <see langword="true"/> to read display values; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Values in ODS are stored as value - display string pairs.
            Normally stored value is read but that looses number formatting. 
            If you want to read value as formatted display string (for example, date as "Wednesday, May 5th, 2009" string), set this property to <see langword="true"/>.</para>
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsSaveOptions">
            <summary>
            Represents options for saving to OpenDocument Spreadsheet file format.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.OdsSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.OdsSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.OdsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to ODS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 1048576</description></item>
            <item><description>MaxColumns: 16384</description></item>
            <item><description>MaxColors: 16000000</description></item>
            <item><description>MaxCellStyles: 64000</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.PdfSaveOptions">
            <summary>
            Represents options for saving to Portable Document Format (PDF) file.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to PDF file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SavePdf"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SavePdf"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PdfSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PdfSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to PDF file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SavePdf"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SavePdf"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor"/> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor"/> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor"/> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor"/> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PdfSaveOptions.MetafileScaleFactor"/> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PdfSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to PDF file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>        
        </member>
        <member name="T:GemBox.Spreadsheet.PrintOptions">
            <summary>
            Specifies information about how a spreadsheet is printed.
            </summary>
            <example>
      <para>
        Following code demonstrates how to print the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to the specified printer.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Print"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Print"/>
    </example><seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/CommonUses/Print">Print sample</seealso>
        </member>
        <member name="M:GemBox.Spreadsheet.PrintOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PrintOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.PrintOptions.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.PrintOptions"/> class by using an XML stream (that contains a PrintTicket document) that complies with the XML Print Schema.
            </summary>
            <param name="xmlStream">An XML stream that describes a print job and conforms to the Print Schema.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="xmlStream"/> is <see langword="null"/>.</exception>
            <seealso cref="T:System.Printing.PrintTicket"/>
            <seealso cref="M:System.Printing.PrintTicket.GetXmlStream"/>
            <seealso href="http://msdn.microsoft.com/en-us/library/dd372919.aspx">Print Schema</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.CopyCount">
            <summary>
            Gets or sets the number of copies of the document to print.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.PagesPerSheet">
            <summary>
            Gets or sets the number of pages that print on each printed side of a sheet of paper.
            </summary>
            <remarks>
            Only a limited range of 1, 2, 4, 6, 8 or 16 pages per sheet side are supported.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.FromPage">
            <summary>
            Gets or sets the page index of the first page to print.
            </summary>
            <remarks>
            Spreadsheet pages are zero-indexed meaning that first page in the spreadsheet has index 0 (zero).
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.ToPage">
            <summary>
            Gets or sets the index of the last page to print.
            </summary>
            <remarks>
            Use <see cref="F:System.Int32.MaxValue"/> value to print to the last page. 
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor"/> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor"/> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor"/> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor"/> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.PrintOptions.MetafileScaleFactor"/> is 1.
      </para>
    </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsLoadOptions">
            <summary>
            Represents options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsLoadOptions.PreserveOptions">
            <summary>
            Gets or sets <see cref="T:GemBox.Spreadsheet.XlsOptions"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsSaveOptions">
            <summary>
            Represents options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) .
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XLS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 65536</description></item>
            <item><description>MaxColumns: 256</description></item>
            <item><description>MaxColors: 56</description></item>
            <item><description>MaxCellStyles: 3979</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxLoadOptions">
            <summary>
            Represent options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxLoadOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadCore(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxLoadOptions.LoadFromDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.PreserveUnsupportedFeatures">
            <summary>
            Gets or sets a value indicating whether to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model.
            </summary>
            <value>
            <see langword="true"/> to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxLoadOptions.Password">
            <summary>
            Gets or sets the password to open protected / encrypted workbook.
            </summary>
            <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/Protection/XLSXEncryption">XLSX Encryption sample</seealso>
        </member>
        <member name="T:GemBox.Spreadsheet.XpsSaveOptions">
            <summary>
            Represents options for saving to XML Paper Specification file format.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to XPS file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXps"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXps"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.XpsSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XpsSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XpsSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.SelectionType">
            <summary>
            Gets or sets a value indicating whether to save the whole <see cref="T:GemBox.Spreadsheet.ExcelFile"/> or just <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to XPS file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXps"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXps"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor">
            <summary>
      Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1.
    </summary><value>
      The metafile scale factor for rendering metafile (WMF and EMF) images.
    </value><remarks>
      <para>Windows Metafile Format (WMF) and Enhanced Metafile Format (EMF) are vector image formats which contain a series of graphics drawing commands usually executed in Windows GDI layer.</para>
      <para>Metafile drawing commands could also be executed in PDF (or XPS) file which is also vector format, but for that Metafile drawing commands would have to be converted to PDF drawing commands.</para>
      <para>GemBox.Document currently doesn't perform this conversion of drawing commands, instead it uses Windows GDI to execute Metafile drawing commands into bitmap which is then encoded to PNG format and embedded into PDF file.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor"/> specifies the size of the bitmap surface, based from the original Metafile surface size, into which Metafile should be drawn / rasterized.
      </para>
      <para>PDF viewer will still scale the bitmap to the original Metafile size, but if the page is zoomed or viewed on a larger surface, quality of the image will be better since it contains more pixels / dots which will become visible while PDF viewer scales down the image.</para>
      <para>
        <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor"/> increases the quality of the Metafile image in PDF file, but it also increases the size of the PDF file because greater <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor"/> means greater bitmap surface and more space to store bitmap pixel / color data.
        PNG encoding / compression helps in reducing the space requirement and for complex Metafiles (with a lot of drawing instructions), <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor"/> of 5 or even greater, might not incur any space overhead relative to the original (complex) Metafile.
      </para>
      <para>
        Default value for <see cref="P:GemBox.Spreadsheet.XpsSaveOptions.MetafileScaleFactor"/> is 1.
      </para>
    </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.XpsSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XPS file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColumns: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxColors: <see cref="F:System.Int32.MaxValue"/></description></item>
            <item><description>MaxCellStyles: <see cref="F:System.Int32.MaxValue"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.IoWarningEventHandler">
            <summary>
            Delegate for handling the notification events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataDelegateEventArgs">
            <summary>
            Arguments of ExtractDataDelegate.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.ExcelValue">
            <summary>
            Value of the <see cref="T:GemBox.Spreadsheet.ExcelCell"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DataTableValue">
            <summary>
            Value of the <see cref="T:System.Data.DataTable"/> cell.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.ErrorID">
            <summary>
            Description of error that occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.Mapping">
            <summary>
            Mapping of column which contains a cell where error occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.WorksheetRow">
            <summary>
            <see cref="T:GemBox.Spreadsheet.ExcelRow"/> which contains a cell where error occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DestinationTable">
            <summary>
            Destinaton <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.DataTableRow">
            <summary>
            Index of <see cref="T:System.Data.DataTable"/> row where an error has occurred.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.ExtractDataDelegateEventArgs.Action">
            <summary>
            Defines how the error will be handled.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.ExtractDataEventAction">
            <summary>
            Possible ways of proceeding after one of the events is fired while extracting to data table.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.ThrowException">
            <summary>
            Throw exception after event has been handled.
            </summary>
            <remarks>
            This value has been obsoleted and only affects obsoleted ExtractToDataTable() methods.
            It will have no effect whe used with non-obsoleted <see cref="M:GemBox.Spreadsheet.ExcelWorksheet.ExtractToDataTable(System.Data.DataTable,GemBox.Spreadsheet.ExtractToDataTableOptions)"/>
            overload.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.Continue">
            <summary>
            Continue extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.StopReading">
            <summary>
            Stop extracting data to <see cref="T:System.Data.DataTable"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ExtractDataEventAction.SkipRow">
            <summary>
            Skip row.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IoOperation">
            <summary>
            Possible operations that can fire notification events.
            </summary>
            <remarks>
            This enumeration is used as event argument in notification events.
            </remarks>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsReading">
            <summary>
            XLS reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.CsvReading">
            <summary>
            CSV reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsWriting">
            <summary>
            XLS writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.CsvWriting">
            <summary>
            CSV writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsxReading">
            <summary>
            XLSX reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.XlsxWriting">
            <summary>
            XLSX writing methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.OdsReading">
            <summary>
            ODS reading methods.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.IoOperation.OdsWriting">
            <summary>
            ODS writing methods.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.IoWarningEventArgs">
            <summary>
            Warning event arguments class used by the event which is raised on warning happens in the excel lite library
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.FileName">
            <summary>
            Gets the file name passed to the XLS / CSV file reading / writing method.
            </summary>
            <remarks>
            You can use this property to handle different files in a different way inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.Operation">
            <summary>
            Indicates which operation caused this event to fire.
            </summary>
            <remarks>
            You can use this property to handle XLS / CSV or reading / writing operations differently 
            inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.IoWarningEventArgs.WarningMsg">
            <summary>
            Gets the message explaining the specific warning.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.LimitEventArgs">
            <summary>
            Event parameters used for the <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear">ExcelFile.LimitNear</see> and <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached">ExcelFile.LimitReached</see> events.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.FileName">
            <summary>
            Gets the file name passed to the XLS / CSV file reading / writing method.
            </summary>
            <remarks>
            You can use this property to handle different files in a different way inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.Operation">
            <summary>
            Indicates which operation caused this event to fire.
            </summary>
            <remarks>
            You can use this property to handle XLS / CSV or reading / writing operations differently 
            inside your event handlers.
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.MaxRowCount">
            <summary>
            Gets the maximum number of rows used.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.WorksheetCount">
            <summary>
            Gets the number of worksheets used.
            </summary>
            <remarks>
            <para>For CSV files, this is always 1 (as only 
            <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/> is used).</para>
            <para>When writing XLS files, warning worksheet is not counted.</para>
            </remarks>
        </member>
        <member name="P:GemBox.Spreadsheet.LimitEventArgs.WriteWarningWorksheet">
            <summary>
            Gets or sets whether the warning worksheet should be created when writing XLS file.
            </summary>
            <remarks>
            This property is ignored for CSV files and when reading XLS files.
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.LimitEventHandler">
            <summary>
            Delegate for handling the <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitNear">ExcelFile.LimitNear</see> and <see cref="E:GemBox.Spreadsheet.ExcelFile.LimitReached">ExcelFile.LimitReached</see> events.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.OdsOptions">
            <summary>
            Options specified when loading ODS files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.None">
            <summary>
            Do not preserve ODS parts and ignore display values (display strings). Only parts recognized 
            by GemBox.Spreadsheet API will be loaded.
            Use this if you are just loading ODS file or you don't want to preserve unrecognized 
            ODS parts for next save.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.PreserveKeepOpen">
            <summary>
            Preserves unrecognized ODS parts in a way it keeps loaded file open. Use if locking of input file
            for reading is not a problem and you want to save RAM/CPU when working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.PreserveMakeCopy">
            <summary>
            Preserves unrecognized ODS parts in a way it makes a copy of input file in memory. Use if 
            locking of input file presents a problem or you are not working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.OdsOptions.ReadDisplayValues">
            <summary>
            Reads display values instead of stored values. Values in ODS are stored as value - display string pairs.
            Normally stored value is read but that looses number formatting. If you want to read value as
            formatted display string (for example, date as "Wednesday, May 5th, 2009" string), set this flag.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxOptions">
            <summary>
            Options specified when reading XLSX files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.None">
            <summary>
            Do not preserve XLSX parts. Only parts recognized by GemBox.Spreadsheet API will be loaded.
            Use this if you are just loading XLSX file or you don't want to preserve unrecognized 
            XLSX parts for next save.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.PreserveKeepOpen">
            <summary>
            Preserves unrecognized XLSX parts in a way it keeps loaded file open. Use if locking of input file
            for reading is not a problem and you want to save RAM/CPU when working with large files.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxOptions.PreserveMakeCopy">
            <summary>
            Preserves unrecognized XLSX parts in a way it makes a copy of input file in memory. Use if 
            locking of input file presents a problem or you are not working with large files.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxSaveOptions">
            <summary>
            Represent options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later).
            </summary>
            <example>
      <para>
        Following code demonstrates how to save <see cref="T:GemBox.Spreadsheet.ExcelFile"/> to XLSX (Excel 2007+) file format.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="SaveXlsx"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="SaveXlsx"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.XlsxSaveOptions"/> class.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.Save(GemBox.Spreadsheet.ExcelFile,System.IO.Stream,System.String)">
            <exclude/>
        </member>
        <member name="M:GemBox.Spreadsheet.XlsxSaveOptions.SaveToDirectoryCore(GemBox.Spreadsheet.ExcelFile,System.String)">
            <exclude/>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Type">
            <summary>
            Specifies type of generated file. Set this property only if you want to override default type.
            </summary>        
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Password">
            <summary>
            Gets or sets the password used to protect / encrypt the workbook.
            </summary>
            <seealso href="http://www.gemboxsoftware.com/SampleExplorer/Spreadsheet/Protection/XLSXEncryption">XLSX Encryption sample</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.XlsxSaveOptions.Limitations">
            <summary>
            Gets limitations for saving to XLSX file format.
            </summary>
            <remarks>
            These are the limits:
            <list type="bullet">
            <item><description>MaxRows: 1048576</description></item>
            <item><description>MaxColumns: 16384</description></item>
            <item><description>MaxColors: 16000000</description></item>
            <item><description>MaxCellStyles: 64000</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:GemBox.Spreadsheet.XlsxType">
            <summary>
            OpenXML file type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xlsx">
            <summary>
            Excel 2007 XML Workbook.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xlsm">
            <summary>
            Excel 2007 XML Macro-Enabled Workbook.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xltx">
            <summary>
            Excel 2007 XML Template.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.XlsxType.Xltm">
            <summary>
            Excel 2007 XML Macro-Enabled Template.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.PaperType">
            <summary>
            Specifies the paper type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A3">
            <summary>
            A3 (11.69 inch X 16.54 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A4">
            <summary>
            A4 (8.27 inch X 11.69 inch). 
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A5">
            <summary>
            A5 (5.83 inch X 8.27 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.A6">
            <summary>
            A6 (4.13 inch X 5.83 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.B4">
            <summary>
            B4 (JIS, 7.17 inch X 10.12 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.B5">
            <summary>
            B5 (ISO, 6.93 inch X 9.84 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Letter">
            <summary>
            Letter (8.5 inch X 11 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Legal">
            <summary>
            Legal (8.5 inch X 14 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Executive">
            <summary>
            Executive (7.25 inch X 10.5 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Paper11x17">
            <summary>
            11x17 (11 inch X 17 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeDL">
            <summary>
            Envelope DL (4.33 inch X 8.66 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.EnvelopeC5">
            <summary>
            Envelope C5 (6.38 inch X 9.02 inch).
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.PaperType.Custom">
            <summary>
            Custom paper type.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SortDescription">
            <summary>
            Specifies the column, sorting order and optional custom comparison used in <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription"/> class with specified sorting column index.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>, inclusive.
            </summary>
            <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.SortDescription.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GemBox.Spreadsheet.SortDescription"/> class with specified sorting column index and sort direction.
            Valid column indexes are between 0 and <see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/> - <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>, inclusive.
            </summary>
            <param name="columnRangeIndex">The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.</param>
            <param name="isAscending">A value indicating whether sort direction is ascending or descending.</param>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.ColumnRangeIndex">
            <summary>
            Gets the column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.
            </summary>
            <value>
            The column index in the <see cref="T:GemBox.Spreadsheet.CellRange"/> on which <see cref="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})"/> method has been invoked.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.IsAscending">
            <summary>
            Gets a value indicating whether sort direction is ascending or descending.
            </summary>
            <value>
            <see langword="true"/> if sort direction is ascending; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:GemBox.Spreadsheet.SortDescription.Comparison">
            <summary>
            Gets or sets the comparison that can be used to override default comparison.
            </summary>
            <value>
            The comparison that can be used to override default comparison.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.CellRange">
            <summary>
            Cell range is a rectangular group of worksheet cells.
            </summary>
            <remarks>
            <para>Cell range is determined by its top (<see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex"/>), 
            left (<see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>), 
            bottom (<see cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex"/>) and 
            right (<see cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/>) borders. This properties 
            are read-only, so if you require different cell range use one of GetSubrange methods 
            (<see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>, 
            <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/> or 
            <see cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>). Specific cell can be accessed in a few 
            ways, depending on <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/>. Cells in the 
            range can be merged / unmerged by the use of <see cref="P:GemBox.Spreadsheet.CellRange.Merged"/> 
            property.</para>
            <para><see cref="P:GemBox.Spreadsheet.CellRange.Value"/> property set will set value of multiple cells 
            or of a merged range. <see cref="P:GemBox.Spreadsheet.CellRange.Value"/> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</para>
            <para><see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property set will set style of multiple cells 
            or of a merged range. <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property get has meaning 
            only if range is merged; otherwise, exception is thrown.</para>
            <remarks>
      <para>
        Note that for <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property set on a cell range that is not merged, you can't use the following format:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleWrong"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleWrong"/>
      <para>
        because that would first call <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property get method and that will certainly fail because
        <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property get is defined only for a merged cell range.
      </para>
      <para>
        Instead you can use two different code patterns, depending on whether you want to replace or combine the existing cell range styles with the new style.
      </para>
    </remarks><example>
      <para>
        If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleReplace"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleReplace"/>
      <para>
        If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will remain unchanged) use the following code:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleSet"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleSet"/>
    </example>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.PositionToRowColumn(System.String,System.Int32@,System.Int32@)">
            <summary>
            Converts position string ("A1", "BN27", etc.) to row and column index.
            </summary>
            <param name="position">Position string.</param>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.RowColumnToPosition(System.Int32,System.Int32)">
            <summary>
            Converts row and column index to position string ("A1", "BN27", etc.).
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Position string.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:GemBox.Spreadsheet.CellRange"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </summary>
            <param name="obj">Object of <see cref="T:GemBox.Spreadsheet.CellRange"/> type.</param>
            <returns><see langword="true"/> if the specified <see cref="T:GemBox.Spreadsheet.CellRange"/> is equal 
            to the current <see cref="T:GemBox.Spreadsheet.CellRange"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)">
            <summary>
            Sets borders on one or more excel cells, taking cell position into account.
            </summary>
            <param name="multipleBorders">Borders to set.</param>
            <param name="lineColor">Line color.</param>
            <param name="lineStyle">Line style.</param>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Sort(System.Collections.Generic.IEnumerable{GemBox.Spreadsheet.SortDescription})">
            <summary>
            Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange"/> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s in columns specified by <paramref name="sortDescriptions"/>.
            </summary>
            <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Sort(GemBox.Spreadsheet.SortDescription[])">
            <summary>
            Sorts the rows of this <see cref="T:GemBox.Spreadsheet.CellRange"/> by comparing values of <see cref="T:GemBox.Spreadsheet.ExcelCell"/>s in columns specified by <paramref name="sortDescriptions"/>.
            </summary>
            <param name="sortDescriptions">The sort descriptions that specify columns by which to sort.</param>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).</returns>
            <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (all cells).</returns>
            <remarks>
            Returns default enumerator that iterates all cells in the range. If you are only reading existing
            cells (values or formatting), use more appropriate <see cref="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator"/>.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetReadEnumerator">
            <summary>
            Returns enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (only allocated cells).
            </summary>
            <returns>An enumerator for the <see cref="T:GemBox.Spreadsheet.CellRange"/> (only allocated cells).</returns>
            <remarks>
            Returns enumerator that iterates only already allocated cells in the range. If you are only reading existing
            cells (values or formatting), use this enumerator as it is faster and doesn't allocate unnecessary cells.
            </remarks>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using absolute indexing.
            </summary>
            <param name="firstRow">Absolute index of the first row.</param>
            <param name="firstColumn">Absolute index of the first column.</param>
            <param name="lastRow">Absolute index of the last row.</param>
            <param name="lastColumn">Absolute index of the last column.</param>
            <returns>New cell range using absolute indexing.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.LastRowIndex"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.LastColumnIndex"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new cell range using relative indexing.
            </summary>
            <param name="relativeRow">Relative index of the first row.</param>
            <param name="relativeColumn">Relative index of the first column.</param>
            <param name="width">Width of new cell range in columns.</param>
            <param name="height">Height of new cell range in rows.</param>
            <returns>New cell range using relative indexing.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Width"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Height"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.GetSubrange(System.String,System.String)">
            <summary>
            Returns new cell range using start and end position.
            </summary>
            <param name="firstCell">Name of first (top-left) cell.</param>
            <param name="lastCell">Name of last (bottom-right) cell.</param>
            <returns>New cell range using start and end position.</returns>
            <remarks>
            New cell range must be within this cell range.
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
            <exception cref="T:System.ArgumentOutOfRangeException">Arguments are out of range.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.StartPosition"/>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.EndPosition"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeAbsolute(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            <seealso cref="M:GemBox.Spreadsheet.CellRange.GetSubrangeRelative(System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.Int32,System.Int32)">
            <overloads>Copies this cell range to the specified position.</overloads>
            <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <para><paramref name="absoluteRow"/> and <paramref name="absoluteColumn"/> specify position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="absoluteRow">Absolute index of the destination row.</param>
            <param name="absoluteColumn">Absolute index of the destination column.</param>
            <remarks>
            <para><paramref name="absoluteRow"/> and <paramref name="absoluteColumn"/> specify position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(System.String)">
            <summary>
            Copies this cell range to another position in the same worksheet.
            </summary>
            <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
            <remarks>
            <para><paramref name="topLeftCell"/> specifies position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.CopyTo(GemBox.Spreadsheet.ExcelWorksheet,System.String)">
            <summary>
            Copies this cell range to another worksheet.
            </summary>
            <param name="destinationWorksheet">Destination worksheet.</param>
            <param name="topLeftCell">Full name of the top-left cell of the destination range.</param>
            <remarks>
            <para><paramref name="topLeftCell"/> specifies position of the top-left cell of 
            the destination cell range.</para>
            <para>Destination cell range has the same width and height as this cell range.</para>
            <para><see cref="T:System.ArgumentOutOfRangeException"/> is thrown if destination range:
            <list type="bullet">
            <item><description>breaks Excel worksheet row or column limit,</description></item>
            <item><description>overlaps with source range, or</description></item>
            <item><description>overlaps with existing merged range.</description></item>
            </list></para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination range is invalid.</exception>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.Overlaps(GemBox.Spreadsheet.CellRange)">
            <summary>
            Checks if this cell range overlaps with another cell range.
            </summary>
            <param name="range">Cell range.</param>
            <returns><see langword="true"/> if cell ranges overlap; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:GemBox.Spreadsheet.CellRange.FindText(System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Finds the first occurrence of the specified text in the current cell range.
            </summary>
            <param name="text">Test to search.</param>
            <param name="matchCase"><see langword="true"/> to match exact case, <see langword="false"/> otherwise.</param>
            <param name="matchEntireCellContents"><see langword="true"/> to match entire cell contents, <see langword="false"/> otherwise.</param>
            <param name="row">Index of the row where the text was found or -1 if no text was found.</param>
            <param name="column">Index of the column where the text was found or -1 if no text was found.</param>
            <returns><see langword="true"/> if text is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.FirstRowIndex">
            <summary>
            Gets index of the first (topmost) row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex">
            <summary>
            Gets index of the first (leftmost) column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.LastRowIndex">
            <summary>
            Gets index of the last (bottommost) row.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.LastColumnIndex">
            <summary>
            Gets index of the last (rightmost) column.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Width">
            <summary>
            Gets width of this cell range, in columns.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Height">
            <summary>
            Gets height of this cell range, in rows.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.StartPosition">
            <summary>
            Gets name of the first (top-left) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.EndPosition">
            <summary>
            Gets name of the last (bottom-right) cell in this cell range.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.IsAnyCellMerged">
            <summary>
            Returns <see langword="true"/> is any cell in this cell range is merged; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32)">
            <overloads>Gets excel cell with the specified name or at the specified position.</overloads>
            <summary>
            Gets excel cell at the specified index.
            </summary>
            <param name="contextIndex">The zero-based context index of the cell.</param>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> context index  
            is specifying relative column position.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> context index
            is specifying relative row position.</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> context index
            is specifying cell index inside cell range. The cell at <see cref="P:GemBox.Spreadsheet.CellRange.StartPosition">
            StartPosition</see> has index 0, and the cell at 
            <see cref="P:GemBox.Spreadsheet.CellRange.EndPosition"/> has index of 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> x 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height"/> - 1.</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.Int32,System.Int32)">
            <summary>
            Gets excel cell at the specified relative position.
            </summary>
            <param name="relativeRow">The zero-based relative row position.</param>
            <param name="relativeColumn">The zero-based relative column position.</param>
            <remarks>
            Absolute position of excel cell is calculated by adding <paramref name="relativeRow"/> and <paramref name="relativeColumn"/> to
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstRowIndex"/> and 
            <see cref="P:GemBox.Spreadsheet.CellRange.FirstColumnIndex"/>.
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Item(System.String)">
            <summary>
            Gets excel cell with the specified full or partial name.
            </summary>
            <param name="contextName">Full or partial name of the cell.</param>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">RangeIndexingMode.Rectangular</see> full name of 
            the cell must be used (for example; "A1", "D7", etc.).</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">RangeIndexingMode.Horizontal</see> column name  
            must be used (for example; "A", "D", etc.).</para>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/> is 
            <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">RangeIndexingMode.Vertical</see> row name 
            must be used (for example; "1", "7", etc.).</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Merged">
            <summary>
            Gets or sets whether cells in this range are merged.
            </summary>
            <remarks>
            <para>By setting this property to <see langword="true"/>, you are merging all the cells 
            (<see cref="T:GemBox.Spreadsheet.ExcelCell"/>) in this range. Merging process will fail if any 
            of the cells in the range is already merged.</para>
            <para>When modifying merged cell, whole merged range is modified. For example, if you set 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.Value">ExcelCell.Value</see>, value of merged range will be modified. 
            You can find out if the cell is merged by checking if 
            <see cref="P:GemBox.Spreadsheet.ExcelCell.MergedRange">ExcelCell.MergedRange</see> property is different 
            than <see langword="null"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">Merged range can't be created because some of the cells
            in the range are already merged.</exception>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Comment">
            <summary>
            Gets or sets comment
            </summary>		
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Formula">
            <summary>
            Gets or sets formula string.
            </summary>
            <remarks>
            <para>GemBox.Spreadsheet can read and write formulas, but cannot calculate formula results. However, when you 
            open a file in MS Excel, formula results will be calculated automatically.</para>
            <para>Old XLS format requires all formulas to be parsed and saved to XLS files as special
            tokens in RPN (Reverse Polish notation). GemBox.Spreadsheet only knows how to parse limited
            set of formulas listed below.</para>
            <para>New XLSX (Open XML) format stores formulas as strings and leaves formula parsing to applications
            that read XLSX documents. Therefore, ALL formulas are supported when writing/reading XLSX files.</para>
            <para>Depending on <see cref="P:GemBox.Spreadsheet.ExcelFile.DelayFormulaParse">
            ExcelFile.DelayFormulaParse</see> property, formula string can be parsed when this property is set
            or when one of <see cref="M:GemBox.Spreadsheet.ExcelFile.SaveXls(System.String)">
            ExcelFile.SaveXls</see> methods is called.</para>
            <para>GemBox.Spreadsheet formula parser will use English culture to parse numbers.</para>
            <para>Currently supported formula features by GemBox.Spreadsheet XLS formula parser are:
            <list type="bullet">
            <item><description>Named cell</description></item>
            <item><description>Named range</description></item>
            <item><description>Absolute cell/range</description></item>
            <item><description>Relative cell/range</description></item>
            <item><description>Functions( partly, see the list of supported functions below )</description></item>
            <item><description>Missed argument</description></item>
            <item><description>Unary operator</description></item>
            <item><description>Binary operator</description></item>
            <item><description>Parentheses</description></item>
            <item><description>3d cell reference</description></item>
            <item><description>3d cell range reference</description></item>
            <item><description>Boolean</description></item>
            <item><description>Integer</description></item>
            <item><description>Float</description></item>
            <item><description>String</description></item>
            <item><description>Error</description></item>
            </list>
            </para>
            <para>
            Currently unsupported formula features are:
            <list type="bullet">
            <item><description>Const array</description></item>
            <item><description>Array formula</description></item>
            <item><description>R1C1 reference</description></item>
            </list>
            </para>
            <para>
            Currently supported functions are: ABS, ACOS, ACOSH, ADDRESS, AND, ARCTAN, AREAS, ASC, ASIN, ASINH, ATAN2, ATANH, AVEDEV, AVERAGE, AVERAGE, BETADIST, BETAINV, BINOMDIST, CEILING, CELL, CHAR, CHIDST, CHIINV, CHOOSE, CLEAN, CODE, COLUMN, COLUMNS, COMBIN, CONCATENATE, CONFIDENCE, COS, COSH, COUNT, COUNTA, COUNTBLANK, COUNTIF, CRITBINOM, DATE, DATEDIF, DATESTRING, DATEVALUE, DAVERAGE, DAY, DAYS360, DB, DBSC, DCOUNT, DCOUNTA, DDB, DEGREES, DEVSQ, DGET, DMAX, DMIN, DOLLAR, DPRODUCT, DSTDEV, DSTDEVP, DSUM, DVAR, DVARP, EVEN, EXACT, EXP, EXPONDIST, FACT, FDIST, FIND, FINDB, FINV, FISHER, FISHERINV, FIXED, FLOOR, FV, GAMMADIST, GAMMAINV, GAMMALN, GEOMEAN, GROWTH, HARMEAN, HLOOKUP, HOUR, HYPERLINK, HYPGEOMVERT, IF, INDEX, INDIRECT, INFO, INT, IPMT, IRR, ISBLANK, ISERR, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISNUMBER, ISPMT, ISREF, ISTEXT, KURT, LARGE, LEFT, LEFTB, LEN, LENB, LINEST, LN, LOG, LOG10, LOGEST, LOGINV, LOOKUP, LOWER, MATCH, MAX, MAXA, MDETERM, MEDIAN, MID, MIDB, MIN, MINA, MINUTE, MINVERSE, MIRR, MNORMSINV, MOD, MODE, MONTH, N, NA, EGBINOMDIST, NORMDIST, NORMINV, NORMSDIST, NORMSDIST, NOT, NOW, NPER, NPV, NUMBERSTRING, ODD, OFFSET, OR, PERCENTILE, PERCENTRANK, PERMUT, PHONETIC, PI, PMT, POISSON, POWER, PPMT, PRODUCT, PROPER, PV, QUARTILE, RADIANS, RAND, RANK, RATE, REPLACE, REPLACEB, REPT, RIGHT, RIGHTB, ROMAN, ROUND, ROUNDDOWN, ROUNDUP, ROW, ROWS, SEARCH, SEARCHB, SECOND, SIGN, SIN, SINH, SKEW, SLN, SMALL, SQRT, STANDARDIZE, STDEV, STDEVA, STDEVP, STDEVPA, SUBSTITUTE, SUBTOTAL, SUM, SUMIF, SUMSQ, SYD, T, TAN, TANH, TDIST, TEXT, TIME, TIMEVALUE, TINV, TODAY, TRANSPOSE, TREND, TRIM, TRIMMEAN, TRUNC, TYPE, UPPER, USDOLLAR, VALUE, VAR, VARA, VARP, VARPA, VDB, VLOOKUP, WEEKDAY, WEIBULL, YEAR, ZTEST, FALSE, TRUE.
            </para>
            <para>
            For more information on formulas, consult Microsoft Excel documentation.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
            <example>
      <para>
        Following code demonstrates how to use formulas and named ranges. It shows next features:
        cell references (both absolute and relative), unary and binary operators, constand operands (integer and floating point),
        functions and named cell ranges.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Formula"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Formula"/>
    </example>
            <seealso cref="M:GemBox.Spreadsheet.NamedRangeCollection.Add(System.String,GemBox.Spreadsheet.CellRange,System.Boolean)">
            NamedRangeCollection.Add</seealso>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Value">
            <summary>
            Gets or sets cell value on one or more excel cells.
            </summary>
            <remarks>
            <para>Property set will set value of multiple cells or of a merged range.</para>
            <para>Property get has meaning only if range is <see cref="P:GemBox.Spreadsheet.CellRange.Merged"/>; 
            otherwise, exception is thrown.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.Style">
            <summary>
            Gets or sets cell style (<see cref="T:GemBox.Spreadsheet.CellStyle"/>) on one or more excel cells.
            </summary>
            <remarks>
            <para>Property set will set style of multiple cells or of a merged range.</para>
            <para>Property get has meaning only if range is <see cref="P:GemBox.Spreadsheet.CellRange.Merged"/>; 
            otherwise, exception is thrown.</para>
            <remarks>
      <para>
        Note that for <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property set on a cell range that is not merged, you can't use the following format:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleWrong"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleWrong"/>
      <para>
        because that would first call <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property get method and that will certainly fail because
        <see cref="P:GemBox.Spreadsheet.CellRange.Style"/> property get is defined only for a merged cell range.
      </para>
      <para>
        Instead you can use two different code patterns, depending on whether you want to replace or combine the existing cell range styles with the new style.
      </para>
    </remarks><example>
      <para>
        If you want to <b>replace</b> cell style on every cell in a cell range use the following code:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleReplace"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleReplace"/>
      <para>
        If you want to <b>set</b> cell style property on every cell in a cell range (other cell style property values will remain unchanged) use the following code:
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRangeStyleSet"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRangeStyleSet"/>
    </example>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Property get is attempted on a cell range 
            which is not merged.</exception>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.Merged"/>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.IsStyleDefault">
            <summary>
            Returns <see langword="true"/> if all cells in cell range or merged range have default 
            cell style; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.CellRange.IndexingMode">
            <summary>
            Gets indexing mode used for cell range.
            </summary>
            <remarks>
            <para>If <see cref="P:GemBox.Spreadsheet.CellRange.Height"/> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal"/>.</para>
            <para>Otherwise, if <see cref="P:GemBox.Spreadsheet.CellRange.Width"/> is 1, indexing mode 
            is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical"/>.</para>
            <para>Otherwise, indexing mode is <see cref="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
            Rectangular</see>.</para>
            </remarks>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
        </member>
        <member name="P:GemBox.Spreadsheet.MergedCellRange.Formula">
            <summary>
            Gets or sets merged range formula string.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.MergedCellRange.Comment">
            <summary>
            Gets or sets cell comment.
            </summary>
            <remarks>
            <para>
            You can set comment text, set whether comment will be visible during loading xls file or not.
            Additinally you can get column or row of the excel cell to which this comment is assigned.
            </para>
            </remarks>
            <example>
      <para>Following code demonstrates how to use comments. It shows next features:</para>
      <list type="number">
        <item>comment text setting</item>
        <item>comment IsVisible property in action</item>
      </list>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="Comment"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="Comment"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.HtmlExportAllWorksheetImagesJSFormat">
             <summary>
               Looks up a localized string similar to var showRowNumbers = {1};
            var showColumnLetters = {2};
            
            function displayWorksheetImages(wsIndex) {{
                deleteAllImages();
            
                var allImages = [
            {0}
                ];
            
                var table = document.getElementsByTagName(&apos;table&apos;)[wsIndex];
                var body = document.getElementsByTagName(&apos;body&apos;)[0];
            
                var wsImages = allImages[wsIndex];
                for (var i = 0; i &lt; wsImages.length; ++i) {{
                    var imgData = wsImages[i];
                    var img = document.createElement(&apos;img&apos;);
                    arrangeImage(imgData, img, table); [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.HtmlExportAllWorksheetsCSS">
             <summary>
               Looks up a localized string similar to * {
                margin: 0;
                padding: 0;
            }
            
            body {
                font: .8em &quot;Lucida Sans Unicode&quot;, &quot;Lucida Grande&quot;, sans-serif;
            }
            
            td {
                padding: 1px;
            }
            
            #tabs {
                position: fixed;
                width: 100%;
                height: 30px;
                padding: 2px 2px 10px 2px;
                bottom: 0;
                overflow: hidden;
                background: #5F5F5F;
                z-index: 2;
            }
            
            #tabs &gt; ul &gt; li {
                margin: 0 2px 0 0;
                padding: 2px 10px;
                display: block;
                float: left;
                color: #FFF;
                -webkit-user-select: none;
                -moz-user-s [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.HtmlExportAllWorksheetsJS">
             <summary>
               Looks up a localized string similar to window.onload = function() {
                var container = document.getElementById(&quot;container&quot;);
                var tabcon = document.getElementById(&quot;content&quot;);
                var navitem = document.getElementById(&quot;tabHeader_0&quot;);
            
                var ident = navitem.id.split(&quot;_&quot;)[1];
                navitem.parentNode.setAttribute(&quot;data-current&quot;, ident);
                navitem.setAttribute(&quot;class&quot;, &quot;tabActiveHeader&quot;);
            
                var pages = tabcon.getElementsByTagName(&quot;div&quot;);
                for (var i = 1; i &lt; pages.length; i++) {
                    pages.item(i).style.display = &quot;none&quot;;
              [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.Properties.Resources.HtmlExportCellRangeImagesJSFormat">
             <summary>
               Looks up a localized string similar to function displayWorksheetImages(wsIndex) {{
                var allImages = [
            {0}
                ];
            
                var showRowNumbers = {1};
                var showColumnLetters = {2};
            
                var table = document.getElementsByTagName(&apos;table&apos;)[wsIndex];
                var body = document.getElementsByTagName(&apos;body&apos;)[0];
            
                var wsImages = allImages[wsIndex];
                for (var i = 0; i &lt; wsImages.length; ++i) {{
                    var imgData = wsImages[i];
                    var img = document.createElement(&apos;img&apos;);
                    arrangeImage(imgData, img, table, showRowNumbers, sh [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SelectionType">
            <summary>
            Defines the selection which will be saved or printed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SelectionType.ActiveSheet">
            <summary>
            Select <see cref="P:GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet"/>.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SelectionType.EntireFile">
            <summary>
            Select all sheets in <see cref="T:GemBox.Spreadsheet.ExcelFile"/>.
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.SpreadsheetInfo">
            <summary>
            Contains static licensing methods and diagnostic information about executing GemBox.Spreadsheet assembly.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetInfo.Title">
            <summary>
            GemBox.Spreadsheet assembly title.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.SpreadsheetInfo.FullVersion">
            <summary>
            GemBox.Spreadsheet assembly full version.
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.SpreadsheetInfo.SetLicense(System.String)">
            <summary>
            Call this method from your application to set GemBox.Spreadsheet serial key.
            </summary>
            <remarks>
            <para>You should call this method before using any other class from GemBox.Spreadsheet library. 
            Key can only be set once (if you try second key, exception will be thrown). 
            The best place to call this method is from static constructor of your application's main class.</para>
            <para>Valid serial key has multiple groups of alphanumeric characters, separated with dashes.</para>
            <para>Free version serial key is: <b>FREE-LIMITED-KEY</b>.</para>
            </remarks>
            <param name="serialKey">Serial key.</param>
        </member>
        <member name="E:GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached">
            <summary>
            Occurs in loading or saving <see cref="T:GemBox.Spreadsheet.ExcelFile"/> when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and free limit is reached.
            </summary>
            <remarks>
            This event is raised when GemBox.Spreadsheet assembly is used with <b>FREE-LIMITED-KEY</b> license key and maximum number of rows (150 rows) or sheets (5 sheets) are reached.
            <para>Free mode will read / write first 150 rows/5 sheets normally and, if file has more than 150 rows or 5 sheets, it will throw <see cref="T:GemBox.Spreadsheet.FreeLimitReachedException"/>.</para> 
            <para>You can use this event to continue using the assembly in a trial mode for performance testing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction"/> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.ContinueAsTrial"/>) or to stop further reading/writing (set <see cref="P:GemBox.Spreadsheet.FreeLimitEventArgs.FreeLimitReachedAction"/> to 
            <see cref="F:GemBox.Spreadsheet.FreeLimitReachedAction.Stop"/>).</para>
            <para>Trial mode will read and write all file content but will insert word "TRIAL" on random places in the file.</para>        
            <para>For more information about GemBox.Spreadsheet evaluation and licensing, see <see href="6676d983-4f75-4e69-b1a2-108c0aeac431.htm" target="_self">evaluation and licensing</see>.</para>
            </remarks>
            <example>
      <para>
        Following code demonstrates one way of testing performances of GemBox.Spreadsheet.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="PerformanceCounter"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="PerformanceCounter"/>
    </example>
        </member>
        <member name="T:GemBox.Spreadsheet.ViewType">
            <summary>
            Specifies the view type.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.Normal">
            <summary>
            Normal view
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.PageBreakPreview">
            <summary>
            Page break preview
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.ViewType.PageLayout">
            <summary>
            Page Layout View
            </summary>
        </member>
        <member name="M:GemBox.Spreadsheet.XLSFileWriter.WriteMSODrawingIfNeeded(GemBox.Spreadsheet.AbsXLSRecords)">
            <summary>
            Writes the MSO drawing if needed.
            </summary>
        </member>
        <member name="P:GemBox.Spreadsheet.XLSFileWriter.HasShapes">
            <summary>
            Gets a value indicating whether this instance has shapes.
            </summary>
            <value>
            	<see langword="true"/> if this instance has shapes; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaTokenType">
            <summary>
            The set of predefined formula token types
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaTokenClass">
            <summary>
            The set of predefined formula token classes
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.FormulaTokenCode">
            <summary>
            The set of predefined formula token codes
            </summary>
        </member>
        <member name="T:GemBox.Spreadsheet.RangeIndexingMode">
            <summary>
            Indexing modes used by <see cref="T:GemBox.Spreadsheet.CellRange"/>.
            </summary>
            <example>
      <para>
        Following code creates horizontal, vertical and rectangular cell ranges and demonstrates how indexing works different in different context.
        <see cref="M:GemBox.Spreadsheet.CellRange.SetBorders(GemBox.Spreadsheet.MultipleBorders,System.Drawing.Color,GemBox.Spreadsheet.LineStyle)"/> method is used to mark outside borders of the rectangular range.
      </para>
      <code language="c#" source="Samples\CSharp\Samples.cs" region="CellRange"/>
      <code language="vb" source="Samples\Vb\Samples.vb" region="CellRange"/>
    </example>
            <seealso cref="P:GemBox.Spreadsheet.CellRange.IndexingMode"/>
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Rectangular">
            <summary>
            Rectangular indexing mode. Rectangular cell range is higher than one row and wider than one column.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Horizontal">
            <summary>
            Horizontal indexing mode. Horizontal cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Height">CellRange.Height</see> equal to 1.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.RangeIndexingMode.Vertical">
            <summary>
            Vertical indexing mode. Vertical cell range has 
            <see cref="P:GemBox.Spreadsheet.CellRange.Width">CellRange.Width</see> equal to 1.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowFormulas">
            <summary>
            If set, MS Excel shows formulas. Otherwise, formula results are shown.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowGridLines">
            <summary>
            If set, MS Excel shows grid lines.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowSheetHeaders">
            <summary>
            If set, MS Excel shows row and column headers.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.FrozenPanes">
            <summary>
            If set, panes are frozen in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowZeroValues">
            <summary>
            If set, MS Excel shows zero values. Otherwise, zero values are shown as empty cells.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.DefaultGridLineColor">
            <summary>
            If set, MS Excel uses default grid line color.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ColumnsFromRightToLeft">
            <summary>
            If set, MS Excel shows columns from right to left.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowOutlineSymbols">
            <summary>
            If set, MS Excel shows outline symbols.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.FrozenNoSplit">
            <summary>
            If set, MS Excel removes splits if pane freeze is removed.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.SheetSelected">
            <summary>
            Set if sheet is selected in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.SheetVisible">
            <summary>
            Set if sheet is visible in MS Excel.
            </summary>
        </member>
        <member name="F:GemBox.Spreadsheet.WorksheetWindowOptions.ShowInPageBreakPreview">
            <summary>
            If set, MS Excel shows worksheet in page break preview. Otherwise, normal view is used.
            </summary>
        </member>
    </members>
</doc>
